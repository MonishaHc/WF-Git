using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using WF_Tool.ClassLibrary;
using WF_Tool.DataLibrary;
using WF_Tool.DataLibrary.Data;
using WF_TOOL.Models;
using System.Data.Entity.Validation;
namespace WF_TOOL.Controllers
{
    public class RequestController : BaseController
    {
        public PartialViewResult SetViewRespectToWFType(string id)
        {
            string[] split = id.Split('~');
            string empId = Convert.ToString(split[1]);
            var wfCode = split[0];
            RequestModel model = new RequestModel();
            //Basheer on 28-05-2020
            BusinessInternational business = new BusinessInternational();
            model.businessinternational = business;
            //Basheer on 28-05-2020 end here
            //Anzeem on 09-06-20
            if (wfCode == "P067")
            {
                List<SiteFindingsList> _list = new List<SiteFindingsList>();
                var listData = _entity.tb_UniversalLookupTable.Where(x => x.Table_Name == "SITEFINDINGS" && x.IsActive == true).ToList();

                foreach (var item in listData)
                {
                    SiteFindingsList site = new SiteFindingsList();
                    site.id = item.Id;
                    site.problem_type = item.Code_Detail;
                    site.problem_detail = item.Description;
                    _list.Add(site);
                }

                List<ProblemTypeList> _problemList = new List<ProblemTypeList>();
                //grouping a list based on problem type
                var SiteFindingListData = listData.GroupBy(u => u.Code_Detail).Select(grp => grp.FirstOrDefault()).ToList();
                foreach (var item in SiteFindingListData)
                {
                    ProblemTypeList site = new ProblemTypeList();
                    site.problem_type = item.Code_Detail;
                    _problemList.Add(site);
                }
                model.problemTypeList = _problemList;
                model.siteFindingList = _list;

                SitevisitInternational sitevisit = new SitevisitInternational();
                model.sitevisitinternational = sitevisit;
            }
            //Anzeem on 09-06-20end here
            model.employeeid = empId;
            var data = _entity.tb_WFType_ViewRelationship.Where(x => x.WF_ID == wfCode && x.IsActive).FirstOrDefault();
            model.WF_ID = data.WF_ID;
            string viewPath = "";

            if (data != null)
                viewPath = "~/Views/Request/" + data.PatialViewName + ".cshtml";
            else
                viewPath = "~/Views/Request/_pv_No_Pages.cshtml";

            return PartialView(viewPath, model);

        }
        public ActionResult RequestPreHome()
        {
            RequestModel model = new RequestModel();
            model.ad_account = "";
            return View(model);
        }

        public ActionResult RequestHome(string id)
        {
            var realAdId = "";
            var localAdId = "";
            var username = User.Identity.Name;
            string[] addata = username.Split('\\');
            string[] localId = id.Split('~');
            //if (Session["adAccount"] == null)
            //{
            try
            {
                if (addata != null && addata.Count() > 0)
                {
                    realAdId = addata[1];
                }
                if (localId != null && localId.Count() > 1)
                {
                    localAdId = localId[1];
                }
                var employee = _entity.tb_WF_Employee.Where(x => x.ADAccount == realAdId && x.IsActive == true).FirstOrDefault();
                if (employee != null)
                {
                    RequestModel model = new RequestModel();
                    model.employeeid = employee.LocalEmplyee_ID;
                    Session["id"] = employee.LocalEmplyee_ID;
                    Session["username"] = employee.Emp_Name;
                    Session["adAccount"] = employee.ADAccount;
                    model.application_code = localId[0];
                    model.ad_account = employee.ADAccount;
                    return View(model);
                }
                else
                {
                    var employee1 = _entity.tb_WF_Employee.Where(x => x.ADAccount == localAdId && x.IsActive == true).FirstOrDefault();
                    if (employee1 != null)
                    {
                        RequestModel model = new RequestModel();
                        model.employeeid = employee1.LocalEmplyee_ID;
                        Session["id"] = employee1.LocalEmplyee_ID;
                        Session["username"] = employee1.Emp_Name;
                        model.application_code = localId[0];
                        Session["adAccount"] = employee1.ADAccount;
                        model.ad_account = employee1.ADAccount;
                        return View(model);
                    }
                    else
                    {
                        var adAccount = Convert.ToString(Session["adAccount"]) == null ? "" : Convert.ToString(Session["adAccount"]);
                        var employee2 = _entity.tb_WF_Employee.Where(x => x.ADAccount == adAccount && x.IsActive == true).FirstOrDefault();
                        if (employee2 != null)
                        {
                            RequestModel model = new RequestModel();
                            model.employeeid = employee2.LocalEmplyee_ID;
                            Session["id"] = employee2.LocalEmplyee_ID;
                            Session["username"] = employee2.Emp_Name;
                            model.application_code = localId[0];
                            Session["adAccount"] = employee2.ADAccount;
                            model.ad_account = employee2.ADAccount;
                            return View(model);
                        }
                        else
                        {
                            return RedirectToAction("RequestPreHome", "Request");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return RedirectToAction("RequestPreHome", "Request");
            }
            //}
            //else
            //{
            //    string adAccnt = Convert.ToString(Session["adAccount"]);
            //    var employee1 = _entity.tb_WF_Employee.Where(x => x.ADAccount == adAccnt && x.IsActive == true).FirstOrDefault();
            //    if (employee1 != null)
            //    {
            //        RequestModel model = new RequestModel();
            //        model.employeeid = employee1.LocalEmplyee_ID;
            //        Session["id"] = employee1.LocalEmplyee_ID;
            //        Session["username"] = employee1.Emp_Name;
            //        model.application_code = localId[0];
            //        Session["adAccount"] = employee1.ADAccount;
            //        model.ad_account = employee1.ADAccount;
            //        return View(model);
            //    }
            //    else
            //    {
            //        return RedirectToAction("Request", "RequestPreHome");
            //    }
            //}

            #region
            //if (id != string.Empty && id != null)
            //{
            //    var user = Session["User"];
            //    if (user != null)
            //    {
            //        var isHaveRole = _entity.tb_Role.Where(x => x.Assigned_ID == id && x.IsActive == true).FirstOrDefault();
            //        if (isHaveRole != null)
            //        {
            //            string data = isHaveRole.Role_ID + "~" + isHaveRole.Assigned_ID;
            //            ViewBag.store = data;
            //        }
            //        else
            //        {
            //            var universal = _entity.tb_UniversalLookupTable.Where(x => x.Description == id && x.IsActive == true).FirstOrDefault();
            //            if (universal != null)
            //            {
            //                string data = universal.Table_Name + "~" + universal.Description;
            //                ViewBag.store = data;
            //            }
            //            else
            //            {
            //                ViewBag.store = "Employee";
            //            }
            //        }
            //        return View(model);
            //    }
            //    else
            //    {
            //        return RedirectToAction("Home", "Account");
            //    }
            //}
            //else
            //{
            //    return RedirectToAction("Home", "Account");
            //}
            #endregion
        }

        public ActionResult RequestHome_TA(string id)
        {
            var realAdId = "";
            var localAdId = "";
            var username = User.Identity.Name;
            string[] addata = username.Split('\\');
            string[] localId = id.Split('~');
            //if (Session["adAccount"] == null)
            //{
            try
            {
                if (addata != null && addata.Count() > 0)
                {
                    realAdId = addata[1];
                }
                if (localId != null && localId.Count() > 1)
                {
                    localAdId = localId[1];
                }
                var employee = _entity.tb_WF_Employee.Where(x => x.ADAccount == realAdId && x.IsActive == true).FirstOrDefault();
                if (employee != null)
                {
                    RequestModel model = new RequestModel();
                    model.employeeid = employee.LocalEmplyee_ID;
                    Session["id"] = employee.LocalEmplyee_ID;
                    Session["username"] = employee.Emp_Name;
                    Session["adAccount"] = employee.ADAccount;
                    model.application_code = localId[0];
                    model.ad_account = employee.ADAccount;
                    return View(model);
                }
                else
                {
                    var employee1 = _entity.tb_WF_Employee.Where(x => x.ADAccount == localAdId && x.IsActive == true).FirstOrDefault();
                    if (employee1 != null)
                    {
                        RequestModel model = new RequestModel();
                        model.employeeid = employee1.LocalEmplyee_ID;
                        Session["id"] = employee1.LocalEmplyee_ID;
                        Session["username"] = employee1.Emp_Name;
                        model.application_code = localId[0];
                        Session["adAccount"] = employee1.ADAccount;
                        model.ad_account = employee1.ADAccount;
                        return View(model);
                    }
                    else
                    {
                        var adAccount = Convert.ToString(Session["adAccount"]) == null ? "" : Convert.ToString(Session["adAccount"]);
                        var employee2 = _entity.tb_WF_Employee.Where(x => x.ADAccount == adAccount && x.IsActive == true).FirstOrDefault();
                        if (employee2 != null)
                        {
                            RequestModel model = new RequestModel();
                            model.employeeid = employee2.LocalEmplyee_ID;
                            Session["id"] = employee2.LocalEmplyee_ID;
                            Session["username"] = employee2.Emp_Name;
                            model.application_code = localId[0];
                            Session["adAccount"] = employee2.ADAccount;
                            model.ad_account = employee2.ADAccount;
                            return View(model);
                        }
                        else
                        {
                            return RedirectToAction("RequestPreHome", "Request");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return RedirectToAction("RequestPreHome", "Request");
            }



        }

        public ActionResult RequestHome_SAS(string id) //Added by chitra srishti on25.06.2020 for SAS01module
        {
            var realAdId = "";
            var localAdId = "";
            var username = User.Identity.Name;
            string[] addata = username.Split('\\');
            string[] localId = id.Split('~');
            //if (Session["adAccount"] == null)
            //{
            try
            {
                if (addata != null && addata.Count() > 0)
                {
                    realAdId = addata[1];
                }
                if (localId != null && localId.Count() > 1)
                {
                    localAdId = localId[1];
                }
                var employee = _entity.tb_WF_Employee.Where(x => x.ADAccount == realAdId && x.IsActive == true).FirstOrDefault();
                if (employee != null)
                {
                    RequestModel model = new RequestModel();
                    model.employeeid = employee.LocalEmplyee_ID;
                    Session["id"] = employee.LocalEmplyee_ID;
                    Session["username"] = employee.Emp_Name;
                    Session["adAccount"] = employee.ADAccount;
                    model.application_code = localId[0];
                    model.ad_account = employee.ADAccount;
                    return View(model);
                }
                else
                {
                    var employee1 = _entity.tb_WF_Employee.Where(x => x.ADAccount == localAdId && x.IsActive == true).FirstOrDefault();
                    if (employee1 != null)
                    {
                        RequestModel model = new RequestModel();
                        model.employeeid = employee1.LocalEmplyee_ID;
                        Session["id"] = employee1.LocalEmplyee_ID;
                        Session["username"] = employee1.Emp_Name;
                        model.application_code = localId[0];
                        Session["adAccount"] = employee1.ADAccount;
                        model.ad_account = employee1.ADAccount;
                        return View(model);
                    }
                    else
                    {
                        var adAccount = Convert.ToString(Session["adAccount"]) == null ? "" : Convert.ToString(Session["adAccount"]);
                        var employee2 = _entity.tb_WF_Employee.Where(x => x.ADAccount == adAccount && x.IsActive == true).FirstOrDefault();
                        if (employee2 != null)
                        {
                            RequestModel model = new RequestModel();
                            model.employeeid = employee2.LocalEmplyee_ID;
                            Session["id"] = employee2.LocalEmplyee_ID;
                            Session["username"] = employee2.Emp_Name;
                            model.application_code = localId[0];
                            Session["adAccount"] = employee2.ADAccount;
                            model.ad_account = employee2.ADAccount;
                            return View(model);
                        }
                        else
                        {
                            return RedirectToAction("RequestPreHome", "Request");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return RedirectToAction("RequestPreHome", "Request");
            }



        }

        public ActionResult RequestHome_ER(string id) //Added by chitra srishti on 10.07.2020 for P045 ER Module
        {
            var realAdId = "";
            var localAdId = "";
            var username = User.Identity.Name;
            string[] addata = username.Split('\\');
            string[] localId = id.Split('~');
            //if (Session["adAccount"] == null)
            //{
            try
            {
                if (addata != null && addata.Count() > 0)
                {
                    realAdId = addata[1];
                }
                if (localId != null && localId.Count() > 1)
                {
                    localAdId = localId[1];
                }
                var employee = _entity.tb_WF_Employee.Where(x => x.ADAccount == realAdId && x.IsActive == true).FirstOrDefault();
                if (employee != null)
                {
                    RequestModel model = new RequestModel();
                    model.employeeid = employee.LocalEmplyee_ID;
                    Session["id"] = employee.LocalEmplyee_ID;
                    Session["username"] = employee.Emp_Name;
                    Session["adAccount"] = employee.ADAccount;
                    model.application_code = localId[0];
                    model.ad_account = employee.ADAccount;
                    return View(model);
                }
                else
                {
                    var employee1 = _entity.tb_WF_Employee.Where(x => x.ADAccount == localAdId && x.IsActive == true).FirstOrDefault();
                    if (employee1 != null)
                    {
                        RequestModel model = new RequestModel();
                        model.employeeid = employee1.LocalEmplyee_ID;
                        Session["id"] = employee1.LocalEmplyee_ID;
                        Session["username"] = employee1.Emp_Name;
                        model.application_code = localId[0];
                        Session["adAccount"] = employee1.ADAccount;
                        model.ad_account = employee1.ADAccount;
                        return View(model);
                    }
                    else
                    {
                        var adAccount = Convert.ToString(Session["adAccount"]) == null ? "" : Convert.ToString(Session["adAccount"]);
                        var employee2 = _entity.tb_WF_Employee.Where(x => x.ADAccount == adAccount && x.IsActive == true).FirstOrDefault();
                        if (employee2 != null)
                        {
                            RequestModel model = new RequestModel();
                            model.employeeid = employee2.LocalEmplyee_ID;
                            Session["id"] = employee2.LocalEmplyee_ID;
                            Session["username"] = employee2.Emp_Name;
                            model.application_code = localId[0];
                            Session["adAccount"] = employee2.ADAccount;
                            model.ad_account = employee2.ADAccount;
                            return View(model);
                        }
                        else
                        {
                            return RedirectToAction("RequestPreHome", "Request");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return RedirectToAction("RequestPreHome", "Request");
            }



        }

        public ActionResult RequestHome_TR(string id) // Terrin on 30.06.2020 T006
        {
            var realAdId = "";
            var localAdId = "";
            var username = User.Identity.Name;
            string[] addata = username.Split('\\');
            string[] localId = id.Split('~');
            //if (Session["adAccount"] == null)
            //{
            try
            {
                if (addata != null && addata.Count() > 0)
                {
                    realAdId = addata[1];
                }
                if (localId != null && localId.Count() > 1)
                {
                    localAdId = localId[1];
                }
                var employee = _entity.tb_WF_Employee.Where(x => x.ADAccount == realAdId && x.IsActive == true).FirstOrDefault();
                if (employee != null)
                {
                    RequestModel model = new RequestModel();
                    model.employeeid = employee.LocalEmplyee_ID;
                    Session["id"] = employee.LocalEmplyee_ID;
                    Session["username"] = employee.Emp_Name;
                    Session["adAccount"] = employee.ADAccount;
                    model.application_code = localId[0];
                    model.ad_account = employee.ADAccount;
                    return View(model);
                }
                else
                {
                    var employee1 = _entity.tb_WF_Employee.Where(x => x.ADAccount == localAdId && x.IsActive == true).FirstOrDefault();
                    if (employee1 != null)
                    {
                        RequestModel model = new RequestModel();
                        model.employeeid = employee1.LocalEmplyee_ID;
                        Session["id"] = employee1.LocalEmplyee_ID;
                        Session["username"] = employee1.Emp_Name;
                        model.application_code = localId[0];
                        Session["adAccount"] = employee1.ADAccount;
                        model.ad_account = employee1.ADAccount;
                        return View(model);
                    }
                    else
                    {
                        var adAccount = Convert.ToString(Session["adAccount"]) == null ? "" : Convert.ToString(Session["adAccount"]);
                        var employee2 = _entity.tb_WF_Employee.Where(x => x.ADAccount == adAccount && x.IsActive == true).FirstOrDefault();
                        if (employee2 != null)
                        {
                            RequestModel model = new RequestModel();
                            model.employeeid = employee2.LocalEmplyee_ID;
                            Session["id"] = employee2.LocalEmplyee_ID;
                            Session["username"] = employee2.Emp_Name;
                            model.application_code = localId[0];
                            Session["adAccount"] = employee2.ADAccount;
                            model.ad_account = employee2.ADAccount;
                            return View(model);
                        }
                        else
                        {
                            return RedirectToAction("RequestPreHome", "Request");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return RedirectToAction("RequestPreHome", "Request");
            }



        }

         public ActionResult RequestHome_AO(string id) // 03/07/2020 ALENA SICS FOR AO
        {
            var realAdId = "";
            var localAdId = "";
            var username = User.Identity.Name;
            string[] addata = username.Split('\\');
            string[] localId = id.Split('~');
            //if (Session["adAccount"] == null)
            //{
            try
            {
                if (addata != null && addata.Count() > 0)
                {
                    realAdId = addata[1];
                }
                if (localId != null && localId.Count() > 1)
                {
                    localAdId = localId[1];
                }
                var employee = _entity.tb_WF_Employee.Where(x => x.ADAccount == realAdId && x.IsActive == true).FirstOrDefault();
                if (employee != null)
                {
                    RequestModel model = new RequestModel();
                    model.employeeid = employee.LocalEmplyee_ID;
                    Session["id"] = employee.LocalEmplyee_ID;
                    Session["username"] = employee.Emp_Name;
                    Session["adAccount"] = employee.ADAccount;
                    model.application_code = localId[0];
                    model.ad_account = employee.ADAccount;
                    return View(model);
                }
                else
                {
                    var employee1 = _entity.tb_WF_Employee.Where(x => x.ADAccount == localAdId && x.IsActive == true).FirstOrDefault();
                    if (employee1 != null)
                    {
                        RequestModel model = new RequestModel();
                        model.employeeid = employee1.LocalEmplyee_ID;
                        Session["id"] = employee1.LocalEmplyee_ID;
                        Session["username"] = employee1.Emp_Name;
                        model.application_code = localId[0];
                        Session["adAccount"] = employee1.ADAccount;
                        model.ad_account = employee1.ADAccount;
                        return View(model);
                    }
                    else
                    {
                        var adAccount = Convert.ToString(Session["adAccount"]) == null ? "" : Convert.ToString(Session["adAccount"]);
                        var employee2 = _entity.tb_WF_Employee.Where(x => x.ADAccount == adAccount && x.IsActive == true).FirstOrDefault();
                        if (employee2 != null)
                        {
                            RequestModel model = new RequestModel();
                            model.employeeid = employee2.LocalEmplyee_ID;
                            Session["id"] = employee2.LocalEmplyee_ID;
                            Session["username"] = employee2.Emp_Name;
                            model.application_code = localId[0];
                            Session["adAccount"] = employee2.ADAccount;
                            model.ad_account = employee2.ADAccount;
                            return View(model);
                        }
                        else
                        {
                            return RedirectToAction("RequestPreHome", "Request");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return RedirectToAction("RequestPreHome", "Request");
            }



        }
        public JsonResult GetEmployeeDetails(string empid)
        {
            EmployeeModel model = new EmployeeModel();
            var data = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == empid && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                //var company = _entity.tb_Company.Where(x => x.Company_Id == data.Company_Id).FirstOrDefault();
                //var department = _entity.tb_Department.Where(x => x.Department_Id == data.Department_Id).FirstOrDefault();
                //var businesline = _entity.tb_BusinessLine.Where(x => x.Business_Id == data.BusinessLine_Id).FirstOrDefault();
                //var cc = _entity.tb_CostCenter.Where(x => x.CC_Id == data.CC_Id).FirstOrDefault();
                //var job = _entity.tb_Job.Where(x => x.Job_Id == data.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();
                model.emp_localid = data.LocalEmplyee_ID ?? "";
                model.emp_name = data.Emp_Name ?? "";
                model.globalid = data.GblEmp_ID ?? "";
                model.grade = data.Global_Group ?? "";
                model.tittle = data.tb_Job.Job_tittle;
                model.company = data.Company_Id == null ? "" : data.tb_Company.Company_Name;
                model.department = data.Department_Id == null ? "" : data.tb_Department.Department_Name;
                //model.businessline = data.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : data.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                if (data.Businessline_Id != null) // 19-02-2020 II ARCHANA STRISHTI 
                {
                    if (data.Businessline_Id != 0) //Basheer on 22-04-2020
                    {
                        var bus = _entity.tb_BusinessLine.Where(x => x.BL_Id == data.Businessline_Id).FirstOrDefault();
                        model.businessline = bus.Business_Line_Name;
                    }
                }
                model.cost_center = data.tb_CostCenter == null ? "" : data.tb_CostCenter.CC_Name;
                model.mobile = data.Mobile_No ?? "";
                model.telephone = data.Tele_Ext ?? "";
            }
            return Json(model, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult GetBankdetailsForPPrequest(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_BlnHosAllow_BankTransfer.cshtml", model);
        }
        //P053-GOSI Payment(Preema)
        public PartialViewResult GetBankdetails_GOSI_Payment_Request(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_GOSI_Payment_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequest(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_BlnHosAllow_Cheque.cshtml", model);
        }

        //------<< Terrin on 24/3/2020---
        public PartialViewResult GetBankdetailsForPPrequestP057(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_SalempunderIqama_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP057(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_SalaryforEmployeeUnderIqamaprocessPayment_Cheque.cshtml", model);
        }

        //-----Terrin on 24/3/2020------>>

        //------<< Terrin on 28/4/2020---

        public PartialViewResult GetBankdetailsForPPrequestP015(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_RecruitmentTraining_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP015(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_RecruitmentTrainingCheque.cshtml", model);
        }

        //-----Terrin on 24/3/2020------>>
        public object UploadFile()
        {
            bool status = false;
            string msg = "Failed";
            string fileSave = "";
            try
            {
                if (Request.Files.Count > 0)
                {
                    var httpPostedFile = Request.Files[0];
                    string folderPath = Server.MapPath("~/Media/PPRequestFiles/");
                    var split = httpPostedFile.FileName.Split('.').ToList();
                    var ext = split[(split.Count() - 1)];
                    if (!Directory.Exists(folderPath))
                        Directory.CreateDirectory(folderPath);
                    string fileName = Guid.NewGuid().ToString() + "." + ext;
                    var pdfFilePath = Server.MapPath("~/Media/PPRequestFiles/" + fileName);
                    fileSave = "/Media/PPRequestFiles/" + fileName;
                    httpPostedFile.SaveAs(pdfFilePath);
                    msg = "Success";
                    status = true;
                }
            }
            catch
            {

            }
            return Json(new { status = status, msg = msg, fileSave = fileSave }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_BalanceHousingAllowance(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_HousingAllowance.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;  //Basheer on 26-02-2020
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_HousingAllowance.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p055
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HousingAllowance", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p055

                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;//Basheer on 26-02-2020
                    //insert_pp_data.Bank_Attachment = model.bank_attachment; //Basheer on 28-02-2020
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_HousingAllowance.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region attachments
                    //Basheer on 26-02-2020 to to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {

                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //Basheer code end here
                    #endregion
                    #region Keep AuditLog_p055
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + " || " + model.purpose_text + " || " + model.remark + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HousingAllowance", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p055

                }
                #region attachments
                //Basheer on 26-02-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //-------Terrin on 24/3/2020----
        public object Submit_PP_SalaryforEmployeeunderlqamaprocesspayment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;  //Basheer on 26-02-2020
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p057
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryforEmployeeUnderIqamaprocessPayment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p057

                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;//Basheer on 26-02-2020
                    //insert_pp_data.Bank_Attachment = model.bank_attachment; //Basheer on 28-02-2020
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Remark = model.remark;
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region attachments
                    //Basheer on 26-02-2020 to to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //Basheer code end here
                    #endregion
                    #region Keep AuditLog_p057
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryforEmployeeUnderIqamaprocessPayment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p057

                }
                #region attachments
                //Basheer on 26-02-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //-----Terrin on 24/03/2020 ------P057-------
        public object Submit_PP_SalaryforEmployeeUnderIqamaprocessPayment_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p055
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryforEmployeeUnderIqamaprocessPayment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p055
                        #endregion Cash
                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.To_IBAN = model.to_iban;
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        //edit_pp_data.Bank_Attachment = model.bank_attachment;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Remark = model.remark;
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p055
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryforEmployeeUnderIqamaprocessPayment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p055
                        #endregion Bank
                    }
                    //Basheer on 28-02-2020
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_VacationAdvancePayment_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_VacationAdvancePayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.TaNumber = model.tanumber;
                        edit_pp_data.currencytype = model.taamountype;
                        edit_pp_data.chequeaccountno = model.tachequeaccountno;
                        edit_pp_data.chequeSupplier = model.tasupplier;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Cash
                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Bank_Attachment = model.bank_attachment;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.TaNumber = model.tanumber;
                        edit_pp_data.currencytype = model.taamountype;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Bank
                    }
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_SalEmpUnderIqamaPayment(EmployeeRequestModel model) //---Terrin on 25/3/20 --P057
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.Cheque_Date = null;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }

                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p055
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryforEmployeeUnderIqamaprocessPayment", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p057
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //  _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");


                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion

                            #region Keep AuditLog_p055 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryforEmployeeUnderIqamaprocessPayment", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p057



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object SubmitRequestForApprove(string id)
        {

            bool status = false;
            string msg = "failed";
            string[] splitData = id.Split('~');
            var request_id = splitData[0];
            var emp_local_id = splitData[1];
            var wf_id = splitData[2];
            //Print encryption
            if (emp_local_id != "0" && emp_local_id != "")
            {
                TempData["Emp_Id"] = emp_local_id;

            }

            long request_table_id = 0;
            var employeename = ""; //Basheer on 13-03-2020
            var roledescription = "";//Basheer on 13-03-2020
            try
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == request_id && x.IsActive == true).FirstOrDefault();

                if (data != null)
                {
                    if (data.tb_WFType.WF_ID == "P016" || data.tb_WFType.WF_ID == "P017")
                    {
                        UpdateRequestHistory(data.tb_WFType.WF_ID, "SUB", data.Request_ID, "");
                    }
                    /*-------------If T004 then update available seats of each allocated courses------------*/
                    else if (data.tb_WFType.WF_ID == "T004")
                    {
                        UpdateAvailableSeatsForCourses(request_id, "INT");
                    }
                }


                request_table_id = data.Id;
                Tuple<bool, string, string, string> result = _rpp.SubmitRequest(id, data);
                status = result.Item1;
                employeename = result.Item2; //Basheer on 13-03-2020
                roledescription = result.Item3;//Basheer on 13-03-2020
                if (result.Item1)
                {
                    msg = "Success";
                    string remark = "Request was Submitted by";
                    //Basheer on 24-03-2020 for checking request
                    //bool senMail = _ApprovalLogRepository.Send_Submit_Mail_Login(data.Request_ID, result.Item2, "", data.Employee_ID, data.Creater_ID, 0.ToString(), remark, data, result.Item3, result.Item4);
                    if (data.Creater_ID == emp_local_id)
                    {
                        bool senMail = _ApprovalLogRepository.Send_Submit_Mail_Login(data.Request_ID, result.Item2, "", data.Employee_ID, data.Creater_ID, 0.ToString(), remark, data, result.Item3, result.Item4);
                    }
                    else
                    {
                        bool senMail = _ApprovalLogRepository.Send_Submit_Mail_Login(data.Request_ID, result.Item2, "", data.Employee_ID, emp_local_id, 0.ToString(), remark, data, result.Item3, result.Item4);
                    }


                    EmailTemplateDataModel model = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                    model.process_type = EmailProcessType.Submit;
                    model.wf_id = data.WF_ID;
                    model.request_id = data.Id;
                    model.who_am_i = emp_local_id;
                    model.reason = "";

                    try
                    {
                        Thread email = new Thread(() => Email_Template(model, data.tb_WFType));
                        email.Start();
                    }
                    catch
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }
            return Json(new { Status = status, Message = msg, Request_Table_Id = request_table_id, statusemployeename = employeename, statusroldesc = roledescription }, JsonRequestBehavior.AllowGet); //Basheer on 13-03-2020
        }
        public ActionResult ViewMyApprovalRequest(string id)
        {
            //EmployeeModel model = new EmployeeModel();
            //model.emp_localid = id;
            //model.request_process_type = 0;
            // return View(model);
            var realAdId = "";
            var localAdId = "";
            var username = User.Identity.Name;
            string[] addata = username.Split('\\');
            string[] localId = id.Split('~');
            try
            {
                if (addata != null && addata.Count() > 0)
                {
                    realAdId = addata[1];
                }
                if (localId != null && localId.Count() > 1)
                {
                    localAdId = localId[1];
                }
                var employee = _entity.tb_WF_Employee.Where(x => x.ADAccount == realAdId && x.IsActive == true).FirstOrDefault();
                if (employee != null)
                {
                    EmployeeModel model = new EmployeeModel();
                    model.emp_localid = employee.LocalEmplyee_ID;
                    model.adAccountId = employee.ADAccount;
                    Session["id"] = employee.LocalEmplyee_ID;
                    Session["username"] = employee.Emp_Name;
                    Session["adAccount"] = employee.ADAccount;
                    model.application_code = localId[0];
                    model.ad_account = employee.ADAccount;
                    return View(model);
                }
                else
                {
                    var employee1 = _entity.tb_WF_Employee.Where(x => x.ADAccount == localAdId && x.IsActive == true).FirstOrDefault();
                    if (employee1 != null)
                    {
                        EmployeeModel model = new EmployeeModel();
                        model.emp_localid = employee1.LocalEmplyee_ID;
                        model.adAccountId = employee1.ADAccount;
                        Session["id"] = employee1.LocalEmplyee_ID;
                        Session["username"] = employee1.Emp_Name;
                        model.application_code = localId[0];
                        Session["adAccount"] = employee1.ADAccount;
                        model.ad_account = employee1.ADAccount;
                        return View(model);
                    }
                    else
                    {
                        return RedirectToAction("Account", "Home");
                    }
                }
            }
            catch (Exception ex)
            {
                return RedirectToAction("Account", "Home");
            }
        }
        public PartialViewResult OLD_NOT_USE_ListWaitingRequests(string id)
        {
            WaitingRequestingList model = new WaitingRequestingList();
            model.list = new List<WaitingRequests>();
            string[] splitData = id.Split('~');
            model.myId = splitData[1];
            model.typeid = splitData[0];
            int count = 0;
            var me = _entity.tb_Role.Where(x => x.Assigned_ID == model.myId).FirstOrDefault();
            int actionflag = Convert.ToInt32(model.typeid) + 1;
            int typeId = Convert.ToInt32(model.typeid);
            if (typeId == Convert.ToInt16(display_statusEnum.All)) // All requests with all conditions 
            {
                #region
                var fullData = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == model.myId && x.IsActive == true).ToList();
                string status = "INT";
                var data1 = fullData.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 0).ToList();
                foreach (var item in data1)
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;

                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.button_type = "Approve";
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                status = "INT";
                var data2 = fullData.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 1).ToList();
                foreach (var item in data2)
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.button_type = "";
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                status = "APP";
                var data3 = fullData.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 0).ToList();
                foreach (var item in data3)
                {
                    //var checkPaid = _entity.tb_WFType.Where(x => x.Id == item.WF_ID && x.IsActive == true).FirstOrDefault();
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    //one.button_type = checkPaid.IsPaid_Request == true ? "Paid" : "Close";
                    one.button_type = item.tb_WFType.IsPaid_Request == true ? "Paid" : "Close";
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                status = "CLR";
                var data4 = fullData.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 1).ToList();
                foreach (var item in data4)
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                status = "PYD";
                var data5 = fullData.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 1).ToList();
                foreach (var item in data5)
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == item.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                #endregion
            }
            else if (typeId == Convert.ToInt16(display_statusEnum.Approval_Pending))// Approval Pending Requests
            {
                #region
                string status = "INT";
                var data = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 0).ToList();
                foreach (var item in data)
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == item.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.button_type = "Approve";
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                #endregion
            }
            else if (typeId == Convert.ToInt16(display_statusEnum.Approved))// Approved by me
            {
                #region
                string status = "INT";
                var data = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 1).ToList();
                foreach (var item in data)
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == item.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.button_type = "";
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                #endregion
            }
            else if (typeId == Convert.ToInt16(display_statusEnum.Closing_Pending))// Me wants to close
            {
                #region
                string status = "APP";
                var data = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 0).ToList();
                foreach (var item in data)
                {
                    var checkPaid = _entity.tb_WFType.Where(x => x.Id == item.WF_ID && x.IsActive == true).FirstOrDefault();
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == item.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.button_type = checkPaid.IsPaid_Request == true ? "Paid" : "Close";
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                #endregion
            }
            else if (typeId == Convert.ToInt16(display_statusEnum.Closed))// Me wants to close
            {
                #region
                string status = "CLR";
                var data = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 1).ToList();
                foreach (var item in data)
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == item.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                #endregion
            }
            else if (typeId == Convert.ToInt16(display_statusEnum.Paid))// Me paid
            {
                #region
                string status = "PYD";
                var data = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == model.myId && x.IsActive == true && x.Status_ID == status && x.Process_Complete == 1).ToList();
                foreach (var item in data)
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    //var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == item.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
                    var application = item.tb_Application;
                    var domain = application.tb_Domain;
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.company = emp.Company_Id == null ? "" : emp.tb_Company.Company_Name;
                    one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.wf_domain = domain.Domain_Name; ;
                    var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                    one.final_status = current.Item1;
                    one.current_actor = current.Item2;
                    model.list.Add(one);
                    count = count + 1;
                }
                #endregion
            }
            var xx = model.list.OrderByDescending(x => x.req_id).ToList();
            List<WaitingRequests> ab = new List<WaitingRequests>();
            foreach (var item in xx)
            {
                WaitingRequests one = new WaitingRequests();
                var x1 = ab.Where(x => x.request_id == item.request_id).FirstOrDefault();
                if (x1 == null)
                {
                    one = item;
                    ab.Add(one);
                }
            }
            model.list = new List<WaitingRequests>();
            model.list = ab;
            return PartialView("~/Views/Request/_pv_WaitiongRequests.cshtml", model);
        }
        public PartialViewResult ListWaitingRequests(string id)
        {
            WaitingRequestingList model = new WaitingRequestingList();
            model.list = new List<WaitingRequests>();
            string[] splitData = id.Split('~');
            model.myId = splitData[1];
            model.typeid = splitData[0];
            int count = 0;
            var myName = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.myId && x.IsActive == true).FirstOrDefault();
            var me = _entity.tb_Role.Where(x => x.Assigned_ID == model.myId).FirstOrDefault();
            //var data = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == model.myId && x.IsActive == true && (x.Status_ID != "CLS" || x.Status_ID != "PYD" || x.Status_ID != "REJ" || x.Status_ID!="NEW")).ToList();
            var data = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == model.myId && x.IsActive == true && (x.Status_ID == "INT" || x.Status_ID == "HLD" || x.Status_ID == "APP" || x.Status_ID == "APC" || x.Status_ID == "BKI" || x.Status_ID == "QIM" || x.Status_ID == "PIM" || x.Status_ID == "UPC")).ToList();
            foreach (var item in data)
            {
                #region 
                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                //var application = _entity.tb_Application.Where(x => x.Application_Code == item.Application_ID && x.IsActive == true).FirstOrDefault();
                //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
                WaitingRequests one = new WaitingRequests();
                one.req_id = item.Id;
                one.request_id = item.Request_ID;
                one.application_id = item.Application_ID ?? 0;
                one.application = item.tb_Application.Application_Code;
                one.employee_local_id = item.Employee_ID;
                one.wf_type_id = item.tb_WFType.WF_ID;
                one.count = count + 1;
                one.employee_name = emp.Emp_Name;
                //one.company = company == null ? "" : company.Company_Name;
                //one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                //one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                one.process_table_id = 0;
                //one.wf_domain = domain.Domain_Name;
                //one.wf_domain = item.tb_Application.tb_Domain.Domain_Name;
                if (item.Status_ID == "INT" || item.Status_ID == "HLD" || item.Status_ID == "BKI" || item.Status_ID == "QIM" || item.Status_ID == "PIM")
                {
                    one.button_type = "Approve";
                }
                else if (item.Status_ID == "APP")
                {
                    if (item.tb_WFType.IsPaid_Request == true)
                    {
                        one.button_type = "Paid";
                    }
                    else
                    {
                        one.button_type = "Close";
                    }
                }
                else if (item.Status_ID == "CLR" || item.Status_ID == "PYD" && item.Process_Complete == 0)
                {
                    //var checkPaid = _entity.tb_WFType.Where(x => x.WF_ID == item.WF_ID && x.IsActive == true).FirstOrDefault();
                    one.button_type = item.tb_WFType.IsPaid_Request == true ? "Paid" : "Close";
                }
                var current = _ApprovalLogRepository.Check_Request_Last_Stage(item.Request_ID);
                one.final_status = current.Item1;
                one.current_actor = current.Item2;
                model.list.Add(one);
                count = count + 1;
                #endregion 
            }
            var my_specialRoles = _entity.tb_UniversalLookupTable.Where(x => x.Description == model.myId && x.IsActive == true).ToList();
            foreach (var d in my_specialRoles)
            {
                var my_special_requests = _entity.tb_Request_Hdr.Where(x => x.Approver_ID == d.Table_Name).ToList();
                foreach (var item in my_special_requests)
                {
                    #region 
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    //var business = _entity.tb_Business.Where(x => x.Bus_Id == emp.Business_Id && x.IsActive == true).FirstOrDefault();
                    //var bussiness_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
                    //var pro_group = _entity.tb_ProductGroup.Where(x => x.PG_Id == emp.PG_Id && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == item.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.application = item.tb_Application.Application_Code;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.process_table_id = 0;
                    //one.company = company == null ? "" : company.Company_Name;
                    //one.business = emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.tb_Business.Business_Name;
                    //one.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    //one.wf_domain = item.tb_Application.tb_Domain.Domain_Name;
                    if (item.Status_ID == "INT" || item.Status_ID == "HLD" || item.Status_ID == "BKI" || item.Status_ID == "QIM" || item.Status_ID == "PIM")
                    {
                        one.button_type = "Approve";
                    }
                    else if (item.Status_ID == "APP")
                    {
                        one.button_type = item.tb_WFType.IsPaid_Request == true ? "Paid" : "Close";
                    }
                    else if (item.Status_ID == "CLR" || item.Status_ID == "PYD" && item.Process_Complete == 0)
                    {
                        //var checkPaid = _entity.tb_WFType.Where(x => x.WF_ID == item.WF_ID && x.IsActive == true).FirstOrDefault();
                        one.button_type = item.tb_WFType.IsPaid_Request == true ? "Paid" : "Close";
                    }
                    var current = _ApprovalLogRepository.Check_Request_Last_ByUniversal(item.Request_ID);
                    one.final_status = current;
                    one.current_actor = d.Code + " " + myName.Emp_Name;
                    model.list.Add(one);
                    count = count + 1;
                    #endregion
                }
                var process = _entity.tb_ProcessHdr.Where(x => x.RoleId == d.Table_Name && x.IsActive == true && x.IsCompleted == false).GroupBy(x => x.RequestId).Select(x => x.FirstOrDefault()).ToList();
                foreach (var p in process)
                {
                    #region 
                    var item = _entity.tb_Request_Hdr.Where(x => x.Request_ID == p.RequestId.ToString() && x.IsActive == true).FirstOrDefault();
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Employee_ID).FirstOrDefault();
                    var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    WaitingRequests one = new WaitingRequests();
                    one.req_id = item.Id;
                    one.request_id = item.Request_ID;
                    one.application_id = item.Application_ID ?? 0;
                    one.application = item.tb_Application.Application_Code;
                    one.employee_local_id = item.Employee_ID;
                    one.wf_type_id = item.tb_WFType.WF_ID;
                    one.count = count + 1;
                    one.employee_name = emp.Emp_Name;
                    one.pro_group = emp.tb_Department.tb_ProductGroup == null ? "" : emp.tb_Department.tb_ProductGroup.PG_Name;
                    one.date = Convert.ToDateTime(item.TimeStamp).ToShortDateString();
                    one.button_type = "";
                    one.process_table_id = p.Id;
                    var current = _ApprovalLogRepository.Check_Request_Last_ByUniversal(item.Request_ID);
                    one.final_status = current;
                    one.current_actor = d.Code + " " + myName.Emp_Name;
                    model.list.Add(one);
                    count = count + 1;
                    #endregion
                }
            }
            return PartialView("~/Views/Request/_pv_WaitiongRequests.cshtml", model);
        } // LISTING OF ALL REQUEST 

        //public ActionResult DetailedRequestOld(string id) //12-02-2020 Archana Srishti Change the Action Result name 
        //{
        //    WaitingRequestDetails model = new WaitingRequestDetails();
        //    string[] splitData = id.Split('~');
        //    model.req_id = Convert.ToInt32(splitData[0]);
        //    model.approver_id = splitData[1];
        //    model.my_Process_type = splitData[2];
        //    model.dataview_id = splitData[4];
        //    if (splitData[2] == "ForwardView")
        //    {
        //        var username = User.Identity.Name;
        //        string[] addata = username.Split('\\');
        //        Array.Resize(ref splitData, splitData.Length + 1);
        //        splitData[splitData.Length - 1] = addata[1];
        //    }

        //    model.ad_account = splitData[5];
        //    var data = _entity.tb_Request_Hdr.Where(x => x.Id == model.req_id).FirstOrDefault();
        //    model.creator_id = data.Creater_ID; //Basheer on 24-03-2020 to check creator
        //    model.checkstatus = data.Status_ID; //to check request is back to initiator or not on 04-02-2020
        //    if (data.tb_WFType.WF_ID == "P055") // Archana 
        //    {
        //        #region P055
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 
        //        //if (splitData[2] != "ForwardView")//This coondition checking for the request forwarder for view 
        //        //{
        //        //    #region Checking Escalation Provision
        //        //    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;
        //        //    if (data.Approver_ID == data.OrgApprover_ID)
        //        //    {
        //        //        var myRole = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //        var myTemplate = _entity.tb_WF_Template.Where(x => x.Role_ID == myRole.Role_ID && x.WF_ID == data.WF_ID && x.Action_Flag == escalationFlag).FirstOrDefault();
        //        //        if (myTemplate != null)
        //        //        {
        //        //            model.canEscalate = true;
        //        //            model.escalation_No = Convert.ToInt32(myTemplate.Sequence_NO);
        //        //            model.can_distribute = myTemplate.DistributionList_ID;
        //        //        }
        //        //        else
        //        //        {
        //        //            model.canEscalate = false;
        //        //            model.escalation_No = 0;
        //        //        }
        //        //        model.my_role = myRole.Role_Desc;
        //        //        model.my_role_code = myRole.Role_ID;
        //        //    }
        //        //    else
        //        //    {
        //        //        var myRole = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //        var myTemplate = _entity.tb_WF_Template.Where(x => x.Role_ID == myRole.Role_ID && x.WF_ID == data.WF_ID && x.Action_Flag == escalationFlag).FirstOrDefault();
        //        //        if (myTemplate != null)
        //        //        {
        //        //            model.canEscalate = true;
        //        //            model.escalation_No = Convert.ToInt32(myTemplate.Sequence_NO);
        //        //            model.can_distribute = myTemplate.DistributionList_ID;
        //        //        }
        //        //        else
        //        //        {
        //        //            model.canEscalate = false;
        //        //            model.escalation_No = 0;
        //        //        }
        //        //        model.my_role = myRole.Role_Desc;
        //        //        model.my_role_code = myRole.Role_ID;
        //        //    }
        //        //    #endregion Checking Escalation Provision
        //        //}
        //        #endregion
        //        #region P055
        //        //var _p055 = _entity.tb_PP_HousingAllowance.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        //model.payment_mode = _p055.PaymentMode;
        //        //if (_p055.PaymentMode == "C")
        //        //{
        //        //    if (_p055.Cheque_Date != null)
        //        //    {
        //        //        try
        //        //        {
        //        //            var stringDate = _p055.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //        catch
        //        //        {
        //        //            var stringDate = _p055.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //    }
        //        //    model.payment_mode = _p055.PaymentMode;
        //        //    model.amount_sar = _p055.Amount_SAR;
        //        //    model.purpose_text = _p055.Purpose_Text;
        //        //    model.payable_to = _p055.Cheque_Payable;
        //        //    model.attachment_filepath = _p055.Attachment_Filepath;
        //        //}
        //        //else
        //        //{
        //        //    model.amount_sar = _p055.Amount_SAR;
        //        //    model.from_bank = _p055.From_Bank;
        //        //    model.from_addreess = _p055.From_Address;
        //        //    model.from_account_no = _p055.From_AccountNo;
        //        //    model.to_beneficiary = _p055.To_Benificiary;
        //        //    model.to_bankname = _p055.To_BankName;
        //        //    model.to_address = _p055.To_Address;
        //        //    model.to_account_no = _p055.To_AccountNo;
        //        //    model.bank_attachment = _p055.Bank_Attachment;
        //        //    model.attachment_filepath = _p055.Attachment_Filepath;
        //        //    model.remark = _p055.Remark;
        //        //}
        //        return RedirectToAction("View_P055", "Request", model);
        //        #endregion P055
        //        #endregion P055
        //    }
        //    else if (data.tb_WFType.WF_ID == "IS05") // Archana
        //    {
        //        #region IS05
        //        var model1 = new InfrastructureChange();
        //        model1.ad_account = splitData[5];
        //        model1.dataview_id = splitData[4];
        //        model1.req_id = Convert.ToInt32(splitData[0]);
        //        model1.approver_id = splitData[1];
        //        model1.my_Process_type = splitData[2];
        //        model1.template_id = data.WFTemplate_ID ?? 0;
        //        model1.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model1.req_id_only = data.Request_ID;
        //        model1.checkstatus = data.Status_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = emp.tb_Emp_Profile;
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();
        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model1.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model1.can_edit = true;
        //                            }
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model1.canEscalate = true;//***
        //                            else
        //                                model1.canEscalate = false;
        //                            model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                            model1.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            var tem = data.tb_WF_Template;
        //                            if (tem != null)
        //                            {
        //                                if (tem.Edit_Option.Trim() == "R")
        //                                {
        //                                    model1.can_edit = false;
        //                                }
        //                                else
        //                                {
        //                                    model1.can_edit = true;
        //                                }
        //                                model1.can_distribute = tem.DistributionList_ID.ToString();
        //                                if (tem.Action_Flag == escalationFlag)
        //                                    model1.canEscalate = true;//***
        //                                else
        //                                    model1.canEscalate = false;
        //                                model1.escalation_No = Convert.ToInt32(tem.Sequence_NO);//***
        //                                model1.can_distribute = tem.DistributionList_ID.ToString();//***
        //                                model1.level = Convert.ToInt32(tem.Sequence_NO);
        //                                model1.my_process_code = tem.Status_ID;
        //                            }
        //                            else
        //                            {
        //                                model1.canEscalate = false;//***
        //                                model1.escalation_No = 0;//***
        //                            }
        //                        }
        //                        model1.my_role = role.Role_Desc;//***
        //                        model1.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model1.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model1.can_edit = true;
        //                                    }
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model1.canEscalate = true;//***
        //                                    else
        //                                        model1.canEscalate = false;
        //                                    model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                                    model1.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model1.canEscalate = false;//***
        //                                    model1.escalation_No = 0;//***
        //                                }
        //                                model1.my_role = newRole.Role_Desc;//***
        //                                model1.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model1.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model1.can_edit = true;
        //                            }
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model1.canEscalate = true;//***
        //                            else
        //                                model1.canEscalate = false;
        //                            model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                            model1.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model1.canEscalate = false;
        //                            model1.escalation_No = 0;
        //                        }
        //                        model1.my_role = role.Role_Desc;
        //                        model1.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model1.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model1.can_edit = true;
        //                                    }
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model1.canEscalate = true;//***
        //                                    else
        //                                        model1.canEscalate = false;
        //                                    model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                                    model1.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model1.canEscalate = false;
        //                                    model1.escalation_No = 0;
        //                                }
        //                                model1.my_role = role.Role_Desc;
        //                                model1.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model1.is_hold = true;
        //        else
        //            model1.is_hold = false;
        //        model1.request_profile = profile.Profile_ID;
        //        model1.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model1.country_id = emp.tb_Location.tb_Country.Id;
        //        model1.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model1.application = application.Application_Name;
        //        model1.domain = domain.Domain_Name;
        //        model1.emp_name = emp.Emp_Name;
        //        model1.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model1.local_id = data.Employee_ID;
        //        model1.company = company == null ? "" : company.Company_Name;
        //        model1.job_tittle = job.Job_tittle;
        //        model1.department = department.Department_Name;
        //        model1.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model1.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model1.mobile_phone = emp.Mobile_No;
        //        model1.application_id = data.Application_ID.ToString();
        //        model1.wf_type = data.tb_WFType.WF_ID;
        //        model1.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model1.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 
        //        //if (splitData[2] != "ForwardView")//This coondition checking for the request forwarder for view 
        //        //{
        //        //    #region Checking Escalation Provision
        //        //    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;
        //        //    if (data.Approver_ID == data.OrgApprover_ID)
        //        //    {
        //        //        var myRole = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //        var myTemplate = _entity.tb_WF_Template.Where(x => x.Role_ID == myRole.Role_ID && x.WF_ID == data.WF_ID && x.Action_Flag == escalationFlag).FirstOrDefault();
        //        //        if (myTemplate != null)
        //        //        {
        //        //            model.canEscalate = true;
        //        //            model.escalation_No = Convert.ToInt32(myTemplate.Sequence_NO);
        //        //            model.can_distribute = myTemplate.DistributionList_ID;
        //        //        }
        //        //        else
        //        //        {
        //        //            model.canEscalate = false;
        //        //            model.escalation_No = 0;
        //        //        }
        //        //        model.my_role = myRole.Role_Desc;
        //        //        model.my_role_code = myRole.Role_ID;
        //        //    }
        //        //    else
        //        //    {
        //        //        var myRole = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //        var myTemplate = _entity.tb_WF_Template.Where(x => x.Role_ID == myRole.Role_ID && x.WF_ID == data.WF_ID && x.Action_Flag == escalationFlag).FirstOrDefault();
        //        //        if (myTemplate != null)
        //        //        {
        //        //            model.canEscalate = true;
        //        //            model.escalation_No = Convert.ToInt32(myTemplate.Sequence_NO);
        //        //            model.can_distribute = myTemplate.DistributionList_ID;
        //        //        }
        //        //        else
        //        //        {
        //        //            model.canEscalate = false;
        //        //            model.escalation_No = 0;
        //        //        }
        //        //        model.my_role = myRole.Role_Desc;
        //        //        model.my_role_code = myRole.Role_ID;
        //        //    }
        //        //    #endregion Checking Escalation Provision
        //        //}
        //        #endregion
        //        #region RequestData
        //        var _is05 = _entity.tb_IS_Infrastructure_Change.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
        //        model1.change_summary = _is05.Change_Summary;
        //        model1.detailed_description = _is05.Detailed_Description;
        //        model1.clarification = Convert.ToInt32(_is05.Request_Clarification);
        //        model1.proposed_plan = _is05.Proposed_Plan;
        //        model1.business_impact = _is05.Impact_Analysis;
        //        model1.fallback_options = _is05.Fallback_Options;
        //        model1.positive_risk = _is05.Positive_Risk_Assessment;
        //        model1.negative_risk = _is05.Negative_Risk_Assessment;
        //        model1.file_path = _is05.FilePath;
        //        model1.service_engineers_code = _is05.SE_LocalId ?? "";
        //        if (_is05.SE_LocalId != null && _is05.SE_LocalId != string.Empty)
        //        {
        //            model1.service_engineer_name = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == _is05.SE_LocalId && x.IsActive == true).FirstOrDefault().Emp_Name;
        //        }
        //        model1.support_staff = _is05.Support_Staff;
        //        model1.expected_completion = _is05.Expected_Completion ?? CurrentTime;
        //        if (model1.expected_completion != null && model1.expected_completion.Year != 1)
        //        {
        //            model1.expected_completion_string = model1.expected_completion.ToShortDateString();
        //        }
        //        model1.implement_to = _is05.Implement_to ?? 0;
        //        model1.remark = _is05.Remark;
        //        model1.q_eng_file_path = _is05.Q_Eng_FilePath;
        //        model1.q_eng_remark = _is05.Q_Eng_Remark;
        //        model1.q_test_result = _is05.Q_Test_Result ?? 0;
        //        model1.p_eng_file_path = _is05.P_Eng_FilePath;
        //        model1.p_eng_remark = _is05.P_Eng_Remark;
        //        model1.p_test_result = _is05.P_Test_Result ?? 0;
        //        model1.post_remark = _is05.Post_Remark;
        //        model1.imp_result = _is05.Imp_Result ?? 0;
        //        return RedirectToAction("View_IS05", "Request", model1);
        //        #endregion RequestData

        //        #endregion IS05
        //    }
        //    else if (data.tb_WFType.WF_ID == "P009") //Archana
        //    {
        //        #region P009
        //        var model1 = new HRPaymentrequest();
        //        model1.ad_account = splitData[5];
        //        model1.dataview_id = splitData[4];
        //        model1.req_id = Convert.ToInt32(splitData[0]);
        //        model1.approver_id = splitData[1];
        //        model1.my_Process_type = splitData[2];
        //        model1.template_id = data.WFTemplate_ID ?? 0;
        //        model1.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model1.req_id_only = data.Request_ID;
        //        model1.checkstatus = data.Status_ID; //to check request is back to initiator or not on 04-02-2020
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();
        //        if (splitData[2] != "ForwardView")
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***                                                                                               //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model1.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model1.can_edit = true;
        //                            }
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model1.canEscalate = true;//***
        //                            else
        //                                model1.canEscalate = false;
        //                            model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                            model1.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model1.canEscalate = false;//***
        //                            model1.escalation_No = 0;//***
        //                        }
        //                        model1.my_role = role.Role_Desc;//***
        //                        model1.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model1.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model1.can_edit = true;
        //                                    }
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model1.canEscalate = true;//***
        //                                    else
        //                                        model1.canEscalate = false;
        //                                    model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                                    model1.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model1.canEscalate = false;//***
        //                                    model1.escalation_No = 0;//***
        //                                }
        //                                model1.my_role = newRole.Role_Desc;//***
        //                                model1.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model1.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model1.can_edit = true;
        //                            }
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model1.canEscalate = true;//***
        //                            else
        //                                model1.canEscalate = false;
        //                            model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                            model1.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model1.canEscalate = false;
        //                            model1.escalation_No = 0;
        //                        }
        //                        model1.my_role = role.Role_Desc;
        //                        model1.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model1.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model1.can_edit = true;
        //                                    }
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model1.canEscalate = true;//***
        //                                    else
        //                                        model1.canEscalate = false;
        //                                    model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                                    model1.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model1.canEscalate = false;
        //                                    model1.escalation_No = 0;
        //                                }
        //                                model1.my_role = role.Role_Desc;
        //                                model1.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model1.is_hold = true;
        //        else
        //            model1.is_hold = false;
        //        model1.request_profile = profile.Profile_ID;
        //        model1.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model1.country_code = emp.tb_Location.tb_Country.Country_Code;
        //        model1.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model1.application = application.Application_Name;
        //        model1.domain = domain.Domain_Name;
        //        model1.emp_name = emp.Emp_Name;
        //        model1.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model1.local_id = data.Employee_ID;
        //        model1.company = company == null ? "" : company.Company_Name;
        //        model1.job_tittle = job.Job_tittle;
        //        model1.department = department.Department_Name;
        //        model1.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model1.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model1.mobile_phone = emp.Mobile_No;
        //        model1.application_id = data.Application_ID.ToString();
        //        model1.wf_type = data.tb_WFType.WF_ID;
        //        model1.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model1.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region RequestData
        //        //var _p009 = _entity.tb_PP_HR_RelatedPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
        //        //if (_p009.Cheque_Date != null)
        //        //{
        //        //    try
        //        //    {
        //        //        var stringDate = _p009.Cheque_Date.ToString();
        //        //        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //        model1.cheque_date_string = xx;
        //        //    }
        //        //    catch
        //        //    {
        //        //        var stringDate = _p009.Cheque_Date.ToString();
        //        //        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //        model1.cheque_date_string = xx;
        //        //    }
        //        //}
        //        //model1.table_Id = _p009.Id;
        //        //model1.RequestId = _p009.RequestId;
        //        //model1.PaymentMode = _p009.PaymentMode;
        //        //model1.Amount_SAR = _p009.Amount_SAR;
        //        //model1.Account_No = _p009.Account_No;
        //        //model1.PurposeText = _p009.PurposeText;
        //        //model1.supplier = _p009.supplier;
        //        //model1.Payable_To = _p009.Payable_To;
        //        //model1.File_Attachment = _p009.File_Attachment;
        //        //model1.Remark = _p009.Remark;
        //        //model1.From_BankName = _p009.From_BankName;
        //        //model1.From_Address = _p009.From_Address;
        //        //model1.From_Account_No = _p009.From_Account_No;
        //        //model1.To_Benificiary = _p009.To_Benificiary;
        //        //model1.To_BankName = _p009.To_BankName;
        //        //model1.To_Address = _p009.To_Address;
        //        //model1.To_Account_No = _p009.To_Account_No;
        //        //model1.To_IBAN = _p009.To_IBAN;
        //        return RedirectToAction("View_P009", "Request", model1);
        //        #endregion RequestData
        //        #endregion P009
        //    }
        //    else if (data.tb_WFType.WF_ID == "P010") // Archana
        //    {
        //        #region P010
        //        var model1 = new HRPaymentrequest();
        //        model1.ad_account = splitData[5];
        //        model1.dataview_id = splitData[4];
        //        model1.req_id = Convert.ToInt32(splitData[0]);
        //        model1.approver_id = splitData[1];
        //        model1.my_Process_type = splitData[2];
        //        model1.template_id = data.WFTemplate_ID ?? 0;
        //        model1.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model1.req_id_only = data.Request_ID;
        //        model1.checkstatus = data.Status_ID; //to check request is back to initiator or not on 04-02-2020
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == data.tb_WFType.tb_Application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        //var country = _entity.tb_Country.Where(x => x.Id == emp.Country_Id && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();
        //        if (splitData[2] != "ForwardView")
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model1.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model1.can_edit = true;
        //                            }
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model1.canEscalate = true;//***
        //                            else
        //                                model1.canEscalate = false;
        //                            model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                            model1.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model1.canEscalate = false;//***
        //                            model1.escalation_No = 0;//***
        //                        }
        //                        model1.my_role = role.Role_Desc;//***
        //                        model1.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model1.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model1.can_edit = true;
        //                                    }
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model1.canEscalate = true;//***
        //                                    else
        //                                        model1.canEscalate = false;
        //                                    model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                                    model1.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model1.canEscalate = false;//***
        //                                    model1.escalation_No = 0;//***
        //                                }
        //                                model1.my_role = newRole.Role_Desc;//***
        //                                model1.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model1.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model1.can_edit = true;
        //                            }
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model1.canEscalate = true;//***
        //                            else
        //                                model1.canEscalate = false;
        //                            model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                            model1.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model1.canEscalate = false;
        //                            model1.escalation_No = 0;
        //                        }
        //                        model1.my_role = role.Role_Desc;
        //                        model1.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model1.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model1.can_edit = true;
        //                                    }
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model1.canEscalate = true;//***
        //                                    else
        //                                        model1.canEscalate = false;
        //                                    model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model1.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model1.level = Convert.ToInt32(temp.Sequence_NO);
        //                                    model1.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model1.canEscalate = false;
        //                                    model1.escalation_No = 0;
        //                                }
        //                                model1.my_role = role.Role_Desc;
        //                                model1.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision

        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model1.is_hold = true;
        //        else
        //            model1.is_hold = false;
        //        model1.request_profile = profile.Profile_ID;
        //        model1.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model1.country_code = emp.tb_Location.tb_Country.Country_Code;
        //        model1.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model1.application = data.tb_WFType.tb_Application.Application_Name;
        //        model1.domain = domain.Domain_Name;
        //        model1.emp_name = emp.Emp_Name;
        //        model1.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model1.local_id = data.Employee_ID;
        //        model1.company = company == null ? "" : company.Company_Name;
        //        model1.job_tittle = job.Job_tittle;
        //        model1.department = department.Department_Name;
        //        model1.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model1.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model1.mobile_phone = emp.Mobile_No;
        //        model1.application_id = data.Application_ID.ToString();
        //        model1.wf_type = data.tb_WFType.WF_ID;
        //        model1.title = data.tb_WFType.tb_Application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model1.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region RequestData
        //        //var _p010 = _entity.tb_PP_NonHR_RelatedPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
        //        //model1.contract_local_no = _p010.Contract_Local_No;
        //        //model1.back_invoice_no = _p010.BCharge_Invoice;
        //        //model1.project = _p010.Project;
        //        //model1.year_booked = _p010.Year_booked;
        //        //model1.customer = _p010.Customer;
        //        //if (_p010.Cheque_Date != null)
        //        //{
        //        //    #region 
        //        //    try
        //        //    {
        //        //        var stringDate = _p010.Cheque_Date.ToString();
        //        //        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //        model1.cheque_date_string = xx;
        //        //    }
        //        //    catch
        //        //    {
        //        //        var stringDate = _p010.Cheque_Date.ToString();
        //        //        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //        model1.cheque_date_string = xx;
        //        //    }
        //        //    #endregion
        //        //}
        //        //model1.table_Id = _p010.Id;
        //        //model1.RequestId = _p010.RequestId;
        //        //model1.PaymentMode = _p010.PaymentMode;
        //        //model1.Amount_SAR = _p010.Amount_SAR ?? 0;
        //        //model1.Account_No = _p010.Account_No;
        //        //model1.PurposeText = _p010.Purpose_Text;
        //        //model1.supplier = _p010.Supplier;
        //        //model1.Payable_To = _p010.Payable_To;
        //        //model1.File_Attachment = _p010.File_Attachment;
        //        //model1.Remark = _p010.Remark;
        //        //model1.From_BankName = _p010.From_BankName;
        //        //model1.From_Address = _p010.From_Address;
        //        //model1.From_Account_No = _p010.From_Account_No;
        //        //model1.To_Benificiary = _p010.To_Benificiary;
        //        //model1.To_BankName = _p010.To_BankName;
        //        //model1.To_Address = _p010.To_Address;
        //        //model1.To_Account_No = _p010.To_Account_No;
        //        //model1.To_IBAN = _p010.To_IBAN;
        //        return RedirectToAction("View_P010", "Request", model1);
        //        #endregion RequestData
        //        #endregion P010
        //    }
        //    else if (data.tb_WFType.WF_ID == "P051") // Sibi 03-01-2020
        //    {
        //        #region P051
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 

        //        #endregion
        //        #region P051
        //        //var _P051 = _entity.tb_PP_SalaryAdvance_NewArrival.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        //model.payment_mode = _P051.PaymentMode;
        //        //if (_P051.PaymentMode == "C")
        //        //{
        //        //    if (_P051.Cheque_Date != null)
        //        //    {
        //        //        try
        //        //        {
        //        //            var stringDate = _P051.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //        catch
        //        //        {
        //        //            var stringDate = _P051.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //    }
        //        //    model.payment_mode = _P051.PaymentMode;
        //        //    model.amount_sar = _P051.Amount_SAR;
        //        //    model.purpose_text = _P051.Purpose_Text;
        //        //    model.payable_to = _P051.Cheque_Payable;
        //        //    model.attachment_filepath = _P051.Attachment_Filepath;
        //        //}
        //        //else
        //        //{
        //        //    model.amount_sar = _P051.Amount_SAR;
        //        //    model.from_bank = _P051.From_Bank;
        //        //    model.from_addreess = _P051.From_Address;
        //        //    model.from_account_no = _P051.From_AccountNo;
        //        //    model.to_beneficiary = _P051.To_Benificiary;
        //        //    model.to_bankname = _P051.To_BankName;
        //        //    model.to_address = _P051.To_Address;
        //        //    model.to_account_no = _P051.To_AccountNo;
        //        //    model.bank_attachment = _P051.Bank_Attachment;
        //        //    model.attachment_filepath = _P051.Attachment_Filepath;
        //        //    model.remark = _P051.Remark;
        //        //}
        //        return RedirectToAction("View_P051", "Request", model);
        //        #endregion P051
        //        #endregion P051
        //    }
        //    else if (data.tb_WFType.WF_ID == "P050") //Basheer on 06 - 01 - 2019 for P050
        //    {
        //        #region P050
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region P050
        //        //var _p050 = _entity.tb_PP_SettlingAllowancePayment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        //model.payment_mode = _p050.PaymentMode;
        //        //if (_p050.PaymentMode == "C")
        //        //{
        //        //    if (_p050.Cheque_Date != null)
        //        //    {
        //        //        try
        //        //        {
        //        //            var stringDate = _p050.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //        catch
        //        //        {
        //        //            var stringDate = _p050.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //    }
        //        //    model.payment_mode = _p050.PaymentMode;
        //        //    model.amount_sar = _p050.Amount_SAR;
        //        //    model.purpose_text = _p050.Purpose_Text;
        //        //    model.payable_to = _p050.Cheque_Payable;
        //        //    model.attachment_filepath = _p050.Attachment_Filepath;
        //        //}
        //        //else
        //        //{
        //        //    model.amount_sar = _p050.Amount_SAR;
        //        //    model.from_bank = _p050.From_Bank;
        //        //    model.from_addreess = _p050.From_Address;
        //        //    model.from_account_no = _p050.From_AccountNo;
        //        //    model.to_beneficiary = _p050.To_Benificiary;
        //        //    model.to_bankname = _p050.To_BankName;
        //        //    model.to_address = _p050.To_Address;
        //        //    model.to_account_no = _p050.To_AccountNo;
        //        //    model.bank_attachment = _p050.Bank_Attachment;
        //        //    model.attachment_filepath = _p050.Attachment_Filepath;
        //        //    model.remark = _p050.Remark;
        //        //}
        //        return RedirectToAction("View_P050", "Request", model);
        //        #endregion P050
        //        #endregion P050
        //    }
        //    else if (data.tb_WFType.WF_ID == "P011") //13-01-2020 Sibi Start
        //    {
        //        #region P011
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 

        //        #endregion
        //        #region P011
        //        //var _P011 = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        ////this to Starting...............
        //        //IntroductionCertificateModel mo = new IntroductionCertificateModel();
        //        //if (_P011 != null)
        //        //{

        //        //    mo.RequestId = _P011.RequestId;
        //        //    mo.LocalEmplyee_ID = _P011.LocalEmplyee_ID;
        //        //    mo.Iqama_Number = _P011.Iqama_Number;
        //        //    mo.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P011.Location_Code).Select(x => x.Location).FirstOrDefault();
        //        //    mo.Iqama_Identification = _P011.Iqama_Identification;
        //        //    mo.Attachment_Filepath = _P011.Attachment_Filepath;
        //        //    mo.TimeStamp = _P011.TimeStamp;

        //        //    if (_P011.Certificate_with_Salary == 1)
        //        //    {
        //        //        mo.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
        //        //    }
        //        //    else if (_P011.Certificate_with_Salary == 0)
        //        //    {
        //        //        mo.Certificate_with_Salary_String = BooleanValue.No.ToString();
        //        //    }

        //        //    if (_P011.Chamber_Of_Commerce_Stamp == 1)
        //        //    {
        //        //        mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
        //        //    }
        //        //    else if (_P011.Chamber_Of_Commerce_Stamp == 0)
        //        //    {
        //        //        mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
        //        //    }

        //        //    if (_P011.Ministry_Of_Foreign_Affairs == 1)
        //        //    {
        //        //        mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
        //        //    }
        //        //    else if (_P011.Ministry_Of_Foreign_Affairs == 0)
        //        //    {
        //        //        mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
        //        //    }

        //        //    Session["IntroductionCertificateModel"] = mo;
        //        //}
        //        //...................................
        //        return RedirectToAction("View_P011", "Request", model);
        //        #endregion P051
        //        #endregion P051
        //    }
        //    else if (data.tb_WFType.WF_ID == "P013") // Basheer
        //    {
        //        #region P013
        //        model.request_empid = data.Employee_ID;
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region P013
        //        //var _p013 = _entity.tb_PP_VacationAdvancePayment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        //model.payment_mode = _p013.PaymentMode;
        //        //if (_p013.PaymentMode == "C")
        //        //{
        //        //    if (_p013.Cheque_Date != null)
        //        //    {
        //        //        try
        //        //        {
        //        //            var stringDate = _p013.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //        catch
        //        //        {
        //        //            var stringDate = _p013.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //    }
        //        //    model.payment_mode = _p013.PaymentMode;
        //        //    model.amount_sar = _p013.Amount_SAR;
        //        //    model.purpose_text = _p013.Purpose_Text;
        //        //    model.payable_to = _p013.Cheque_Payable;
        //        //    model.attachment_filepath = _p013.Attachment_Filepath;
        //        //    model.tanumber = _p013.TaNumber;
        //        //    model.taamountype = _p013.currencytype;
        //        //    model.tachequeaccountno = _p013.chequeaccountno;
        //        //    model.tasupplier = _p013.chequeSupplier;

        //        //}
        //        //else
        //        //{
        //        //    model.amount_sar = _p013.Amount_SAR;
        //        //    model.from_bank = _p013.From_Bank;
        //        //    model.from_addreess = _p013.From_Address;
        //        //    model.from_account_no = _p013.From_AccountNo;
        //        //    model.to_beneficiary = _p013.To_Benificiary;
        //        //    model.to_bankname = _p013.To_BankName;
        //        //    model.to_address = _p013.To_Address;
        //        //    model.to_account_no = _p013.To_AccountNo;
        //        //    model.bank_attachment = _p013.Bank_Attachment;
        //        //    model.attachment_filepath = _p013.Attachment_Filepath;
        //        //    model.remark = _p013.Remark;
        //        //    model.tanumber = _p013.TaNumber;
        //        //    model.taamountype = _p013.currencytype;

        //        //}
        //        return RedirectToAction("View_P013", "Request", model);
        //        #endregion P013
        //        #endregion P013
        //    }
        //    //else if (data.tb_WFType.WF_ID == "A008") // 26/06/2020 ALENA SICS FOR A008
        //    //{
        //    //    #region A008
        //    //    model.request_empid = data.Employee_ID;
        //    //    model.template_id = data.WFTemplate_ID ?? 0;
        //    //    model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //    //    model.req_id_only = data.Request_ID;
        //    //    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //    //    var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //    //    var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //    //    var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //    //    var application = data.tb_Application;
        //    //    var domain = application.tb_Domain;
        //    //    var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //    //    var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //    //    if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //    //    {
        //    //        if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //    //        {
        //    //            model.can_edit = false;
        //    //            model.canEscalate = false;
        //    //            model.escalation_No = 0;
        //    //        }
        //    //        else
        //    //        {
        //    //            #region Check that the person have the edit provision 
        //    //            if (data.Approver_ID == data.OrgApprover_ID)
        //    //            {
        //    //                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //    //                                                                                       //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //    //                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //    //                if (role != null)
        //    //                {
        //    //                    #region
        //    //                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //    //                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //    //                    if (temp != null)
        //    //                    {
        //    //                        if (temp.Edit_Option.Trim() == "R")
        //    //                        {
        //    //                            model.can_edit = false;
        //    //                        }
        //    //                        else
        //    //                        {
        //    //                            model.can_edit = true;
        //    //                        }
        //    //                        model.can_distribute = temp.DistributionList_ID.ToString();
        //    //                        if (temp.Action_Flag == escalationFlag)
        //    //                            model.canEscalate = true;//***
        //    //                        else
        //    //                            model.canEscalate = false;//***
        //    //                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //    //                        model.can_distribute = temp.DistributionList_ID.ToString();//***
        //    //                        model.my_process_code = temp.Status_ID;
        //    //                    }
        //    //                    else
        //    //                    {
        //    //                        model.canEscalate = false;//***
        //    //                        model.escalation_No = 0;//***
        //    //                    }
        //    //                    model.my_role = role.Role_Desc;//***
        //    //                    model.my_role_code = role.Role_ID;//***
        //    //                    #endregion
        //    //                }
        //    //                else
        //    //                {
        //    //                    #region
        //    //                    var appNo = Convert.ToInt32(data.Approval_No);
        //    //                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //    //                    if (log != null)
        //    //                    {
        //    //                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //    //                        if (newRole != null)
        //    //                        {
        //    //                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //    //                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //    //                            if (temp != null)
        //    //                            {
        //    //                                if (temp.Edit_Option.Trim() == "R")
        //    //                                {
        //    //                                    model.can_edit = false;
        //    //                                }
        //    //                                else
        //    //                                {
        //    //                                    model.can_edit = true;
        //    //                                }
        //    //                                model.can_distribute = temp.DistributionList_ID.ToString();
        //    //                                if (temp.Action_Flag == escalationFlag)
        //    //                                    model.canEscalate = true;//***
        //    //                                else
        //    //                                    model.canEscalate = false;
        //    //                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //    //                                model.can_distribute = temp.DistributionList_ID.ToString();//***
        //    //                                model.my_process_code = temp.Status_ID;
        //    //                            }
        //    //                            else
        //    //                            {
        //    //                                model.canEscalate = false;//***
        //    //                                model.escalation_No = 0;//***
        //    //                            }
        //    //                            model.my_role = newRole.Role_Desc;//***
        //    //                            model.my_role_code = newRole.Role_ID;//***
        //    //                        }
        //    //                    }
        //    //                    #endregion
        //    //                }
        //    //            }
        //    //            else // reuest coming from the delegate 
        //    //            {
        //    //                var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //    //                if (role != null)
        //    //                {
        //    //                    #region 
        //    //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //    //                                                                                           //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //    //                    var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //    //                    if (temp != null)
        //    //                    {
        //    //                        if (temp.Edit_Option == "R")
        //    //                        {
        //    //                            model.can_edit = false;
        //    //                        }
        //    //                        else
        //    //                        {
        //    //                            model.can_edit = true;
        //    //                        }
        //    //                        model.can_distribute = temp.DistributionList_ID.ToString();
        //    //                        if (temp.Action_Flag == escalationFlag)
        //    //                            model.canEscalate = true;//***
        //    //                        else
        //    //                            model.canEscalate = false;
        //    //                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //    //                        model.can_distribute = temp.DistributionList_ID.ToString();//***
        //    //                        model.my_process_code = temp.Status_ID;
        //    //                    }
        //    //                    else
        //    //                    {
        //    //                        model.canEscalate = false;
        //    //                        model.escalation_No = 0;
        //    //                    }
        //    //                    model.my_role = role.Role_Desc;
        //    //                    model.my_role_code = role.Role_ID;
        //    //                    #endregion
        //    //                }
        //    //                else
        //    //                {
        //    //                    #region 
        //    //                    var appNo = Convert.ToInt32(data.Approval_No);
        //    //                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //    //                    if (log != null)
        //    //                    {
        //    //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //    //                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //    //                        if (newRole != null)
        //    //                        {
        //    //                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //    //                            var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //    //                            if (temp != null)
        //    //                            {
        //    //                                if (temp.Edit_Option == "R")
        //    //                                {
        //    //                                    model.can_edit = false;
        //    //                                }
        //    //                                else
        //    //                                {
        //    //                                    model.can_edit = true;
        //    //                                }
        //    //                                model.can_distribute = temp.DistributionList_ID.ToString();
        //    //                                if (temp.Action_Flag == escalationFlag)
        //    //                                    model.canEscalate = true;//***
        //    //                                else
        //    //                                    model.canEscalate = false;
        //    //                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //    //                                model.can_distribute = temp.DistributionList_ID.ToString();//***
        //    //                                model.my_process_code = temp.Status_ID;
        //    //                            }
        //    //                            else
        //    //                            {
        //    //                                model.canEscalate = false;
        //    //                                model.escalation_No = 0;
        //    //                            }
        //    //                            model.my_role = role.Role_Desc;
        //    //                            model.my_role_code = role.Role_ID;
        //    //                        }
        //    //                    }
        //    //                    #endregion
        //    //                }
        //    //            }
        //    //            #endregion Check that the person have the edit provision
        //    //        }
        //    //    }
        //    //    if (data.Status_ID == "HLD")
        //    //        model.is_hold = true;
        //    //    else
        //    //        model.is_hold = false;
        //    //    model.request_profile = profile.Profile_ID;
        //    //    model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //    //    model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //    //    model.application = application.Application_Name;
        //    //    model.domain = domain.Domain_Name;
        //    //    model.emp_name = emp.Emp_Name;
        //    //    model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //    //    model.local_id = data.Employee_ID;
        //    //    model.company = company == null ? "" : company.Company_Name;
        //    //    model.job_tittle = job.Job_tittle;
        //    //    model.department = department.Department_Name;
        //    //    model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //    //    model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //    //    model.mobile_phone = emp.Mobile_No;
        //    //    model.application_id = data.Application_ID.ToString();
        //    //    model.wf_type = data.tb_WFType.WF_ID;
        //    //    model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //    //    if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //    //    {
        //    //        model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //    //    }
        //    //    #region A008
        //    //    var _A008 = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
        //    //    if (_A008.Drop_Date == null)
        //    //    {
        //    //        try
        //    //        {
        //    //            var stringDate = _A008.Drop_Date.ToString();
        //    //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //    //            model.date = xx;
        //    //        }
        //    //        catch
        //    //        {
        //    //            var stringDate = _A008.Drop_Date.ToString();
        //    //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //    //            model.date = xx;
        //    //        }
        //    //    }
        //    //    model.cost_center = Convert.ToString(_A008.Cost_Center);
        //    //    model.emp_name = _A008.Employee_Name;
        //    //    model.pickup_at = _A008.Drop_at;
        //    //    model.time = Convert.ToString(_A008.Drop_Time);
        //    //    model.remarks = _A008.Remarks;
        //    //    return RedirectToAction("View_A008", "Request", model);
        //    //    #endregion A008
        //    //    #endregion A008
        //    //}
        //    //24/05/2020 ALENA FOR P052
        //    else if (data.tb_WFType.WF_ID == "P052") // Basheer
        //    {
        //        #region P052
        //        model.request_empid = data.Employee_ID;
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region P052
        //        var _p052 = _entity.tb_PP_EOSB_Calculation.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        model.payment_mode = _p052.PaymentMode;
        //        if (_p052.PaymentMode == "C")
        //        {
        //            if (_p052.ChequeDate != null)
        //            {
        //                try
        //                {
        //                    var stringDate = _p052.ChequeDate.ToString();
        //                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //                    model.cheque_date_string = xx;
        //                }
        //                catch
        //                {
        //                    var stringDate = _p052.ChequeDate.ToString();
        //                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //                    model.cheque_date_string = xx;
        //                }
        //            }
        //            model.payment_mode = _p052.PaymentMode;
        //            model.amount_sar = _p052.Amount_SAR;
        //            model.purpose_text = _p052.Purpose_Text;
        //            model.payable_to = _p052.Cheque_Payable;
        //            model.attachment_filepath = _p052.Attachment_Filepath;
        //            model.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
        //            model.remark = _p052.Remark;
        //        }
        //        else
        //        {
        //            model.payment_mode = _p052.PaymentMode;
        //            model.amount_sar = _p052.Amount_SAR;
        //            model.from_bank = _p052.From_Bank;
        //            model.from_addreess = _p052.From_Address;
        //            model.from_account_no = _p052.From_AccountNo;
        //            model.from_account_no = _p052.To_Beneficiary;
        //            model.to_bankname = _p052.To_BankName;
        //            model.to_address = _p052.To_Address;
        //            model.to_account_no = _p052.To_AccountNo;
        //            model.attachment_filepath = _p052.Attachment_Filepath;
        //            model.remark = _p052.Remark;
        //            model.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
        //            model.purpose_text = _p052.Purpose_Text;
        //            model.to_iban = _p052.To_IBAN;
        //        }
        //        return RedirectToAction("View_P052", "Request", model);
        //        #endregion P052
        //        #endregion P052
        //    }
        //    else if (data.tb_WFType.WF_ID == "P034") //Archana 14-01-2020 Srishti 
        //    {
        //        #region P034
        //        BusinessInternational model1 = new BusinessInternational();
        //        model1.id = id;
        //        model1.ad_account = splitData[5];
        //        model1.checkstatus = data.Status_ID;
        //        return RedirectToAction("View_P034", "Request", model1);
        //        #endregion
        //    }
        //    else if (data.tb_WFType.WF_ID == "P056") // Nimmi 16-01-2020
        //    {
        //        #region P056
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 
        //        //if (splitData[2] != "ForwardView")//This coondition checking for the request forwarder for view 
        //        //{
        //        //    #region Checking Escalation Provision
        //        //    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;
        //        //    if (data.Approver_ID == data.OrgApprover_ID)
        //        //    {
        //        //        var myRole = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //        var myTemplate = _entity.tb_WF_Template.Where(x => x.Role_ID == myRole.Role_ID && x.WF_ID == data.WF_ID && x.Action_Flag == escalationFlag).FirstOrDefault();
        //        //        if (myTemplate != null)
        //        //        {
        //        //            model.canEscalate = true;
        //        //            model.escalation_No = Convert.ToInt32(myTemplate.Sequence_NO);
        //        //            model.can_distribute = myTemplate.DistributionList_ID;
        //        //        }
        //        //        else
        //        //        {
        //        //            model.canEscalate = false;
        //        //            model.escalation_No = 0;
        //        //        }
        //        //        model.my_role = myRole.Role_Desc;
        //        //        model.my_role_code = myRole.Role_ID;
        //        //    }
        //        //    else
        //        //    {
        //        //        var myRole = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //        var myTemplate = _entity.tb_WF_Template.Where(x => x.Role_ID == myRole.Role_ID && x.WF_ID == data.WF_ID && x.Action_Flag == escalationFlag).FirstOrDefault();
        //        //        if (myTemplate != null)
        //        //        {
        //        //            model.canEscalate = true;
        //        //            model.escalation_No = Convert.ToInt32(myTemplate.Sequence_NO);
        //        //            model.can_distribute = myTemplate.DistributionList_ID;
        //        //        }
        //        //        else
        //        //        {
        //        //            model.canEscalate = false;
        //        //            model.escalation_No = 0;
        //        //        }
        //        //        model.my_role = myRole.Role_Desc;
        //        //        model.my_role_code = myRole.Role_ID;
        //        //    }
        //        //    #endregion Checking Escalation Provision
        //        //}
        //        #endregion
        //        #region P056
        //        //var _p056 = _entity.tb_PP_RelocationAllowance.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        //model.payment_mode = _p056.PaymentMode;
        //        //if (_p056.PaymentMode == "C")
        //        //{
        //        //    if (_p056.Cheque_Date != null)
        //        //    {
        //        //        try
        //        //        {
        //        //            var stringDate = _p056.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //        catch
        //        //        {
        //        //            var stringDate = _p056.Cheque_Date.ToString();
        //        //            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //        //            model.cheque_date_string = xx;
        //        //        }
        //        //    }
        //        //    model.payment_mode = _p056.PaymentMode;
        //        //    model.amount_sar = _p056.Amount_SAR;
        //        //    model.purpose_text = _p056.Purpose_Text;
        //        //    model.payable_to = _p056.Cheque_Payable;
        //        //    model.attachment_filepath = _p056.Attachment_Filepath;
        //        //}
        //        //else
        //        //{
        //        //    model.amount_sar = _p056.Amount_SAR;
        //        //    model.from_bank = _p056.From_Bank;
        //        //    model.from_addreess = _p056.From_Address;
        //        //    model.from_account_no = _p056.From_AccountNo;
        //        //    model.to_beneficiary = _p056.To_Benificiary;
        //        //    model.to_bankname = _p056.To_BankName;
        //        //    model.to_address = _p056.To_Address;
        //        //    model.to_account_no = _p056.To_AccountNo;
        //        //    model.bank_attachment = _p056.Bank_Attachment;
        //        //    model.attachment_filepath = _p056.Attachment_Filepath;
        //        //    model.remark = _p056.Remark;
        //        //}
        //        return RedirectToAction("View_P056", "Request", model);
        //        #endregion P056
        //        #endregion P056
        //    }
        //    else if (data.tb_WFType.WF_ID == "P012") //P012 Nimmi 20-01-2020
        //    {
        //        #region P012
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 

        //        #endregion
        //        #region P012
        //        var _P012 = _entity.tb_PP_Letter_To_RealEstate.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        //this to Starting...............
        //        LetterToRealEstateModel mo = new LetterToRealEstateModel();
        //        if (_P012 != null)
        //        {

        //            mo.RequestId = _P012.RequestId;
        //            mo.LocalEmplyee_ID = _P012.LocalEmplyee_ID;
        //            mo.Iqama_Number = _P012.Iqama_Number;
        //            mo.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P012.Location_Code).Select(x => x.Location).FirstOrDefault();
        //            mo.Iqama_Identification = _P012.Iqama_Identification;
        //            mo.Attachment_Filepath = _P012.Attachment_Filepath;
        //            mo.TimeStamp = _P012.TimeStamp;

        //            if (_P012.Certificate_with_Salary == 1)
        //            {
        //                mo.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
        //            }
        //            else if (_P012.Certificate_with_Salary == 0)
        //            {
        //                mo.Certificate_with_Salary_String = BooleanValue.No.ToString();
        //            }

        //            if (_P012.Chamber_Of_Commerce_Stamp == 1)
        //            {
        //                mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
        //            }
        //            else if (_P012.Chamber_Of_Commerce_Stamp == 0)
        //            {
        //                mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
        //            }

        //            if (_P012.Ministry_Of_Foreign_Affairs == 1)
        //            {
        //                mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
        //            }
        //            else if (_P012.Ministry_Of_Foreign_Affairs == 0)
        //            {
        //                mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
        //            }

        //            Session["LetterToRealEstateModel"] = mo;
        //        }
        //        //...................................
        //        return RedirectToAction("View_P012", "Request", model);
        //        #endregion P012
        //        #endregion P012
        //    }

        //    else if (data.tb_WFType.WF_ID == "P023") //  P023 Nimmi
        //    {
        //        #region P023
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 

        //        #endregion
        //        #region P023
        //        var _p023 = _entity.tb_PP_Carloan_Request.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
        //        if (_p023 != null)
        //        {
        //            model.reason = _p023.Reason;
        //            model.employee_grade = Convert.ToInt32(_p023.Employee_Grade);
        //            model.joining_date = Convert.ToDateTime(_p023.Joining_Date);
        //            model.att_quotation_filepath = _p023.Att_Quotation_Filepath;
        //            model.car_cost_reimbursement = Convert.ToDecimal(_p023.Car_Cost_Reimbursement);
        //            //model.first_loan = _p023.First_Loan;
        //            //model.subsequent_loan = _p023.Subsequent_Loan;
        //            model.car_quotation_amount = Convert.ToDecimal(_p023.Car_Quotation_Amount);
        //            model.maximum_entitlement = Convert.ToDecimal(_p023.Maximum_Entitlement);
        //            model.monthly_installment = Convert.ToDecimal(_p023.Monthly_Installment);
        //            model.effective_date = Convert.ToDateTime(_p023.Effective_Date);
        //            model.attachment_filepath = _p023.Attachment_Filepath;
        //        }
        //        return RedirectToAction("View_P023", "Request", model);
        //        #endregion P023
        //        #endregion P023
        //    }
        //    else if (data.tb_WFType.WF_ID == "P054") // Nimmi P054
        //    {
        //        #region P054
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            #region Check that the person have the edit provision 
        //            if (data.Approver_ID == data.OrgApprover_ID)
        //            {
        //                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                if (role != null)
        //                {
        //                    #region
        //                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                    if (temp != null)
        //                    {
        //                        if (temp.Edit_Option.Trim() == "R")
        //                        {
        //                            model.can_edit = false;
        //                        }
        //                        else
        //                        {
        //                            model.can_edit = true;
        //                        }
        //                        model.can_distribute = temp.DistributionList_ID.ToString();
        //                        if (temp.Action_Flag == escalationFlag)
        //                            model.canEscalate = true;//***
        //                        else
        //                            model.canEscalate = false;//***
        //                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                        model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                        model.my_process_code = temp.Status_ID;
        //                    }
        //                    else
        //                    {
        //                        model.canEscalate = false;//***
        //                        model.escalation_No = 0;//***
        //                    }
        //                    model.my_role = role.Role_Desc;//***
        //                    model.my_role_code = role.Role_ID;//***
        //                    #endregion
        //                }
        //                else
        //                {
        //                    #region
        //                    var appNo = Convert.ToInt32(data.Approval_No);
        //                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                    if (log != null)
        //                    {
        //                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                        if (newRole != null)
        //                        {
        //                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                            if (temp != null)
        //                            {
        //                                if (temp.Edit_Option.Trim() == "R")
        //                                {
        //                                    model.can_edit = false;
        //                                }
        //                                else
        //                                {
        //                                    model.can_edit = true;
        //                                }
        //                                model.can_distribute = temp.DistributionList_ID.ToString();
        //                                if (temp.Action_Flag == escalationFlag)
        //                                    model.canEscalate = true;//***
        //                                else
        //                                    model.canEscalate = false;
        //                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                model.my_process_code = temp.Status_ID;
        //                            }
        //                            else
        //                            {
        //                                model.canEscalate = false;//***
        //                                model.escalation_No = 0;//***
        //                            }
        //                            model.my_role = newRole.Role_Desc;//***
        //                            model.my_role_code = newRole.Role_ID;//***
        //                        }
        //                    }
        //                    #endregion
        //                }
        //            }
        //            else // reuest coming from the delegate 
        //            {
        //                var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                if (role != null)
        //                {
        //                    #region 
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                    var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                    if (temp != null)
        //                    {
        //                        if (temp.Edit_Option == "R")
        //                        {
        //                            model.can_edit = false;
        //                        }
        //                        else
        //                        {
        //                            model.can_edit = true;
        //                        }
        //                        model.can_distribute = temp.DistributionList_ID.ToString();
        //                        if (temp.Action_Flag == escalationFlag)
        //                            model.canEscalate = true;//***
        //                        else
        //                            model.canEscalate = false;
        //                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                        model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                        model.my_process_code = temp.Status_ID;
        //                    }
        //                    else
        //                    {
        //                        model.canEscalate = false;
        //                        model.escalation_No = 0;
        //                    }
        //                    model.my_role = role.Role_Desc;
        //                    model.my_role_code = role.Role_ID;
        //                    #endregion
        //                }
        //                else
        //                {
        //                    #region 
        //                    var appNo = Convert.ToInt32(data.Approval_No);
        //                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                    if (log != null)
        //                    {
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                        if (newRole != null)
        //                        {
        //                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                            var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                            if (temp != null)
        //                            {
        //                                if (temp.Edit_Option == "R")
        //                                {
        //                                    model.can_edit = false;
        //                                }
        //                                else
        //                                {
        //                                    model.can_edit = true;
        //                                }
        //                                model.can_distribute = temp.DistributionList_ID.ToString();
        //                                if (temp.Action_Flag == escalationFlag)
        //                                    model.canEscalate = true;//***
        //                                else
        //                                    model.canEscalate = false;
        //                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                model.my_process_code = temp.Status_ID;
        //                            }
        //                            else
        //                            {
        //                                model.canEscalate = false;
        //                                model.escalation_No = 0;
        //                            }
        //                            model.my_role = role.Role_Desc;
        //                            model.my_role_code = role.Role_ID;
        //                        }
        //                    }
        //                    #endregion
        //                }
        //            }
        //            #endregion Check that the person have the edit provision
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 

        //        #endregion
        //        #region P054
        //        var _p054 = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        model.payment_mode = _p054.PaymentMode;
        //        if (_p054.PaymentMode == "C")
        //        {
        //            if (_p054.Cheque_Date != null)
        //            {
        //                try
        //                {
        //                    var stringDate = _p054.Cheque_Date.ToString();
        //                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //                    model.cheque_date_string = xx;
        //                }
        //                catch
        //                {
        //                    var stringDate = _p054.Cheque_Date.ToString();
        //                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //                    model.cheque_date_string = xx;
        //                }
        //            }
        //            model.payment_mode = _p054.PaymentMode;
        //            model.amount_sar = _p054.Amount_SAR;
        //            model.purpose_text = _p054.Purpose_Text;
        //            model.payable_to = _p054.Cheque_Payable;
        //            model.attachment_filepath = _p054.Attachment_Filepath;
        //        }
        //        else
        //        {
        //            model.amount_sar = _p054.Amount_SAR;
        //            model.from_bank = _p054.From_Bank;
        //            model.from_addreess = _p054.From_Address;
        //            model.from_account_no = _p054.From_AccountNo;
        //            model.to_beneficiary = _p054.To_Benificiary;
        //            model.to_bankname = _p054.To_BankName;
        //            model.to_address = _p054.To_Address;
        //            model.to_account_no = _p054.To_AccountNo;
        //            model.bank_attachment = _p054.Bank_Attachment;
        //            model.attachment_filepath = _p054.Attachment_Filepath;
        //            model.remark = _p054.Remark;
        //        }
        //        return RedirectToAction("View_P054", "Request", model);
        //        #endregion P054
        //        #endregion P054
        //    }
        //    //Basheer on 15 - 01 - 2020 for P015
        //    else if (data.tb_WFType.WF_ID == "P015")
        //    {
        //        #region P015
        //        model.request_empid = data.Employee_ID;
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            #region Check that the person have the edit provision 
        //            if (data.Approver_ID == data.OrgApprover_ID)
        //            {
        //                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                       //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                if (role != null)
        //                {
        //                    #region
        //                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                    if (temp != null)
        //                    {
        //                        if (temp.Edit_Option.Trim() == "R")
        //                        {
        //                            model.can_edit = false;
        //                        }
        //                        else
        //                        {
        //                            model.can_edit = true;
        //                        }
        //                        model.can_distribute = temp.DistributionList_ID.ToString();
        //                        if (temp.Action_Flag == escalationFlag)
        //                            model.canEscalate = true;//***
        //                        else
        //                            model.canEscalate = false;//***
        //                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                        model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                        model.level = Convert.ToInt32(temp.Sequence_NO);
        //                        model.my_process_code = temp.Status_ID;
        //                    }
        //                    else
        //                    {
        //                        model.canEscalate = false;//***
        //                        model.escalation_No = 0;//***
        //                    }
        //                    model.my_role = role.Role_Desc;//***
        //                    model.my_role_code = role.Role_ID;//***
        //                    #endregion
        //                }
        //                else
        //                {
        //                    #region
        //                    var appNo = Convert.ToInt32(data.Approval_No);
        //                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                    if (log != null)
        //                    {
        //                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                        if (newRole != null)
        //                        {
        //                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                            if (temp != null)
        //                            {
        //                                if (temp.Edit_Option.Trim() == "R")
        //                                {
        //                                    model.can_edit = false;
        //                                }
        //                                else
        //                                {
        //                                    model.can_edit = true;
        //                                }
        //                                model.can_distribute = temp.DistributionList_ID.ToString();
        //                                if (temp.Action_Flag == escalationFlag)
        //                                    model.canEscalate = true;//***
        //                                else
        //                                    model.canEscalate = false;
        //                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                model.level = Convert.ToInt32(temp.Sequence_NO); //Basheer for P015 to check if approver from dropdownlist or not
        //                                model.my_process_code = temp.Status_ID;
        //                            }
        //                            else
        //                            {
        //                                model.canEscalate = false;//***
        //                                model.escalation_No = 0;//***
        //                            }
        //                            model.my_role = newRole.Role_Desc;//***
        //                            model.my_role_code = newRole.Role_ID;//***
        //                        }
        //                    }
        //                    #endregion
        //                }
        //            }
        //            else // reuest coming from the delegate 
        //            {
        //                var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                if (role != null)
        //                {
        //                    #region 
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                    var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                    if (temp != null)
        //                    {
        //                        if (temp.Edit_Option == "R")
        //                        {
        //                            model.can_edit = false;
        //                        }
        //                        else
        //                        {
        //                            model.can_edit = true;
        //                        }
        //                        model.can_distribute = temp.DistributionList_ID.ToString();
        //                        if (temp.Action_Flag == escalationFlag)
        //                            model.canEscalate = true;//***
        //                        else
        //                            model.canEscalate = false;
        //                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                        model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                        model.level = Convert.ToInt32(temp.Sequence_NO);
        //                        model.my_process_code = temp.Status_ID;
        //                    }
        //                    else
        //                    {
        //                        model.canEscalate = false;
        //                        model.escalation_No = 0;
        //                    }
        //                    model.my_role = role.Role_Desc;
        //                    model.my_role_code = role.Role_ID;
        //                    #endregion
        //                }
        //                else
        //                {
        //                    #region 
        //                    var appNo = Convert.ToInt32(data.Approval_No);
        //                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                    if (log != null)
        //                    {
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                        if (newRole != null)
        //                        {
        //                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                            var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                            if (temp != null)
        //                            {
        //                                if (temp.Edit_Option == "R")
        //                                {
        //                                    model.can_edit = false;
        //                                }
        //                                else
        //                                {
        //                                    model.can_edit = true;
        //                                }
        //                                model.can_distribute = temp.DistributionList_ID.ToString();
        //                                if (temp.Action_Flag == escalationFlag)
        //                                    model.canEscalate = true;//***
        //                                else
        //                                    model.canEscalate = false;
        //                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                model.my_process_code = temp.Status_ID;
        //                                model.level = Convert.ToInt32(temp.Sequence_NO);
        //                            }
        //                            else
        //                            {
        //                                model.canEscalate = false;
        //                                model.escalation_No = 0;
        //                            }
        //                            model.my_role = role.Role_Desc;
        //                            model.my_role_code = role.Role_ID;
        //                        }
        //                    }
        //                    #endregion
        //                }
        //            }
        //            #endregion Check that the person have the edit provision
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        model.country_id = emp.tb_Location.tb_Country.Id;
        //        #region P015
        //        var _p015 = _entity.tb_PP_TrainingorRecruitmentPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        model.payment_mode = _p015.PaymentMode;
        //        if (_p015.PaymentMode == "C")
        //        {
        //            if (_p015.Cheque_Date != null)
        //            {
        //                try
        //                {
        //                    var stringDate = _p015.Cheque_Date.ToString();
        //                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //                    model.cheque_date_string = xx;
        //                }
        //                catch
        //                {
        //                    var stringDate = _p015.Cheque_Date.ToString();
        //                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //                    model.cheque_date_string = xx;
        //                }
        //            }
        //            model.payment_mode = _p015.PaymentMode;
        //            model.amount_sar = _p015.Amount_SAR;
        //            model.purpose_text = _p015.Purpose_Text;
        //            model.payable_to = _p015.Cheque_Payable;
        //            model.attachment_filepath = _p015.Attachment_Filepath;
        //            model.traname = _p015.traname;
        //            model.blcontrollerid = _p015.blcontrollerid;
        //            model.taamountype = _p015.currencytype;
        //            model.chargecostcenter = _p015.chargecostcenter;
        //            model.chargeaccount = _p015.chargeaccount;

        //        }
        //        else
        //        {
        //            model.amount_sar = _p015.Amount_SAR;
        //            model.from_bank = _p015.From_Bank;
        //            model.from_addreess = _p015.From_Address;
        //            model.from_account_no = _p015.From_AccountNo;
        //            model.to_beneficiary = _p015.To_Benificiary;
        //            model.to_bankname = _p015.To_BankName;
        //            model.to_address = _p015.To_Address;
        //            model.to_account_no = _p015.To_AccountNo;
        //            model.bank_attachment = _p015.Bank_Attachment;
        //            model.attachment_filepath = _p015.Attachment_Filepath;
        //            model.remark = _p015.Remark;
        //            model.traname = _p015.traname;
        //            model.blcontrollerid = _p015.blcontrollerid;
        //            model.taamountype = _p015.currencytype;
        //            model.chargecostcenter = _p015.chargecostcenter;
        //            model.chargeaccount = _p015.chargeaccount;

        //        }
        //        return RedirectToAction("View_P015", "Request", model);
        //        #endregion P015
        //        #endregion P015
        //    }
        //    else if (data.tb_WFType.WF_ID == "P099") // Nimmi 03-02-2020
        //    {
        //        #region P099
        //        model.template_id = data.WFTemplate_ID ?? 0;
        //        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
        //        model.req_id_only = data.Request_ID;
        //        var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
        //        var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
        //        var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
        //        //var business_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.BusinessLine_Id && x.IsActive == true).FirstOrDefault();
        //        var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
        //        //var wfType = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault();
        //        //var application = _entity.tb_Application.Where(x => x.Application_Code == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //var domain = _entity.tb_Domain.Where(x => x.Domain_ID == application.DomainId && x.IsActive == true).FirstOrDefault();
        //        var application = data.tb_Application;
        //        var domain = application.tb_Domain;
        //        var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //        var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();

        //        if (splitData[2] != "ForwardView") // This coondition checking for the request forwarder for view 
        //        {
        //            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
        //            {
        //                model.can_edit = false;
        //                model.canEscalate = false;
        //                model.escalation_No = 0;
        //            }
        //            else
        //            {
        //                #region Check that the person have the edit provision 
        //                if (data.Approver_ID == data.OrgApprover_ID)
        //                {
        //                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                           //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region
        //                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option.Trim() == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;//***
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;//***
        //                            model.escalation_No = 0;//***
        //                        }
        //                        model.my_role = role.Role_Desc;//***
        //                        model.my_role_code = role.Role_ID;//***
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option.Trim() == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;//***
        //                                    model.escalation_No = 0;//***
        //                                }
        //                                model.my_role = newRole.Role_Desc;//***
        //                                model.my_role_code = newRole.Role_ID;//***
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                else // reuest coming from the delegate 
        //                {
        //                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
        //                    if (role != null)
        //                    {
        //                        #region 
        //                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                        if (temp != null)
        //                        {
        //                            if (temp.Edit_Option == "R")
        //                            {
        //                                model.can_edit = false;
        //                            }
        //                            else
        //                            {
        //                                model.can_edit = true;
        //                            }
        //                            model.can_distribute = temp.DistributionList_ID.ToString();
        //                            if (temp.Action_Flag == escalationFlag)
        //                                model.canEscalate = true;//***
        //                            else
        //                                model.canEscalate = false;
        //                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                            model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                            model.my_process_code = temp.Status_ID;
        //                        }
        //                        else
        //                        {
        //                            model.canEscalate = false;
        //                            model.escalation_No = 0;
        //                        }
        //                        model.my_role = role.Role_Desc;
        //                        model.my_role_code = role.Role_ID;
        //                        #endregion
        //                    }
        //                    else
        //                    {
        //                        #region 
        //                        var appNo = Convert.ToInt32(data.Approval_No);
        //                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
        //                        if (log != null)
        //                        {
        //                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
        //                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
        //                            if (newRole != null)
        //                            {
        //                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
        //                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
        //                                if (temp != null)
        //                                {
        //                                    if (temp.Edit_Option == "R")
        //                                    {
        //                                        model.can_edit = false;
        //                                    }
        //                                    else
        //                                    {
        //                                        model.can_edit = true;
        //                                    }
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();
        //                                    if (temp.Action_Flag == escalationFlag)
        //                                        model.canEscalate = true;//***
        //                                    else
        //                                        model.canEscalate = false;
        //                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
        //                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
        //                                    model.my_process_code = temp.Status_ID;
        //                                }
        //                                else
        //                                {
        //                                    model.canEscalate = false;
        //                                    model.escalation_No = 0;
        //                                }
        //                                model.my_role = role.Role_Desc;
        //                                model.my_role_code = role.Role_ID;
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                }
        //                #endregion Check that the person have the edit provision
        //            }
        //        }
        //        if (data.Status_ID == "HLD")
        //            model.is_hold = true;
        //        else
        //            model.is_hold = false;
        //        model.request_profile = profile.Profile_ID;
        //        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
        //        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
        //        model.application = application.Application_Name;
        //        model.domain = domain.Domain_Name;
        //        model.emp_name = emp.Emp_Name;
        //        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
        //        model.local_id = data.Employee_ID;
        //        model.company = company == null ? "" : company.Company_Name;
        //        model.job_tittle = job.Job_tittle;
        //        model.department = department.Department_Name;
        //        model.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
        //        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
        //        model.mobile_phone = emp.Mobile_No;
        //        model.application_id = data.Application_ID.ToString();
        //        model.wf_type = data.tb_WFType.WF_ID;
        //        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
        //        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BK1"))
        //        {
        //            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
        //        }
        //        #region This coondition checking for the request forwarder for view 
        //        //if (splitData[2] != "ForwardView")//This coondition checking for the request forwarder for view 
        //        //{
        //        //    #region Checking Escalation Provision
        //        //    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;
        //        //    if (data.Approver_ID == data.OrgApprover_ID)
        //        //    {
        //        //        var myRole = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //        var myTemplate = _entity.tb_WF_Template.Where(x => x.Role_ID == myRole.Role_ID && x.WF_ID == data.WF_ID && x.Action_Flag == escalationFlag).FirstOrDefault();
        //        //        if (myTemplate != null)
        //        //        {
        //        //            model.canEscalate = true;
        //        //            model.escalation_No = Convert.ToInt32(myTemplate.Sequence_NO);
        //        //            model.can_distribute = myTemplate.DistributionList_ID;
        //        //        }
        //        //        else
        //        //        {
        //        //            model.canEscalate = false;
        //        //            model.escalation_No = 0;
        //        //        }
        //        //        model.my_role = myRole.Role_Desc;
        //        //        model.my_role_code = myRole.Role_ID;
        //        //    }
        //        //    else
        //        //    {
        //        //        var myRole = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
        //        //        var myTemplate = _entity.tb_WF_Template.Where(x => x.Role_ID == myRole.Role_ID && x.WF_ID == data.WF_ID && x.Action_Flag == escalationFlag).FirstOrDefault();
        //        //        if (myTemplate != null)
        //        //        {
        //        //            model.canEscalate = true;
        //        //            model.escalation_No = Convert.ToInt32(myTemplate.Sequence_NO);
        //        //            model.can_distribute = myTemplate.DistributionList_ID;
        //        //        }
        //        //        else
        //        //        {
        //        //            model.canEscalate = false;
        //        //            model.escalation_No = 0;
        //        //        }
        //        //        model.my_role = myRole.Role_Desc;
        //        //        model.my_role_code = myRole.Role_ID;
        //        //    }
        //        //    #endregion Checking Escalation Provision
        //        //}
        //        #endregion
        //        #region P099
        //        var _p099 = _entity.tb_PP_CarLoanPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
        //        model.payment_mode = _p099.PaymentMode;
        //        if (_p099.PaymentMode == "C")
        //        {
        //            if (_p099.Cheque_Date != null)
        //            {
        //                try
        //                {
        //                    var stringDate = _p099.Cheque_Date.ToString();
        //                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //                    model.cheque_date_string = xx;
        //                }
        //                catch
        //                {
        //                    var stringDate = _p099.Cheque_Date.ToString();
        //                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
        //                    model.cheque_date_string = xx;
        //                }
        //            }
        //            model.payment_mode = _p099.PaymentMode;
        //            model.amount_sar = _p099.Amount_SAR;
        //            model.purpose_text = _p099.Purpose_Text;
        //            model.payable_to = _p099.Cheque_Payable;
        //            model.carloanrequest_number = _p099.Carloan_Request_No;
        //            model.attachment_filepath = _p099.Attachment_Filepath;
        //        }
        //        else
        //        {
        //            model.amount_sar = _p099.Amount_SAR;
        //            model.from_bank = _p099.From_Bank;
        //            model.from_addreess = _p099.From_Address;
        //            model.from_account_no = _p099.From_AccountNo;
        //            model.to_beneficiary = _p099.To_Benificiary;
        //            model.to_bankname = _p099.To_BankName;
        //            model.to_address = _p099.To_Address;
        //            model.to_account_no = _p099.To_AccountNo;
        //            model.bank_attachment = _p099.Bank_Attachment;
        //            model.carloanrequest_number = _p099.Carloan_Request_No;
        //            model.attachment_filepath = _p099.Attachment_Filepath;
        //            model.remark = _p099.Remark;
        //        }
        //        return RedirectToAction("View_P099", "Request", model);
        //        #endregion P099
        //        #endregion P099
        //    }

        //    else
        //    {
        //        return View(model);
        //    }
        //}

        // VERSION  0.0.6 ARCHANA SRISHTI  12-02-2020  **********************************************************************************
        public ActionResult DetailedRequest(string id)
        {
            #region Encryption 
            //-------------------------------------
            var encryptData = "";
            StringBuilder inSb = new StringBuilder(id);
            StringBuilder outSb = new StringBuilder(id.Length);
            char c;
            for (int i = 0; i < id.Length; i++)
            {
                c = inSb[i];
                c = (char)(c ^ 2020);
                outSb.Append(c);
            }
            encryptData = outSb.ToString();
            //---------------------------------------
            #endregion

            DetailedViewModel model = new DetailedViewModel();
            string[] splitData = encryptData.Split('~');


            if (splitData.Count() == 1)
            {
                splitData = null;// 25-02-2020 ARCHANA SRISHTI 
                encryptData = "";
                encryptData = DecryptString(id);

                splitData = encryptData.Split('|');
                if (splitData.Count() == 1)
                {
                    splitData = id.Split('~');
                    //model.data1 = Convert.ToInt32(splitData[0]); //basheer on 28-05-2020
                    model.data1 = splitData[0];
                    model.data2 = splitData[1];
                    model.data3 = splitData[2];
                    model.data4 = splitData[3];
                    model.data5 = splitData[4];
                }
                else
                {
                    //model.data1 = Convert.ToInt32(splitData[0]);//basheer on 28-05-2020
                    model.data1 = splitData[0];
                    model.data2 = splitData[1];
                    model.data3 = splitData[2];
                    model.data4 = splitData[3];
                    model.data5 = splitData[4];
                }
            }
            else
            {
                //model.data1 = Convert.ToInt32(splitData[0]);//basheer on 28-05-2020
                model.data1 = splitData[0];
                model.data2 = splitData[1];
                model.data3 = splitData[2];
                model.data4 = splitData[3];
                model.data5 = splitData[4];
            }
            if (model.data3 == "ForwardView" || model.data3 == "RefreshView") //Basheer on 14-03-2020 for refresh view after approve or another actions
            {
                string empLocalId = splitData[5];
                var EMP = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == empLocalId && x.IsActive == true).FirstOrDefault();
                if (EMP != null)
                {
                    model.data6 = EMP.ADAccount;
                    //model.data2 = EMP.ADAccount;
                    model.data2 = empLocalId;
                    TempData["Emp_Id"] = empLocalId;
                }
                else
                {
                    model.data6 = empLocalId;
                    model.data2 = empLocalId;
                    TempData["Emp_Id"] = empLocalId;
                }
            }
            else
            {
                model.data6 = splitData[5];
                model.data2 = splitData[1];
                // model.data2 = splitData[5];
                TempData["Emp_Id"] = splitData[1];
            }
            return View(model);
        }
        public PartialViewResult DetailedViewOfRequests(DetailedViewModel requestData)
        {
            WaitingRequestDetails model = new WaitingRequestDetails();
            try
            {
                var currentAD = Convert.ToString(Session["adAccount"]);
                if (currentAD == null && currentAD == string.Empty)
                {
                    var username = User.Identity.Name;
                    string[] addata = username.Split('\\');
                    currentAD = addata[1];
                }
                //Basheer on 28-05-2020 for roleid for ta requests
                string[] commondata = requestData.data1.Split('|');
                if (commondata.Count() > 1)
                {
                    model.taroleid = commondata[1];
                    model.req_id = Convert.ToInt32(commondata[0]);
                }
                else
                {
                    model.req_id = Convert.ToInt32(requestData.data1);
                }
                model.approver_id = requestData.data2;
                model.my_Process_type = requestData.data3;
                model.dataview_id = requestData.data5;
                model.ad_account = requestData.data6;

                if (model.approver_id != "0")
                {
                    TempData["Emp_Id"] = model.approver_id;
                }

                //if (model.my_Process_type == "ForwardView") // 17-02-2020 Archana 
                //{
                //var username = User.Identity.Name;
                //string[] addata = username.Split('\\');
                //model.ad_account = addata[1];
                //}



                var data = _entity.tb_Request_Hdr.Where(x => x.Id == model.req_id).FirstOrDefault();
                model.creator_id = data.Creater_ID;//Basheer on 24-03-2020 for check creatorid
                model.checkstatus = data.Status_ID;
                //if (model.ad_account == currentAD || model.ad_account.Trim() == "Distribution") //17-02-2020 Archana Commended these section 
                if (model.ad_account == currentAD || model.ad_account.Trim() == "Distribution" || (requestData.data4 == "MyRequest" && model.approver_id == data.Employee_ID))//17-02-2020 Archana 
                {
                    var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
                    var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
                    var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
                    var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
                    var application = data.tb_Application;
                    var domain = application.tb_Domain;
                    var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                    var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();
                    var businessline = _entity.tb_BusinessLine.Where(x => x.BL_Id == emp.Businessline_Id).FirstOrDefault();// 19-02-2020 II ARCHANA SRISHTI 

                    #region The user have the permission for access the request 
                    if (data.tb_WFType.WF_ID == "P055") // ARCHANA SRISHTI
                    {
                        #region P055
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)//commented by basheer on 01.07.2020
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P055
                        var _p055 = _entity.tb_PP_HousingAllowance.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p055.PaymentMode;
                        if (_p055.PaymentMode == "C")
                        {
                            if (_p055.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p055.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p055.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _p055.PaymentMode;
                            model.amount_sar = _p055.Amount_SAR;
                            model.purpose_text = _p055.Purpose_Text;
                            model.remark = _p055.Remark;
                            model.payable_to = _p055.Cheque_Payable;
                            model.attachment_filepath = _p055.Attachment_Filepath;
                        }
                        else
                        {
                            model.amount_sar = _p055.Amount_SAR;
                            model.from_bank = _p055.From_Bank;
                            model.from_addreess = _p055.From_Address;
                            model.from_account_no = _p055.From_AccountNo;
                            model.to_beneficiary = _p055.To_Benificiary;
                            model.to_bankname = _p055.To_BankName;
                            model.to_address = _p055.To_Address;
                            model.to_account_no = _p055.To_AccountNo;
                            model.to_iban = _p055.To_IBAN;
                            model.bank_attachment = _p055.Bank_Attachment;
                            model.attachment_filepath = _p055.Attachment_Filepath;
                            model.purpose_text = _p055.Purpose_Text;
                            model.remark = _p055.Remark;
                        }
                        return PartialView("~/Views/Request/View_P055.cshtml", model);
                        #endregion P055
                        #endregion P055
                    }
                    else if (data.tb_WFType.WF_ID == "P009")  // ARCHANA SRISHTI 
                    {
                        #region P009
                        var model1 = new HRPaymentrequest();
                        model1.creator_id = data.Creater_ID;//Basheer on 24-03-2020 for check creatorid
                        model1.ad_account = model.ad_account;
                        model1.dataview_id = model.dataview_id;
                        model1.req_id = Convert.ToInt32(model.req_id);
                        model1.approver_id = model.approver_id;
                        model1.my_Process_type = model.my_Process_type;
                        model1.template_id = data.WFTemplate_ID ?? 0;
                        model1.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model1.req_id_only = data.Request_ID;
                        model1.checkstatus = data.Status_ID; //to check request is back to initiator or not on 04-02-2020

                        model1.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model1.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model1.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        if (model.my_Process_type != "ForwardView" || model.my_Process_type != "RefreshView")
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID) basheer on 01.07.2020
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***                                                                                               //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model1.can_edit = false;
                                        }
                                        else
                                        {
                                            model1.can_edit = true;
                                        }
                                        model1.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model1.canEscalate = true;//***
                                        else
                                            model1.canEscalate = false;
                                        model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model1.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model1.level = Convert.ToInt32(temp.Sequence_NO);
                                        model1.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model1.canEscalate = false;//***
                                        model1.escalation_No = 0;//***
                                    }
                                    model1.my_role = role.Role_Desc;//***
                                    model1.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model1.can_edit = false;
                                                }
                                                else
                                                {
                                                    model1.can_edit = true;
                                                }
                                                model1.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model1.canEscalate = true;//***
                                                else
                                                    model1.canEscalate = false;
                                                model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model1.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model1.level = Convert.ToInt32(temp.Sequence_NO);
                                                model1.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model1.canEscalate = false;//***
                                                model1.escalation_No = 0;//***
                                            }
                                            model1.my_role = newRole.Role_Desc;//***
                                            model1.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model1.is_hold = true;
                        else
                            model1.is_hold = false;
                        model1.request_profile = profile.Profile_ID;
                        model1.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model1.country_code = emp.tb_Location.tb_Country.Country_Code;
                        model1.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model1.application = application.Application_Name;
                        model1.domain = domain.Domain_Name;
                        model1.emp_name = emp.Emp_Name;
                        model1.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model1.local_id = data.Employee_ID;
                        model1.company = company == null ? "" : company.Company_Name;
                        model1.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model1.department = department.Department_Name;
                        else
                            model1.department = "";
                        if (businessline != null)
                        {
                            model1.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model1.business_line = "";
                        }
                        model1.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model1.mobile_phone = emp.Mobile_No;
                        model1.application_id = data.Application_ID.ToString();
                        model1.wf_type = data.tb_WFType.WF_ID;
                        model1.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model1.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region RequestData
                        var _p009 = _entity.tb_PP_HR_RelatedPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        if (_p009.Cheque_Date != null)
                        {
                            try
                            {
                                var stringDate = _p009.Cheque_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model1.cheque_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p009.Cheque_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model1.cheque_date_string = xx;
                            }
                        }
                        model1.table_Id = _p009.Id;
                        model1.RequestId = _p009.RequestId;
                        model1.PaymentMode = _p009.PaymentMode;
                        model1.Amount_SAR = _p009.Amount_SAR;
                        model1.Account_No = _p009.Account_No;
                        model1.PurposeText = _p009.PurposeText;
                        model1.supplier = _p009.supplier;
                        model1.Payable_To = _p009.Payable_To;
                        model1.File_Attachment = _p009.File_Attachment;
                        model1.Remark = _p009.Remark;
                        model1.From_BankName = _p009.From_BankName;
                        model1.From_Address = _p009.From_Address;
                        model1.From_Account_No = _p009.From_Account_No;
                        model1.To_Benificiary = _p009.To_Benificiary;
                        model1.To_BankName = _p009.To_BankName;
                        model1.To_Address = _p009.To_Address;
                        model1.To_Account_No = _p009.To_Account_No;
                        model1.To_IBAN = _p009.To_IBAN;
                        model1.currenctType = _p009.Currency ?? ""; // 28-02-2020 ARCHANA K V SRISHTI 
                        return PartialView("~/Views/Request/View_P009.cshtml", model1);
                        #endregion RequestData
                        #endregion P009
                    }
                    else if (data.tb_WFType.WF_ID == "P010") // ARCHANA SRISHTI 
                    {
                        #region P010
                        var model1 = new HRPaymentrequest();
                        model1.creator_id = data.Creater_ID;//Basheer on 24-03-2020 for check creatorid
                        model1.ad_account = model.ad_account;
                        model1.dataview_id = model.dataview_id;
                        model1.req_id = Convert.ToInt32(model.req_id);
                        model1.approver_id = model.approver_id;
                        model1.my_Process_type = model.my_Process_type;
                        model1.template_id = data.WFTemplate_ID ?? 0;
                        model1.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model1.req_id_only = data.Request_ID;
                        model1.checkstatus = data.Status_ID; //to check request is back to initiator or not on 04-02-2020

                        model1.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model1.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model1.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        if (model.my_Process_type != "ForwardView")
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model1.can_edit = false;
                                        }
                                        else
                                        {
                                            model1.can_edit = true;
                                        }
                                        model1.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model1.canEscalate = true;//***
                                        else
                                            model1.canEscalate = false;
                                        model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model1.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model1.level = Convert.ToInt32(temp.Sequence_NO);
                                        model1.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model1.canEscalate = false;//***
                                        model1.escalation_No = 0;//***
                                    }
                                    model1.my_role = role.Role_Desc;//***
                                    model1.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model1.can_edit = false;
                                                }
                                                else
                                                {
                                                    model1.can_edit = true;
                                                }
                                                model1.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model1.canEscalate = true;//***
                                                else
                                                    model1.canEscalate = false;
                                                model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model1.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model1.level = Convert.ToInt32(temp.Sequence_NO);
                                                model1.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model1.canEscalate = false;//***
                                                model1.escalation_No = 0;//***
                                            }
                                            model1.my_role = newRole.Role_Desc;//***
                                            model1.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision

                            }
                        }
                        if (data.Status_ID == "HLD")
                            model1.is_hold = true;
                        else
                            model1.is_hold = false;
                        model1.request_profile = profile.Profile_ID;
                        model1.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model1.country_code = emp.tb_Location.tb_Country.Country_Code;
                        model1.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model1.application = data.tb_WFType.tb_Application.Application_Name;
                        model1.domain = domain.Domain_Name;
                        model1.emp_name = emp.Emp_Name;
                        model1.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model1.local_id = data.Employee_ID;
                        model1.company = company == null ? "" : company.Company_Name;
                        model1.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model1.department = department.Department_Name;
                        else
                            model1.department = "";
                        if (businessline != null)
                        {
                            model1.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model1.business_line = "";
                        }
                        model1.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model1.mobile_phone = emp.Mobile_No;
                        model1.application_id = data.Application_ID.ToString();
                        model1.wf_type = data.tb_WFType.WF_ID;
                        model1.title = data.tb_WFType.tb_Application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model1.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region RequestData
                        var _p010 = _entity.tb_PP_NonHR_RelatedPayment.Where(x => x.RequestId == model1.req_id_only && x.IsActive == true).FirstOrDefault();
                        model1.contract_local_no = _p010.Contract_Local_No;
                        model1.back_invoice_no = _p010.BCharge_Invoice;
                        model1.project = _p010.Project;
                        model1.year_booked = _p010.Year_booked;
                        model1.customer = _p010.Customer;
                        if (_p010.Cheque_Date != null)
                        {
                            #region 
                            try
                            {
                                var stringDate = _p010.Cheque_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model1.cheque_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p010.Cheque_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model1.cheque_date_string = xx;
                            }
                            #endregion
                        }
                        model1.table_Id = _p010.Id;
                        model1.RequestId = _p010.RequestId;
                        model1.PaymentMode = _p010.PaymentMode;
                        model1.Amount_SAR = _p010.Amount_SAR ?? 0;
                        model1.Account_No = _p010.Account_No;
                        model1.PurposeText = _p010.Purpose_Text;
                        model1.supplier = _p010.Supplier;
                        model1.Payable_To = _p010.Payable_To;
                        model1.File_Attachment = _p010.File_Attachment;
                        model1.Remark = _p010.Remark;
                        model1.From_BankName = _p010.From_BankName;
                        model1.From_Address = _p010.From_Address;
                        model1.From_Account_No = _p010.From_Account_No;
                        model1.To_Benificiary = _p010.To_Benificiary;
                        model1.To_BankName = _p010.To_BankName;
                        model1.To_Address = _p010.To_Address;
                        model1.To_Account_No = _p010.To_Account_No;
                        model1.To_IBAN = _p010.To_IBAN;
                        model1.currenctType = _p010.Currency ?? ""; // 28-02-2020 ARCHANA K V SRISHTI 
                        return PartialView("~/Views/Request/View_P010.cshtml", model1);
                        #endregion RequestData
                        #endregion P010
                    }
                    else if (data.tb_WFType.WF_ID == "P056") // Nimmi 16-01-2020
                    {
                        #region P056
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;

                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                       //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P056
                        var _p056 = _entity.tb_PP_RelocationAllowance.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p056.PaymentMode;
                        if (_p056.PaymentMode == "C")
                        {
                            if (_p056.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p056.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p056.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _p056.PaymentMode;
                            model.amount_sar = _p056.Amount_SAR;
                            model.purpose_text = _p056.Purpose_Text;
                            model.remark = _p056.Remark;
                            model.payable_to = _p056.Cheque_Payable;
                            model.attachment_filepath = _p056.Attachment_Filepath;
                        }
                        else
                        {
                            model.amount_sar = _p056.Amount_SAR;
                            model.from_bank = _p056.From_Bank;
                            model.from_addreess = _p056.From_Address;
                            model.from_account_no = _p056.From_AccountNo;
                            model.to_beneficiary = _p056.To_Benificiary;
                            model.to_bankname = _p056.To_BankName;
                            model.to_address = _p056.To_Address;
                            model.to_account_no = _p056.To_AccountNo;
                            model.to_iban = _p056.To_IBAN;
                            model.bank_attachment = _p056.Bank_Attachment;
                            model.attachment_filepath = _p056.Attachment_Filepath;
                            model.purpose_text = _p056.Purpose_Text;
                            model.remark = _p056.Remark;
                        }
                        return PartialView("~/Views/Request/View_P056.cshtml", model);
                        #endregion P056
                        #endregion P056
                    }
                    else if (data.tb_WFType.WF_ID == "P050") //Basheer on 06 - 01 - 2019 for P050
                    {
                        #region P050
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;

                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                       //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P050
                        var _p050 = _entity.tb_PP_SettlingAllowancePayment.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p050.PaymentMode;
                        if (_p050.PaymentMode == "C")
                        {
                            if (_p050.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p050.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p050.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _p050.PaymentMode;
                            model.amount_sar = _p050.Amount_SAR;
                            model.purpose_text = _p050.Purpose_Text;
                            model.remark = _p050.Remark;
                            model.payable_to = _p050.Cheque_Payable;
                            model.attachment_filepath = _p050.Attachment_Filepath;
                        }
                        else
                        {
                            model.amount_sar = _p050.Amount_SAR;
                            model.from_bank = _p050.From_Bank;
                            model.from_addreess = _p050.From_Address;
                            model.from_account_no = _p050.From_AccountNo;
                            model.to_beneficiary = _p050.To_Benificiary;
                            model.to_bankname = _p050.To_BankName;
                            model.to_address = _p050.To_Address;
                            model.to_account_no = _p050.To_AccountNo;
                            model.to_iban = _p050.To_IBAN;
                            model.bank_attachment = _p050.Bank_Attachment;
                            model.attachment_filepath = _p050.Attachment_Filepath;
                            model.purpose_text = _p050.Purpose_Text;
                            model.remark = _p050.Remark;
                        }
                        return PartialView("~/Views/Request/View_P050.cshtml", model);
                        #endregion P050
                        #endregion P050
                    }
                    else if (data.tb_WFType.WF_ID == "P011") //13-01-2020 Sibi Start
                    {
                        #region P011
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;

                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region This coondition checking for the request forwarder for view 

                        #endregion
                        #region P011
                        var _P011 = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                        //this to Starting...............
                        IntroductionCertificateModel mo = new IntroductionCertificateModel();
                        if (_P011 != null)
                        {

                            mo.RequestId = _P011.RequestId;
                            mo.LocalEmplyee_ID = _P011.LocalEmplyee_ID;
                            mo.Iqama_Number = _P011.Iqama_Number;
                            mo.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P011.Location_Code).Select(x => x.Location).FirstOrDefault();
                            mo.Iqama_Identification = _P011.Iqama_Identification;
                            mo.Attachment_Filepath = _P011.Attachment_Filepath;
                            mo.TimeStamp = _P011.TimeStamp;

                            if (_P011.Certificate_with_Salary == 1)
                            {
                                mo.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P011.Certificate_with_Salary == 0)
                            {
                                mo.Certificate_with_Salary_String = BooleanValue.No.ToString();
                            }

                            if (_P011.Chamber_Of_Commerce_Stamp == 1)
                            {
                                mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P011.Chamber_Of_Commerce_Stamp == 0)
                            {
                                mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
                            }

                            if (_P011.Ministry_Of_Foreign_Affairs == 1)
                            {
                                mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P011.Ministry_Of_Foreign_Affairs == 0)
                            {
                                mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
                            }
                            model.IntroductionCertificateModel = mo;
                            //Session["IntroductionCertificateModel"] = mo;
                        }

                        return PartialView("~/Views/Request/View_P011.cshtml", model);
                        #endregion
                        #endregion
                    }
                    else if (data.tb_WFType.WF_ID == "P051") // Sibi 03-01-2020
                    {
                        #region P051
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;

                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                       //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region This coondition checking for the request forwarder for view 

                        #endregion
                        #region P051
                        var _P051 = _entity.tb_PP_SalaryAdvance_NewArrival.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                        model.payment_mode = _P051.PaymentMode;
                        if (_P051.PaymentMode == "C")
                        {
                            if (_P051.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _P051.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _P051.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _P051.PaymentMode;
                            model.amount_sar = _P051.Amount_SAR;
                            model.purpose_text = _P051.Purpose_Text;
                            model.remark = _P051.Remark;
                            model.payable_to = _P051.Cheque_Payable;
                            model.attachment_filepath = _P051.Attachment_Filepath;
                        }
                        else
                        {
                            model.amount_sar = _P051.Amount_SAR;
                            model.from_bank = _P051.From_Bank;
                            model.from_addreess = _P051.From_Address;
                            model.from_account_no = _P051.From_AccountNo;
                            model.to_beneficiary = _P051.To_Benificiary;
                            model.to_bankname = _P051.To_BankName;
                            model.to_address = _P051.To_Address;
                            model.to_account_no = _P051.To_AccountNo;
                            model.to_iban = _P051.To_IBAN;
                            model.bank_attachment = _P051.Bank_Attachment;
                            model.attachment_filepath = _P051.Attachment_Filepath;
                            model.purpose_text = _P051.Purpose_Text;
                            model.remark = _P051.Remark;
                        }
                        return PartialView("~/Views/Request/View_P051.cshtml", model);
                        #endregion P051
                        #endregion P051
                    }
                    // 18/05/2020 Alena Sics for EOSB Calculation
                    else if (data.tb_WFType.WF_ID == "P052")
                    {
                        #region P052
                        model.request_empid = data.Employee_ID;
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") // to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P052
                        var _p052 = _entity.tb_PP_EOSB_Calculation.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p052.PaymentMode;
                        if (_p052.PaymentMode == "C")
                        {
                            if (_p052.ChequeDate != null)
                            {
                                try
                                {
                                    var stringDate = _p052.ChequeDate.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p052.ChequeDate.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "C";
                            model.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
                            model.amount_sar = _p052.Amount_SAR;
                            model.payable_to = _p052.Cheque_Payable;
                            model.purpose_text = _p052.Purpose_Text;
                            model.attachment_filepath = _p052.Attachment_Filepath;
                            model.remark = _p052.Remark;
                        }
                        else
                        {
                            model.payment_mode = "B";
                            model.amount_sar = _p052.Amount_SAR;
                            model.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
                            model.from_bank = _p052.From_Bank;
                            model.from_addreess = _p052.From_Address;
                            model.from_account_no = _p052.From_AccountNo;
                            model.to_beneficiary = _p052.To_Beneficiary;
                            model.to_bankname = _p052.To_BankName;
                            model.to_address = _p052.To_Address;
                            model.to_account_no = _p052.To_AccountNo;
                            model.attachment_filepath = _p052.Attachment_Filepath;
                            model.remark = _p052.Remark;
                            model.to_iban = _p052.To_IBAN;
                            model.purpose_text = _p052.Purpose_Text;
                        }
                        return PartialView("~/Views/Request/View_P052.cshtml", model);
                    }
                    #endregion P052

                    #endregion P052  
                    else if (data.tb_WFType.WF_ID == "A008")  // 24/06/2020 ALENA FOR A008
                    {
                        #region A008
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region A008
                        var _A008 = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();                       
                        model.cost_center = Convert.ToString(_A008.Cost_Center);
                        model.emp_name = _A008.Employee_Name;
                        model.pickup_at = _A008.Pick_up;
                        model.date = Convert.ToString(_A008.Pickup_Date);
                        model.time = Convert.ToString(_A008.Pickup_Time);
                        model.remarks = _A008.Remarks;
                        // administration save
                        model.quantity = Convert.ToString(_A008.quantity);
                        model.Mobile_No = _A008.driver_mobile;
                        model.Employee_id = _A008.driver_emp_id;
                        model.drivername = Convert.ToString(_A008.driver_name);
                        model.carmodel = _A008.car_model;
                        //END-----------------------
                        if (_A008.Pickup_Date != null)
                        {
                            try
                            {
                                var stringDate = _A008.Pickup_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.date = xx;
                            }
                            catch
                            {
                                var stringDate = _A008.Pickup_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.date = xx;
                            }
                        }

                        return PartialView("~/Views/Request/View_A008.cshtml", model);
                        #endregion A008
                        #endregion A008
                    }

                    else if (data.tb_WFType.WF_ID == "A009")  // 01/07/2020 ALENA FOR A009
                    {
                        #region A008
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                if (data.Approver_ID == data.OrgApprover_ID)
                                {
                                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                else // reuest coming from the delegate 
                                {
                                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region 
                                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                        }
                                        else
                                        {
                                            model.canEscalate = false;
                                            model.escalation_No = 0;
                                        }
                                        model.my_role = role.Role_Desc;
                                        model.my_role_code = role.Role_ID;
                                        #endregion
                                    }
                                    else
                                    {
                                        #region 
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;
                                                    model.escalation_No = 0;
                                                }
                                                model.my_role = role.Role_Desc;
                                                model.my_role_code = role.Role_ID;
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region A009
                        var _A009 = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();

                        model.cost_center = Convert.ToString(_A009.Cost_Center);
                        model.emp_name = _A009.Employee_Name;
                        model.drop_at = _A009.Drop_at;
                        model.date = Convert.ToString(_A009.Drop_Date);
                        model.time = Convert.ToString(_A009.Drop_Time);
                        model.remarks = _A009.Remarks;
                        // administration save
                        model.quantity = Convert.ToString(_A009.quantity);
                        model.Mobile_No = _A009.driver_mobile;
                        model.Employee_id = _A009.driver_emp_id;
                        model.drivername = Convert.ToString(_A009.driver_name);
                        model.carmodel = _A009.car_model;
                        //END-----------------------
                        if (_A009.Drop_Date != null)
                        {
                            try
                            {
                                var stringDate = _A009.Drop_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.date = xx;
                            }
                            catch
                            {
                                var stringDate = _A009.Drop_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.date = xx;
                            }
                        }

                        return PartialView("~/Views/Request/View_A009.cshtml", model);
                        #endregion A009
                        #endregion A009
                    }

                    else if (data.tb_WFType.WF_ID == "IS05") // 05-03-2020 ARCHANA K V SRISHTI 
                    {
                        #region IS05
                        var model1 = new InfrastructureChange();
                        model1.ad_account = requestData.data6;
                        model1.dataview_id = requestData.data5;
                        model1.req_id = Convert.ToInt32(requestData.data1);
                        model1.approver_id = requestData.data2;
                        model1.my_Process_type = requestData.data3;
                        model1.template_id = data.WFTemplate_ID ?? 0;
                        model1.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model1.req_id_only = data.Request_ID;
                        model1.checkstatus = data.Status_ID;

                        if (model.my_Process_type != "ForwardView")
                        {
                            if (model.dataview_id == "0")
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model1.can_edit = false;
                                        }
                                        else
                                        {
                                            model1.can_edit = true;
                                        }
                                        model1.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model1.canEscalate = true;//***
                                        else
                                            model1.canEscalate = false;
                                        model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model1.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model1.level = Convert.ToInt32(temp.Sequence_NO);
                                        model1.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        var tem = data.tb_WF_Template;
                                        if (tem != null)
                                        {
                                            if (tem.Edit_Option.Trim() == "R")
                                            {
                                                model1.can_edit = false;
                                            }
                                            else
                                            {
                                                model1.can_edit = true;
                                            }
                                            model1.can_distribute = tem.DistributionList_ID.ToString();
                                            if (tem.Action_Flag == escalationFlag)
                                                model1.canEscalate = true;//***
                                            else
                                                model1.canEscalate = false;
                                            model1.escalation_No = Convert.ToInt32(tem.Sequence_NO);//***
                                            model1.can_distribute = tem.DistributionList_ID.ToString();//***
                                            model1.level = Convert.ToInt32(tem.Sequence_NO);
                                            model1.my_process_code = tem.Status_ID;
                                        }
                                        else
                                        {
                                            model1.canEscalate = false;//***
                                            model1.escalation_No = 0;//***
                                        }
                                    }
                                    model1.my_role = role.Role_Desc;//***
                                    model1.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model1.can_edit = false;
                                                }
                                                else
                                                {
                                                    model1.can_edit = true;
                                                }
                                                model1.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model1.canEscalate = true;//***
                                                else
                                                    model1.canEscalate = false;
                                                model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model1.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model1.level = Convert.ToInt32(temp.Sequence_NO);
                                                model1.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model1.canEscalate = false;//***
                                                model1.escalation_No = 0;//***
                                            }
                                            model1.my_role = newRole.Role_Desc;//***
                                            model1.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model1.is_hold = true;
                        else
                            model1.is_hold = false;
                        model1.request_profile = profile.Profile_ID;
                        model1.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model1.country_id = emp.tb_Location.tb_Country.Id;
                        model1.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model1.application = application.Application_Name;
                        model1.domain = domain.Domain_Name;
                        model1.emp_name = emp.Emp_Name;
                        model1.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model1.local_id = data.Employee_ID;
                        model1.company = company == null ? "" : company.Company_Name;
                        model1.job_tittle = job == null ? "" : job.Job_tittle;

                        //model1.department = department.Department_Name;
                        //model1.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;

                        if (department != null)
                            model1.department = department.Department_Name;
                        else
                            model1.department = "";
                        if (businessline != null)
                        {
                            model1.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model1.business_line = "";
                        }

                        model1.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model1.mobile_phone = emp.Mobile_No;
                        model1.application_id = data.Application_ID.ToString();
                        model1.wf_type = data.tb_WFType.WF_ID;
                        model1.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model1.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region RequestData
                        var _is05 = _entity.tb_IS_Infrastructure_Change.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        model1.change_summary = _is05.Change_Summary;
                        model1.detailed_description = _is05.Detailed_Description;
                        model1.clarification = Convert.ToInt32(_is05.Request_Clarification);
                        model1.proposed_plan = _is05.Proposed_Plan;
                        model1.business_impact = _is05.Impact_Analysis;
                        model1.fallback_options = _is05.Fallback_Options;
                        model1.positive_risk = _is05.Positive_Risk_Assessment;
                        model1.negative_risk = _is05.Negative_Risk_Assessment;
                        model1.file_path = _is05.FilePath;
                        model1.service_engineers_code = _is05.SE_LocalId ?? "";
                        if (_is05.SE_LocalId != null && _is05.SE_LocalId != string.Empty)
                        {
                            model1.service_engineer_name = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == _is05.SE_LocalId && x.IsActive == true).FirstOrDefault().Emp_Name;
                        }
                        model1.support_staff = _is05.Support_Staff;
                        model1.expected_completion = _is05.Expected_Completion ?? CurrentTime;
                        if (model1.expected_completion != null && model1.expected_completion.Year != 1)
                        {
                            model1.expected_completion_string = model1.expected_completion.ToShortDateString();
                        }
                        model1.implement_to = _is05.Implement_to ?? 0;
                        model1.remark = _is05.Remark;
                        model1.q_eng_file_path = _is05.Q_Eng_FilePath;
                        model1.q_eng_remark = _is05.Q_Eng_Remark;
                        model1.q_test_result = _is05.Q_Test_Result ?? 0;
                        model1.p_eng_file_path = _is05.P_Eng_FilePath;
                        model1.p_eng_remark = _is05.P_Eng_Remark;
                        model1.p_test_result = _is05.P_Test_Result ?? 0;
                        model1.post_remark = _is05.Post_Remark;
                        model1.imp_result = _is05.Imp_Result ?? 0;
                        return PartialView("~/Views/Request/View_IS05.cshtml", model1);
                        #endregion RequestData
                        #endregion IS05
                    }

                    else if (data.tb_WFType.WF_ID == "P012") //23-03-2020 Nimmi Mohan
                    {
                        #region P012
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;

                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region This coondition checking for the request forwarder for view 

                        #endregion
                        #region P012
                        var _P012 = _entity.tb_PP_Letter_To_RealEstate.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                        //this to Starting...............
                        LetterToRealEstateModel mo = new LetterToRealEstateModel();
                        if (_P012 != null)
                        {

                            mo.RequestId = _P012.RequestId;
                            mo.LocalEmplyee_ID = _P012.LocalEmplyee_ID;
                            mo.Iqama_Number = _P012.Iqama_Number;
                            mo.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P012.Location_Code).Select(x => x.Location).FirstOrDefault();
                            mo.Iqama_Identification = _P012.Iqama_Identification;
                            mo.Attachment_Filepath = _P012.Attachment_Filepath;
                            mo.TimeStamp = _P012.TimeStamp;

                            if (_P012.Certificate_with_Salary == 1)
                            {
                                mo.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P012.Certificate_with_Salary == 0)
                            {
                                mo.Certificate_with_Salary_String = BooleanValue.No.ToString();
                            }

                            if (_P012.Chamber_Of_Commerce_Stamp == 1)
                            {
                                mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P012.Chamber_Of_Commerce_Stamp == 0)
                            {
                                mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
                            }

                            if (_P012.Ministry_Of_Foreign_Affairs == 1)
                            {
                                mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P012.Ministry_Of_Foreign_Affairs == 0)
                            {
                                mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
                            }
                            model.LetterToRealEstateModel = mo;
                        }

                        return PartialView("~/Views/Request/View_P012.cshtml", model);
                        #endregion
                        #endregion
                    }

                    else if (data.tb_WFType.WF_ID == "P054") //24-03-2020 By Nimmi Mohan
                    {
                        #region P054
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") // to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P054
                        var _p054 = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p054.PaymentMode;
                        if (_p054.PaymentMode == "C")
                        {
                            if (_p054.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p054.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p054.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _p054.PaymentMode;
                            model.amount_sar = _p054.Amount_SAR;
                            model.purpose_text = _p054.Purpose_Text;
                            model.remark = _p054.Remark;
                            model.payable_to = _p054.Cheque_Payable;
                            model.attachment_filepath = _p054.Attachment_Filepath;
                        }
                        else
                        {
                            model.amount_sar = _p054.Amount_SAR;
                            model.from_bank = _p054.From_Bank;
                            model.from_addreess = _p054.From_Address;
                            model.from_account_no = _p054.From_AccountNo;
                            model.to_beneficiary = _p054.To_Benificiary;
                            model.to_bankname = _p054.To_BankName;
                            model.to_address = _p054.To_Address;
                            model.to_account_no = _p054.To_AccountNo;
                            model.to_iban = _p054.To_IBAN;
                            model.bank_attachment = _p054.Bank_Attachment;
                            model.attachment_filepath = _p054.Attachment_Filepath;
                            model.purpose_text = _p054.Purpose_Text;
                            model.remark = _p054.Remark;
                        }
                        return PartialView("~/Views/Request/View_P054.cshtml", model);
                        #endregion P054
                        #endregion P054
                    }

                    else if (data.tb_WFType.WF_ID == "P023") // Nimmi Mohan 26-03-2020
                    {
                        #region P023
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This condition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }


                        #region P023
                        var _p023 = _entity.tb_PP_Carloan_Request.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();

                        if (_p023 != null)
                        {

                            model.reason = _p023.Reason;
                            model.employee_grade = Convert.ToInt32(_p023.Employee_Grade);
                            model.joining_date = Convert.ToDateTime(_p023.Joining_Date);
                            //model.att_quotation_filepath = _p023.Att_Quotation_Filepath;
                            model.car_cost_reimbursement = Convert.ToDecimal(_p023.Car_Cost_Reimbursement);
                            model.first_loan = _p023.First_Loan;
                            model.subsequent_loan = _p023.Subsequent_Loan;
                            model.car_quotation_amount = Convert.ToDecimal(_p023.Car_Quotation_Amount);
                            model.maximum_entitlement = Convert.ToDecimal(_p023.Maximum_Entitlement);
                            model.monthly_installment = Convert.ToDecimal(_p023.Monthly_Installment);
                            //model.effective_date = Convert.ToDateTime(_p023.Effective_Date);
                            //model.attachment_filepath = _p023.Attachment_Filepath;
                            if (_p023.Effective_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p023.Effective_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.effective_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p023.Effective_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.effective_date_string = xx;
                                }
                            }

                        }
                        return PartialView("~/Views/Request/View_P023.cshtml", model);
                        #endregion P023



                        #endregion P023
                    }

                    else if (data.tb_WFType.WF_ID == "P099") // NIMMI MOHAN 27/03/2020
                    {
                        #region P099
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P099
                        var _p099 = _entity.tb_PP_CarLoanPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p099.PaymentMode;
                        if (_p099.PaymentMode == "C")
                        {
                            if (_p099.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p099.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p099.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _p099.PaymentMode;
                            model.amount_sar = _p099.Amount_SAR;
                            model.purpose_text = _p099.Purpose_Text;
                            model.payable_to = _p099.Cheque_Payable;
                            //05-05-2020
                            model.cheque_account_no = _p099.Account_No;
                            model.supplier_to = _p099.supplier;
                            model.currenctType = _p099.Currency;
                            model.remark = _p099.Remark;
                            model.carloanrequest_number = _p099.Carloan_Request_No;
                            model.attachment_filepath = _p099.Attachment_Filepath;
                        }
                        else
                        {
                            model.amount_sar = _p099.Amount_SAR;
                            model.from_bank = _p099.From_Bank;
                            model.from_addreess = _p099.From_Address;
                            model.from_account_no = _p099.From_AccountNo;
                            model.to_beneficiary = _p099.To_Benificiary;
                            model.to_bankname = _p099.To_BankName;
                            model.to_address = _p099.To_Address;
                            model.to_account_no = _p099.To_AccountNo;
                            model.bank_attachment = _p099.Bank_Attachment;
                            model.carloanrequest_number = _p099.Carloan_Request_No;
                            //05-05-2020
                            model.purpose_text = _p099.Purpose_Text;
                            model.to_iban = _p099.To_IBAN;
                            model.currenctType = _p099.Currency;
                            model.attachment_filepath = _p099.Attachment_Filepath;
                            model.remark = _p099.Remark;
                        }
                        return PartialView("~/Views/Request/View_P099.cshtml", model);
                        #endregion P099
                        #endregion P099
                    }

                    else if (data.tb_WFType.WF_ID == "A007")  //A007-Accommodation in Hotel/Compound(Preema)
                    {
                        #region A007
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region A007
                        var _A007 = _entity.tb_AO_Accommodation.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();

                        List<tb_AO_Accommodation_Guest_Details> guest = new List<tb_AO_Accommodation_Guest_Details>();
                        guest = _A007.tb_AO_Accommodation_Guest_Details.ToList();

                        for (int i = 0; i < guest.Count; i++)
                        {
                            model.guest.Add(guest[i].Guest_Name.ToString());
                        }


                        model.accommodation_type = Convert.ToString(_A007.Accommodation_Type);
                        model.hotel_name = Convert.ToString(_A007.Hotel_Name);
                        model.hotel_location = Convert.ToString(_A007.Hotel_Location);
                        model.room_type = Convert.ToString(_A007.Room_Type);
                        model.room_preference = Convert.ToString(_A007.Room_Preference);
                        model.no_of_room = Convert.ToString(_A007.No_of_Rooms);
                        model.hotel_address = Convert.ToString(_A007.Hotel_Address);
                        model.contact_person = Convert.ToString(_A007.Contact_Person);
                        model.fax = Convert.ToString(_A007.Fax);
                        model.approaximate_date = Convert.ToDateTime(_A007.Approximate_Date);
                        model.approaximate_time = Convert.ToDateTime(_A007.Approximate_Time);
                        model.payment_mode = Convert.ToString(_A007.Payment_Type);
                        model.from_period = Convert.ToDateTime(_A007.From_Period);
                        model.to_period = Convert.ToDateTime(_A007.To_Period);
                        model.remarks = Convert.ToString(_A007.Remarks);


                        if (_A007.Approximate_Date != null)
                        {
                            try
                            {
                                var stringDate = _A007.Approximate_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.approaximate_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _A007.Approximate_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.approaximate_date_string = xx;
                            }
                        }

                        if (_A007.From_Period != null)
                        {
                            try
                            {
                                var stringDate = _A007.From_Period.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.from_period_string = xx;
                            }
                            catch
                            {
                                var stringDate = _A007.From_Period.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.from_period_string = xx;
                            }
                        }
                        if (_A007.To_Period != null)
                        {
                            try
                            {
                                var stringDate = _A007.To_Period.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.to_period_string = xx;
                            }
                            catch
                            {
                                var stringDate = _A007.To_Period.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.to_period_string = xx;
                            }
                        }

                        if (_A007.Approximate_Time != null)
                        {
                            try
                            {
                                var stringDate = _A007.Approximate_Time.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("hh:mm tt");
                                model.approaximate_time_string = xx;
                            }
                            catch
                            {
                                var stringDate = _A007.Approximate_Time.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("hh:mm tt");
                                model.approaximate_time_string = xx;
                            }
                        }

                        return PartialView("~/Views/Request/View_A007.cshtml", model);
                        #endregion A007
                        #endregion A007
                    }

                    else if (data.tb_WFType.WF_ID == "P049") //P049-Other Personnel Services(Preema)
                    {
                        #region P049
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region

                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;
                                        else
                                            model.canEscalate = false;
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;
                                        model.escalation_No = 0;
                                    }
                                    model.my_role = role.Role_Desc;
                                    model.my_role_code = role.Role_ID;
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {

                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;
                                                model.escalation_No = 0;
                                            }
                                            model.my_role = newRole.Role_Desc;
                                            model.my_role_code = newRole.Role_ID;
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region P049

                        var _p049 = _entity.tb_PP_Other_Personnel_Services.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();

                        model.request_details = _p049.Request_Details;

                        model.document_price = _p049.document_price;

                        return PartialView("~/Views/Request/View_P049.cshtml", model);

                        #endregion P049

                        #endregion P049
                    }

                    else if (data.tb_WFType.WF_ID == "P061") //P061-ESAP Contribution(Preema)
                    {
                        #region P061
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region

                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;
                                        else
                                            model.canEscalate = false;
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;
                                        model.escalation_No = 0;
                                    }
                                    model.my_role = role.Role_Desc;
                                    model.my_role_code = role.Role_ID;
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {

                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;
                                                model.escalation_No = 0;
                                            }
                                            model.my_role = newRole.Role_Desc;
                                            model.my_role_code = newRole.Role_ID;
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region P061

                        ESAP_ContributionModel esap = new ESAP_ContributionModel();
                        var _p061 = _entity.tb_PP_ESAP_Contribution.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();

                        esap.Id = _p061.Id;
                        esap.RequestId = _p061.RequestId;
                        esap.TimeStamp = _p061.TimeStamp;
                        esap.For_the_Period_of = _p061.For_the_Period_of;
                        esap.Remarks = _p061.Remarks;
                        esap.Grand_Total = Convert.ToDecimal(_p061.Grand_Total);
                        esap.Note = _p061.Note;

                        model.ESAP_Contribution = esap;

                        List<tb_PP_ESAP_Company> Company = new List<tb_PP_ESAP_Company>();
                        Company = _p061.tb_PP_ESAP_Company.ToList();



                        for (int i = 0; i < Company.Count; i++)
                        {
                            model.ESAP_Contribution.lstCompanyId.Add(Company[i].Company_Id.ToString());
                            long CId = Convert.ToInt64(Company[i].Company_Id);
                            var name = _entity.tb_Company.Where(x => x.Company_Id == CId && x.IsActive == true).FirstOrDefault();

                            model.ESAP_Contribution.lstCompanyName.Add(name.Company_Name);

                            model.ESAP_Contribution.lstPayrollCode.Add(Company[i].tb_Company.Payroll_code.ToString());
                            model.ESAP_Contribution.lstTotal.Add(Company[i].Total_Amount_in_USD.ToString());
                        }


                        return PartialView("~/Views/Request/View_P061.cshtml", model);

                        #endregion P061

                        #endregion P061
                    }
                    else if (data.tb_WFType.WF_ID == "P062") //P062-Retirement Contribution(Preema)
                    {
                        #region P062
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region

                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;
                                        else
                                            model.canEscalate = false;
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;
                                        model.escalation_No = 0;
                                    }
                                    model.my_role = role.Role_Desc;
                                    model.my_role_code = role.Role_ID;
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {

                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;
                                                model.escalation_No = 0;
                                            }
                                            model.my_role = newRole.Role_Desc;
                                            model.my_role_code = newRole.Role_ID;
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region P062

                        RetirementContributionModel esap = new RetirementContributionModel();
                        var _p062 = _entity.tb_PP_Retirement_Contribution.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();

                        esap.Id = _p062.Id;
                        esap.RequestId = _p062.RequestId;
                        esap.TimeStamp = _p062.TimeStamp;
                        esap.For_the_Period_of = _p062.For_the_Period_of;
                        esap.Remarks = _p062.Remarks;
                        esap.Grand_Total = Convert.ToDecimal(_p062.Grand_Total);
                        esap.Bank_Details = _p062.Bank_Details;

                        model.RetirementContributionModel = esap;

                        List<tb_PP_Retirement_Contribution_Company> Company = new List<tb_PP_Retirement_Contribution_Company>();
                        Company = _p062.tb_PP_Retirement_Contribution_Company.ToList();



                        for (int i = 0; i < Company.Count; i++)
                        {
                            model.RetirementContributionModel.lstCompanyId.Add(Company[i].Company_Id.ToString());
                            long CId = Convert.ToInt64(Company[i].Company_Id);
                            var name = _entity.tb_Company.Where(x => x.Company_Id == CId && x.IsActive == true).FirstOrDefault();

                            model.RetirementContributionModel.lstCompanyName.Add(name.Company_Name);

                            model.RetirementContributionModel.lstPayrollCode.Add(Company[i].tb_Company.Payroll_code.ToString());
                            model.RetirementContributionModel.lstTotal.Add(Company[i].Total_Amount_in_USD.ToString());
                        }


                        return PartialView("~/Views/Request/View_P062.cshtml", model);

                        #endregion P062

                        #endregion P062
                    }
                    else if (data.tb_WFType.WF_ID == "P053") //P053-GOSI Payment(Preema) 
                    {
                        #region P053
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region

                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;
                                        else
                                            model.canEscalate = false;
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;
                                        model.escalation_No = 0;
                                    }
                                    model.my_role = role.Role_Desc;
                                    model.my_role_code = role.Role_ID;
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;
                                                model.escalation_No = 0;
                                            }
                                            model.my_role = newRole.Role_Desc;
                                            model.my_role_code = newRole.Role_ID;
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P053
                        var _p053 = _entity.tb_PP_GOSI_Payment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        model.payment_mode = _p053.PaymentMode;
                        if (_p053.PaymentMode == "C")
                        {
                            if (_p053.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p053.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p053.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _p053.PaymentMode;
                            model.amount_sar = Convert.ToDecimal(_p053.Amount_SAR);
                            model.purpose_text = _p053.Purpose_Text;
                            model.payable_to = _p053.Cheque_Payable;
                            model.remark = _p053.Remark;

                        }
                        else
                        {
                            model.amount_sar = Convert.ToDecimal(_p053.Amount_SAR);
                            model.from_bank = _p053.From_Bank;
                            model.from_addreess = _p053.From_Address;
                            model.from_account_no = _p053.From_AccountNo;
                            model.to_beneficiary = _p053.To_Benificiary;
                            model.to_bankname = _p053.To_BankName;
                            model.to_address = _p053.To_Address;
                            model.to_account_no = _p053.To_AccountNo;
                            model.bank_attachment = _p053.Bank_Attachment;
                            model.purpose_text = _p053.Purpose_Text;
                            model.to_iban = _p053.To_IBAN;
                            model.remark = _p053.Remark;
                        }
                        return PartialView("~/Views/Request/View_P053.cshtml", model);

                        #endregion P053

                        #endregion P053
                    }
                    else if (data.tb_WFType.WF_ID == "P024") //P024-Bank Loan Request(Preema) 
                    {
                        #region P024
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region

                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;
                                        else
                                            model.canEscalate = false;
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;
                                        model.escalation_No = 0;
                                    }
                                    model.my_role = role.Role_Desc;
                                    model.my_role_code = role.Role_ID;
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;
                                                model.escalation_No = 0;
                                            }
                                            model.my_role = newRole.Role_Desc;
                                            model.my_role_code = newRole.Role_ID;
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region P024

                        var _p024 = _entity.tb_PP_Bank_Loan_Request.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();

                        BankLoanRequestModel bank = new BankLoanRequestModel();

                        bank.Id = _p024.Id;
                        bank.RequestId = _p024.RequestId;
                        bank.TimeStamp = Convert.ToDateTime(_p024.TimeStamp);
                        bank.Bank_Name = _p024.Bank_Name;
                        bank.Account_No = _p024.Account_No;
                        bank.Loan_Amount = Convert.ToDecimal(_p024.Loan_Amount);
                        bank.Nationality = _p024.Nationality;

                        if (_p024.Date_of_Hire != null)
                        {
                            var stringDate = _p024.Date_of_Hire.ToString();
                            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            bank.Date_of_Hire = xx;
                        }

                        // bank.Date_of_Hire = Convert.ToString(_p024.Date_of_Hire);
                        bank.Saudi_Id = _p024.Saudi_Id;
                        bank.Purpose = _p024.Purpose;
                        bank.End_of_Service_Benefit = _p024.End_of_Service_Benefit;
                        if (_p024.As_of_Date != null)
                        {
                            var stringDate = _p024.As_of_Date.ToString();
                            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            bank.As_of_Date = xx;
                        }

                        // bank.As_of_Date = Convert.ToString(_p024.As_of_Date);
                        model.BankLoanRequestModel = bank;

                        return PartialView("~/Views/Request/View_P024.cshtml", model);

                        #endregion P024

                        #endregion P024
                    }

                    else if (data.tb_WFType.WF_ID == "P016") //P016-Internal Transfer(Preema) 
                    {
                        #region P016
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region

                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;
                                        else
                                            model.canEscalate = false;
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        model.level = Convert.ToInt32(temp.Sequence_NO);
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;
                                        model.escalation_No = 0;
                                    }
                                    model.my_role = role.Role_Desc;
                                    model.my_role_code = role.Role_ID;
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                model.level = Convert.ToInt32(temp.Sequence_NO);
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;
                                                model.escalation_No = 0;
                                            }
                                            model.my_role = newRole.Role_Desc;
                                            model.my_role_code = newRole.Role_ID;
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        model.WF_ID = Convert.ToString(data.tb_WFType.Id);

                        #region P016


                        ////var WF_Hidden = _entity.tb_WFType.Where(x => x.Id == data.tb_WFType.Id && x.IsActive == true).FirstOrDefault();
                        ////var Form_Template_Hidden = _entity.tb_FormTemplate.Where(x => x.WF_Id == data.tb_WFType.Id && x.ROle_Id == "HIDDEN" && x.IsActive == true).FirstOrDefault();

                        ////if (WF_Hidden.HasHidden == true)
                        ////{
                        ////    model.form_name = Form_Template_Hidden.Form_Id;
                        ////}                    

                        var _p016 = _entity.SelectAllInternalTransfer_by_RequestId(data.Request_ID).FirstOrDefault();

                        InternalTransferModel internaltransfer = new InternalTransferModel();

                        internaltransfer.Id = _p016.Id;
                        internaltransfer.RequestId = _p016.RequestId;
                        internaltransfer.TimeStamp = Convert.ToDateTime(_p016.TimeStamp);

                        var RequestDetails = _entity.tb_Request_Hdr.Where(x => x.Request_ID == _p016.RequestId && x.IsActive == true).FirstOrDefault();
                        var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == RequestDetails.Employee_ID && x.IsActive == true).FirstOrDefault();

                        internaltransfer.business_id = Convert.ToInt64(employee.Business_Id);

                        internaltransfer.Transfer_Type = _p016.Transfer_Type.Trim();

                        internaltransfer.Receiving_Manager_Id = _p016.Receiving_Manager;
                        internaltransfer.Receiving_Manager = _p016.Receiving_Manager_Name;

                        internaltransfer.Releasing_Manager_Id = _p016.Releasing_Manager;
                        internaltransfer.Releasing_Manager = _p016.Releasing_Manager_Name;

                        internaltransfer.Transfer_From = _p016.Transfer_From.Trim();
                        internaltransfer.Transfer_To = _p016.Transfer_To.Trim();


                        if (_p016.Effective_Date != null)
                        {
                            var stringDate = _p016.Effective_Date.ToString();
                            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            internaltransfer.Effective_Date = xx;
                        }

                        internaltransfer.From_Company = _p016.FromCompanyName;
                        if (_p016.To_Company != 0)
                        {
                            internaltransfer.From_Company_id = Convert.ToInt64(_p016.From_Company);
                        }

                        internaltransfer.To_Company_Id = Convert.ToInt64(_p016.To_Company);
                        internaltransfer.To_Company = _p016.ToCompanyName != null ? _p016.ToCompanyName : "No Change";

                        internaltransfer.From_Business_Line_id = Convert.ToInt64(_p016.From_BusinessLine);
                        internaltransfer.From_Business_Line = _p016.FromBusinessLineName;

                        internaltransfer.To_Business_Line_Id = Convert.ToInt64(_p016.To_BusinessLine);
                        //internaltransfer.To_Business_Line = _p016.ToBusinessLineName != null ? _p016.ToBusinessLineName : "No Change";

                        internaltransfer.From_Product_Group_id = Convert.ToInt64(_p016.From_ProductGroup);
                        internaltransfer.From_Product_Group = _p016.FromProduct;

                        internaltransfer.To_Product_Group_Id = Convert.ToInt64(_p016.To_Product_Group);
                        //internaltransfer.To_Product_Group = _p016.ToProduct != null ? _p016.ToProduct : "No Change";

                        internaltransfer.From_Department_id = Convert.ToInt64(_p016.From_Department);
                        internaltransfer.From_Department = _p016.FromDepartmentName;

                        internaltransfer.To_Department_Id = Convert.ToInt64(_p016.To_Department);
                        //internaltransfer.To_Department = _p016.ToDepartmentName != null ? _p016.ToDepartmentName : "No Change";

                        internaltransfer.From_Position_id = _p016.From_Position;
                        internaltransfer.From_Position = _p016.FromPositionName;

                        internaltransfer.To_Position_Id = _p016.To_Position;
                        // internaltransfer.To_Position = _p016.ToPositionName != "" ? _p016.ToPositionName : "No Change";

                        internaltransfer.From_Global_Grade_id = _p016.From_Global_Grade;
                        internaltransfer.From_Global_Grade = _p016.From_Global_Grade;

                        internaltransfer.From_Local_Grade_Id = _p016.From_Local_Grade;
                        internaltransfer.From_Local_Grade = _p016.From_Local_Grade;

                        internaltransfer.To_Global_Grade_Id = _p016.To_Global_Grade;
                        // internaltransfer.To_Global_Grade = _p016.To_Global_Grade != null ? _p016.To_Global_Grade : "No Change";

                        internaltransfer.To_Local_Grade_Id = _p016.To_Local_Grade;

                        internaltransfer.From_Cost_Center_id = Convert.ToInt64(_p016.From_Cost_Center);
                        internaltransfer.From_Cost_Center = _p016.FromCCName;

                        internaltransfer.To_Cost_Center_Id = Convert.ToInt64(_p016.To_Cost_Center);
                        // internaltransfer.To_Cost_Center = _p016.ToCCName != null ? _p016.ToCCName : "No Change";

                        internaltransfer.From_status = _p016.From_Status;
                        internaltransfer.To_status = _p016.To_Status;

                        internaltransfer.From_Notice_Period = _p016.From_Notice_Period;
                        internaltransfer.To_Notice_Period = _p016.To_Notice_Period;

                        internaltransfer.From_Location_id = Convert.ToInt64(_p016.From_Location);
                        internaltransfer.From_Location = _p016.FromLocationName;

                        internaltransfer.To_Location_Id = Convert.ToInt64(_p016.To_Location);
                        //internaltransfer.To_Location = _p016.ToLocationName != null ? _p016.ToLocationName : "No Change";

                        internaltransfer.From_Basic_Salary = _p016.From_BasicSalary;
                        internaltransfer.To_Basic_Salary = _p016.To_BasicSalary;

                        internaltransfer.From_Annual_Housing = _p016.From_AnnualHousing;
                        internaltransfer.To_Annual_Housing = _p016.To_AnnualHousing;

                        internaltransfer.From_Car_Cost = _p016.From_CarCost;
                        internaltransfer.To_Car_Cost = _p016.To_CarCost;

                        internaltransfer.From_Transport = _p016.From_Transport;
                        internaltransfer.To_Transport = _p016.To_Transport;

                        internaltransfer.From_Travel_Allowance = _p016.From_TravelHardshipAllowance;
                        internaltransfer.To_Travel_Allowance = _p016.To_TravelHardshipAllowance;

                        internaltransfer.From_Mobile_Allowance = _p016.From_MobileAllowance;
                        internaltransfer.To_Mobile_Allowance = _p016.To_MobileAllowance;

                        model.InternalTransferModel = internaltransfer;

                        return PartialView("~/Views/Request/View_P016.cshtml", model);

                        #endregion P016

                        #endregion P016
                    }

                    else if (data.tb_WFType.WF_ID == "P017") //P017-Contract Modification(Preema) 
                    {
                        #region P017
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region

                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;
                                        else
                                            model.canEscalate = false;
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        model.level = Convert.ToInt32(temp.Sequence_NO);
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;
                                        model.escalation_No = 0;
                                    }
                                    model.my_role = role.Role_Desc;
                                    model.my_role_code = role.Role_ID;
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                model.level = Convert.ToInt32(temp.Sequence_NO);
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;
                                                model.escalation_No = 0;
                                            }
                                            model.my_role = newRole.Role_Desc;
                                            model.my_role_code = newRole.Role_ID;
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        model.WF_ID = Convert.ToString(data.tb_WFType.Id);

                        #region P017                                        

                        var _p017 = _entity.SelectAllContractModification_by_RequestId(data.Request_ID).FirstOrDefault();

                        ContractModificationModel ContractModification = new ContractModificationModel();

                        ContractModification.Id = _p017.Id;
                        ContractModification.RequestId = _p017.RequestId;
                        ContractModification.TimeStamp = Convert.ToDateTime(_p017.TimeStamp);

                        var RequestDetails = _entity.tb_Request_Hdr.Where(x => x.Request_ID == _p017.RequestId && x.IsActive == true).FirstOrDefault();
                        var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == RequestDetails.Employee_ID && x.IsActive == true).FirstOrDefault();

                        ContractModification.business_id = Convert.ToInt64(employee.Business_Id);

                        ContractModification.Contract_Type = _p017.Contract_Type.Trim();

                        ContractModification.Releasing_Manager_Id = _p017.Releasing_Manager;
                        ContractModification.Releasing_Manager = _p017.Releasing_Manager_Name;

                        if (_p017.Effective_Date != null)
                        {
                            var stringDate = _p017.Effective_Date.ToString();
                            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            ContractModification.Effective_Date = xx;
                        }

                        ContractModification.From_Company = _p017.FromCompanyName;
                        if (_p017.To_Company != 0)
                        {
                            ContractModification.From_Company_id = Convert.ToInt64(_p017.From_Company);
                        }

                        ContractModification.To_Company_Id = Convert.ToInt64(_p017.To_Company);
                        ContractModification.To_Company = _p017.ToCompanyName != null ? _p017.ToCompanyName : "No Change";

                        ContractModification.From_Business_Line_id = Convert.ToInt64(_p017.From_BusinessLine);
                        ContractModification.From_Business_Line = _p017.FromBusinessLineName;

                        ContractModification.To_Business_Line_Id = Convert.ToInt64(_p017.To_BusinessLine);
                        //ContractModification.To_Business_Line = _p017.ToBusinessLineName != null ? _p017.ToBusinessLineName : "No Change";

                        ContractModification.From_Product_Group_id = Convert.ToInt64(_p017.From_ProductGroup);
                        ContractModification.From_Product_Group = _p017.FromProduct;

                        ContractModification.To_Product_Group_Id = Convert.ToInt64(_p017.To_Product_Group);
                        //ContractModification.To_Product_Group = _p017.ToProduct != null ? _p017.ToProduct : "No Change";

                        ContractModification.From_Department_id = Convert.ToInt64(_p017.From_Department);
                        ContractModification.From_Department = _p017.FromDepartmentName;

                        ContractModification.To_Department_Id = Convert.ToInt64(_p017.To_Department);
                        //ContractModification.To_Department = _p017.ToDepartmentName != null ? _p017.ToDepartmentName : "No Change";

                        ContractModification.From_Position_id = _p017.From_Position;
                        ContractModification.From_Position = _p017.FromPositionName;

                        ContractModification.To_Position_Id = _p017.To_Position;
                        // ContractModification.To_Position = _p017.ToPositionName != "" ? _p017.ToPositionName : "No Change";

                        ContractModification.From_Global_Grade_id = _p017.From_Global_Grade;
                        ContractModification.From_Global_Grade = _p017.From_Global_Grade;

                        ContractModification.From_Local_Grade_Id = _p017.From_Local_Grade;
                        ContractModification.From_Local_Grade = _p017.From_Local_Grade;

                        ContractModification.To_Global_Grade_Id = _p017.To_Global_Grade;
                        // ContractModification.To_Global_Grade = _p017.To_Global_Grade != null ? _p017.To_Global_Grade : "No Change";

                        ContractModification.To_Local_Grade_Id = _p017.To_Local_Grade;

                        ContractModification.From_Cost_Center_id = Convert.ToInt64(_p017.From_Cost_Center);
                        ContractModification.From_Cost_Center = _p017.FromCCName;

                        ContractModification.To_Cost_Center_Id = Convert.ToInt64(_p017.To_Cost_Center);
                        // ContractModification.To_Cost_Center = _p017.ToCCName != null ? _p017.ToCCName : "No Change";

                        ContractModification.From_status = _p017.From_Status;
                        ContractModification.To_status = _p017.To_Status;

                        ContractModification.From_Notice_Period = _p017.From_Notice_Period;
                        ContractModification.To_Notice_Period = _p017.To_Notice_Period;

                        ContractModification.From_Location_id = Convert.ToInt64(_p017.From_Location);
                        ContractModification.From_Location = _p017.FromLocationName;

                        ContractModification.To_Location_Id = Convert.ToInt64(_p017.To_Location);
                        //ContractModification.To_Location = _p017.ToLocationName != null ? _p017.ToLocationName : "No Change";

                        ContractModification.From_Basic_Salary = _p017.From_BasicSalary;
                        ContractModification.To_Basic_Salary = _p017.To_BasicSalary;

                        ContractModification.From_Annual_Housing = _p017.From_AnnualHousing;
                        ContractModification.To_Annual_Housing = _p017.To_AnnualHousing;

                        ContractModification.From_Car_Cost = _p017.From_CarCost;
                        ContractModification.To_Car_Cost = _p017.To_CarCost;

                        ContractModification.From_Transport = _p017.From_Transport;
                        ContractModification.To_Transport = _p017.To_Transport;

                        ContractModification.From_Travel_Allowance = _p017.From_TravelHardshipAllowance;
                        ContractModification.To_Travel_Allowance = _p017.To_TravelHardshipAllowance;

                        ContractModification.From_Mobile_Allowance = _p017.From_MobileAllowance;
                        ContractModification.To_Mobile_Allowance = _p017.To_MobileAllowance;

                        model.ContractModificationModel = ContractModification;

                        return PartialView("~/Views/Request/View_P017.cshtml", model);

                        #endregion P017

                        #endregion P017
                    }

                    else if (data.tb_WFType.WF_ID == "P025") // NIMMI MOHAN 03/04/2020
                    {
                        #region P025
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P025
                        var _p025 = _entity.tb_PP_EndofServiceClearance.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();

                        model.reason_clearance = _p025.Reason_Clearance;
                        model.termination_Date = Convert.ToDateTime(_p025.Termination_Date);
                        model.eb_Toolbox_Returned = _p025.EB_Toolbox_Returned;
                        model.eb_Workstation_Cleared = _p025.EB_Workstation_Cleared;
                        model.eb_OfficialBusiness_Documents = _p025.EB_OfficialBusiness_Documents;
                        model.eb_SiteProject_Clearance = _p025.EB_SiteProject_Clearance;
                        model.eb_Uniform = _p025.EB_Uniform;
                        model.eb_Safety_Equipment = _p025.EB_Safety_Equipment;
                        model.eb_AllWorkflow_Approvals = _p025.EB_AllWorkflow_Approvals;
                        model.eb_ISService_Deactivation_Date = Convert.ToDateTime(_p025.EB_ISService_Deactivation_Date);
                        model.eb_Assigned_Delegate = _p025.EB_Assigned_Delegate;
                        model.ad_HousingHousehold_cleared = _p025.AD_HousingHousehold_cleared;
                        model.ad_Util_Water_cleared = _p025.AD_Util_Water_cleared;
                        model.ad_CarGarageKey_Returned = _p025.AD_CarGarageKey_Returned;
                        model.ad_Gatepass_Returned = _p025.AD_Gatepass_Returned;
                        model.ad_Mobile_SimCard_Returned = _p025.AD_Mobile_SimCard_Returned;
                        model.ad_CompanyID_Returned = _p025.AD_CompanyID_Returned;
                        model.tr_Amount_SAR = Convert.ToDecimal(_p025.TR_Amount_SAR);
                        model.tr_ExternalTraining_Cost = _p025.TR_ExternalTraining_Cost;
                        model.is_Desktop_Returned = _p025.IS_Desktop_Returned;
                        model.ft_Clearance_Obtained = _p025.FT_Clearance_Obtained;
                        model.ft_eBank_Token = _p025.FT_eBank_Token;
                        model.ae_Clearance_Obtained = _p025.AE_Clearance_Obtained;
                        model.hr_CarLoan_Cleared = _p025.HR_CarLoan_Cleared;
                        model.hr_SalaryAdvances_Settled = _p025.HR_SalaryAdvances_Settled;
                        model.hr_CompanyStamp_Returned = _p025.HR_CompanyStamp_Returned;
                        model.hr_MedicalInsurance_Returned = _p025.HR_MedicalInsurance_Returned;
                        model.hr_Visa_Mastercard_Communicated = _p025.HR_Visa_Mastercard_Communicated;
                        model.hr_Savingcurrent_communicated = _p025.HR_Savingcurrent_communicated;
                        model.hr_Remarks = _p025.HR_Remarks;
                        model.hr_Attachment_Filepath = _p025.HR_Attachment_Filepath;
                        model.eb_toolbx_returned_date = _p025.EB_toolbx_returned_date;
                        //model.attachment_filepath = _p025.Attachment_Filepath;

                        //07-05-2020
                        model.eb_toolbx_returned_date = _p025.EB_toolbx_returned_date;
                        model.workstation_cleared_date = _p025.EB_workstation_cleared_date;
                        model.official_business_doc_date = _p025.EB_official_business_doc_date;
                        model.site_project_clearance_date = _p025.EB_site_project_clearance_date;
                        model.uni_form_date = _p025.EB_uni_form_date;
                        model.safety_equipment_date = _p025.EB_safety_equipment_date;
                        model.workflow_approvals_date = _p025.EB_workflow_approvals_date;
                        model.housing_household_date = _p025.AD_housing_household_date;
                        model.car_garage_key_date = _p025.AD_car_garage_key_date;
                        model.gatepass_sticker_date = _p025.AD_gatepass_sticker_date;
                        model.Mobile_returned_date = _p025.AD_Mobile_returned_date;
                        model.company_id_returned_date = _p025.AD_company_id_returned_date;
                        model.utilities_water_etc_date = _p025.AD_utilities_water_etc_date;
                        model.desktop_etc_cleared_date = _p025.IS_desktop_etc_cleared_date;
                        model.clearance_obtained_fin_date = _p025.FT_clearance_obtained_fin_date;
                        model.e_bank_token_date = _p025.FT_e_bank_token_date;
                        model.clearance_obtained_ae_date = _p025.AE_clearance_obtained_ae_date;
                        model.car_loan_cleared_date = _p025.HR_car_loan_cleared_date;
                        model.salary_advance_settled_date = _p025.HR_salary_advance_settled_date;
                        model.company_stamp_returned_date = _p025.HR_company_stamp_returned_date;
                        model.medical_insurance_date = _p025.HR_medical_insurance_date;
                        model.visa_master_commun_date = _p025.HR_visa_master_commun_date;
                        model.sav_current_account_date = _p025.HR_sav_current_account_date;
                        model.external_training_cost_date = _p025.external_training_cost_date;



                        if (_p025.Termination_Date != null)
                        {
                            try
                            {
                                var stringDate = _p025.Termination_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.termination_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p025.Termination_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.termination_date_string = xx;
                            }
                        }

                        if (_p025.EB_ISService_Deactivation_Date != null)
                        {
                            try
                            {
                                var stringdate = _p025.EB_ISService_Deactivation_Date.ToString();
                                var xx = Convert.ToDateTime(stringdate).ToString("yyyy-MM-dd");
                                model.eb_ISService_Deactivation_Date_string = xx;
                            }
                            catch
                            {
                                var stringdate = _p025.EB_ISService_Deactivation_Date.ToString();
                                var xx = Convert.ToDateTime(stringdate).ToString("yyyy-MM-dd");
                                model.eb_ISService_Deactivation_Date_string = xx;
                            }
                        }

                        return PartialView("~/Views/Request/View_P025.cshtml", model);
                        #endregion P025
                        #endregion P025
                    }

                    else if (data.tb_WFType.WF_ID == "P057") // Terrin  on 25/3/2020 ---P057
                    {
                        #region P057
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region P055
                        var _p055 = _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p055.PaymentMode;
                        if (_p055.PaymentMode == "C")
                        {
                            if (_p055.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p055.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p055.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _p055.PaymentMode;
                            model.amount_sar = _p055.Amount_SAR;
                            model.purpose_text = _p055.Purpose_Text;
                            model.remark = _p055.Remark;
                            model.payable_to = _p055.Cheque_Payable;
                            model.attachment_filepath = _p055.Attachment_Filepath;
                        }
                        else
                        {
                            model.amount_sar = _p055.Amount_SAR;
                            model.from_bank = _p055.From_Bank;
                            model.from_addreess = _p055.From_Address;
                            model.from_account_no = _p055.From_AccountNo;
                            model.to_beneficiary = _p055.To_Benificiary;
                            model.to_bankname = _p055.To_BankName;
                            model.to_address = _p055.To_Address;
                            model.to_account_no = _p055.To_AccountNo;
                            model.to_iban = _p055.To_IBAN;
                            model.bank_attachment = _p055.Bank_Attachment;
                            model.attachment_filepath = _p055.Attachment_Filepath;
                            model.purpose_text = _p055.Purpose_Text;
                            model.remark = _p055.Remark;
                        }
                        return PartialView("~/Views/Request/View_P057.cshtml", model);
                        #endregion P057
                        #endregion P057
                    }

                    else if (data.tb_WFType.WF_ID == "P029")  //Terrin on 10/4/2020-----P029
                    {
                        #region P020
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;

                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region This coondition checking for the request forwarder for view 

                        #endregion
                        #region P029
                        var _P029 = _entity.tb_PP_Medical_Insurance.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        //this to Starting...............
                        MedicalInsuranceApplication mo = new MedicalInsuranceApplication();
                        if (_P029 != null)
                        {
                            mo.RequestId = _P029.RequestId;
                            mo.App_Type = Convert.ToString(_P029.App_Type);
                            mo.Add_details = Convert.ToString(_P029.Add_details);
                            mo.Effective = Convert.ToDateTime(_P029.Effective);
                            mo.Date_Employee = Convert.ToDateTime(_P029.Date_Employee);
                            mo.Iqama_no = Convert.ToString(_P029.Iqama_no);
                            mo.MedIns_Remarks = Convert.ToString(_P029.Remarks);
                            //insert_pp_data.Attachment_File = model.Attachment_Filepath;
                            if (_P029.Effective != null)
                            {
                                try
                                {
                                    var stringDate = _P029.Effective.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    mo.Effective_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _P029.Effective.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    mo.Effective_date_string = xx;
                                }
                            }

                            if (_P029.Effective != null)
                            {
                                try
                                {
                                    var stringDate = _P029.Effective.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    mo.Effective_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _P029.Effective.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    mo.Effective_date_string = xx;
                                }
                            }

                            if (_P029.Date_Employee != null)
                            {
                                try
                                {
                                    var stringDate = _P029.Date_Employee.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    mo.Date_Employee_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _P029.Date_Employee.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    mo.Date_Employee_date_string = xx;
                                }
                            }
                            //var stringDate = _P060.Allowance_Date.ToString();
                            //var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            //mo.Allowance_Date = Convert.ToDateTime(xx);
                            //mo.TimeStamp = _P060.TimeStamp;
                            //model.Applicationfor_mobile = mo;
                            //Session["IntroductionCertificateModel"] = mo;
                        }


                        List<tb_PP_Medical_Insurance_Dependent> Insurancedependence = new List<tb_PP_Medical_Insurance_Dependent>();
                        Insurancedependence = _P029.tb_PP_Medical_Insurance_Dependent.ToList();
                        List<Insurance_dependence> Ins_dep = new List<Insurance_dependence>();


                        if (Insurancedependence != null && Insurancedependence.Count > 0)
                        {

                            foreach (var item in Insurancedependence)
                            {

                                Insurance_dependence ins = new Insurance_dependence();
                                ins.Name = item.Name;
                                ins.Date_of_birth = Convert.ToDateTime(item.Date_of_birth);
                                ins.Sex = item.Sex;
                                ins.Relation = item.Relation;
                                ins.Depend_class = item.Depend_class;
                                var stringDate = item.Date_of_birth.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                ins.Date_birth_string_date = xx;
                                //model_Med._Insurance_dependence.Add(ins);

                                Ins_dep.Add(ins);
                            }
                        }
                        mo._Insurance_dependence = Ins_dep;
                        model.MedicalInsuranceApplication = mo;
                        return PartialView("~/Views/Request/View_P029.cshtml", model);
                        #endregion
                        #endregion
                    }
                    else if (data.tb_WFType.WF_ID == "P030") // Chitra srishti on 28.09.2020
                    {
                        #region P030
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        //this is to starting.....
                        #region P030
                        var _P030 = _entity.tb_PP_Educational_Assistance.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        EducationalAssistanceModel mo = new EducationalAssistanceModel();
                        if (_P030 != null)
                        {
                            mo.RequestId = _P030.RequestId;
                            mo.Employee_Group = _P030.Emp_GroupId;
                            mo.Grand_Total = Convert.ToDecimal(_P030.Grand_Total);
                            mo.Total_Entitlement = Convert.ToDecimal(_P030.Total_Entitlement);
                            mo.Amount_Approved = Convert.ToDecimal(_P030.Amount_Approved);
                            mo.Amount_Paid = Convert.ToDecimal(_P030.Amount_Paid);
                            mo.Paid_Payroll = Convert.ToDecimal(_P030.Paid_Payroll);
                            mo.Remarks = _P030.Remarks;

                        }
                        List<tb_PP_Educational_Assistance_Details> educationassistance = new List<tb_PP_Educational_Assistance_Details>();
                        educationassistance = _P030.tb_PP_Educational_Assistance_Details.ToList();
                        List<EducationalAssistanceModel> Edu_dep = new List<EducationalAssistanceModel>();
                        if (educationassistance != null && educationassistance.Count > 0)
                        {
                            foreach (var item in educationassistance)
                            {
                                EducationalAssistanceModel ins = new EducationalAssistanceModel();
                                ins.Child_Name = item.Child_Name;
                                ins.Birth_Date = Convert.ToDateTime(item.Birth_Date);
                                ins.School_Fees = Convert.ToDecimal(item.School_Fees);
                                ins.Transport_Fees = Convert.ToDecimal(item.Transport_Fees);
                                ins.Others = Convert.ToDecimal(item.Others);
                                ins.Exchange_Rate = Convert.ToDecimal(item.Exchange_Rate);
                                ins.Foreign_Currency = Convert.ToDecimal(item.Foreign_Currency);
                                ins.From_Date = Convert.ToDateTime(item.From_Date);
                                ins.To_Date = Convert.ToDateTime(item.To_Date);
                                ins.Location_Id = Convert.ToInt32(item.Location_Id);
                                ///Date conversion Into yyy-MM-dd//
                                var stringDate = item.Birth_Date.ToString();
                                var xx = Convert.ToDateTime(item.Birth_Date.ToString()).ToString("yyyy-MM-dd");
                                ins.Date_birth_string_date = xx;
                                var stringFromDate = item.From_Date.ToString();
                                var xxx = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                ins.From_Date_string_date = xxx;
                                var stringToDate = item.To_Date.ToString();
                                var xxxx = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                ins.To_Date_string_date = xxxx;
                                Edu_dep.Add(ins);
                            }
                        }

                        model._Education = Edu_dep;
                        model.EducationalAssistanceModel = mo;
                        return PartialView("~/Views/Request/View_P030.cshtml", model);
                        #endregion
                        #endregion P030
                    }
                    else if (data.tb_WFType.WF_ID == "P003") // Author:Chitra srishti on 16.06.2020
                    {
                        #region P003
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        //this is to starting.....
                        #region P003
                        var _P003 = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        TicketRefundModel mo = new TicketRefundModel();
                        if (_P003 != null)
                        {
                            mo.RequestId = _P003.RequestId;
                            mo.TA_Request_No = _P003.TA_Request_No;
                            mo.TicketNumber = _P003.Ticket_No;
                            mo.TicketRouting = _P003.Ticket_Routing;
                            mo.RequestDetails = _P003.Request_Details;

                        }
                        model.TicketRefundModel = mo;
                        return PartialView("~/Views/Request/View_P003.cshtml", model);
                        #endregion
                        #endregion P003
                    }

                    else if (data.tb_WFType.WF_ID == "SAS01") // Author:Chitra srishti on 25.06.2020
                    {
                        #region SAS01
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        //this is to starting.....
                        #region SAS01
                        var _SAS01 = _entity.tb_SAS_Bank_Guarantee_Application.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        BankGuaranteeModel mo = new BankGuaranteeModel();
                        if (_SAS01 != null)
                        {
                            mo.RequestId = _SAS01.RequestId;
                            mo.Company_Id = _SAS01.Company_Id;
                            mo.Company_Name = _SAS01.tb_Company.Company_Name;
                            mo.Guarantee_Type = Convert.ToInt32(_SAS01.Guarantee_Type);
                            mo.BenfName = _SAS01.Benf_Name;
                            mo.BenfAdress1 = _SAS01.Benf_Address1;
                            mo.BenfAdress2 = _SAS01.Benf_Address2;
                            mo.BenfTelephone = _SAS01.Benf_Telephone_No;
                            mo.BenfFax = _SAS01.Benf_Fax_No;
                            mo.Currency = _SAS01.Currency;
                            mo.CurrencyValue = Convert.ToDecimal(_SAS01.Value);
                            mo.Amount = _SAS01.Amount_Words;
                            mo.ContractPercent = Convert.ToInt32(_SAS01.Contract_Percent);
                            mo.ContractTotal = Convert.ToDecimal(_SAS01.Total_Contract);
                            mo.From_Date = Convert.ToDateTime(_SAS01.From_Date);
                            mo.To_Date = Convert.ToDateTime(_SAS01.To_Date);
                            mo.Description = _SAS01.Description;
                            mo.CustPONo = _SAS01.Cust_PO_No;
                            mo.ABBQutnNo = _SAS01.ABB_Quotation_No;
                            mo.WBSNo = _SAS01.WBS_No;
                            mo.BL_Id = _SAS01.BL_Id;
                            mo.BL_Code = _SAS01.tb_BusinessLine.BusinessLine_Code;
                            mo.PG_Id = _SAS01.PG_Id;
                            mo.PGNo = _SAS01.tb_ProductGroup.PG_Code;
                            mo.CostCenter = _SAS01.Cost_Center;
                            mo.Branch = _SAS01.Bank_Branch;
                            mo.CollectorName = _SAS01.Collector_Name;
                            mo.Remarks = _SAS01.Remarks;
                            mo.GuaranteeNo = _SAS01.Guarantee_No;
                            mo.Bank = _SAS01.Bank_Name;
                            mo.AccountRemarks = _SAS01.Account_Remarks;
                            mo.Comments = _SAS01.Comments;

                            var xxx = Convert.ToDateTime(_SAS01.From_Date.ToString()).ToString("yyyy-MM-dd");
                            mo.From_Date_string_date = xxx;

                            var xxxx = Convert.ToDateTime(_SAS01.To_Date.ToString()).ToString("yyyy-MM-dd");
                            mo.To_Date_string_date = xxxx;


                        }
                        model.BankGuaranteeModel = mo;
                        return PartialView("~/Views/Request/View_SAS01.cshtml", model);
                        #endregion
                        #endregion SAS01
                    }
                    else if (data.tb_WFType.WF_ID == "P060") //Terrin on 31/3/2020--
                    {
                        #region P060
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;

                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region This coondition checking for the request forwarder for view 

                        #endregion
                        #region P011
                        var _P060 = _entity.tb_PP_Mobile_Allowance.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                        //this to Starting...............
                        Applicationfor_mobile mo = new Applicationfor_mobile();
                        if (_P060 != null)
                        {

                            mo.RequestId = _P060.RequestId;

                            mo.Allowance_per_group = _P060.Allowancepergrp;

                            mo.Remarks = _P060.Remarks;
                            mo.Justification = _P060.Justification;
                            mo.Allowance_Date = _P060.Allowance_Date;
                            if (_P060.Allowance_Date != null)
                            {
                                try
                                {
                                    var stringDate = _P060.Allowance_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    mo.allowance_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _P060.Allowance_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    mo.allowance_date_string = xx;
                                }
                            }
                            //var stringDate = _P060.Allowance_Date.ToString();
                            //var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            //mo.Allowance_Date = Convert.ToDateTime(xx);
                            mo.TimeStamp = _P060.TimeStamp;
                            model.Applicationfor_mobile = mo;
                            //Session["IntroductionCertificateModel"] = mo;
                        }

                        return PartialView("~/Views/Request/View_P060.cshtml", model);
                        #endregion
                        #endregion
                    }
                    else if (data.tb_WFType.WF_ID == "P015") //Terrin on 31/3/2020--
                    {
                        #region P015
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;

                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #region This coondition checking for the request forwarder for view 

                        #endregion
                        #region P011
                        var _p015 = _entity.tb_PP_TrainingorRecruitmentPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p015.PaymentMode;
                        if (_p015.PaymentMode == "C")
                        {
                            if (_p015.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p015.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p015.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = _p015.PaymentMode;
                            model.amount_sar = _p015.Amount_SAR;
                            model.purpose_text = _p015.Purpose_Text;
                            model.payable_to = _p015.Cheque_Payable;
                            model.attachment_filepath = _p015.Attachment_Filepath;
                            model.traname = _p015.traname;
                            model.blcontrollerid = _p015.blcontrollerid;
                            model.currenctType = _p015.currencytype;
                            model.chargecostcenter = _p015.chargecostcenter;
                            model.chargeaccount = _p015.chargeaccount;
                            model.rt_remarks = _p015.Remark;

                        }
                        else
                        {
                            model.amount_sar = _p015.Amount_SAR;
                            model.from_bank = _p015.From_Bank;
                            model.from_addreess = _p015.From_Address;
                            model.from_account_no = _p015.From_AccountNo;
                            model.to_beneficiary = _p015.To_Benificiary;
                            model.to_bankname = _p015.To_BankName;
                            model.to_address = _p015.To_Address;
                            model.to_account_no = _p015.To_AccountNo;
                            model.to_iban = _p015.To_IBAN;
                            // model.bank_attachment = _p015.Bank_Attachment;
                            model.attachment_filepath = _p015.Attachment_Filepath;
                            model.purpose_text = _p015.Purpose_Text;
                            model.traname = _p015.traname;
                            model.blcontrollerid = _p015.blcontrollerid;
                            model.currenctType = _p015.currencytype;
                            model.chargecostcenter = _p015.chargecostcenter;
                            model.chargeaccount = _p015.chargeaccount;
                            model.rt_remarks = _p015.Remark;
                        }

                        return PartialView("~/Views/Request/View_P015.cshtml", model);
                        #endregion
                        #endregion
                    }

                    else if (data.tb_WFType.WF_ID == "P034") //28-05-2020 Basheer
                    {
                        #region P034

                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                       //28-05-2020 for where approver == null for TA Processors Basheer
                                if (data.Approver_ID == null)
                                {
                                    model.taisprocessor = true; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Role_ID == model.taroleid && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                            model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                            model.can_edit = true; //Basheer 28-05-2020
                                            model.level = Convert.ToInt32(data.Approval_No); //13-07-2020 Basheer for processor
                                            model.my_process_code = "APP";//13-07-2020 Basheer for processor
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.my_process_code = temp.Status_ID;
                                                    model.level = Convert.ToInt32(temp.Sequence_NO);//26-06-2020 Basheer
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                //28-05-2020 for where approver == null for TA Processors Basheer end here
                                else
                                {
                                    model.taisprocessor = false; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                            model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.my_process_code = temp.Status_ID;
                                                    model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        model.WF_ID = Convert.ToString(data.tb_WFType.Id); //Basheer on 07-07-2020
                        #region RequestData

                        long reqId = Convert.ToInt32(data.Request_ID);
                        var _p034 = _entity.tb_TA_Business_International.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
                        BusinessInternational businessinternational = new BusinessInternational();
                        businessinternational.Place_Visit = _p034.Place_Visit;
                        businessinternational.Reasons = _p034.Reasons;
                        businessinternational.Remark = _p034.Remark;
                        businessinternational.Is_Compliance_Approval_Required = Convert.ToInt32(_p034.Is_Compliance_Approval);
                        businessinternational.Compliance_Approval_Date = _p034.Compliance_Approval_Date ?? CurrentTime;
                        businessinternational.Last_Day_Of_Work = _p034.Last_Day_Of_Work ?? CurrentTime;
                        businessinternational.Return_To_Duty = _p034.Return_To_Duty ?? CurrentTime;
                        businessinternational.Is_WorkFlow_delegated = Convert.ToInt32(_p034.IsDelegated);
                        businessinternational.Justification_Not_Delegated = _p034.Just_No_Delegated;
                        businessinternational.IsPossible_Video_Conference = Convert.ToInt32(_p034.IsVideo_Conference);
                        businessinternational.Justification_No_Video_Conference = _p034.Just_No_Video;
                        businessinternational.Address_During_Absence = _p034.Address_During_Absence;
                        businessinternational.telephone = _p034.Telephone_No;
                        businessinternational.Mode_Of_Travel = _p034.Travel_Mode;
                        businessinternational.abb_locations = _p034.Location_Id;
                        businessinternational.Required_Ext_or_Reentry_Visa = Convert.ToInt32(_p034.Is_Exit_ReEntry_Visa);
                        businessinternational.Type_of_Required_Ext_or_Reentry_Visa = _p034.Type_Exit_ReEntry_Visa;
                        businessinternational.Visa_Charged_to = _p034.Visa_Charged_to;
                        businessinternational.Required_Foreign_Visa = Convert.ToInt32(_p034.Is_Foreign_Visa);
                        businessinternational.Foreign_Visa_Countries = _p034.Foreign_Visa_Countries;
                        businessinternational.Foreign_Visa_Quantity = _p034.Foreign_Visa_Quantity;
                        businessinternational.Requied_Travel_Insurance = Convert.ToInt32(_p034.Is_Travel_Insurance);
                        businessinternational.Travel_Insurance_Countries = _p034.Travel_Insurance_Countries;
                        businessinternational.Travel_Insurance_Quantity = _p034.Travel_Insurance_Quantity;
                        businessinternational.Required_RentCar = Convert.ToInt32(_p034.Is_RentCar);
                        businessinternational.RentCar_Charged_to = _p034.RentCar_Charged_to;
                        businessinternational.RentCar_ProjectNo = _p034.RentCar_ProjectNo;
                        businessinternational.Car_Type = _p034.Car_Type;
                        businessinternational.Car_PickUp_at = _p034.Car_PickUp_at;
                        businessinternational.Car_PickUp_date = _p034.Car_PickUp_date ?? CurrentTime;
                        businessinternational.Car_PickUp_Time = _p034.Car_PickUp_Time;
                        businessinternational.Car_Return_date = _p034.Car_Return_date ?? CurrentTime;//Basheer on 26-06-2020
                        businessinternational.Car_Return_Time = _p034.Car_Return_Time;//Basheer on 26-06-2020
                        businessinternational.Car_Payment_Type = _p034.Car_Payment_Type;//Basheer on 26-06-2020
                        businessinternational.Car_Remark = _p034.Car_Remark;
                        businessinternational.Required_Hotel_Booking = Convert.ToInt32(_p034.Is_Hotel);
                        businessinternational.HotelBooking_Charged_to = _p034.Hotel_Charged_to;
                        businessinternational.Hotel_ProjectNo = _p034.Hotel_ProjectNo;
                        businessinternational.Hotel_Name = _p034.Hotel_Name;
                        businessinternational.hotel_location = _p034.Hotel_Location;
                        businessinternational.Room_Preference = _p034.Room_Preference;
                        businessinternational.Type_Of_rooms = _p034.Room_Type;
                        businessinternational.HotelBooking_Payment_Type = _p034.Hotel_Payment_Type;
                        businessinternational.Hote_Checking_Date = _p034.Hote_Check_In_Date ?? CurrentTime;
                        businessinternational.Hotel_Check_In_Time = _p034.Hotel_Check_In_Time;
                        businessinternational.Hotel_Check_Out_Date = _p034.Hotel_Check_Out_Date ?? CurrentTime;
                        businessinternational.Hotel_Check_Out_Time = _p034.Hotel_Check_Out_Time;
                        businessinternational.Hotel_Remark = _p034.Hotel_Remark;
                        businessinternational.Departure_Date = _p034.Departure_Date ?? CurrentTime;
                        businessinternational.Departure_Flight_Number = _p034.Departure_Flight_No;
                        businessinternational.Return_Date = _p034.Return_Date ?? CurrentTime;
                        businessinternational.Return_Flight_Number = _p034.Return_Flight_No;
                        businessinternational.Travel_Routing = _p034.Travel_Routing;
                        businessinternational.Note = _p034.Note;
                        businessinternational.Cash_Advance = Convert.ToInt32(_p034.Cash_Advance);
                        businessinternational.Amex_Holder = Convert.ToInt32(_p034.Amex_Holder);
                        businessinternational.Salary_Advance = _p034.Salary_Advance;
                        businessinternational.Bank_account = _p034.Bank_account;
                        businessinternational.Ticket_Cost = _p034.Ticket_Cost;
                        businessinternational.IBAN = _p034.IBAN;
                        businessinternational.Hotel_Cost = _p034.Hotel_Cost;
                        businessinternational.Daily_allowance = _p034.Daily_allowance;
                        businessinternational.Other_Expenses = _p034.Other_Expenses;
                        businessinternational.Advance_Remark = _p034.Advance_Remark;
                        businessinternational.Travel_Advance_Total = _p034.Travel_Advance_Total;
                        businessinternational.type_of_ticket = _p034.Type_Of_Ticket; //26-06-2020 Basheer
                        businessinternational.Visa_with = _p034.Visa_with; //26-06-2020 Basheer
                        businessinternational.Visa_duration = _p034.Visa_duration; //26-06-2020 Basheer
                        businessinternational.Number_Of_Rooms = _p034.Number_Of_Rooms.ToString(); //03-07-2020 Basheer
                        businessinternational._dependentsInfo = new List<TA_DependentsInfo>();
                        var dependentInfo = _entity.tb_TA_DependentsInfo.Where(x => x.TA_Id == _p034.Id && x.IsActive == true).ToList();
                        foreach (var item in dependentInfo)
                        {
                            TA_DependentsInfo one = new TA_DependentsInfo();
                            one.name = item.Name;
                            one.relation_ship = item.Relationship;
                            one.age = item.Age;
                            one.visa_type = item.Visa_Type;
                            one.ta_type = item.TA_Type;
                            one.remark = item.Remark;
                            businessinternational._dependentsInfo.Add(one);
                        }
                        businessinternational._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                        long requestid = Convert.ToInt32(data.Request_ID);  //basheer on 28-05-2020
                        var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true).ToList(); //basheer on 28-05-2020
                        foreach (var item in travel)
                        {
                            TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                            one.ticket_number = item.Ticket_Number;
                            one.ticket_price = item.TicketPrice;
                            one.issue_date = item.IssueDate;
                            businessinternational._travelAgencyInfo.Add(one);
                        }
                        businessinternational.Ticket_Status = _p034.Ticket_Status ?? 0;
                        businessinternational.Business_Days = _p034.Business_Days ?? 0;
                        businessinternational.Friday = _p034.Friday ?? 0;
                        businessinternational.Saturday = _p034.Saturday ?? 0;
                        businessinternational.Total = _p034.Total ?? 0;

                        model.BusinessInternational = businessinternational;
                        #endregion RequestData
                        return PartialView("~/Views/Request/View_P034.cshtml", model);
                        #endregion P034           
                    }

                    else if (data.tb_WFType.WF_ID == "P041") // vyas 17-06-2020
                    {
                        #region P041

                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #region RequestData

                        long reqId = Convert.ToInt32(data.Request_ID);
                        var _p041 = _entity.tb_TA_Child_Birth_Leave.Where(x => x.RequestId == reqId && x.IsActive == true).OrderByDescending(x => x.TimeStamp).FirstOrDefault();
                        //BusinessInternational businessinternational = new BusinessInternational();

                        //businessinternational.Reasons = _p034.Reasons;
                        //businessinternational.Remark = _p034.Remark;
                        //businessinternational.Is_Compliance_Approval_Required = Convert.ToInt32(_p034.Is_Compliance_Approval);
                        //businessinternational.Compliance_Approval_Date = _p034.Compliance_Approval_Date ?? CurrentTime;
                        //businessinternational.Last_Day_Of_Work = _p034.Last_Day_Of_Work ?? CurrentTime;
                        //businessinternational.Return_To_Duty = _p034.Return_To_Duty ?? CurrentTime;
                        //businessinternational.Is_WorkFlow_delegated = Convert.ToInt32(_p034.IsDelegated);
                        //businessinternational.Justification_Not_Delegated = _p034.Just_No_Delegated;

                        //businessinternational.Address_During_Absence = _p034.Address_During_Absence;
                        //businessinternational.telephone = _p034.Telephone_No;




                        //businessinternational.Business_Days = _p034.Business_Days ?? 0;
                        //businessinternational.Friday = _p034.Friday ?? 0;
                        //businessinternational.Saturday = _p034.Saturday ?? 0;
                        //businessinternational.Total = _p034.Total ?? 0;

                        //model.BusinessInternational = businessinternational;
                        model.reason = _p041.Reasons;
                        model.remarks = _p041.Remark;
                        model.is_compliance = _p041.Is_Compliance_Approval;
                        if (model.is_compliance == false)
                        {
                            model.compliance_approval_date = "";
                        }
                        else
                        {
                            var stringDate = _p041.Compliance_Approval_Date.ToString();
                            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");

                            model.compliance_approval_date = xx;
                        }


                        var stringDate1 = _p041.Last_Day_Of_Work.ToString();
                        var xx1 = Convert.ToDateTime(stringDate1).ToString("yyyy-MM-dd");


                        model.Last_dayof_work = xx1;

                        var stringDate2 = _p041.Return_To_Duty.ToString();
                        var xx2 = Convert.ToDateTime(stringDate2).ToString("yyyy-MM-dd");


                        model.Return_to_duty = xx2;
                        model.is_workflow_delegated = _p041.IsDelegated;
                        model.justification_provided = _p041.Just_No_Delegated;
                        model.address_during_absence = _p041.Address_During_Absence;
                        model.Contact_number = _p041.Telephone_No;
                        model.Child_Birth_Leave = _p041.Business_Days ?? 0;
                        model.Friday = _p041.Friday ?? 0;
                        model.Saturday = _p041.Saturday ?? 0;
                        model.Total = _p041.Total ?? 0;

                        #endregion RequestData
                        return PartialView("~/Views/Request/View_P041.cshtml", model);
                        #endregion P041           
                    }

                    else if (data.tb_WFType.WF_ID == "P007")
                    {
                        #region P007
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                       //28-05-2020 for where approver == null for TA Processors Basheer
                                if (data.Approver_ID == null)
                                {
                                    model.taisprocessor = true; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Role_ID == model.taroleid && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                            model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                            model.can_edit = true; //Basheer 28-05-2020
                                            model.level = Convert.ToInt32(data.Approval_No); //13-07-2020 Basheer for processor
                                            model.my_process_code = "APP";//13-07-2020 Basheer for processor
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion                                  
                                        //model.my_process_code = data.Status_ID;
                                        //model.my_role_code = role.Role_ID;
                                        //model.level = Convert.ToInt32(data.Approval_No);                                       
                                        int button_count = 0;
                                        button_count=ProcessButtonCount(Convert.ToInt64(model.req_id_only), model.my_role_code,"P007");
                                        if (button_count > 0)
                                        {
                                            model.ta_can_edit = true;
                                            model.my_Process_type = "";
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.ta_can_edit = false;                                            
                                        }

                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.level = Convert.ToInt32(temp.Sequence_NO);
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                //28-05-2020 for where approver == null for TA Processors Basheer end here
                                else
                                {
                                    model.taisprocessor = false; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.level = Convert.ToInt32(temp.Sequence_NO);
                                            model.my_process_code = temp.Status_ID;
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.level = Convert.ToInt32(temp.Sequence_NO);
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        model.WF_ID = Convert.ToString(data.tb_WFType.Id);

                        #region RequestData

                        long reqId = Convert.ToInt32(data.Request_ID);
                        var _p007 = _entity.tb_TA_Vacation.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
                        VacationModel vacation = new VacationModel();
                        vacation.place_to_visit = _p007.Place_Visit;
                        vacation.reason = _p007.Reasons;
                        vacation.remark_one = _p007.Remark;
                        vacation.is_complaince_approval_required = Convert.ToInt32(_p007.Is_Compliance_Approval);
                        if (vacation.is_complaince_approval_required == 1)
                        {
                            vacation.str_complaince_approval_required = "Yes";
                        }
                        else
                        {
                            vacation.str_complaince_approval_required = "No";
                        }

                        vacation.compliance_approval_date = _p007.Compliance_Approval_Date ?? CurrentTime;
                        vacation.last_day_of_work = _p007.Last_Day_Of_Work ?? CurrentTime;
                        vacation.return_to_duty = _p007.Return_To_Duty ?? CurrentTime;
                        vacation.workflow_delegated = Convert.ToInt32(_p007.IsDelegated);
                        if (vacation.workflow_delegated == 1)
                        {
                            vacation.str_workflow_delegated = "Yes";
                        }
                        else
                        {
                            vacation.str_workflow_delegated = "No";
                        }
                        vacation.justification_no_delegation = _p007.Just_No_Delegated;
                        vacation.address_during_absence = _p007.Address_During_Absence;
                        vacation.telephone = _p007.Telephone_No;
                        vacation.mode_of_travel = _p007.Travel_Mode;
                        vacation.abb_locations = (Location)_p007.Location_Id;
                        var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p007.Location_Id).FirstOrDefault();
                        if (location_name != null)
                        {
                            vacation.location_name = location_name.Location;
                        }
                        vacation.required_exit_visa = Convert.ToInt32(_p007.Is_Exit_ReEntry_Visa);
                        vacation.type_of_exit_visa = _p007.Type_Exit_ReEntry_Visa;

                        vacation.Visa_Duration = _p007.Visa_duration;
                        vacation.Visa_With = _p007.Visa_with;

                        vacation.travel_visa_charged_to = _p007.Visa_Charged_to;
                        vacation.required_foreign_visa = Convert.ToInt32(_p007.Is_Foreign_Visa);
                        if (vacation.required_foreign_visa == 1)
                        {
                            vacation.str_required_foreign_visa = "Yes";
                        }
                        else
                        {
                            vacation.str_required_foreign_visa = "No";
                        }

                        vacation.foreign_visa_countries = _p007.Foreign_Visa_Countries;
                        vacation.foreign_visa_quantity = _p007.Foreign_Visa_Quantity;
                        vacation.required_travel_insurance = Convert.ToInt32(_p007.Is_Travel_Insurance);
                        if (vacation.required_travel_insurance == 1)
                        {
                            vacation.str_required_travel_insurance = "Yes";
                        }
                        else
                        {
                            vacation.str_required_travel_insurance = "No";
                        }
                        vacation.travel_insurance_countries = _p007.Travel_Insurance_Countries;
                        vacation.travel_insurance_quantity = _p007.Travel_Insurance_Quantity;
                        vacation.required_rent_car = Convert.ToInt32(_p007.Is_RentCar);
                        if (vacation.required_rent_car == 1)
                        {
                            vacation.str_required_rent_car = "Yes";
                        }
                        else
                        {
                            vacation.str_required_rent_car = "No";
                        }
                        vacation.rent_car_charged_to = _p007.RentCar_Charged_to;
                        vacation.rent_car_project_no = _p007.RentCar_ProjectNo;
                        vacation.car_type = _p007.Car_Type;
                        vacation.rent_car_picked_up_at = _p007.Car_PickUp_at;
                        vacation.rent_car_pick_up_date = _p007.Car_PickUp_date ?? CurrentTime;
                        vacation.rent_car_pick_up_time = _p007.Car_PickUp_Time;

                        vacation.rent_car_return_date = _p007.Car_Return_date ?? CurrentTime;
                        vacation.rent_car_return_time = _p007.Car_Return_Time;
                        vacation.rent_car_payment_type = _p007.Car_Payment_Type;
                        vacation.number_of_rooms = Convert.ToInt32(_p007.Number_Of_Rooms);
                        vacation.type_of_ticket = Convert.ToString(_p007.Ticket_Type);

                        vacation.rent_car_remark = _p007.Car_Remark;
                        vacation.required_hotel_booking = Convert.ToInt32(_p007.Is_Hotel);
                        if (vacation.required_hotel_booking == 1)
                        {
                            vacation.str_required_hotel_booking = "Yes";
                        }
                        else
                        {
                            vacation.str_required_hotel_booking = "No";
                        }
                        vacation.hotel_booking_charged_to = _p007.Hotel_Charged_to;
                        vacation.hotel_booking_project_no = _p007.Hotel_ProjectNo;
                        vacation.hotel_name = _p007.Hotel_Name;
                        vacation.hotel_location = _p007.Hotel_Location;
                        vacation.room_preferences = _p007.Room_Preference;
                        vacation.type_of_room = _p007.Room_Type;
                        vacation.hotel_booking_payment_mode = _p007.Hotel_Payment_Type;
                        vacation.hotel_booking_check_in_date = _p007.Hote_Check_In_Date ?? CurrentTime;
                        vacation.hotel_check_in_time = _p007.Hotel_Check_In_Time;
                        vacation.hotel_booking_check_out_date = _p007.Hotel_Check_Out_Date ?? CurrentTime;
                        vacation.hotel_check_out_time = _p007.Hotel_Check_Out_Time;
                        vacation.hotel_booking_remark = _p007.Hotel_Remark;
                        vacation.departure_date = _p007.Departure_Date ?? CurrentTime;
                        vacation.departure_flight_number = _p007.Departure_Flight_No;
                        vacation.return_date = _p007.Return_Date ?? CurrentTime;
                        vacation.return_flight_number = _p007.Return_Flight_No;
                        vacation.travel_routing = _p007.Travel_Routing;
                        vacation.note = _p007.Note;
                        vacation.cash_advance = Convert.ToInt32(_p007.Cash_Advance);
                        vacation.amx_holder = Convert.ToInt32(_p007.Amex_Holder);
                        if (vacation.amx_holder == 1)
                        {
                            vacation.str_amx_holder = "Yes";
                        }
                        else
                        {
                            vacation.str_amx_holder = "No";
                        }
                        if (vacation.cash_advance == 1)
                        {
                            vacation.str_cash_advance = "Yes";
                        }
                        else
                        {
                            vacation.str_cash_advance = "No";
                        }
                        vacation.salary_advance = _p007.Salary_Advance;
                        vacation.bank_account = _p007.Bank_account;
                        vacation.ticket_cost = _p007.Ticket_Cost;
                        vacation.iban = _p007.IBAN;
                        vacation.hotel_cost = _p007.Hotel_Cost;
                        vacation.daily_allowance = _p007.Daily_allowance;
                        vacation.other_expenses = _p007.Other_Expenses;
                        vacation.travel_advance_remark = _p007.Advance_Remark;
                        vacation.travel_advance_total = _p007.Travel_Advance_Total;

                        vacation._dependentsInfo = new List<TA_DependentsInfo>();
                        var dependentInfo = _entity.tb_TA_Vacation_DependentsInfo.Where(x => x.TA_Id == _p007.Id && x.IsActive == true).ToList();
                        foreach (var item in dependentInfo)
                        {
                            TA_DependentsInfo one = new TA_DependentsInfo();
                            one.name = item.Name;
                            one.relation_ship = item.Relationship;
                            one.age = item.Age;
                            one.visa_type = item.Visa_Type;
                            one.ta_type = item.TA_Type;
                            one.remark = item.Remark;
                            vacation._dependentsInfo.Add(one);
                        }

                        vacation._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                        long requestid = Convert.ToInt32(data.Request_ID);
                        var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                        foreach (var item in travel)
                        {
                            TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                            one.ticket_number = item.Ticket_Number;
                            one.ticket_price = item.TicketPrice;
                            one.issue_date = item.IssueDate;
                            vacation._travelAgencyInfo.Add(one);
                        }

                        vacation.revalidation_charge = _p007.Revalidation_Charge;
                        vacation.over_all_ticket_status = _p007.Ticket_Status ?? 0;
                        vacation.total_ticket_price = _p007.Total_Ticket_Price;
                        if (vacation.over_all_ticket_status == 1)
                        {
                            vacation.str_over_all_ticket_status = "All Ticket Issued";
                        }
                        else
                        {
                            vacation.str_over_all_ticket_status = "With Pending Tickets";
                        }

                        vacation.employee_ticket_number = _p007.Ticket_Number_employee;
                        vacation.employee_date_of_issue = _p007.IssueDate_employee;
                        vacation.employee_ticket_price = _p007.TicketPrice_employee;


                        #region Number of Days Information                    
                        vacation.ticket_charged_to = _p007.Ticket_Charged_To;
                        //if (_p007.Ticket_Charged_To == "1")
                        //{
                        //    vacation.ticket_charged_to = "Company";
                        //}
                        //else
                        //{
                        //    vacation.ticket_charged_to = "Personal";
                        //}
                        vacation.from_period = Convert.ToString(_p007.From_Period);
                        vacation.to_period = Convert.ToString(_p007.To_Period);
                        vacation.from_period_date = Convert.ToDateTime(_p007.From_Period);
                        vacation.to_period_date = Convert.ToDateTime(_p007.To_Period);
                        vacation.Vacation = Convert.ToInt32(_p007.Vacation);
                        vacation.Leave_WO_Pay = Convert.ToInt32(_p007.Leave_Pay);
                        vacation.Holidays = Convert.ToInt32(_p007.Holidays);
                        vacation.Friday = Convert.ToInt32(_p007.Friday);
                        vacation.Saturday = Convert.ToInt32(_p007.Saturday);
                        vacation.Total_No_of_Days = Convert.ToString(_p007.Total_No_of_Days);
                        #endregion

                        #region Employee Entitlements to be processed by SAS              
                        vacation.Visa_Amount_Claim = Convert.ToString(_p007.Visa_Amount_Claim);
                        vacation.Taxi_Fare_Claim = Convert.ToString(_p007.Taxi_Fare_Claim);
                        //if (_p007.Visa_Amount_Claim == true)
                        //{
                        //    vacation.Visa_Amount_Claim = "Yes";
                        //}
                        //else
                        //{
                        //    vacation.Visa_Amount_Claim = "No";
                        //}
                        //if (_p007.Taxi_Fare_Claim == true)
                        //{
                        //    vacation.Taxi_Fare_Claim = "Yes";
                        //}
                        //else
                        //{
                        //    vacation.Taxi_Fare_Claim = "No";
                        //}

                        vacation.HR_Remarks_Visa = Convert.ToString(_p007.Visa_Remarks);
                        vacation.HR_Remarks_Taxi = Convert.ToString(_p007.Taxi_Fare_Remarks);
                        #endregion

                        model.VacationModel = vacation;
                        #endregion RequestData

                        return PartialView("~/Views/Request/View_P007.cshtml", model);
                        #endregion P007           
                    }

                    else if (data.tb_WFType.WF_ID == "P037")
                    {
                        #region P037
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                       //28-05-2020 for where approver == null for TA Processors Basheer
                                if (data.Approver_ID == null)
                                {
                                    model.taisprocessor = true; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Role_ID == model.taroleid && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                            model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                            model.can_edit = true; //Basheer 28-05-2020
                                            model.level = Convert.ToInt32(data.Approval_No); //13-07-2020 Basheer for processor
                                            model.my_process_code = "APP";//13-07-2020 Basheer for processor
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion                                  
                                        //model.my_process_code = data.Status_ID;
                                        //model.my_role_code = role.Role_ID;
                                        //model.level = Convert.ToInt32(data.Approval_No);                                       
                                        int button_count = 0;
                                        button_count = ProcessButtonCount(Convert.ToInt64(model.req_id_only), model.my_role_code, "P037");
                                        if (button_count > 0)
                                        {
                                            model.ta_can_edit = true;
                                            model.my_Process_type = "";
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.ta_can_edit = false;
                                        }
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.level = Convert.ToInt32(temp.Sequence_NO);
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                //28-05-2020 for where approver == null for TA Processors Basheer end here
                                else
                                {
                                    model.taisprocessor = false; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.level = Convert.ToInt32(temp.Sequence_NO);
                                            model.my_process_code = temp.Status_ID;
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.level = Convert.ToInt32(temp.Sequence_NO);
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        model.WF_ID = Convert.ToString(data.tb_WFType.Id);


                        #region RequestData

                        long reqId = Convert.ToInt32(data.Request_ID);
                        var _p037 = _entity.tb_TA_DependentsOnly.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
                        VacationModel vacation = new VacationModel();
                        //vacation.place_to_visit = _p037.Place_Visit;
                        //vacation.reason = _p037.Reasons;
                        //vacation.remark_one = _p037.Remark;
                        vacation.is_complaince_approval_required = Convert.ToInt32(_p037.Is_Compliance_Approval);
                        vacation.compliance_approval_date = _p037.Compliance_Approval_Date ?? CurrentTime;
                        //vacation.last_day_of_work = _p037.Last_Day_Of_Work ?? CurrentTime;
                        //vacation.return_to_duty = _p037.Return_To_Duty ?? CurrentTime;
                        vacation.workflow_delegated = Convert.ToInt32(_p037.IsDelegated);
                        vacation.justification_no_delegation = _p037.Just_No_Delegated;
                        //vacation.address_during_absence = _p037.Address_During_Absence;
                        //vacation.telephone = _p037.Telephone_No;
                        vacation.mode_of_travel = _p037.Travel_Mode;
                        vacation.abb_locations = (Location)_p037.Location_Id;
                        var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p037.Location_Id).FirstOrDefault();
                        if (location_name != null)
                        {
                            vacation.location_name = location_name.Location;
                        }
                        vacation.required_exit_visa = Convert.ToInt32(_p037.Is_Exit_ReEntry_Visa);
                        vacation.type_of_exit_visa = _p037.Type_Exit_ReEntry_Visa;

                        vacation.Visa_Duration = _p037.Visa_duration;
                        vacation.Visa_With = _p037.Visa_with;

                        vacation.travel_visa_charged_to = _p037.Visa_Charged_to;
                        vacation.required_foreign_visa = Convert.ToInt32(_p037.Is_Foreign_Visa);
                        vacation.foreign_visa_countries = _p037.Foreign_Visa_Countries;
                        vacation.foreign_visa_quantity = _p037.Foreign_Visa_Quantity;
                        vacation.required_travel_insurance = Convert.ToInt32(_p037.Is_Travel_Insurance);
                        vacation.travel_insurance_countries = _p037.Travel_Insurance_Countries;
                        vacation.travel_insurance_quantity = _p037.Travel_Insurance_Quantity;
                        //vacation.required_rent_car = Convert.ToInt32(_p037.Is_RentCar);
                        //vacation.rent_car_charged_to = _p037.RentCar_Charged_to;
                        //vacation.rent_car_project_no = _p037.RentCar_ProjectNo;
                        //vacation.car_type = _p037.Car_Type;
                        //vacation.rent_car_picked_up_at = _p037.Car_PickUp_at;
                        //vacation.rent_car_pick_up_date = _p037.Car_PickUp_date ?? CurrentTime;
                        //vacation.rent_car_pick_up_time = _p037.Car_PickUp_Time;

                        //vacation.rent_car_return_date = _p037.Car_Return_date ?? CurrentTime;
                        //vacation.rent_car_return_time = _p037.Car_Return_Time;
                        //vacation.rent_car_payment_type = _p037.Car_Payment_Type;
                        //vacation.number_of_rooms = Convert.ToInt32(_p037.Number_Of_Rooms);
                        vacation.type_of_ticket = Convert.ToString(_p037.Ticket_Type);

                        //vacation.rent_car_remark = _p037.Car_Remark;
                        //vacation.required_hotel_booking = Convert.ToInt32(_p037.Is_Hotel);
                        //vacation.hotel_booking_charged_to = _p037.Hotel_Charged_to;
                        //vacation.hotel_booking_project_no = _p037.Hotel_ProjectNo;
                        //vacation.hotel_name = _p037.Hotel_Name;
                        //vacation.hotel_location = _p037.Hotel_Location;
                        //vacation.room_preferences = _p037.Room_Preference;
                        //vacation.type_of_room = _p037.Room_Type;
                        //vacation.hotel_booking_payment_mode = _p037.Hotel_Payment_Type;
                        //vacation.hotel_booking_check_in_date = _p037.Hote_Check_In_Date ?? CurrentTime;
                        //vacation.hotel_check_in_time = _p037.Hotel_Check_In_Time;
                        //vacation.hotel_booking_check_out_date = _p037.Hotel_Check_Out_Date ?? CurrentTime;
                        //vacation.hotel_check_out_time = _p037.Hotel_Check_Out_Time;
                        //vacation.hotel_booking_remark = _p037.Hotel_Remark;
                        vacation.departure_date = _p037.Departure_Date ?? CurrentTime;
                        vacation.departure_flight_number = _p037.Departure_Flight_No;
                        vacation.return_date = _p037.Return_Date ?? CurrentTime;
                        vacation.return_flight_number = _p037.Return_Flight_No;
                        vacation.travel_routing = _p037.Travel_Routing;
                        vacation.note = _p037.Note;
                        //vacation.cash_advance = Convert.ToInt32(_p037.Cash_Advance);
                        //vacation.amx_holder = Convert.ToInt32(_p037.Amex_Holder);
                        //vacation.salary_advance = _p037.Salary_Advance;
                        //vacation.bank_account = _p037.Bank_account;
                        //vacation.ticket_cost = _p037.Ticket_Cost;
                        //vacation.iban = _p037.IBAN;
                        //vacation.hotel_cost = _p037.Hotel_Cost;
                        //vacation.daily_allowance = _p037.Daily_allowance;
                        //vacation.other_expenses = _p037.Other_Expenses;
                        //vacation.travel_advance_remark = _p037.Advance_Remark;
                        //vacation.travel_advance_total = _p037.Travel_Advance_Total;

                        vacation._dependentsInfo = new List<TA_DependentsInfo>();
                        var dependentInfo = _entity.tb_TA_DependentsOnly_DependentsInfo.Where(x => x.TA_Id == _p037.Id && x.IsActive == true).ToList();
                        foreach (var item in dependentInfo)
                        {
                            TA_DependentsInfo one = new TA_DependentsInfo();
                            one.name = item.Name;
                            one.relation_ship = item.Relationship;
                            one.age = item.Age;
                            one.visa_type = item.Visa_Type;
                            one.ta_type = item.TA_Type;
                            one.remark = item.Remark;
                            vacation._dependentsInfo.Add(one);
                        }

                        vacation._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                        long requestid = Convert.ToInt32(data.Request_ID);
                        var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                        foreach (var item in travel)
                        {
                            TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                            one.ticket_number = item.Ticket_Number;
                            one.ticket_price = item.TicketPrice;
                            one.issue_date = item.IssueDate;
                            vacation._travelAgencyInfo.Add(one);
                        }

                        vacation.revalidation_charge = _p037.Revalidation_Charge;
                        vacation.over_all_ticket_status = _p037.Ticket_Status ?? 0;
                        vacation.total_ticket_price = _p037.Total_Ticket_Price;
                        if (vacation.over_all_ticket_status == 1)
                        {
                            vacation.str_over_all_ticket_status = "All Ticket Issued";
                        }
                        else
                        {
                            vacation.str_over_all_ticket_status = "With Pending Tickets";
                        }

                        vacation.employee_ticket_number = _p037.Ticket_Number_employee;
                        vacation.employee_date_of_issue = _p037.IssueDate_employee;
                        vacation.employee_ticket_price = _p037.TicketPrice_employee;
                        vacation.ticket_charged_to = _p037.Ticket_Charged_To;

                        //#region Number of Days Information

                        //vacation.ticket_charged_to = _p037.Ticket_Charged_To;
                        //vacation.from_period = Convert.ToString(_p037.From_Period);
                        //vacation.to_period = Convert.ToString(_p037.To_Period);

                        //vacation.from_period_date = Convert.ToDateTime(_p037.From_Period);
                        //vacation.to_period_date = Convert.ToDateTime(_p037.To_Period);

                        //vacation.Vacation = Convert.ToInt32(_p037.Vacation);
                        //vacation.Leave_WO_Pay = Convert.ToInt32(_p037.Leave_Pay);
                        //vacation.Holidays = Convert.ToInt32(_p037.Holidays);
                        //vacation.Friday = Convert.ToInt32(_p037.Friday);
                        //vacation.Saturday = Convert.ToInt32(_p037.Saturday);
                        //vacation.Total_No_of_Days = Convert.ToString(_p037.Total_No_of_Days);
                        //#endregion

                        #region Employee Entitlements to be processed by SAS              
                        vacation.Visa_Amount_Claim = Convert.ToString(_p037.Visa_Amount_Claim);
                        vacation.Taxi_Fare_Claim = Convert.ToString(_p037.Taxi_Fare_Claim);
                        vacation.HR_Remarks_Visa = Convert.ToString(_p037.Visa_Remarks);
                        vacation.HR_Remarks_Taxi = Convert.ToString(_p037.Taxi_Fare_Remarks);
                        #endregion

                        model.VacationModel = vacation;
                        #endregion RequestData

                        return PartialView("~/Views/Request/View_P037.cshtml", model);
                        #endregion P037           
                    }

                    else if (data.tb_WFType.WF_ID == "P067") //09-07-2020 Preema
                    {
                        #region P067
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                       //28-05-2020 for where approver == null for TA Processors Basheer
                                if (data.Approver_ID == null)
                                {
                                    model.taisprocessor = true; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Role_ID == model.taroleid && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                            model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                            model.can_edit = true; //Basheer 28-05-2020
                                            model.level = Convert.ToInt32(data.Approval_No); //13-07-2020 Basheer for processor
                                            model.my_process_code = "APP";//13-07-2020 Basheer for processor
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion                                  
                                        //model.my_process_code = data.Status_ID;
                                        //model.my_role_code = role.Role_ID;
                                        //model.level = Convert.ToInt32(data.Approval_No);                                       
                                        int button_count = 0;
                                        button_count = ProcessButtonCount(Convert.ToInt64(model.req_id_only), model.my_role_code, "P067");
                                        if (button_count > 0)
                                        {
                                            model.ta_can_edit = true;
                                            model.my_Process_type = "";
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.ta_can_edit = false;
                                        }
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.level = Convert.ToInt32(temp.Sequence_NO);
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                //28-05-2020 for where approver == null for TA Processors Basheer end here
                                else
                                {
                                    model.taisprocessor = false; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.level = Convert.ToInt32(temp.Sequence_NO);
                                            model.my_process_code = temp.Status_ID;
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.level = Convert.ToInt32(temp.Sequence_NO);
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        model.WF_ID = Convert.ToString(data.tb_WFType.Id);

                        #region RequestData

                        long reqId = Convert.ToInt32(data.Request_ID);
                        var _p067 = _entity.tb_TA_SiteVisit_International.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
                        SitevisitInternational sitevisitinternational = new SitevisitInternational();
                        sitevisitinternational.place_to_visit = _p067.Place_Visit;
                        sitevisitinternational.customer_problem = _p067.Customer_Problem;
                        sitevisitinternational.remark_one = _p067.Remark;
                        sitevisitinternational.is_complaince_approval_required = Convert.ToInt32(_p067.Is_Compliance_Approval);
                        if (sitevisitinternational.is_complaince_approval_required == 1)
                        {
                            sitevisitinternational.str_complaince_approval_required = "Yes";
                        }
                        else
                        {
                            sitevisitinternational.str_complaince_approval_required = "No";
                        }

                        sitevisitinternational.compliance_approval_date = _p067.Compliance_Approval_Date ?? CurrentTime;
                        sitevisitinternational.last_day_of_work = _p067.Last_Day_Of_Work ?? CurrentTime;
                        sitevisitinternational.return_to_duty = _p067.Return_To_Duty ?? CurrentTime;
                        sitevisitinternational.workflow_delegated = Convert.ToInt32(_p067.IsDelegated);
                        if (sitevisitinternational.workflow_delegated == 1)
                        {
                            sitevisitinternational.str_workflow_delegated = "Yes";
                        }
                        else
                        {
                            sitevisitinternational.str_workflow_delegated = "No";
                        }
                        sitevisitinternational.justification_no_delegation = _p067.Just_No_Delegated;
                        sitevisitinternational.address_during_absence = _p067.Address_During_Absence;
                        sitevisitinternational.telephone = _p067.Telephone_No;
                        sitevisitinternational.mode_of_travel = _p067.Travel_Mode;
                        sitevisitinternational.abb_locations = (Location)_p067.Location_Id;
                        var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p067.Location_Id).FirstOrDefault();
                        if (location_name != null)
                        {
                            sitevisitinternational.location_name = location_name.Location;
                        }
                     
                        sitevisitinternational.required_exit_visa = Convert.ToInt32(_p067.Is_Exit_ReEntry_Visa);
                        sitevisitinternational.type_of_exit_visa = _p067.Type_Exit_ReEntry_Visa;

                        sitevisitinternational.visa_duration = _p067.Exit_ReEntry_Visa_Duration;
                        sitevisitinternational.passport = _p067.Passport;

                        sitevisitinternational.travel_visa_charged_to = _p067.Visa_Charged_to;
                        sitevisitinternational.required_foreign_visa = Convert.ToInt32(_p067.Is_Foreign_Visa);
                        if (sitevisitinternational.required_foreign_visa == 1)
                        {
                            sitevisitinternational.str_required_foreign_visa = "Yes";
                        }
                        else
                        {
                            sitevisitinternational.str_required_foreign_visa = "No";
                        }

                        sitevisitinternational.foreign_visa_countries = _p067.Foreign_Visa_Countries;
                        sitevisitinternational.foreign_visa_quantity = _p067.Foreign_Visa_Quantity;
                        sitevisitinternational.required_travel_insurance = Convert.ToInt32(_p067.Is_Travel_Insurance);
                        if (sitevisitinternational.required_travel_insurance == 1)
                        {
                            sitevisitinternational.str_required_travel_insurance = "Yes";
                        }
                        else
                        {
                            sitevisitinternational.str_required_travel_insurance = "No";
                        }
                        sitevisitinternational.travel_insurance_countries = _p067.Travel_Insurance_Countries;
                        sitevisitinternational.travel_insurance_quantity = _p067.Travel_Insurance_Quantity;
                        sitevisitinternational.required_rent_car = Convert.ToInt32(_p067.Is_RentCar);
                        if (sitevisitinternational.required_rent_car == 1)
                        {
                            sitevisitinternational.str_required_rent_car = "Yes";
                        }
                        else
                        {
                            sitevisitinternational.str_required_rent_car = "No";
                        }
                        sitevisitinternational.rent_car_charged_to = _p067.RentCar_Charged_to;
                        sitevisitinternational.rent_car_project_no = _p067.RentCar_ProjectNo;
                        sitevisitinternational.car_type = _p067.Car_Type;
                        sitevisitinternational.rent_car_picked_up_at = _p067.Car_PickUp_at;
                        sitevisitinternational.rent_car_pick_up_date = _p067.Car_PickUp_date ?? CurrentTime;
                        sitevisitinternational.rent_car_pick_up_time = _p067.Car_PickUp_Time;

                        sitevisitinternational.rent_car_return_date = _p067.Car_Return_date ?? CurrentTime;
                        sitevisitinternational.rent_car_return_time = _p067.Car_Return_Time;
                        sitevisitinternational.rent_car_payment_type = _p067.Car_Payment_Type;
                        sitevisitinternational.number_of_rooms = Convert.ToInt32(_p067.Number_Of_Rooms);
                        sitevisitinternational.type_of_ticket = Convert.ToString(_p067.Ticket_Type);

                        sitevisitinternational.rent_car_remark = _p067.Car_Remark;
                        sitevisitinternational.required_hotel_booking = Convert.ToInt32(_p067.Is_Hotel);
                        if (sitevisitinternational.required_hotel_booking == 1)
                        {
                            sitevisitinternational.str_required_hotel_booking = "Yes";
                        }
                        else
                        {
                            sitevisitinternational.str_required_hotel_booking = "No";
                        }
                        sitevisitinternational.hotel_booking_charged_to = _p067.Hotel_Charged_to;
                        sitevisitinternational.hotel_booking_project_no = _p067.Hotel_ProjectNo;
                        sitevisitinternational.hotel_name = _p067.Hotel_Name;
                        sitevisitinternational.hotel_location = _p067.Hotel_Location;
                        sitevisitinternational.room_preferences = _p067.Room_Preference;
                        sitevisitinternational.type_of_room = _p067.Room_Type;
                        sitevisitinternational.hotel_booking_payment_mode = _p067.Hotel_Payment_Type;
                        sitevisitinternational.hotel_booking_check_in_date = _p067.Hotel_Check_In_Date ?? CurrentTime;
                        sitevisitinternational.hotel_check_in_time = _p067.Hotel_Check_In_Time;
                        sitevisitinternational.hotel_booking_check_out_date = _p067.Hotel_Check_Out_Date ?? CurrentTime;
                        sitevisitinternational.hotel_check_out_time = _p067.Hotel_Check_Out_Time;
                        sitevisitinternational.hotel_booking_remark = _p067.Hotel_Remark;
                        sitevisitinternational.departure_date = _p067.Departure_Date ?? CurrentTime;
                        sitevisitinternational.departure_flight_number = _p067.Departure_Flight_No;
                        sitevisitinternational.return_date = _p067.Return_Date ?? CurrentTime;
                        sitevisitinternational.return_flight_number = _p067.Return_Flight_No;
                        sitevisitinternational.travel_routing = _p067.Travel_Routing;
                        sitevisitinternational.note = _p067.Note;
                        sitevisitinternational.cash_advance = Convert.ToInt32(_p067.Cash_Advance);
                        sitevisitinternational.amx_holder = Convert.ToInt32(_p067.Amex_Holder);
                        if (sitevisitinternational.amx_holder == 1)
                        {
                            sitevisitinternational.str_amx_holder = "Yes";
                        }
                        else
                        {
                            sitevisitinternational.str_amx_holder = "No";
                        }
                        if (sitevisitinternational.cash_advance == 1)
                        {
                            sitevisitinternational.str_cash_advance = "Yes";
                        }
                        else
                        {
                            sitevisitinternational.str_cash_advance = "No";
                        }
                        sitevisitinternational.salary_advance = _p067.Salary_Advance;
                        sitevisitinternational.bank_account = _p067.Bank_account;
                        sitevisitinternational.ticket_cost = _p067.Ticket_Cost;
                        sitevisitinternational.iban = _p067.IBAN;
                        sitevisitinternational.hotel_cost = _p067.Hotel_Cost;
                        sitevisitinternational.daily_allowance = _p067.Daily_allowance;
                        sitevisitinternational.other_expenses = _p067.Other_Expenses;
                        sitevisitinternational.travel_advance_remark = _p067.Advance_Remark;
                        sitevisitinternational.travel_advance_total = _p067.Travel_Advance_Total;

                        #region Travel Agency

                        sitevisitinternational._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                        long requestid = Convert.ToInt32(data.Request_ID);
                        var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                        foreach (var item in travel)
                        {
                            TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                            one.ticket_number = item.Ticket_Number;
                            one.ticket_price = item.TicketPrice;
                            one.issue_date = item.IssueDate;
                            sitevisitinternational._travelAgencyInfo.Add(one);
                        }

                        sitevisitinternational.revalidation_charge = _p067.Revalidation_Charge;
                        sitevisitinternational.over_all_ticket_status = _p067.Ticket_Status ?? 0;
                        sitevisitinternational.total_ticket_price = _p067.Total_Ticket_Price;                       
                        sitevisitinternational.employee_ticket_number = _p067.Ticket_Number_employee;
                        sitevisitinternational.employee_date_of_issue = _p067.IssueDate_employee;
                        sitevisitinternational.employee_ticket_price = _p067.TicketPrice_employee;

                        #endregion

                        #region Number of Days Information 

                        sitevisitinternational.busines_days = _p067.Business_Days ?? 0;
                        sitevisitinternational.friday = _p067.Friday ?? 0;
                        sitevisitinternational.saturday = _p067.Saturday ?? 0;
                        sitevisitinternational.total_days = _p067.Total ?? 0;
                        #endregion

                        #region SiteScope     

                        sitevisitinternational.Customer_Name = _p067.Customer_Name;
                        sitevisitinternational.CCRP_No = _p067.CCRP_No;
                        sitevisitinternational.WBS = _p067.WBS;
                        sitevisitinternational.IsWarranty = (bool)_p067.IsWarranty;

                        if(sitevisitinternational.IsWarranty==Convert.ToBoolean(0))
                        {
                            sitevisitinternational.strWarranty = "No";
                        }
                        else if (sitevisitinternational.IsWarranty == Convert.ToBoolean(1))
                        {
                            sitevisitinternational.strWarranty = "Yes";
                        }

                        sitevisitinternational.previsit_checklist = (bool)_p067.Is_Previsit_CheckList;
                        if (sitevisitinternational.previsit_checklist == Convert.ToBoolean(0))
                        {
                            sitevisitinternational.int_previsit_checklist = 0;
                        }
                        else if (sitevisitinternational.previsit_checklist == Convert.ToBoolean(1))
                        {
                            sitevisitinternational.int_previsit_checklist = 1;
                        }
                        
                        sitevisitinternational.business = (long)_p067.BusinessId;
                        sitevisitinternational.businessline = (long)_p067.BusinessLineId;
                        sitevisitinternational.productgroup = (long)_p067.ProductGroupId;

                        sitevisitinternational.business_line = Convert.ToString(_p067.BusinessLineId);

                        sitevisitinternational.most_problem_unit = _p067.No_Of_Problematic_Units;
                        sitevisitinternational.problems = _p067.Problems;
                        sitevisitinternational.site_report = (bool)_p067.Is_SiteReport_Accepted;
                        sitevisitinternational.additional_expense = _p067.Additional_Expense;
                        sitevisitinternational.checklist = (bool)_p067.Is_Site_CheckList;
                        #endregion
                        #region SiteFindings   
                        if (sitevisitinternational.problems!=null)
                        {
                            string[] problemList = _p067.Problems.Split(',');

                            List<SiteFindingsList> _list = new List<SiteFindingsList>();
                            var listData = _entity.tb_UniversalLookupTable.Where(x => x.Table_Name == "SITEFINDINGS" && x.IsActive == true).ToList();

                            foreach (var item in listData)
                            {
                                SiteFindingsList site = new SiteFindingsList();
                                site.id = item.Id;
                                site.problem_type = item.Code_Detail;
                                site.problem_detail = item.Description;
                                if (Array.Exists(problemList, e => e == item.Id.ToString()))
                                {
                                    site.IsChecked = true;
                                }
                                _list.Add(site);
                            }

                            List<ProblemTypeList> _problemList = new List<ProblemTypeList>();
                            //grouping a list based on problem type
                            var SiteFindingListData = listData.GroupBy(u => u.Code_Detail).Select(grp => grp.FirstOrDefault()).ToList();
                            foreach (var item in SiteFindingListData)
                            {
                                ProblemTypeList site = new ProblemTypeList();
                                site.problem_type = item.Code_Detail;
                                _problemList.Add(site);
                            }
                            model.problemTypeList = _problemList;
                            model.siteFindingList = _list;
                        }
                        #endregion

                        model.sitevisitinternational = sitevisitinternational;

                        #endregion RequestData

                        return PartialView("~/Views/Request/View_P067.cshtml", model);
                        #endregion P067           
                    }
                    else if (data.tb_WFType.WF_ID == "T006") // Terrin on 30.06.2020
                    {
                        #region T006
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        //this is to starting.....
                        #region T006
                        var _T006 = _entity.tb_TR_TrainingFolder.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        TrainingFolderModel mo = new TrainingFolderModel();
                        if (_T006 != null)
                        {
                            mo.RequestId = _T006.RequestId;
                            mo.Date_training = Convert.ToDateTime(_T006.Date);
                            mo.quantity = _T006.quantity;
                            var xxx = Convert.ToDateTime(_T006.Date.ToString()).ToString("yyyy-MM-dd");
                            mo.Date_training_string = xxx;


                        }
                        model.TrainingFolderModel = mo;
                        return PartialView("~/Views/Request/View_T006.cshtml", model);
                        #endregion
                        #endregion T006
                    }

                    else if (data.tb_WFType.WF_ID == "T007") // Terrin on 5.06.2020
                    {
                        #region T007
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                if (data.Approver_ID == data.OrgApprover_ID)
                                {
                                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                else // reuest coming from the delegate 
                                {
                                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region 
                                        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                        }
                                        else
                                        {
                                            model.canEscalate = false;
                                            model.escalation_No = 0;
                                        }
                                        model.my_role = role.Role_Desc;
                                        model.my_role_code = role.Role_ID;
                                        #endregion
                                    }
                                    else
                                    {
                                        #region 
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.my_process_code = temp.Status_ID;
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;
                                                    model.escalation_No = 0;
                                                }
                                                model.my_role = role.Role_Desc;
                                                model.my_role_code = role.Role_ID;
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        //this is to starting.....
                        #region T006
                        var _T007 = _entity.tb_TR_Training_Certificate.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        TrainingCertificateModel mo = new TrainingCertificateModel();
                        if (_T007 != null)
                        {
                            mo.RequestId = _T007.RequestId;
                            mo.Titlecourse = _T007.Titlecourse;
                            mo.Course_period_from = Convert.ToDateTime(_T007.Course_period_from);
                            mo.Course_period_to = Convert.ToDateTime(_T007.Course_period_to);
                            mo.Location = _T007.Location;
                            mo.Clientname = _T007.Clientname;
                            mo.Noof_particants = _T007.Noof_particants;
                           // mo.Noof_trainer = _T007.Noof_trainer;
                            mo.nameofparticipants = _T007.Nameof_participants;
                            var xxx = Convert.ToDateTime(_T007.Course_period_from.ToString()).ToString("yyyy-MM-dd");
                            mo.Course_period_from_string = xxx;
                            var yyy = Convert.ToDateTime(_T007.Course_period_to.ToString()).ToString("yyyy-MM-dd");
                            mo.Course_period_to_string = yyy;


                        }
                        model.TrainingCertificateModel = mo;
                        return PartialView("~/Views/Request/View_T007.cshtml", model);
                        #endregion
                        #endregion T007
                    }
                    else if (data.tb_WFType.WF_ID == "T004")//T004 George Shristi 06-07-2020
                    {
                        #region COMMON THINGS

                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }

                        #endregion

                        //STARTING OF T004
                        #region T004
                        var _T004 = _entity.tb_TR_InHouseTraining.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        InHouseTrainingModel HouseTrain = new InHouseTrainingModel();
                        if (_T004 != null)
                        {
                            HouseTrain.RequestId = _T004.RequestId;
                            HouseTrain.Remarks = _T004.Remarks;
                        }
                        List<tb_TR_InHouse_Training_Details> TrainingCourseDetails = new List<tb_TR_InHouse_Training_Details>();
                        TrainingCourseDetails = _T004.tb_TR_InHouse_Training_Details.ToList();
                        List<InHouseTrainingCourseModel> Course_info = new List<InHouseTrainingCourseModel>();

                        if (TrainingCourseDetails != null && TrainingCourseDetails.Count > 0)
                        {
                            foreach (var item in TrainingCourseDetails)
                            {
                                InHouseTrainingCourseModel course = new InHouseTrainingCourseModel();
                                course.TrainingId = item.TrainingId;

                                var courseid = _entity.tb_TR_InHouse_Course.Where(x => x.Code.Trim().ToUpper() == item.Code.Trim().ToUpper() && x.IsActive == true).Select(x => x.Id).FirstOrDefault();

                                course.CourseId = courseid;
                                course.Code = item.Code;
                                course.Course_Name = item.Course_Name;
                                course.Type = item.Type;
                                course.From_Date = Convert.ToDateTime(item.From_Date);
                                course.To_Date = Convert.ToDateTime(item.To_Date);
                                course.TrainingId = item.TrainingId;
                                course.TrainingId = item.TrainingId;
                                course.TrainingId = item.TrainingId;
                                ///Date conversion Into yyy-MM-dd//
                                var stringFromDate = item.From_Date.ToString();
                                var Fdate = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                course.From_Date_string_date = Fdate;
                                var stringToDate = item.To_Date.ToString();
                                var Tdate = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                course.To_Date_string_date = Tdate;
                                Course_info.Add(course);
                            }
                        }

                        model._CourseList = Course_info;
                        model.InhouseTraining = HouseTrain;
                        return PartialView("~/Views/Request/View_T004.cshtml", model);
                        #endregion
                    }
                    else if (data.tb_WFType.WF_ID == "P045") ////P045 - Chitra Srishti  08/07/2020
                    {
                        #region P045

                        #region Generic
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                if (role != null)
                                {
                                    #region
                                    //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                    tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                    if (temp != null)
                                    {
                                        if (temp.Edit_Option.Trim() == "R")
                                        {
                                            model.can_edit = false;
                                        }
                                        else
                                        {
                                            model.can_edit = true;
                                        }
                                        model.can_distribute = temp.DistributionList_ID.ToString();
                                        if (temp.Action_Flag == escalationFlag)
                                            model.canEscalate = true;//***
                                        else
                                            model.canEscalate = false;//***
                                        model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                        model.can_distribute = temp.DistributionList_ID.ToString();//***
                                        model.my_process_code = temp.Status_ID;
                                    }
                                    else
                                    {
                                        model.canEscalate = false;//***
                                        model.escalation_No = 0;//***
                                    }
                                    model.my_role = role.Role_Desc;//***
                                    model.my_role_code = role.Role_ID;//***
                                    #endregion
                                }
                                else
                                {
                                    #region
                                    var appNo = Convert.ToInt32(data.Approval_No);
                                    var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                    if (log != null)
                                    {
                                        var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                        if (newRole != null)
                                        {
                                            //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                            var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                            if (temp != null)
                                            {
                                                if (temp.Edit_Option.Trim() == "R")
                                                {
                                                    model.can_edit = false;
                                                }
                                                else
                                                {
                                                    model.can_edit = true;
                                                }
                                                model.can_distribute = temp.DistributionList_ID.ToString();
                                                if (temp.Action_Flag == escalationFlag)
                                                    model.canEscalate = true;//***
                                                else
                                                    model.canEscalate = false;
                                                model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                model.my_process_code = temp.Status_ID;
                                            }
                                            else
                                            {
                                                model.canEscalate = false;//***
                                                model.escalation_No = 0;//***
                                            }
                                            model.my_role = newRole.Role_Desc;//***
                                            model.my_role_code = newRole.Role_ID;//***
                                        }
                                    }
                                    #endregion
                                }
                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }
                        #endregion

                        #region P045

                        long reqId = Convert.ToInt32(data.Request_ID);
                        var _p045 = _entity.tb_ER_HR_Related.Where(x => x.RequestId == reqId.ToString() && x.IsActive == true).FirstOrDefault();
                        ExpenseReportModel expenseReportModel = new ExpenseReportModel();

                        expenseReportModel.RequestId = reqId.ToString();
                        expenseReportModel.ChargeTo = _p045.ChargeTo;
                        expenseReportModel.PlacesVisited = _p045.PlacesVisited;
                        expenseReportModel.Region = _p045.Region;
                        expenseReportModel.PersonnelVisited = _p045.PersonnelVisited;
                        expenseReportModel.BusinessLine = _p045.BusinessLine;
                        expenseReportModel.TARequest = _p045.TARequest;
                        expenseReportModel.TARequestDate = _p045.TARequestDate;
                        expenseReportModel.LastDayOfWork = _p045.LastDayOfWork;
                        expenseReportModel.ReturnToDuty = _p045.ReturnToDuty;
                        expenseReportModel.ComplianceApproved = _p045.ComplianceApproved;
                        expenseReportModel.ComplianceApprovalDate = _p045.ComplianceApprovalDate;

                        expenseReportModel.ExpenseReportDetailList = new List<ExpenseReportDetailModel>();
                        var detailList = _entity.tb_ER_HR_Related_Detail.Where(x => x.ER_ParentId == _p045.Id && x.IsActive == true).OrderBy(x => x.SequenceNum).ToList();
                        foreach (var item in detailList)
                        {
                            ExpenseReportDetailModel detail = new ExpenseReportDetailModel();
                            detail.AccountTypeId = item.AccountTypeId;
                            detail.AccountTypeName = item.AccountTypeName;
                            detail.ERAccount = item.ERAccount;
                            detail.TicketNumbers = item.TicketNumbers;
                            detail.KM = item.KM;
                            detail.Allowance = item.Allowance;
                            detail.Description1 = item.Description1;
                            detail.Description2 = item.Description2;
                            detail.Currency = item.Currency;
                            detail.Amount = item.Amount;
                            detail.ExchangeRate = item.ExchangeRate;
                            detail.AmtLocal = item.AmtLocal;
                            detail.SequenceNum = item.SequenceNum;

                            expenseReportModel.ExpenseReportDetailList.Add(detail);
                        }

                        expenseReportModel.AmtTotal = _p045.AmtTotal;
                        expenseReportModel.LessAdvance = _p045.LessAdvance;
                        expenseReportModel.TicketsPaidByCo = _p045.TicketsPaidByCo;
                        expenseReportModel.NetToReceive = _p045.NetToReceive;

                        model.ExpenseReport = expenseReportModel;

                        #endregion RequestData

                        return PartialView("~/Views/Request/View_P045.cshtml", model);
                        #endregion
                    }

                    else if (data.tb_WFType.WF_ID == "T001")//T001 George Shristi 13-07-2020
                    {
                        #region COMMON THINGS
                        model.template_id = data.WFTemplate_ID ?? 0;
                        model.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
                        model.req_id_only = data.Request_ID;
                        model.extension = emp.MobileExtension;//12-02-2020 ARCHANA 
                        model.location = emp.tb_Location.Location + " (" + emp.tb_Location.Location_Code + " )";
                        model.date_created = Convert.ToDateTime(emp.Date_Join).ToShortDateString();

                        if (model.my_Process_type != "ForwardView") // This coondition checking for the request forwarder for view 
                        {
                            if (model.dataview_id == "0") //Basheer on 27-01-2020 to set the page read only
                            {
                                model.can_edit = false;
                                model.canEscalate = false;
                                model.escalation_No = 0;
                            }
                            else
                            {
                                #region Check that the person have the edit provision 
                                //if (data.Approver_ID == data.OrgApprover_ID)
                                //{
                                int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                                                                                       //28-05-2020 for where approver == null for TA Processors Basheer
                                if (data.Approver_ID == null)
                                {
                                    model.taisprocessor = true; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Role_ID == model.taroleid && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                            model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                            model.can_edit = true; //Basheer 28-05-2020
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.my_process_code = temp.Status_ID;
                                                    model.level = Convert.ToInt32(temp.Sequence_NO);//26-06-2020 Basheer
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                //28-05-2020 for where approver == null for TA Processors Basheer end here
                                else
                                {
                                    model.taisprocessor = false; //28-05-2020
                                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                                    if (role != null)
                                    {
                                        #region
                                        //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                        if (temp != null)
                                        {
                                            if (temp.Edit_Option.Trim() == "R")
                                            {
                                                model.can_edit = false;
                                            }
                                            else
                                            {
                                                model.can_edit = true;
                                            }
                                            model.can_distribute = temp.DistributionList_ID.ToString();
                                            if (temp.Action_Flag == escalationFlag)
                                                model.canEscalate = true;//***
                                            else
                                                model.canEscalate = false;//***
                                            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                            model.my_process_code = temp.Status_ID;
                                            model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                        }
                                        else
                                        {
                                            model.canEscalate = false;//***
                                            model.escalation_No = 0;//***
                                        }
                                        model.my_role = role.Role_Desc;//***
                                        model.my_role_code = role.Role_ID;//***
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        var appNo = Convert.ToInt32(data.Approval_No);
                                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                        if (log != null)
                                        {
                                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                            if (newRole != null)
                                            {
                                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == newRole.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                                if (temp != null)
                                                {
                                                    if (temp.Edit_Option.Trim() == "R")
                                                    {
                                                        model.can_edit = false;
                                                    }
                                                    else
                                                    {
                                                        model.can_edit = true;
                                                    }
                                                    model.can_distribute = temp.DistributionList_ID.ToString();
                                                    if (temp.Action_Flag == escalationFlag)
                                                        model.canEscalate = true;//***
                                                    else
                                                        model.canEscalate = false;
                                                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                                    model.my_process_code = temp.Status_ID;
                                                    model.level = Convert.ToInt32(temp.Sequence_NO); //26-06-2020 Basheer
                                                }
                                                else
                                                {
                                                    model.canEscalate = false;//***
                                                    model.escalation_No = 0;//***
                                                }
                                                model.my_role = newRole.Role_Desc;//***
                                                model.my_role_code = newRole.Role_ID;//***
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                // }Basheer on 01-07-2020
                                #region commented by basheer on 07-01-2020
                                //-----------Basheer on 01-07-2020
                                //else // reuest coming from the delegate 
                                //{
                                //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                                //    if (role != null)
                                //    {
                                //        #region 
                                //        int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //                                                                               //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //        if (temp != null)
                                //        {
                                //            if (temp.Edit_Option == "R")
                                //            {
                                //                model.can_edit = false;
                                //            }
                                //            else
                                //            {
                                //                model.can_edit = true;
                                //            }
                                //            model.can_distribute = temp.DistributionList_ID.ToString();
                                //            if (temp.Action_Flag == escalationFlag)
                                //                model.canEscalate = true;//***
                                //            else
                                //                model.canEscalate = false;
                                //            model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //            model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //            model.my_process_code = temp.Status_ID;
                                //        }
                                //        else
                                //        {
                                //            model.canEscalate = false;
                                //            model.escalation_No = 0;
                                //        }
                                //        model.my_role = role.Role_Desc;
                                //        model.my_role_code = role.Role_ID;
                                //        #endregion
                                //    }
                                //    else
                                //    {
                                //        #region 
                                //        var appNo = Convert.ToInt32(data.Approval_No);
                                //        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                                //        if (log != null)
                                //        {
                                //            int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                                //            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                                //            if (newRole != null)
                                //            {
                                //                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                //                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                //                if (temp != null)
                                //                {
                                //                    if (temp.Edit_Option == "R")
                                //                    {
                                //                        model.can_edit = false;
                                //                    }
                                //                    else
                                //                    {
                                //                        model.can_edit = true;
                                //                    }
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();
                                //                    if (temp.Action_Flag == escalationFlag)
                                //                        model.canEscalate = true;//***
                                //                    else
                                //                        model.canEscalate = false;
                                //                    model.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                //                    model.can_distribute = temp.DistributionList_ID.ToString();//***
                                //                    model.my_process_code = temp.Status_ID;
                                //                }
                                //                else
                                //                {
                                //                    model.canEscalate = false;
                                //                    model.escalation_No = 0;
                                //                }
                                //                model.my_role = role.Role_Desc;
                                //                model.my_role_code = role.Role_ID;
                                //            }
                                //        }
                                //        #endregion
                                //    }
                                //}

                                //comented till here on 01-07-2020 Basheer
                                #endregion commented by basheer
                                #endregion Check that the person have the edit provision
                            }
                        }
                        if (data.Status_ID == "HLD")
                            model.is_hold = true;
                        else
                            model.is_hold = false;
                        model.request_profile = profile.Profile_ID;
                        model.haveProfile = data.tb_WFType.HaveProfile ?? false;
                        model.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
                        model.application = application.Application_Name;
                        model.domain = domain.Domain_Name;
                        model.emp_name = emp.Emp_Name;
                        model.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
                        model.local_id = data.Employee_ID;
                        model.company = company == null ? "" : company.Company_Name;
                        model.job_tittle = job.Job_tittle;
                        if (department != null)// 19-02-2020 II ARCHANA SRISHTI 
                            model.department = department.Department_Name;
                        else
                            model.department = "";
                        if (businessline != null)
                        {
                            model.business_line = businessline.Business_Line_Name;
                        }
                        else
                        {
                            model.business_line = "";
                        }
                        model.cost_center = cost_center == null ? "" : cost_center.CC_Name;
                        model.mobile_phone = emp.Mobile_No;
                        model.application_id = data.Application_ID.ToString();
                        model.wf_type = data.tb_WFType.WF_ID;
                        model.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
                        if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
                        {
                            model.is_first_approver = true;// The first approver don't want the Send back to approver button 
                        }


                        #endregion

                        //STARTING OF T004
                        #region T001
                        var _T001 = _entity.tb_TR_External_Training.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                        ExternalTrainingModel ExtTrain = new ExternalTrainingModel();
                        if (_T001 != null)
                        {
                            ExtTrain.RequestId = _T001.RequestId;
                            ExtTrain.Justification = _T001.Justification;
                            ExtTrain.Years = _T001.Years;
                            ExtTrain.GrandTotal = _T001.GrandTotal;
                        }
                        List<tb_TR_External_Training_Detail> TrainingCourseDetails = new List<tb_TR_External_Training_Detail>();
                        TrainingCourseDetails = _T001.tb_TR_External_Training_Detail.ToList();
                        List<ExternalTrainingDetailModel> Course_info = new List<ExternalTrainingDetailModel>();

                        if (TrainingCourseDetails != null && TrainingCourseDetails.Count > 0)
                        {
                            foreach (var item in TrainingCourseDetails)
                            {
                                ExternalTrainingDetailModel course = new ExternalTrainingDetailModel();
                                course.ExternTrainingId = item.ExternTrainingId;

                                var courseid = _entity.tb_TR_External_Courses.Where(x => x.Course_Name.Trim().ToUpper() == item.Course_Name.Trim().ToUpper() && x.IsActive == true).Select(x => x.Id).FirstOrDefault();

                                course.CourseId = courseid;
                                course.Course_Name = item.Course_Name;
                                course.From_Date = Convert.ToDateTime(item.From_Date);
                                course.To_Date = Convert.ToDateTime(item.To_Date);
                                course.Training_Type = item.Training_Type;
                                course.Location = item.Location;
                                course.Cost = item.Cost;
                                course.NoofDays = item.NoofDays;
                                ///Date conversion Into yyy-MM-dd//
                                var stringFromDate = item.From_Date.ToString();
                                var Fdate = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                course.From_Date_string_date = Fdate;
                                var stringToDate = item.To_Date.ToString();
                                var Tdate = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                course.To_Date_string_date = Tdate;
                                Course_info.Add(course);
                            }
                        }

                        model._TrainingDetails = Course_info;
                        model.ExternalTraining = ExtTrain;
                        return PartialView("~/Views/Request/View_T001.cshtml", model);
                        #endregion
                    }

                    else
                    {
                        return PartialView("~/Views/Request/_pv_ErrorPageonwf.cshtml", model);
                    }
                    #endregion
                }
                else
                {
                    return PartialView("~/Views/Request/_pv_NoPermissionView.cshtml", model);
                }
            }
            catch (Exception ex)
            {
                return PartialView("~/Views/Request/_pv_ErrorPage.cshtml", model);
            }

        }

        //*************************************************************************************************************
        public ActionResult View_P055(WaitingRequestDetails model)
        {
            var _p055 = _entity.tb_PP_HousingAllowance.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            model.payment_mode = _p055.PaymentMode;
            if (_p055.PaymentMode == "C")
            {
                if (_p055.Cheque_Date != null)
                {
                    try
                    {
                        var stringDate = _p055.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _p055.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                }
                model.payment_mode = _p055.PaymentMode;
                model.amount_sar = _p055.Amount_SAR;
                model.purpose_text = _p055.Purpose_Text;
                model.payable_to = _p055.Cheque_Payable;
                model.attachment_filepath = _p055.Attachment_Filepath;
            }
            else
            {
                model.amount_sar = _p055.Amount_SAR;
                model.from_bank = _p055.From_Bank;
                model.from_addreess = _p055.From_Address;
                model.from_account_no = _p055.From_AccountNo;
                model.to_beneficiary = _p055.To_Benificiary;
                model.to_bankname = _p055.To_BankName;
                model.to_address = _p055.To_Address;
                model.to_account_no = _p055.To_AccountNo;
                model.bank_attachment = _p055.Bank_Attachment;
                model.attachment_filepath = _p055.Attachment_Filepath;
                model.remark = _p055.Remark;
            }
            return View(model);
        }
        public ActionResult View_IS05(InfrastructureChange model)
        {
            return View(model);
        }
        public ActionResult View_P009(HRPaymentrequest model1)
        {
            var _p009 = _entity.tb_PP_HR_RelatedPayment.Where(x => x.RequestId == model1.req_id_only && x.IsActive == true).FirstOrDefault();
            if (_p009.Cheque_Date != null)
            {
                try
                {
                    var stringDate = _p009.Cheque_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model1.cheque_date_string = xx;
                }
                catch
                {
                    var stringDate = _p009.Cheque_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model1.cheque_date_string = xx;
                }
            }
            model1.table_Id = _p009.Id;
            model1.RequestId = _p009.RequestId;
            model1.PaymentMode = _p009.PaymentMode;
            model1.Amount_SAR = _p009.Amount_SAR;
            model1.Account_No = _p009.Account_No;
            model1.PurposeText = _p009.PurposeText;
            model1.supplier = _p009.supplier;
            model1.Payable_To = _p009.Payable_To;
            model1.File_Attachment = _p009.File_Attachment;
            model1.Remark = _p009.Remark;
            model1.From_BankName = _p009.From_BankName;
            model1.From_Address = _p009.From_Address;
            model1.From_Account_No = _p009.From_Account_No;
            model1.To_Benificiary = _p009.To_Benificiary;
            model1.To_BankName = _p009.To_BankName;
            model1.To_Address = _p009.To_Address;
            model1.To_Account_No = _p009.To_Account_No;
            model1.To_IBAN = _p009.To_IBAN;
            return View(model1);
        }
        public ActionResult View_P010(HRPaymentrequest model1)
        {
            var _p010 = _entity.tb_PP_NonHR_RelatedPayment.Where(x => x.RequestId == model1.req_id_only && x.IsActive == true).FirstOrDefault();
            model1.contract_local_no = _p010.Contract_Local_No;
            model1.back_invoice_no = _p010.BCharge_Invoice;
            model1.project = _p010.Project;
            model1.year_booked = _p010.Year_booked;
            model1.customer = _p010.Customer;
            if (_p010.Cheque_Date != null)
            {
                #region 
                try
                {
                    var stringDate = _p010.Cheque_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model1.cheque_date_string = xx;
                }
                catch
                {
                    var stringDate = _p010.Cheque_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model1.cheque_date_string = xx;
                }
                #endregion
            }
            model1.table_Id = _p010.Id;
            model1.RequestId = _p010.RequestId;
            model1.PaymentMode = _p010.PaymentMode;
            model1.Amount_SAR = _p010.Amount_SAR ?? 0;
            model1.Account_No = _p010.Account_No;
            model1.PurposeText = _p010.Purpose_Text;
            model1.supplier = _p010.Supplier;
            model1.Payable_To = _p010.Payable_To;
            model1.File_Attachment = _p010.File_Attachment;
            model1.Remark = _p010.Remark;
            model1.From_BankName = _p010.From_BankName;
            model1.From_Address = _p010.From_Address;
            model1.From_Account_No = _p010.From_Account_No;
            model1.To_Benificiary = _p010.To_Benificiary;
            model1.To_BankName = _p010.To_BankName;
            model1.To_Address = _p010.To_Address;
            model1.To_Account_No = _p010.To_Account_No;
            model1.To_IBAN = _p010.To_IBAN;
            return View(model1);
        }
        public ActionResult View_P051(WaitingRequestDetails model)// Sibi
        {

            var _P051 = _entity.tb_PP_SalaryAdvance_NewArrival.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            model.payment_mode = _P051.PaymentMode;
            if (_P051.PaymentMode == "C")
            {
                if (_P051.Cheque_Date != null)
                {
                    try
                    {
                        var stringDate = _P051.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _P051.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                }
                model.payment_mode = _P051.PaymentMode;
                model.amount_sar = _P051.Amount_SAR;
                model.purpose_text = _P051.Purpose_Text;
                model.payable_to = _P051.Cheque_Payable;
                model.attachment_filepath = _P051.Attachment_Filepath;
            }
            else
            {
                model.amount_sar = _P051.Amount_SAR;
                model.from_bank = _P051.From_Bank;
                model.from_addreess = _P051.From_Address;
                model.from_account_no = _P051.From_AccountNo;
                model.to_beneficiary = _P051.To_Benificiary;
                model.to_bankname = _P051.To_BankName;
                model.to_address = _P051.To_Address;
                model.to_account_no = _P051.To_AccountNo;
                model.bank_attachment = _P051.Bank_Attachment;
                model.attachment_filepath = _P051.Attachment_Filepath;
                model.remark = _P051.Remark;
            }




            return View(model);
        }
        public ActionResult View_P011(WaitingRequestDetails model)// Sibi 
        {
            //model.IntroductionCertificateModel = (IntroductionCertificateModel)Session["IntroductionCertificateModel"];

            var _P011 = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            //this to Starting...............
            IntroductionCertificateModel mo = new IntroductionCertificateModel();
            if (_P011 != null)
            {

                mo.RequestId = _P011.RequestId;
                mo.LocalEmplyee_ID = _P011.LocalEmplyee_ID;
                mo.Iqama_Number = _P011.Iqama_Number;
                mo.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P011.Location_Code).Select(x => x.Location).FirstOrDefault();
                mo.Iqama_Identification = _P011.Iqama_Identification;
                mo.Attachment_Filepath = _P011.Attachment_Filepath;
                mo.TimeStamp = _P011.TimeStamp;

                if (_P011.Certificate_with_Salary == 1)
                {
                    mo.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
                }
                else if (_P011.Certificate_with_Salary == 0)
                {
                    mo.Certificate_with_Salary_String = BooleanValue.No.ToString();
                }

                if (_P011.Chamber_Of_Commerce_Stamp == 1)
                {
                    mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
                }
                else if (_P011.Chamber_Of_Commerce_Stamp == 0)
                {
                    mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
                }

                if (_P011.Ministry_Of_Foreign_Affairs == 1)
                {
                    mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
                }
                else if (_P011.Ministry_Of_Foreign_Affairs == 0)
                {
                    mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
                }
                model.IntroductionCertificateModel = mo;
                //Session["IntroductionCertificateModel"] = mo;
            }

            return View(model);
        }
        public ActionResult View_P056(WaitingRequestDetails model) // Nimmi Mohan
        {
            var _p056 = _entity.tb_PP_RelocationAllowance.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            model.payment_mode = _p056.PaymentMode;
            if (_p056.PaymentMode == "C")
            {
                if (_p056.Cheque_Date != null)
                {
                    try
                    {
                        var stringDate = _p056.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _p056.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                }
                model.payment_mode = _p056.PaymentMode;
                model.amount_sar = _p056.Amount_SAR;
                model.purpose_text = _p056.Purpose_Text;
                model.payable_to = _p056.Cheque_Payable;
                model.attachment_filepath = _p056.Attachment_Filepath;
            }
            else
            {
                model.amount_sar = _p056.Amount_SAR;
                model.from_bank = _p056.From_Bank;
                model.from_addreess = _p056.From_Address;
                model.from_account_no = _p056.From_AccountNo;
                model.to_beneficiary = _p056.To_Benificiary;
                model.to_bankname = _p056.To_BankName;
                model.to_address = _p056.To_Address;
                model.to_account_no = _p056.To_AccountNo;
                model.bank_attachment = _p056.Bank_Attachment;
                model.attachment_filepath = _p056.Attachment_Filepath;
                model.remark = _p056.Remark;
            }
            return View(model);
        }
        public ActionResult View_P030(WaitingRequestDetails model)// Chitra srishti on 04/06/2020------P030----Educational Assistance module
        {

            #region P030
            var _P030 = _entity.tb_PP_Educational_Assistance.Where(x => x.RequestId == model.request_id && x.IsActive == true).FirstOrDefault();
            //this to Starting...............
            EducationalAssistanceModel mo = new EducationalAssistanceModel();
            if (_P030 != null)
            {
                mo.RequestId = _P030.RequestId;
                mo.Employee_Group = _P030.Emp_GroupId;
                mo.Grand_Total = Convert.ToDecimal(_P030.Grand_Total);
                mo.Total_Entitlement = Convert.ToDecimal(_P030.Total_Entitlement);
                mo.Amount_Approved = Convert.ToDecimal(_P030.Amount_Approved);
                mo.Amount_Paid = Convert.ToDecimal(_P030.Amount_Paid);
                mo.Paid_Payroll = Convert.ToDecimal(_P030.Paid_Payroll);
                mo.Remarks = _P030.Remarks;

            }


            List<tb_PP_Educational_Assistance_Details> educationassistance = new List<tb_PP_Educational_Assistance_Details>();
            educationassistance = _P030.tb_PP_Educational_Assistance_Details.ToList();
            List<EducationalAssistanceModel> Edu_dep = new List<EducationalAssistanceModel>();


            if (educationassistance != null && educationassistance.Count > 0)
            {

                foreach (var item in educationassistance)
                {

                    EducationalAssistanceModel ins = new EducationalAssistanceModel();
                    ins.Child_Name = item.Child_Name;
                    ins.Birth_Date = Convert.ToDateTime(item.Birth_Date);
                    ins.School_Fees = Convert.ToDecimal(item.School_Fees);
                    ins.Transport_Fees = Convert.ToDecimal(item.Transport_Fees);
                    ins.Others = Convert.ToDecimal(item.Others);
                    ins.Exchange_Rate = Convert.ToDecimal(item.Exchange_Rate);
                    ins.Foreign_Currency = Convert.ToDecimal(item.Foreign_Currency);
                    ins.From_Date = Convert.ToDateTime(item.From_Date);
                    ins.To_Date = Convert.ToDateTime(item.To_Date);
                    ins.Location_Id = Convert.ToInt32(item.Location_Id);
                    var stringDate = item.Birth_Date.ToString();
                    var xx = Convert.ToDateTime(item.Birth_Date.ToString()).ToString("yyyy-MM-dd");
                    ins.Date_birth_string_date = xx;

                    var stringFromDate = item.From_Date.ToString();
                    var xxx = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                    ins.From_Date_string_date = xxx;

                    var stringToDate = item.To_Date.ToString();
                    var xxxx = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                    ins.To_Date_string_date = xxxx;

                    Edu_dep.Add(ins);
                }
            }

            model._Education = Edu_dep;
            model.EducationalAssistanceModel = mo;
            return View(model);
            #endregion
        }
        public ActionResult View_P003(WaitingRequestDetails model)// Author:Chitra srishti on 16/06/2020------P003----Ticket Refund module
        {

            #region P003
            var _P003 = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == model.request_id && x.IsActive == true).FirstOrDefault();
            //this to Starting...............
            TicketRefundModel mo = new TicketRefundModel();
            if (_P003 != null)
            {
                mo.RequestId = _P003.RequestId;
                mo.TA_Request_No = _P003.TA_Request_No;
                mo.TicketNumber = _P003.Ticket_No;
                mo.TicketRouting = _P003.Ticket_Routing;
                mo.RequestDetails = _P003.Request_Details;

            }
            model.TicketRefundModel = mo;
            return View(model);
            #endregion
        }

        public ActionResult View_A008(EmployeePickupModel model) /* 24/06/2020 ALENA FOR-----A008--------------------*/
        {
            var _A008 = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == model.request_id && x.IsActive == true).FirstOrDefault();
            if (_A008.Pickup_Date != null)
            {
                try
                {
                    var stringDate = _A008.Pickup_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.date = xx;
                }
                catch
                {
                    var stringDate = _A008.Pickup_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.date = xx;
                }
            }
            model.cost_center = Convert.ToInt32(_A008.Cost_Center);
            model.employee_name = _A008.Employee_Name;
            model.pickup_at = _A008.Pick_up;
            model.time = Convert.ToString(_A008.Pickup_Time);
            model.remarks = _A008.Remarks;

            return View(model);
        }
        public ActionResult View_A009(EmployeePickupModel model) /* 01/07/2020 ALENA FOR-----A009--------------------*/
        {
            var _A009 = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == model.request_id && x.IsActive == true).FirstOrDefault();
            if (_A009.Drop_Date != null)
            {
                try
                {
                    var stringDate = _A009.Drop_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.date = xx;
                }
                catch
                {
                    var stringDate = _A009.Drop_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.date = xx;
                }
            }
            ////
            //var fromDatabase = new SelectList(_entity.tb_CostCenter.ToList(), "ID", "Name");
            //ViewData["DBMySkills"] = fromDatabase;
            ////
            model.cost_center = Convert.ToInt32(_A009.Cost_Center);
            model.employee_name = _A009.Employee_Name;
            model.pickup_at = _A009.Drop_at;
            model.time = Convert.ToString(_A009.Drop_Time);
            model.remarks = _A009.Remarks;

            return View(model);
        }
        public ActionResult View_SAS01(WaitingRequestDetails model)// Author:Chitra srishti on 25/06/2020------SAS01---Bank Guarantee moduleRequestHome_TA
        {

            #region SAS01
            var _SAS01 = _entity.tb_SAS_Bank_Guarantee_Application.Where(x => x.RequestId == model.request_id && x.IsActive == true).FirstOrDefault();
            //this to Starting...............
            BankGuaranteeModel mo = new BankGuaranteeModel();
            if (_SAS01 != null)
            {
                mo.RequestId = _SAS01.RequestId;
                mo.Company_Id = _SAS01.Company_Id;
                mo.Company_Name = _SAS01.tb_Company.Company_Name;
                mo.Guarantee_Type = Convert.ToInt32(_SAS01.Guarantee_Type);
                mo.BenfName = _SAS01.Benf_Name;
                mo.BenfAdress1 = _SAS01.Benf_Address1;
                mo.BenfAdress2 = _SAS01.Benf_Address2;
                mo.BenfTelephone = _SAS01.Benf_Telephone_No;
                mo.BenfFax = _SAS01.Benf_Fax_No;
                mo.Currency = _SAS01.Currency;
                mo.CurrencyValue = Convert.ToDecimal(_SAS01.Value);
                mo.Amount = _SAS01.Amount_Words;
                mo.ContractPercent = Convert.ToInt32(_SAS01.Contract_Percent);
                mo.ContractTotal = Convert.ToDecimal(_SAS01.Total_Contract);
                mo.From_Date = Convert.ToDateTime(_SAS01.From_Date);
                mo.To_Date = Convert.ToDateTime(_SAS01.To_Date);
                mo.Description = _SAS01.Description;
                mo.CustPONo = _SAS01.Cust_PO_No;
                mo.ABBQutnNo = _SAS01.ABB_Quotation_No;
                mo.WBSNo = _SAS01.WBS_No;
                mo.BL_Id = _SAS01.BL_Id;
                mo.BL_Code = _SAS01.tb_BusinessLine.BusinessLine_Code;
                mo.PG_Id = _SAS01.PG_Id;
                mo.PGNo = _SAS01.tb_ProductGroup.PG_Code;
                mo.CostCenter = _SAS01.Cost_Center;
                mo.Branch = _SAS01.Bank_Branch;
                mo.CollectorName = _SAS01.Collector_Name;
                mo.Remarks = _SAS01.Remarks;
                mo.GuaranteeNo = _SAS01.Guarantee_No;
                mo.Bank = _SAS01.Bank_Name;
                mo.AccountRemarks = _SAS01.Account_Remarks;
                mo.Comments = _SAS01.Comments;
                var xxx = Convert.ToDateTime(_SAS01.From_Date.ToString()).ToString("yyyy-MM-dd");
                mo.From_Date_string_date = xxx;

                var xxxx = Convert.ToDateTime(_SAS01.To_Date.ToString()).ToString("yyyy-MM-dd");
                mo.To_Date_string_date = xxxx;


            }
            model.BankGuaranteeModel = mo;
            return View(model);
            #endregion
        }

        public ActionResult View_P045(WaitingRequestDetails model)// Author:Chitra srishti on 08/07/2020------P045---ER HR Related
        {

            #region P045

            long reqId = Convert.ToInt32(model.request_id);
            var _p045 = _entity.tb_ER_HR_Related.Where(x => x.RequestId == reqId.ToString() && x.IsActive == true).FirstOrDefault();
            ExpenseReportModel expenseReportModel = new ExpenseReportModel();

            expenseReportModel.RequestId = reqId.ToString();
            expenseReportModel.ChargeTo = _p045.ChargeTo;
            expenseReportModel.PlacesVisited = _p045.PlacesVisited;
            expenseReportModel.Region = _p045.Region;
            expenseReportModel.PersonnelVisited = _p045.PersonnelVisited;
            expenseReportModel.BusinessLine = _p045.BusinessLine;
            expenseReportModel.TARequest = _p045.TARequest;
            expenseReportModel.TARequestDate = _p045.TARequestDate;
            expenseReportModel.LastDayOfWork = _p045.LastDayOfWork;
            expenseReportModel.ReturnToDuty = _p045.ReturnToDuty;
            expenseReportModel.ComplianceApproved = _p045.ComplianceApproved;
            expenseReportModel.ComplianceApprovalDate = _p045.ComplianceApprovalDate;

            expenseReportModel.ExpenseReportDetailList = new List<ExpenseReportDetailModel>();
            var detailList = _entity.tb_ER_HR_Related_Detail.Where(x => x.ER_ParentId == _p045.Id && x.IsActive == true).OrderBy(x => x.SequenceNum).ToList();
            foreach (var item in detailList)
            {
                ExpenseReportDetailModel detail = new ExpenseReportDetailModel();
                detail.AccountTypeId = item.AccountTypeId;
                detail.AccountTypeName = item.AccountTypeName;
                detail.ERAccount = item.ERAccount;
                detail.TicketNumbers = item.TicketNumbers;
                detail.KM = item.KM;
                detail.Allowance = item.Allowance;
                detail.Description1 = item.Description1;
                detail.Description2 = item.Description2;
                detail.Currency = item.Currency;
                detail.Amount = item.Amount;
                detail.ExchangeRate = item.ExchangeRate;
                detail.AmtLocal = item.AmtLocal;
                detail.SequenceNum = item.SequenceNum;

                expenseReportModel.ExpenseReportDetailList.Add(detail);
            }

            expenseReportModel.AmtTotal = _p045.AmtTotal;
            expenseReportModel.LessAdvance = _p045.LessAdvance;
            expenseReportModel.TicketsPaidByCo = _p045.TicketsPaidByCo;
            expenseReportModel.NetToReceive = _p045.NetToReceive;

            model.ExpenseReport = expenseReportModel;
            return View(model);
            #endregion P045
        }

        public ActionResult View_P057(WaitingRequestDetails model) //Terrin on 25/3/20 ---P057
        {
            var _p057 = _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            model.payment_mode = _p057.PaymentMode;
            if (_p057.PaymentMode == "C")
            {
                if (_p057.Cheque_Date != null)
                {
                    try
                    {
                        var stringDate = _p057.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _p057.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                }
                model.payment_mode = _p057.PaymentMode;
                model.amount_sar = _p057.Amount_SAR;
                model.purpose_text = _p057.Purpose_Text;
                model.payable_to = _p057.Cheque_Payable;
                model.attachment_filepath = _p057.Attachment_Filepath;
            }
            else
            {
                model.amount_sar = _p057.Amount_SAR;
                model.from_bank = _p057.From_Bank;
                model.from_addreess = _p057.From_Address;
                model.from_account_no = _p057.From_AccountNo;
                model.to_beneficiary = _p057.To_Benificiary;
                model.to_bankname = _p057.To_BankName;
                model.to_address = _p057.To_Address;
                model.to_account_no = _p057.To_AccountNo;
                model.bank_attachment = _p057.Bank_Attachment;
                model.attachment_filepath = _p057.Attachment_Filepath;
                model.remark = _p057.Remark;
            }
            return View(model);
        }
        public ActionResult View_P060(WaitingRequestDetails model)// Terrin on 31/3/2020------P060----
        {
            //model.IntroductionCertificateModel = (IntroductionCertificateModel)Session["IntroductionCertificateModel"];

            var _P060 = _entity.tb_PP_Mobile_Allowance.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            //this to Starting...............
            Applicationfor_mobile mo = new Applicationfor_mobile();
            if (_P060 != null)
            {

                mo.RequestId = _P060.RequestId;
                mo.Allowance_per_group = _P060.Allowancepergrp;
                mo.Remarks = _P060.Remarks;
                mo.Justification = _P060.Justification;

                //var stringDate = _P060.Allowance_Date.ToString();
                //var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                //mo.Allowance_Date = Convert.ToDateTime(xx);
                mo.Allowance_Date = _P060.Allowance_Date;
                mo.TimeStamp = _P060.TimeStamp;



                model.Applicationfor_mobile = mo;
                //Session["IntroductionCertificateModel"] = mo;
            }

            return View(model);
        }
        public ActionResult View_P029(WaitingRequestDetails model)// Terrin on 10/4/2020------P060----
        {
            //model.IntroductionCertificateModel = (IntroductionCertificateModel)Session["IntroductionCertificateModel"];

            //var _P060 = _entity.tb_PP_Mobile_Allowance.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            ////this to Starting...............
            //Applicationfor_mobile mo = new Applicationfor_mobile();
            //if (_P060 != null)
            //{

            //    mo.RequestId = _P060.RequestId;
            //    mo.Allowance_per_group = _P060.Allowancepergrp;
            //    mo.Remarks = _P060.Remarks;
            //    mo.Justification = _P060.Justification;

            //    //var stringDate = _P060.Allowance_Date.ToString();
            //    //var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
            //    //mo.Allowance_Date = Convert.ToDateTime(xx);
            //    mo.Allowance_Date = _P060.Allowance_Date;
            //    mo.TimeStamp = _P060.TimeStamp;



            //    model.Applicationfor_mobile = mo;
            //    //Session["IntroductionCertificateModel"] = mo;

            var _P029 = _entity.tb_PP_Medical_Insurance.Where(x => x.RequestId == model.req_id_only /*&& x.IsActive == true*/).FirstOrDefault();
            //this to Starting...............
            MedicalInsuranceApplication mo = new MedicalInsuranceApplication();
            if (_P029 != null)
            {
                mo.RequestId = _P029.RequestId;
                mo.App_Type = Convert.ToString(_P029.App_Type);
                mo.Add_details = Convert.ToString(_P029.Add_details);
                mo.Effective = Convert.ToDateTime(_P029.Effective);
                mo.Date_Employee = Convert.ToDateTime(_P029.Date_Employee);
                mo.Iqama_no = Convert.ToString(_P029.Iqama_no);
                mo.MedIns_Remarks = Convert.ToString(_P029.Remarks);
                //insert_pp_data.Attachment_File = model.Attachment_Filepath;
                if (_P029.Effective != null)
                {
                    try
                    {
                        var stringDate = _P029.Effective.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        mo.Effective_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _P029.Effective.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        mo.Effective_date_string = xx;
                    }
                }

                if (_P029.Effective != null)
                {
                    try
                    {
                        var stringDate = _P029.Effective.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        mo.Effective_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _P029.Effective.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        mo.Effective_date_string = xx;
                    }
                }

                if (_P029.Date_Employee != null)
                {
                    try
                    {
                        var stringDate = _P029.Date_Employee.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        mo.Date_Employee_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _P029.Date_Employee.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        mo.Date_Employee_date_string = xx;
                    }
                }
                //var stringDate = _P060.Allowance_Date.ToString();
                //var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                //mo.Allowance_Date = Convert.ToDateTime(xx);
                //mo.TimeStamp = _P060.TimeStamp;
                //model.Applicationfor_mobile = mo;
                //Session["IntroductionCertificateModel"] = mo;
            }


            List<tb_PP_Medical_Insurance_Dependent> Insurancedependence = new List<tb_PP_Medical_Insurance_Dependent>();
            Insurancedependence = _P029.tb_PP_Medical_Insurance_Dependent.ToList();
            List<Insurance_dependence> Ins_dep = new List<Insurance_dependence>();


            if (Insurancedependence != null && Insurancedependence.Count > 0)
            {

                foreach (var item in Insurancedependence)
                {

                    Insurance_dependence ins = new Insurance_dependence();
                    ins.Name = item.Name;
                    ins.Date_of_birth = Convert.ToDateTime(item.Date_of_birth);
                    ins.Sex = item.Sex;
                    ins.Relation = item.Relation;
                    ins.Depend_class = item.Depend_class;
                    //model_Med._Insurance_dependence.Add(ins);

                    Ins_dep.Add(ins);
                }
            }
            mo._Insurance_dependence = Ins_dep;


            return View(model);
        }

        // 18/05/2020 on Alena Sics for EOSB Calculation
        public ActionResult View_P052(WaitingRequestDetails model)
        {
            var _p052 = _entity.tb_PP_EOSB_Calculation.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            model.payment_mode = _p052.PaymentMode;
            if (_p052.PaymentMode == "Cheque Transfer")
            {
                if (_p052.ChequeDate != null)
                {
                    try
                    {
                        var stringDate = _p052.ChequeDate.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _p052.ChequeDate.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                }
                model.payment_mode = "Cheque Transfer";
                model.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
                model.amount_sar = _p052.Amount_SAR;
                model.purpose_text = _p052.Purpose_Text;
                model.attachment_filepath = _p052.Attachment_Filepath;
                model.remark = _p052.Remark;
            }
            else
            {
                model.payment_mode = "Bank Transfer";
                model.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
                model.amount_sar = _p052.Amount_SAR;
                model.from_bank = _p052.From_Bank;
                model.from_addreess = _p052.From_Address;
                model.from_account_no = _p052.From_AccountNo;
                model.to_beneficiary = _p052.To_Beneficiary;
                model.to_bankname = _p052.To_BankName;
                model.to_address = _p052.To_Address;
                model.to_account_no = _p052.To_AccountNo;
                model.to_iban = _p052.To_IBAN;
                model.attachment_filepath = _p052.Attachment_Filepath;
                model.remark = _p052.Remark;
                model.purpose_text = _p052.Purpose_Text;
            }
            return View(model);
        }

        public ActionResult View_T004(WaitingRequestDetails model)// T004 George 06-07-2020
        {
            #region T004
            var _T004 = _entity.tb_TR_InHouseTraining.Where(x => x.RequestId == model.request_id && x.IsActive == true).FirstOrDefault();
            InHouseTrainingModel HouseTrain = new InHouseTrainingModel();
            if (_T004 != null)
            {
                HouseTrain.RequestId = _T004.RequestId;
                HouseTrain.Remarks = _T004.Remarks;
            }
            List<tb_TR_InHouse_Training_Details> TrainingCourseDetails = new List<tb_TR_InHouse_Training_Details>();
            TrainingCourseDetails = _T004.tb_TR_InHouse_Training_Details.ToList();
            List<InHouseTrainingCourseModel> Course_info = new List<InHouseTrainingCourseModel>();

            if (TrainingCourseDetails != null && TrainingCourseDetails.Count > 0)
            {
                foreach (var item in TrainingCourseDetails)
                {
                    InHouseTrainingCourseModel course = new InHouseTrainingCourseModel();
                    course.TrainingId = item.TrainingId;

                    var courseid = _entity.tb_TR_InHouse_Course.Where(x => x.Code.Trim().ToUpper() == item.Code.Trim().ToUpper() && x.IsActive == true).Select(x => x.Id).FirstOrDefault();

                    course.CourseId = courseid;
                    course.Code = item.Code;
                    course.Course_Name = item.Course_Name;
                    course.Type = item.Type;
                    course.From_Date = Convert.ToDateTime(item.From_Date);
                    course.To_Date = Convert.ToDateTime(item.To_Date);
                    course.TrainingId = item.TrainingId;
                    course.TrainingId = item.TrainingId;
                    course.TrainingId = item.TrainingId;
                    ///Date conversion Into yyy-MM-dd//
                    var stringFromDate = item.From_Date.ToString();
                    var Fdate = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                    course.From_Date_string_date = Fdate;
                    var stringToDate = item.To_Date.ToString();
                    var Tdate = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                    course.To_Date_string_date = Tdate;
                    Course_info.Add(course);
                }
            }

            model._CourseList = Course_info;
            model.InhouseTraining = HouseTrain;
            return View(model);
            #endregion


        }
        public ActionResult View_P034(BusinessInternational model1)
        {
            #region P034
            string[] splitData = model1.id.Split('~');
            model1.dataview_id = splitData[4];
            model1.req_id = Convert.ToInt32(splitData[0]);
            model1.approver_id = splitData[1];
            model1.my_Process_type = splitData[2];
            model1.process_table_id = Convert.ToInt64(splitData[3]);
            var data = _entity.tb_Request_Hdr.Where(x => x.Id == model1.req_id).FirstOrDefault();
            model1.template_id = data.WFTemplate_ID ?? 0;
            model1.request_id = data.tb_Application.Application_Code + "-" + data.Request_ID;
            model1.req_id_only = data.Request_ID;
            var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
            var company = _entity.tb_Company.Where(x => x.Company_Id == emp.Company_Id && x.IsActive == true).FirstOrDefault();
            var department = _entity.tb_Department.Where(x => x.Department_Id == emp.Department_Id && x.IsActive == true).FirstOrDefault();
            var cost_center = _entity.tb_CostCenter.Where(x => x.CC_Id == emp.CC_Id && x.IsActive == true).FirstOrDefault();
            var application = data.tb_Application;
            var domain = application.tb_Domain;
            var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
            var job = _entity.tb_Job.Where(x => x.Job_Id == emp.Job_Tittle_Id && x.IsActive == true).FirstOrDefault();
            if (splitData[2] != "ForwardView")
            {
                #region Check that the person have the edit provision 
                if (data.Approver_ID == data.OrgApprover_ID)
                {
                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***                                                                                               //var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
                    var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
                    if (role != null)
                    {
                        #region
                        tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                        if (temp != null)
                        {
                            if (temp.Edit_Option.Trim() == "R")
                            {
                                model1.can_edit = false;
                            }
                            else
                            {
                                model1.can_edit = true;
                            }
                            model1.can_distribute = temp.DistributionList_ID.ToString();
                            if (temp.Action_Flag == escalationFlag)
                                model1.canEscalate = true;//***
                            else
                                model1.canEscalate = false;
                            model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                            model1.can_distribute = temp.DistributionList_ID.ToString();//***
                            model1.level = Convert.ToInt32(temp.Sequence_NO);
                            model1.my_process_code = temp.Status_ID;
                        }
                        else
                        {
                            model1.canEscalate = false;//***
                            model1.escalation_No = 0;//***
                        }
                        model1.my_role = role.Role_Desc;//***
                        model1.my_role_code = role.Role_ID;//***
                        #endregion
                    }
                    else
                    {
                        #region
                        var appNo = Convert.ToInt32(data.Approval_No);
                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                        if (log != null)
                        {
                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                            if (newRole != null)
                            {
                                var temp = _rpp.GetTemplateDetails(newRole.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                if (temp != null)
                                {
                                    if (temp.Edit_Option.Trim() == "R")
                                    {
                                        model1.can_edit = false;
                                    }
                                    else
                                    {
                                        model1.can_edit = true;
                                    }
                                    model1.can_distribute = temp.DistributionList_ID.ToString();
                                    if (temp.Action_Flag == escalationFlag)
                                        model1.canEscalate = true;//***
                                    else
                                        model1.canEscalate = false;
                                    model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                    model1.can_distribute = temp.DistributionList_ID.ToString();//***
                                    model1.level = Convert.ToInt32(temp.Sequence_NO);
                                    model1.my_process_code = temp.Status_ID;
                                }
                                else
                                {
                                    model1.canEscalate = false;//***
                                    model1.escalation_No = 0;//***
                                }
                                model1.my_role = newRole.Role_Desc;//***
                                model1.my_role_code = newRole.Role_ID;//***
                            }
                        }
                        #endregion
                    }
                }
                else // reuest coming from the delegate 
                {
                    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                    int escalationFlag = Convert.ToInt32(template_ActionFlag.Escalate) + 1;//***
                    if (role != null)
                    {
                        #region 
                        var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                        if (temp != null)
                        {
                            if (temp.Edit_Option == "R")
                            {
                                model1.can_edit = false;
                            }
                            else
                            {
                                model1.can_edit = true;
                            }
                            model1.can_distribute = temp.DistributionList_ID.ToString();
                            if (temp.Action_Flag == escalationFlag)
                                model1.canEscalate = true;//***
                            else
                                model1.canEscalate = false;
                            model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                            model1.can_distribute = temp.DistributionList_ID.ToString();//***
                            model1.level = Convert.ToInt32(temp.Sequence_NO);
                            model1.my_process_code = temp.Status_ID;
                        }
                        else
                        {
                            model1.canEscalate = false;
                            model1.escalation_No = 0;
                        }
                        model1.my_role = role.Role_Desc;
                        model1.my_role_code = role.Role_ID;
                        #endregion
                    }
                    else
                    {
                        #region 
                        var appNo = Convert.ToInt32(data.Approval_No);
                        var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.Actor_To == data.Approver_ID && x.IsActive == true && x.SequenceNo <= appNo).OrderByDescending(x => x.IsActive).FirstOrDefault();
                        if (log != null)
                        {
                            var newRole = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId_To && x.IsActive == true).FirstOrDefault();
                            if (newRole != null)
                            {
                                //var temp = _entity.tb_WF_Template.Where(x => x.Role_ID == role.Role_ID && x.WF_ID == data.WF_ID && x.Profile_ID == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                                var temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);
                                if (temp != null)
                                {
                                    if (temp.Edit_Option == "R")
                                    {
                                        model1.can_edit = false;
                                    }
                                    else
                                    {
                                        model1.can_edit = true;
                                    }
                                    model1.can_distribute = temp.DistributionList_ID.ToString();
                                    if (temp.Action_Flag == escalationFlag)
                                        model1.canEscalate = true;//***
                                    else
                                        model1.canEscalate = false;
                                    model1.escalation_No = Convert.ToInt32(temp.Sequence_NO);//***
                                    model1.can_distribute = temp.DistributionList_ID.ToString();//***
                                    model1.level = Convert.ToInt32(temp.Sequence_NO);
                                    model1.my_process_code = temp.Status_ID;
                                }
                                else
                                {
                                    model1.canEscalate = false;
                                    model1.escalation_No = 0;
                                }
                                model1.my_role = role.Role_Desc;
                                model1.my_role_code = role.Role_ID;
                            }
                        }
                        #endregion
                    }
                }
                #endregion Check that the person have the edit provision
            }
            if (data.Status_ID == "HLD")
                model1.is_hold = true;
            else
                model1.is_hold = false;
            model1.request_profile = profile.Profile_ID;
            model1.haveProfile = data.tb_WFType.HaveProfile ?? false;
            model1.country_code = emp.tb_Location.tb_Country.Country_Code;
            model1.service_required = data.tb_WFType == null ? "" : data.tb_WFType.WF_App_Name;
            model1.application = application.Application_Name;
            model1.domain = domain.Domain_Name;
            model1.emp_name = emp.Emp_Name;
            model1.global_id = emp.GblEmp_ID + ":" + emp.Global_Group;
            model1.local_id = data.Employee_ID;
            model1.company = company == null ? "" : company.Company_Name;
            model1.job_tittle = job.Job_tittle;
            model1.department = department.Department_Name;
            model1.business_line = emp.tb_Department.tb_ProductGroup.tb_BusinessLine == null ? "" : emp.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Line_Name;
            model1.cost_center = cost_center == null ? "" : cost_center.CC_Name;
            model1.mobile_phone = emp.Mobile_No;
            model1.application_id = data.Application_ID.ToString();
            model1.wf_type = data.tb_WFType.WF_ID;
            model1.title = application.Application_Name + " - " + data.tb_WFType.WF_App_Name + " ( " + data.tb_WFType.WF_ID + " )";
            if (data.Approval_No.Trim() == "1" && (data.Status_ID == "INT" || data.Status_ID == "HLD" || data.Status_ID == "BKI"))
            {
                model1.is_first_approver = true;// The first approver don't want the Send back to approver button 
            }
            #region RequestData
            long reqId = Convert.ToInt32(data.Request_ID);
            var _p034 = _entity.tb_TA_Business_International.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
            model1.Place_Visit = _p034.Place_Visit;
            model1.Reasons = _p034.Reasons;
            model1.Remark = _p034.Remark;
            model1.Is_Compliance_Approval_Required = Convert.ToInt32(_p034.Is_Compliance_Approval);
            model1.Compliance_Approval_Date = _p034.Compliance_Approval_Date ?? CurrentTime;
            model1.Last_Day_Of_Work = _p034.Last_Day_Of_Work ?? CurrentTime;
            model1.Return_To_Duty = _p034.Return_To_Duty ?? CurrentTime;
            model1.Is_WorkFlow_delegated = Convert.ToInt32(_p034.IsDelegated);
            model1.Justification_Not_Delegated = _p034.Just_No_Delegated;
            model1.IsPossible_Video_Conference = Convert.ToInt32(_p034.IsVideo_Conference);
            model1.Justification_No_Video_Conference = _p034.Just_No_Video;
            model1.Address_During_Absence = _p034.Address_During_Absence;
            model1.telephone = _p034.Telephone_No;
            model1.Mode_Of_Travel = _p034.Travel_Mode;
            //model1.abb_locations = (Location)_p034.Location_Id;
            model1.Required_Ext_or_Reentry_Visa = Convert.ToInt32(_p034.Is_Exit_ReEntry_Visa);
            model1.Type_of_Required_Ext_or_Reentry_Visa = _p034.Type_Exit_ReEntry_Visa;
            model1.Visa_Charged_to = _p034.Visa_Charged_to;
            model1.Required_Foreign_Visa = Convert.ToInt32(_p034.Is_Foreign_Visa);
            model1.Foreign_Visa_Countries = _p034.Foreign_Visa_Countries;
            model1.Foreign_Visa_Quantity = _p034.Foreign_Visa_Quantity;
            model1.Requied_Travel_Insurance = Convert.ToInt32(_p034.Is_Travel_Insurance);
            model1.Travel_Insurance_Countries = _p034.Travel_Insurance_Countries;
            model1.Travel_Insurance_Quantity = _p034.Travel_Insurance_Quantity;
            model1.Required_RentCar = Convert.ToInt32(_p034.Is_RentCar);
            model1.RentCar_Charged_to = _p034.RentCar_Charged_to;
            model1.RentCar_ProjectNo = _p034.RentCar_ProjectNo;
            model1.Car_Type = _p034.Car_Type;
            model1.Car_PickUp_at = _p034.Car_PickUp_at;
            model1.Car_PickUp_date = _p034.Car_PickUp_date ?? CurrentTime;
            model1.Car_PickUp_Time = _p034.Car_PickUp_Time;
            model1.Car_Remark = _p034.Car_Remark;
            model1.Required_Hotel_Booking = Convert.ToInt32(_p034.Is_Hotel);
            model1.HotelBooking_Charged_to = _p034.Hotel_Charged_to;
            model1.Hotel_ProjectNo = _p034.Hotel_ProjectNo;
            model1.Hotel_Name = _p034.Hotel_Name;
            model1.hotel_location = _p034.Hotel_Location;
            model1.Room_Preference = _p034.Room_Preference;
            model1.Type_Of_rooms = _p034.Room_Type;
            model1.HotelBooking_Payment_Type = _p034.Hotel_Payment_Type;
            model1.Hote_Checking_Date = _p034.Hote_Check_In_Date ?? CurrentTime;
            model1.Hotel_Check_In_Time = _p034.Hotel_Check_In_Time;
            model1.Hotel_Check_Out_Date = _p034.Hotel_Check_Out_Date ?? CurrentTime;
            model1.Hotel_Check_Out_Time = _p034.Hotel_Check_Out_Time;
            model1.Hotel_Remark = _p034.Hotel_Remark;
            model1.Departure_Date = _p034.Departure_Date ?? CurrentTime;
            model1.Departure_Flight_Number = _p034.Departure_Flight_No;
            model1.Return_Date = _p034.Return_Date ?? CurrentTime;
            model1.Return_Flight_Number = _p034.Return_Flight_No;
            model1.Travel_Routing = _p034.Travel_Routing;
            model1.Note = _p034.Note;
            ////////////////////////////////////model1.Type_Of_Ticket = _p034.;
            model1.Cash_Advance = Convert.ToInt32(_p034.Cash_Advance);
            model1.Amex_Holder = Convert.ToInt32(_p034.Amex_Holder);
            model1.Salary_Advance = _p034.Salary_Advance;
            model1.Bank_account = _p034.Bank_account;
            model1.Ticket_Cost = _p034.Ticket_Cost;
            model1.IBAN = _p034.IBAN;
            model1.Hotel_Cost = _p034.Hotel_Cost;
            model1.Daily_allowance = _p034.Daily_allowance;
            model1.Other_Expenses = _p034.Other_Expenses;
            model1.Advance_Remark = _p034.Advance_Remark;
            model1.Travel_Advance_Total = _p034.Travel_Advance_Total;
            model1._dependentsInfo = new List<TA_DependentsInfo>();
            var dependentInfo = _entity.tb_TA_DependentsInfo.Where(x => x.TA_Id == _p034.Id && x.IsActive == true).ToList();
            foreach (var item in dependentInfo)
            {
                TA_DependentsInfo one = new TA_DependentsInfo();
                one.name = item.Name;
                one.relation_ship = item.Relationship;
                one.age = item.Age;
                one.visa_type = item.Visa_Type;
                one.ta_type = item.TA_Type;
                one.remark = item.Remark;
                model1._dependentsInfo.Add(one);
            }
            model1._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
            var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == _p034.Id && x.IsActive == true).ToList();
            foreach (var item in travel)
            {
                TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                one.ticket_number = item.Ticket_Number;
                one.ticket_price = item.TicketPrice;
                one.issue_date = item.IssueDate;
                model1._travelAgencyInfo.Add(one);
            }
            model1.Ticket_Status = _p034.Ticket_Status ?? 0;
            model1.Business_Days = _p034.Business_Days ?? 0;
            model1.Friday = _p034.Friday ?? 0;
            model1.Saturday = _p034.Saturday ?? 0;
            model1.Total = _p034.Total ?? 0;
            #endregion RequestData
            #endregion P034           
            return View(model1);
        }
        public ActionResult View_T001(WaitingRequestDetails model)// T001 George 13-07-2020
        {
            #region T001
            var _T001 = _entity.tb_TR_External_Training.Where(x => x.RequestId == model.request_id && x.IsActive == true).FirstOrDefault();
            ExternalTrainingModel ExtTrain = new ExternalTrainingModel();
            if (_T001 != null)
            {
                ExtTrain.RequestId = _T001.RequestId;
                ExtTrain.Justification = _T001.Justification;
                ExtTrain.Years = _T001.Years;
                ExtTrain.GrandTotal = _T001.GrandTotal;
            }
            List<tb_TR_External_Training_Detail> TrainingCourseDetails = new List<tb_TR_External_Training_Detail>();
            TrainingCourseDetails = _T001.tb_TR_External_Training_Detail.ToList();
            List<ExternalTrainingDetailModel> Course_info = new List<ExternalTrainingDetailModel>();

            if (TrainingCourseDetails != null && TrainingCourseDetails.Count > 0)
            {
                foreach (var item in TrainingCourseDetails)
                {
                    ExternalTrainingDetailModel course = new ExternalTrainingDetailModel();
                    course.ExternTrainingId = item.ExternTrainingId;

                    var courseid = _entity.tb_TR_External_Courses.Where(x => x.Course_Name.Trim().ToUpper() == item.Course_Name.Trim().ToUpper() && x.IsActive == true).Select(x => x.Id).FirstOrDefault();

                    course.CourseId = courseid;
                    course.Course_Name = item.Course_Name;
                    course.From_Date = Convert.ToDateTime(item.From_Date);
                    course.To_Date = Convert.ToDateTime(item.To_Date);
                    course.Training_Type = item.Training_Type;
                    course.Location = item.Location;
                    course.Cost = item.Cost;
                    course.NoofDays = item.NoofDays;
                    ///Date conversion Into yyy-MM-dd//
                    var stringFromDate = item.From_Date.ToString();
                    var Fdate = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                    course.From_Date_string_date = Fdate;
                    var stringToDate = item.To_Date.ToString();
                    var Tdate = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                    course.To_Date_string_date = Tdate;
                    Course_info.Add(course);
                }
            }

            model._TrainingDetails = Course_info;
            model.ExternalTraining = ExtTrain;
            return View(model);
            #endregion
        }
        //05-05-2020
        public ActionResult View_P099(HRPaymentrequest model1)
        {
            var _p099 = _entity.tb_PP_CarLoanPayment.Where(x => x.RequestId == model1.req_id_only && x.IsActive == true).FirstOrDefault();
            if (_p099.Cheque_Date != null)
            {
                try
                {
                    var stringDate = _p099.Cheque_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model1.cheque_date_string = xx;
                }
                catch
                {
                    var stringDate = _p099.Cheque_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model1.cheque_date_string = xx;
                }
            }
            model1.table_Id = _p099.Id;
            model1.RequestId = _p099.RequestId;
            model1.PaymentMode = _p099.PaymentMode;
            model1.carloanrequest_number = _p099.Carloan_Request_No;
            model1.Amount_SAR = _p099.Amount_SAR;
            model1.Account_No = _p099.Account_No;
            model1.PurposeText = _p099.Purpose_Text;
            model1.supplier = _p099.supplier;
            model1.Payable_To = _p099.Cheque_Payable;
            model1.File_Attachment = _p099.Attachment_Filepath;
            model1.Remark = _p099.Remark;
            model1.From_BankName = _p099.From_Bank;
            model1.From_Address = _p099.From_Address;
            model1.From_Account_No = _p099.From_AccountNo;
            model1.To_Benificiary = _p099.To_Benificiary;
            model1.To_BankName = _p099.To_BankName;
            model1.To_Address = _p099.To_Address;
            model1.To_Account_No = _p099.To_AccountNo;
            model1.To_IBAN = _p099.To_IBAN;
            return View(model1);
        }
        public ActionResult View_P012(WaitingRequestDetails model)// Nimmi Mohan 23-03-2020
        {
            var _P012 = _entity.tb_PP_Letter_To_RealEstate.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            LetterToRealEstateModel mo = new LetterToRealEstateModel();
            if (_P012 != null)
            {

                mo.RequestId = _P012.RequestId;
                mo.LocalEmplyee_ID = _P012.LocalEmplyee_ID;
                mo.Iqama_Number = _P012.Iqama_Number;
                mo.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P012.Location_Code).Select(x => x.Location).FirstOrDefault();
                mo.Iqama_Identification = _P012.Iqama_Identification;
                mo.Attachment_Filepath = _P012.Attachment_Filepath;
                mo.TimeStamp = _P012.TimeStamp;

                if (_P012.Certificate_with_Salary == 1)
                {
                    mo.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
                }
                else if (_P012.Certificate_with_Salary == 0)
                {
                    mo.Certificate_with_Salary_String = BooleanValue.No.ToString();
                }

                if (_P012.Chamber_Of_Commerce_Stamp == 1)
                {
                    mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
                }
                else if (_P012.Chamber_Of_Commerce_Stamp == 0)
                {
                    mo.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
                }

                if (_P012.Ministry_Of_Foreign_Affairs == 1)
                {
                    mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
                }
                else if (_P012.Ministry_Of_Foreign_Affairs == 0)
                {
                    mo.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
                }
                model.LetterToRealEstateModel = mo;
            }

            return View(model);
        }
        public ActionResult View_P054(WaitingRequestDetails model)  //Nimmi Mohan 24-03-2020
        {

            var _p054 = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            model.payment_mode = _p054.PaymentMode;
            if (_p054.PaymentMode == "C")
            {
                if (_p054.Cheque_Date != null)
                {
                    try
                    {
                        var stringDate = _p054.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _p054.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                }
                model.payment_mode = _p054.PaymentMode;
                model.amount_sar = _p054.Amount_SAR;
                model.purpose_text = _p054.Purpose_Text;
                model.payable_to = _p054.Cheque_Payable;
                model.attachment_filepath = _p054.Attachment_Filepath;
            }
            else
            {
                model.amount_sar = _p054.Amount_SAR;
                model.from_bank = _p054.From_Bank;
                model.from_addreess = _p054.From_Address;
                model.from_account_no = _p054.From_AccountNo;
                model.to_beneficiary = _p054.To_Benificiary;
                model.to_bankname = _p054.To_BankName;
                model.to_address = _p054.To_Address;
                model.to_account_no = _p054.To_AccountNo;
                model.bank_attachment = _p054.Bank_Attachment;
                model.attachment_filepath = _p054.Attachment_Filepath;
                model.remark = _p054.Remark;
            }


            return View(model);
        }
        public ActionResult View_P023(WaitingRequestDetails model)
        {
            var _p023 = _entity.tb_PP_Carloan_Request.Where(x => x.RequestId == model.req_id_only && x.IsActive == true).FirstOrDefault();
            if (_p023 != null)
            {
                model.reason = _p023.Reason;
                model.employee_grade = Convert.ToInt32(_p023.Employee_Grade);
                model.joining_date = Convert.ToDateTime(_p023.Joining_Date);
                //model.att_quotation_filepath = _p023.Att_Quotation_Filepath;
                model.car_cost_reimbursement = Convert.ToDecimal(_p023.Car_Cost_Reimbursement);
                model.first_loan = _p023.First_Loan;
                model.subsequent_loan = _p023.Subsequent_Loan;
                model.car_quotation_amount = Convert.ToDecimal(_p023.Car_Quotation_Amount);
                model.maximum_entitlement = Convert.ToDecimal(_p023.Maximum_Entitlement);
                model.monthly_installment = Convert.ToDecimal(_p023.Monthly_Installment);
                model.effective_date = Convert.ToDateTime(_p023.Effective_Date);
                //model.attachment_filepath = _p023.Attachment_Filepath;
            }

            return View(model);
        }
        public ActionResult View_P025(WaitingRequestDetails model)
        {
            var _p025 = _entity.tb_PP_EndofServiceClearance.Where(x => x.RequestId == model.req_id_only && x.IsActive == true).FirstOrDefault();
            if (_p025 != null)
            {
                model.reason_clearance = _p025.Reason_Clearance;
                model.termination_Date = Convert.ToDateTime(_p025.Termination_Date);
                model.eb_Toolbox_Returned = _p025.EB_Toolbox_Returned;
                model.eb_Workstation_Cleared = _p025.EB_Workstation_Cleared;
                model.eb_OfficialBusiness_Documents = _p025.EB_OfficialBusiness_Documents;
                model.eb_SiteProject_Clearance = _p025.EB_SiteProject_Clearance;
                model.eb_Uniform = _p025.EB_Uniform;
                model.eb_Safety_Equipment = _p025.EB_Safety_Equipment;
                model.eb_AllWorkflow_Approvals = _p025.EB_AllWorkflow_Approvals;
                model.eb_ISService_Deactivation_Date = Convert.ToDateTime(_p025.EB_ISService_Deactivation_Date);
                model.eb_Assigned_Delegate = _p025.EB_Assigned_Delegate;
                model.ad_HousingHousehold_cleared = _p025.AD_HousingHousehold_cleared;
                model.ad_Util_Water_cleared = _p025.AD_Util_Water_cleared;
                model.ad_CarGarageKey_Returned = _p025.AD_CarGarageKey_Returned;
                model.ad_Gatepass_Returned = _p025.AD_Gatepass_Returned;
                model.ad_Mobile_SimCard_Returned = _p025.AD_Mobile_SimCard_Returned;
                model.ad_CompanyID_Returned = _p025.AD_CompanyID_Returned;
                model.tr_Amount_SAR = Convert.ToDecimal(_p025.TR_Amount_SAR);
                model.tr_ExternalTraining_Cost = _p025.TR_ExternalTraining_Cost;
                model.is_Desktop_Returned = _p025.IS_Desktop_Returned;
                model.ft_Clearance_Obtained = _p025.FT_Clearance_Obtained;
                model.ft_eBank_Token = _p025.FT_eBank_Token;
                model.ae_Clearance_Obtained = _p025.AE_Clearance_Obtained;
                model.hr_CarLoan_Cleared = _p025.HR_CarLoan_Cleared;
                model.hr_SalaryAdvances_Settled = _p025.HR_SalaryAdvances_Settled;
                model.hr_CompanyStamp_Returned = _p025.HR_CompanyStamp_Returned;
                model.hr_MedicalInsurance_Returned = _p025.HR_MedicalInsurance_Returned;
                model.hr_Visa_Mastercard_Communicated = _p025.HR_Visa_Mastercard_Communicated;
                model.hr_Savingcurrent_communicated = _p025.HR_Savingcurrent_communicated;
                model.hr_Remarks = _p025.HR_Remarks;
                model.hr_Attachment_Filepath = _p025.HR_Attachment_Filepath;
                //model.attachment_filepath = _p025.Attachment_Filepath;

                //07-05-2020
                model.eb_toolbx_returned_date = _p025.EB_toolbx_returned_date;
                model.workstation_cleared_date = _p025.EB_workstation_cleared_date;
                model.official_business_doc_date = _p025.EB_official_business_doc_date;
                model.site_project_clearance_date = _p025.EB_site_project_clearance_date;
                model.uni_form_date = _p025.EB_uni_form_date;
                model.safety_equipment_date = _p025.EB_safety_equipment_date;
                model.workflow_approvals_date = _p025.EB_workflow_approvals_date;
                model.housing_household_date = _p025.AD_housing_household_date;
                model.car_garage_key_date = _p025.AD_car_garage_key_date;
                model.gatepass_sticker_date = _p025.AD_gatepass_sticker_date;
                model.Mobile_returned_date = _p025.AD_Mobile_returned_date;
                model.company_id_returned_date = _p025.AD_company_id_returned_date;
                model.utilities_water_etc_date = _p025.AD_utilities_water_etc_date;
                model.desktop_etc_cleared_date = _p025.IS_desktop_etc_cleared_date;
                model.clearance_obtained_fin_date = _p025.FT_clearance_obtained_fin_date;
                model.e_bank_token_date = _p025.FT_e_bank_token_date;
                model.clearance_obtained_ae_date = _p025.AE_clearance_obtained_ae_date;
                model.car_loan_cleared_date = _p025.HR_car_loan_cleared_date;
                model.salary_advance_settled_date = _p025.HR_salary_advance_settled_date;
                model.company_stamp_returned_date = _p025.HR_company_stamp_returned_date;
                model.medical_insurance_date = _p025.HR_medical_insurance_date;
                model.visa_master_commun_date = _p025.HR_visa_master_commun_date;
                model.sav_current_account_date = _p025.HR_sav_current_account_date;


            }

            return View(model);
        }  //Nimmi Mohan P025  07/05/2020
        public PartialViewResult Take_Reason_For_Approve_Request(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.my_role = splitData[3];
            return PartialView("~/Views/Request/_pv_ApproveRequestReason.cshtml", model);
        }
        public object Submit_RequestApprove(SubmitRequest model)
        {
            bool status = false;
            string msg = "Failed";
            string roleid = "";
            string myPosition = "";
            string myRole = "";
            string request_id = model.request_id;
            string myId = model.my_id;
            var result = _rpp.ApproveRequest(request_id, myId, model.reason);
            status = result.Item1;
            msg = result.Item2;
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == request_id).FirstOrDefault();// 25-02-2020 ARCHANA SRISHTI 
            EmailTemplateDataModel model1 = new EmailTemplateDataModel();
            model1.process_type = EmailProcessType.Approve;
            model1.wf_id = data.WF_ID;
            model1.request_id = data.Id;
            model1.who_am_i = model.my_id;
            if (result.Item4 == true) //Basheer on 28-05-2020
            {
                model1.ista = true;
            }
            else
            {
                model1.ista = false;
            }

            try
            {
                Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                email.Start();

                Thread distribution = new Thread(() => Distributionsend(email, data, result.Item3, myId, myRole, model.reason, result.Item4)); //Basheer on 28-05-2020
                distribution.Start();
            }
            catch (Exception ex)
            {

            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        private void Distributionsend(Thread email, tb_Request_Hdr data, long item3, string myId, string myRole, string reason, bool isdistributionflag)
        {
            int count = 0;
            while (email.IsAlive == true)
            {
                count = count + 1;
            }
            //Basheer on 13-05-2020
            //DistributionRequest(data, item3, data.Approval_No, "", myId, myRole);

            bool status = DistributionRequest(data, item3, data.Approval_No, "", myId, myRole, isdistributionflag); //Basheer on 28-05-2020
            if (status && isdistributionflag == false) //28-05-2020
            {
                TempData["comment"] = reason;
                EmailTemplateDataModel model1 = new EmailTemplateDataModel();
                model1.process_type = EmailProcessType.ApproveCompleted;
                model1.wf_id = data.WF_ID;
                model1.request_id = data.Id;
                model1.who_am_i = myId;

                try
                {
                    Thread completeemail = new Thread(() => Email_Template(model1, data.tb_WFType));
                    completeemail.Start();
                }
                catch (Exception ex)
                {

                }
            }
        }
        public object Submit_RequestPaid(SubmitRequest model)
        {
            string msg = "Failed";
            bool status = false;
            var old = _entity.tb_Request_Hdr.Where(x => x.IsActive == true && x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault();
            Tuple<bool, string, string, string> data = _rpp.RequestPaid(model.request_id, model.my_id);
            if (data.Item1)
            {
                msg = "Paid Successfully";
                string remark = "Request was Paid by";
                status = data.Item1;
                //_ApprovalLogRepository.Send_Paid_Mail_Login(old.Request_ID, data.Item2, data.Item3, old.Employee_ID, old.Approver_ID, data.Item4, remark, old);
                _ApprovalLogRepository.Send_Paid_Mail_Login(old.Request_ID, data.Item2, data.Item3, old.Employee_ID, model.my_id, data.Item4, remark, old);  //replaced old.Approver_ID with  model.my_id by basheer on 21-01-2020 to show approver name on approval log
                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.PaidClose;
                model1.wf_id = old.WF_ID;
                model1.request_id = old.Id;
                model1.who_am_i = model.my_id;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, old.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
                //if (model.distribution_id != null)//03-03-2020 ARCHANA K V SRISHTI II
                //{
                //    DistributionRequest(old, Convert.ToInt64(model.distribution_id), old.Approval_No, "", model.my_id, model.my_role);// 25-02-2020 ARCHANA SRISHTI 
                //}
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_RequestClose(SubmitRequest model)
        {
            string msg = "Failed";
            bool status = false;
            Tuple<bool, string, string, string, string, string, tb_Request_Hdr> result = _rpp.CloseRequest(model.request_id, model.my_id);
            #region Old
            //var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault(); // Last row of the request
            //data.Process_Complete = 1;
            //_entity.SaveChanges();
            //string myPosition = "";
            //string myRole = "";
            //if (data.Approver_ID == data.OrgApprover_ID)
            //{
            //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
            //    myPosition = role.Role_Desc;
            //    myRole = role.Role_ID;
            //}
            //else
            //{
            //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
            //    myPosition = role.Role_Desc;
            //    myRole = role.Role_ID;
            //}
            //var paid = _entity.tb_Request_Hdr.Create();
            //paid.Request_ID = data.Request_ID;
            //paid.WF_ID = data.WF_ID;
            //paid.Application_ID = data.Application_ID;
            //paid.Employee_ID = data.Employee_ID;
            //paid.Approver_ID = model.my_id;
            //paid.OrgApprover_ID = model.my_id;
            //paid.Creater_ID = data.Creater_ID;
            //paid.Status_ID = "CLS";
            //paid.Approval_No = data.Approval_No;
            //paid.WFTemplate_ID = data.WFTemplate_ID;
            //paid.WebLink = "";
            //paid.IsActive = true;
            //paid.TimeStamp = CurrentTime;
            //paid.Process_Complete = 1;
            //_entity.tb_Request_Hdr.Add(paid);
            //status = _entity.SaveChanges() > 0;
            #endregion Old
            if (result.Item1)
            {
                msg = "Closed Successfully";
                string remark = "Request was Closed by";
                _ApprovalLogRepository.Send_Close_Mail_Login(model.request_id, result.Item2, result.Item3, result.Item6, result.Item4, result.Item5, remark, result.Item7);

                var data_p016 = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).FirstOrDefault();
                if (data_p016 != null)
                {
                    if (data_p016.tb_WFType.WF_ID == "P016" || data_p016.tb_WFType.WF_ID == "P017")
                    {
                        UpdateEmployeeDetails(model.request_id, data_p016.tb_WFType.WF_ID);
                    }
                    //Added by chitra Srishti on 23.06.2020 For Linking the P003 module when closing.
                    else if (data_p016.tb_WFType.WF_ID == "P003")
                    {
                        var data_p003 = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.TicketRefundModel.TA_Request_No && x.IsActive == true).FirstOrDefault();
                        UpdateRequestDetails(data_p003.Request_ID, data_p016.tb_WFType.WF_ID, data_p016.Employee_ID);
                        var data_refund = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == model.request_id && x.TA_Request_No == model.TicketRefundModel.TA_Request_No && x.Ticket_No == model.TicketRefundModel.TicketNumber && x.IsActive == true).FirstOrDefault();
                        UpdateRefundAirticket(data_refund.RequestId, data_refund.TA_Request_No, data_refund.Ticket_No);

                    }
                    //Added by chitra Srishti on 23.06.2020 For Linking the P003 module when closing.
                    else if (data_p016.tb_WFType.WF_ID == "P052")
                    {
                        var data_p052 = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.endof_service).FirstOrDefault();
                        UpdateEndofServiceDetails(data_p052.Request_ID, data_p052.tb_WFType.WF_ID, data_p052.Employee_ID);

                    }
                }

                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.Close;
                model1.wf_id = result.Item7.WF_ID;
                model1.request_id = result.Item7.Id;
                model1.who_am_i = model.my_id;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, result.Item7.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
                //if (model.distribution_id != null)//03-03-2020 ARCHANA K V SRISHTI II
                //{
                //    status = DistributionRequest(result.Item7, Convert.ToInt64(model.distribution_id), result.Item7.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHTI 
                //}
                status = true;
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_RequestUnderProcess(SubmitRequest model)
        {
            string msg = "Failed";
            bool status = false;
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault();
            var my_data = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();
            data.Status_ID = "UPC";
            data.TimeStamp = CurrentTime;
            data.Process_Complete = 0;
            status = _entity.SaveChanges() > 0;
            if (status)
            {
                msg = "Request under processing";
                string remark = "Request under Process ";
                _ApprovalLogRepository.Send_Under_Process_Mail_Login(data.Request_ID, model.my_role + " " + my_data.Emp_Name, model.my_role, data.Employee_ID, model.my_id, remark, model.reason, data);
                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.UnderProcess;
                model1.wf_id = data.WF_ID;
                model1.request_id = data.Id;
                model1.who_am_i = model.my_id;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
            }
            //var empdetails = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
            //string content = "Your request is in under process";
            //SmtpClient client = new SmtpClient();
            //string userName = "abb@srishtis.com";
            //string password = "123456";
            //string fromName = "WF";
            //MailAddress address = new MailAddress(userName, fromName);
            //MailMessage message = new MailMessage();
            //message.To.Add(new MailAddress(empdetails.eMail, "Receiver"));
            //message.From = address;
            //message.Subject = "Request Under Process";
            //message.IsBodyHtml = true;
            //message.Body = content;
            //client.Host = "smtpout.secureserver.net";
            //client.Port = 80;
            //client.EnableSsl = false; 
            //client.UseDefaultCredentials = true;
            //client.Credentials = new NetworkCredential(userName, password);
            //try
            //{
            //    client.Send(message);
            //    status = true;
            //}
            //catch (Exception e)
            //{
            //    status = false;
            //}
            if (status)
                msg = "Successfully";
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_BalanceHousingAllowance(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_HousingAllowance.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.Cheque_Date = null;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }

                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var fillist = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var fillist = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p055
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HousingAllowance", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p055
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion

                            #region Keep AuditLog_p055 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HousingAllowance", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p055



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_HRRelatedPaymentRequest(HRPaymentrequest model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_HR_RelatedPayment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.PaymentMode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.Cheque_Date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.Amount_SAR);
                    insert_pp_data.PurposeText = model.PurposeText;
                    insert_pp_data.Payable_To = model.Payable_To;
                    insert_pp_data.supplier = model.supplier;
                    insert_pp_data.Account_No = model.Account_No;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.Currency = model.currenctType;// 28-02-2020 ARCHANA K V SRISHTI 
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_BankName = model.From_BankName;
                    insert_pp_data.Cheque_Date = null;    //13/02/2020 nimmi
                    insert_pp_data.From_Address = model.From_Address;
                    insert_pp_data.From_Account_No = model.From_Account_No;
                    insert_pp_data.To_Benificiary = model.To_Benificiary;
                    insert_pp_data.To_BankName = model.To_BankName;
                    insert_pp_data.To_Address = model.To_Address;
                    insert_pp_data.To_Account_No = model.To_Account_No;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.Amount_SAR);
                    insert_pp_data.Remark = model.Remark;
                    insert_pp_data.To_IBAN = model.To_IBAN;
                    insert_pp_data.PurposeText = model.PurposeText;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.Currency = model.currenctType;// 28-02-2020 ARCHANA K V SRISHTI 
                    status = _entity.SaveChanges() > 0;
                }

                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    //var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var role = _entity.tb_Role.Where(x => x.Assigned_ID == req.Approver_ID && x.IsActive == true && x.Application_ID == req.Application_ID).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                    {
                        var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                        var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                        var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                        #region Keep AuditLog_p009
                        string request_id = insert_pp_data.RequestId;
                        string record = (model.Cheque_Date.Year == 0001 ? null : model.Cheque_Date.ToString()) + " || " + model.PaymentMode + " || " + model.Amount_SAR + " || " + model.Account_No + " || " + model.PurposeText + " || " + model.supplier + " || " + model.Payable_To + " || " + model.Remark + " || " + model.From_BankName + " || " + model.From_Address + "||" + model.From_Account_No + "||" + model.To_Benificiary + " || " + model.To_BankName + " || " + model.To_Address + "||" + model.To_Account_No + " || " + model.To_IBAN + " || " + CurrentTime + " || " + model.currenctType;   //Audit Log Added by Nimmi 07/02/2020---//   ---//Changes in Cheque date updated on 13/02/2020 Nimmi---  28-02-2020 ARCHANA K V SRISHTI 
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HR_RelatedPayment", request_id, role.Role_Desc);
                        #endregion Keep AuditLog_p009
                    }
                    else
                    {
                        #region Log for SaveChanges
                        //Basheer on 06-02-2020 to save log for savechanges
                        string remark = "Request was Edited by";
                        string[] split1 = model.request_id.Split('-');
                        string rqid1 = split[1];
                        //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        //Basheer on 26-03-2020 for checking request
                        //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        if (req.Creater_ID == model.emp_local_id)
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        }
                        else
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                        }
                        #endregion

                        #region Keep AuditLog_p009 for initiator after backtoinitiator
                        string request_id = insert_pp_data.RequestId;
                        string record = (model.Cheque_Date.Year == 0001 ? null : model.Cheque_Date.ToString()) + " || " + model.PaymentMode + " || " + model.Amount_SAR + " || " + model.PurposeText + " || " + model.Payable_To + " || " + model.supplier + " || " + model.Account_No + " || " + model.From_BankName + " || " + model.From_Address + "||" + model.From_Account_No + "||" + model.To_Benificiary + " || " + model.To_BankName + " || " + model.To_Address + "||" + model.To_Account_No + " || " + model.Remark + " || " + model.To_IBAN + " || " + CurrentTime + " || " + model.currenctType;  //changes in cheque date updated on 13/02/2020 Nimmi//   28-02-2020  ARCHANA K V SRISHTI 
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HR_RelatedPayment", request_id, "INITIATOR");
                        #endregion Keep AuditLog_p009
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object NOT_USE_Submit_PP_BalanceHousingAllowanceEscalatedApprove(SubmitRequest model)
        {
            bool status = false;
            string msg = "Failed";
            string roleid = "";
            string myPosition = "";
            string myRole = "";
            long role_table_id = 0;
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault(); // Last row of the request
            string old_status = data.Status_ID;
            var my_data = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();// Approver personal data
            var role = _entity.tb_Role.Where(x => x.Assigned_ID == model.my_id && x.IsActive == true).FirstOrDefault();// Approve current role
            var initiator_details = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID).FirstOrDefault();// Requset for whom 
            //var wfTypes = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault(); //This request wf type data
            var closingType = _entity.tb_Closing_Type.Where(x => x.Id == data.tb_WFType.Closing_Type_Id && x.IsActive == true).FirstOrDefault();// Closing process of this wf type
            var profile = _entity.tb_Emp_Profile.Where(x => x.Id == initiator_details.Profile_ID && x.IsActive == true).FirstOrDefault();
            #region Delegate
            if (data.Approver_ID != data.OrgApprover_ID)
            {
                var delegatePerson = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                roleid = delegatePerson.Role_ID; // checking that this request is coming from the delegate process to me 
                myPosition = delegatePerson.Role_Desc;
                myRole = delegatePerson.Role_ID;
                role_table_id = delegatePerson.Id;
            }
            else
            {
                roleid = role.Role_ID;
                myPosition = role.Role_Desc;
                myRole = role.Role_ID;
                role_table_id = role.Id;
            }
            #endregion Delegate
            if (myRole != string.Empty)
            {
                var approver_id = Convert.ToInt32(data.Approval_No);
                int approvalStatus = Convert.ToInt32(statusEnum.Approval);
                var wfTemplate = _entity.tb_WF_Template.Where(x => x.WF_ID == data.WF_ID && x.Profile_ID == profile.Id && x.Role_ID != role_table_id && x.Action_Flag == approvalStatus && x.Sequence_NO > approver_id).OrderBy(x => x.Sequence_NO).FirstOrDefault();// For approve
                if (wfTemplate != null)
                {
                    var newApprover = _entity.tb_Role.Where(x => x.Id == wfTemplate.Role_ID && x.IsActive == true).FirstOrDefault();
                    if (newApprover != null) // Next Approver
                    {
                        if (newApprover.Assigned_ID != null) // Have a person for next approve
                        {
                            var checkDelegate = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == newApprover.Assigned_ID && x.IsActive == true).FirstOrDefault();
                            data.Process_Complete = 1;
                            _entity.SaveChanges();

                            #region Insert a row for next approver
                            var xx = _entity.tb_Request_Hdr.Create();
                            xx.Request_ID = data.Request_ID;
                            xx.WF_ID = data.WF_ID;
                            xx.Application_ID = data.Application_ID;
                            xx.Employee_ID = data.Employee_ID;
                            if (checkDelegate.DelegationFlag == true)
                                xx.Approver_ID = checkDelegate.Delegate_Emp_Code == null ? newApprover.Assigned_ID : checkDelegate.Delegate_Emp_Code;
                            else
                                xx.Approver_ID = newApprover.Assigned_ID;
                            xx.OrgApprover_ID = newApprover.Assigned_ID;
                            xx.Creater_ID = data.Creater_ID;
                            xx.Status_ID = wfTemplate.Status_ID;
                            xx.Approval_No = Convert.ToString(Convert.ToInt32(data.Approval_No) + 1);
                            xx.WFTemplate_ID = data.WFTemplate_ID;
                            xx.WebLink = null;
                            xx.IsActive = true;
                            xx.TimeStamp = CurrentTime;
                            xx.Process_Complete = 0;
                            xx.RoleId = wfTemplate.Role_ID;
                            _entity.tb_Request_Hdr.Add(xx);
                            status = _entity.SaveChanges() > 0;
                            if (status)
                            {
                                msg = "Approved Successfully";
                                string mailMsg = "Forwarded by " + my_data.Emp_Name;
                                string remark = "Request was approved by ";
                                bool sendMail = _ApprovalLogRepository.Send_Approval_Mail_Login(old_status, model.request_id, myPosition, myRole, data.Employee_ID, model.my_id, data.Approval_No, xx.Approver_ID, newApprover.Role_ID, remark, data, model.reason);
                            }
                            #endregion Insert a row for next approver
                        }
                        else
                        {
                            data.Process_Complete = 2;// Means my work completed but next work processes not completed 
                            _entity.SaveChanges();
                            msg = "Approve not completed, because the next approver is not assigned!";
                        }
                    }
                    else // Approver not defined
                    {
                        data.Process_Complete = 2;// Means my work completed but next work processes not completed 
                        _entity.SaveChanges();
                        msg = "Next Approver not defined";
                    }
                }
                else // No approver process again, so here close the process and enter the APC process You are the last approver
                {
                    data.Process_Complete = 1;
                    status = _entity.SaveChanges() > 0;
                    if (status)
                    {
                        if (data.Status_ID == statusEnum.Approval.ToString())// Last approver only give this
                        {
                            #region Insert APC , means me is the last approver , so i set the After Cycle Complete process
                            var addAPC = _entity.tb_Request_Hdr.Create();
                            var checkDelegate = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Approver_ID && x.IsActive == true).FirstOrDefault();

                            addAPC.Request_ID = data.Request_ID;
                            addAPC.WF_ID = data.WF_ID;
                            addAPC.Application_ID = data.Application_ID;
                            addAPC.Employee_ID = data.Employee_ID;
                            if (checkDelegate.DelegationFlag == true)
                                addAPC.Approver_ID = checkDelegate.Delegate_Emp_Code == null ? data.Approver_ID : checkDelegate.Delegate_Emp_Code;
                            else
                                addAPC.Approver_ID = data.Approver_ID;
                            addAPC.OrgApprover_ID = data.OrgApprover_ID;
                            addAPC.Creater_ID = data.Creater_ID;
                            addAPC.Status_ID = "APC";
                            addAPC.Approval_No = data.Approval_No;
                            addAPC.WFTemplate_ID = data.WFTemplate_ID;
                            addAPC.WebLink = "";
                            addAPC.IsActive = true;
                            addAPC.TimeStamp = CurrentTime;
                            addAPC.Process_Complete = 1;
                            addAPC.RoleId = data.RoleId;
                            _entity.tb_Request_Hdr.Add(addAPC);
                            status = _entity.SaveChanges() > 0;
                            string remark = "Request Approval Cycle Completed by";
                            bool sendMail = _ApprovalLogRepository.Send_Approval_Mail_Login(old_status, model.request_id, myPosition, myRole, data.Employee_ID, model.my_id, data.Approval_No, "", "", remark, data, model.reason);
                        }
                        #endregion Insert APC , means me is the last approver , so i set the After Cycle Complete process

                        msg = "Approved Successfully";//Confusion
                        if (closingType.Code == "CC") // Means this last approverr can close the cycle , for that can enter a row as CLS automaticaly(Request Closed)
                        {

                            #region Close the Request by this approver
                            var nextProcess = _entity.tb_Request_Hdr.Create();
                            nextProcess.Request_ID = data.Request_ID;
                            nextProcess.WF_ID = data.WF_ID;
                            nextProcess.Application_ID = data.Application_ID;
                            nextProcess.Employee_ID = data.Employee_ID;
                            nextProcess.Approver_ID = model.my_id;
                            nextProcess.OrgApprover_ID = model.my_id;
                            nextProcess.Creater_ID = data.Creater_ID;
                            nextProcess.Status_ID = "CLS";// Request Closed
                            nextProcess.Approval_No = Convert.ToString(Convert.ToInt32(data.Approval_No) + 2);// Because 1 will add while the APC section , then the next process have more more sequence number
                            nextProcess.WFTemplate_ID = data.WFTemplate_ID;
                            nextProcess.WebLink = "";
                            nextProcess.IsActive = true;
                            nextProcess.TimeStamp = CurrentTime;
                            nextProcess.Process_Complete = 1;
                            _entity.tb_Request_Hdr.Add(nextProcess);
                            _entity.SaveChanges();
                            string remark = "Request was closed by";
                            bool sendMail = _ApprovalLogRepository.Send_Approval_Mail_Login(old_status, model.request_id, myPosition, myRole, data.Employee_ID, model.my_id, data.Approval_No, "", "", remark, data, model.reason);
                            #endregion Close the Request by this approver
                        }
                        else if (closingType.Code == "PC")
                        {
                            var process = Convert.ToInt32(template_ActionFlag.Process) + 1;// PC Means this request waiting for next processing Approvel request for processing 
                            var checkApp = _entity.tb_WF_Template.Where(x => x.WF_ID == data.WF_ID && x.Profile_ID == profile.Id && x.Role_ID != role_table_id && x.Action_Flag == process && x.Sequence_NO > approver_id).OrderBy(x => x.Sequence_NO).FirstOrDefault();// For APP
                            if (checkApp != null)
                            {
                                var newApprover = _entity.tb_Role.Where(x => x.Id == checkApp.Role_ID && x.IsActive == true).FirstOrDefault(); // Next Processor 
                                if (newApprover != null)
                                {
                                    if (newApprover.Assigned_ID != null)
                                    {
                                        var checkDelegate = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Approver_ID && x.IsActive == true).FirstOrDefault();
                                        #region Next Process 
                                        var nextProcess = _entity.tb_Request_Hdr.Create();
                                        nextProcess.Request_ID = data.Request_ID;
                                        nextProcess.WF_ID = data.WF_ID;
                                        nextProcess.Application_ID = data.Application_ID;
                                        nextProcess.Employee_ID = data.Employee_ID;
                                        if (checkDelegate.DelegationFlag == true)
                                            nextProcess.Approver_ID = checkDelegate.Delegate_Emp_Code == null ? newApprover.Assigned_ID : checkDelegate.Delegate_Emp_Code;
                                        else
                                            nextProcess.Approver_ID = newApprover.Assigned_ID;
                                        nextProcess.OrgApprover_ID = newApprover.Assigned_ID;
                                        nextProcess.Creater_ID = data.Creater_ID;
                                        nextProcess.Status_ID = checkApp.Status_ID;
                                        nextProcess.Approval_No = Convert.ToString(Convert.ToInt32(data.Approval_No) + 1);
                                        nextProcess.WFTemplate_ID = data.WFTemplate_ID;
                                        nextProcess.WebLink = "";
                                        nextProcess.IsActive = true;
                                        nextProcess.TimeStamp = CurrentTime;
                                        nextProcess.Process_Complete = 0;
                                        _entity.tb_Request_Hdr.Add(nextProcess);
                                        _entity.SaveChanges();
                                        string remark = "Request is waiting for process";
                                        bool sendMail = _ApprovalLogRepository.Send_Approval_Mail_Login("APP", model.request_id, myPosition, myRole, data.Employee_ID, model.my_id, data.Approval_No, nextProcess.Approver_ID, newApprover.Role_ID, remark, data, model.reason);
                                        #endregion Next Process 
                                    }
                                    else
                                    {
                                        msg = "Approve not completed, because the next approver is not assigned!";
                                    }
                                }
                                else
                                {
                                    msg = "Next Processor not defined";
                                }
                            }
                            else
                            {
                                #region Close the process
                                var close = _entity.tb_Request_Hdr.Create();
                                close.Request_ID = data.Request_ID;
                                close.WF_ID = data.WF_ID;
                                close.Application_ID = data.Application_ID;
                                close.Employee_ID = data.Employee_ID;
                                close.Approver_ID = my_data.LocalEmplyee_ID;
                                close.OrgApprover_ID = my_data.LocalEmplyee_ID;
                                close.Creater_ID = data.Creater_ID;
                                close.Status_ID = "CLS";
                                close.Approval_No = Convert.ToString(Convert.ToInt32(data.Approval_No));
                                close.WFTemplate_ID = data.WFTemplate_ID;
                                close.WebLink = "";
                                close.IsActive = true;
                                close.TimeStamp = CurrentTime;
                                close.Process_Complete = 0;
                                _entity.tb_Request_Hdr.Add(close);
                                _entity.SaveChanges();
                                string remark = "Request was closed by";
                                bool sendMail = _ApprovalLogRepository.Send_Approval_Mail_Login(old_status, model.request_id, myPosition, myRole, data.Employee_ID, model.my_id, data.Approval_No, "", "", remark, data, model.reason);
                                #endregion Close the process
                            }
                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult ListEscalationMembers(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.escalation_no = Convert.ToInt32(splitData[3]);
            return PartialView("~/Views/Request/_pv_EscalatePersonsList.cshtml", model);
        }
        public object Submit_RequestEscalatedApprove(SubmitRequest model)
        {
            bool status = false;
            string msg = "Failed";
            string roleid = "";
            string myPosition = "";
            string myRole = "";
            string[] split = model.escalated_to.Split('-');
            string escalationRole = split[0];
            string escalationPersonName = split[1];
            string[] esc = model.escalated_role.Split('~');
            string escalationEmpId = esc[0];
            var template_Id = esc[1];
            string escalationOriginal = escalationEmpId;
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault(); // Last row of the request 
            var my_data = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();// Approver personal data
            //var role = _entity.tb_Role.Where(x => x.Assigned_ID == model.my_id && x.IsActive == true).FirstOrDefault();// Approve current role
            var role = data.tb_WF_Template.tb_Role;
            var initiator_details = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID).FirstOrDefault();// Requset for whom 
            //var wfTypes = _entity.tb_WFType.Where(x => x.WF_ID == data.WF_ID && x.IsActive == true).FirstOrDefault(); //This request wf type data
            var closingType = _entity.tb_Closing_Type.Where(x => x.Id == data.tb_WFType.Closing_Type_Id && x.IsActive == true).FirstOrDefault();// Closing process of this wf type                                                                                                                                               
            #region Delegate
            if (data.Approver_ID != data.OrgApprover_ID)
            {
                var delegatePerson = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.IsActive == true).FirstOrDefault();
                roleid = delegatePerson.Role_ID; // checking that this request is coming from the delegate process to me 
                myPosition = delegatePerson.Role_Desc;
                myRole = delegatePerson.Role_Desc;
            }
            else
            {
                roleid = role.Role_ID;
                myPosition = role.Role_Desc;
                myRole = role.Role_Desc;
            }
            #endregion Delegate

            #region escalated to person checking delegates 
            var deligated_to = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == escalationEmpId && x.IsActive == true).FirstOrDefault();
            if (deligated_to != null)
            {
                if (deligated_to.LocalEmplyee_ID != deligated_to.Delegate_Emp_Code && deligated_to.DelegationFlag == true)
                {
                    escalationEmpId = deligated_to.Delegate_Emp_Code;
                    var deligated_to_Person = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == escalationEmpId && x.IsActive == true).FirstOrDefault();
                    escalationPersonName = deligated_to_Person.Emp_Name;
                }
            }
            #endregion escalated to person checking delegates 

            data.Approver_ID = escalationEmpId;
            data.OrgApprover_ID = escalationEmpId;
            data.Escalaton_NO = (data.Escalaton_NO ?? 0) + 1;
            //basheer on 23-01-2020 added to change the role id to escalated employee role
            long wftempidesc = Convert.ToInt64(template_Id);
            data.RoleId = _entity.tb_WF_Template.Where(x => x.Id == wftempidesc).FirstOrDefault().Role_ID;
            //basheer code end here..
            data.WFTemplate_ID = Convert.ToInt64(template_Id);
            data.WebLink = "";
            data.IsActive = true;
            data.TimeStamp = CurrentTime;
            data.Process_Complete = 0;
            status = _entity.SaveChanges() > 0;
            if (status)
            {
                msg = "Escalated Successfully";
                string remark = "Request was Escalated to ";
                _ApprovalLogRepository.Send_Escalated_Mail_Login(data.Request_ID, model.escalated_to, myRole, data.Employee_ID, model.my_id, model.escalation_no.ToString(), escalationEmpId, escalationRole, remark, data, model.reason);
                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.Escalate;
                model1.wf_id = data.WF_ID;
                model1.request_id = data.Id;
                model1.who_am_i = model.my_id;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
                //if (model.distribution_id != null)//03-03-2020 ARCHANA K V SRISHTI II
                //{
                //    DistributionRequest(data, Convert.ToInt64(model.distribution_id), data.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHTI
                //}
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult Take_Reason_For_Hold_Request(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.my_role = splitData[3];
            return PartialView("~/Views/Request/_pv_Request_Hold_Remark.cshtml", model);
        }
        public object Submit_RequestHold(SubmitRequest model)
        {
            bool status = false;
            string msg = "Failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault();
            var my_data = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();
            data.Status_ID = "HLD";
            data.TimeStamp = CurrentTime;
            data.Process_Complete = 0;
            status = _entity.SaveChanges() > 0;
            if (status)
            {
                msg = "Request hold successfully";
                string remark = "Request was Holded by ";
                _ApprovalLogRepository.Send_Hold_Mail_Login(data.Request_ID, model.my_role + " " + my_data.Emp_Name, model.my_role, data.Employee_ID, model.my_id, remark, model.reason, data);
                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.Hold;
                model1.wf_id = data.WF_ID;
                model1.request_id = data.Id;
                model1.who_am_i = model.my_id;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
                //if (model.distribution_id != null)//03-03-2020 ARCHANA K V SRISHTI II
                //{
                //    DistributionRequest(data, Convert.ToInt64(model.distribution_id), data.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHTI
                //}
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult PP_Request_Forward(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            //Basheer on 13-02-2020 to use e-forward after save .. use condition to get request tableid.in case of submit it will return requesttableid ..after save it onl return request.
            model.my_role = splitData[3];
            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();

            if (Convert.ToInt64(splitData[2]) == 0)
            {
                model.request_table_id = request.Id;
            }
            else
            {
                model.request_table_id = Convert.ToInt64(splitData[2]);
            }

            //Basheer code end here on 13-02-2020
            var empDetails = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
            var country = _entity.tb_Country.Where(x => x.Id == empDetails.tb_Location.Country_Id && x.IsActive == true).FirstOrDefault();
            model.my_country_id = country.Id;
            model.my_Process_type = "ForwardView";
            return PartialView("~/Views/Request/_pv_pp_Request_forward.cshtml", model);
        }
        public object Submit_RequestForward(SubmitRequest model)
        {
            TempData["comment"] = model.reason;
            bool status = false;
            string msg = "Failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault();
            var log = _entity.tb_ApprovalLog.Create();
            log.RequestId = model.request_id;
            log.Remark = "Request eforwarded to ";
            log.EmployeeId = data.Employee_ID;
            log.Actor_Id = model.my_id;
            log.RoleId = model.my_role == null ? "" : model.my_role;
            log.Actor_To = model.forward_emp_id;
            log.IsActive = true;
            log.TimeStamp = CurrentTime;
            log.Status = "FWD";
            log.Reason = model.reason;
            _entity.tb_ApprovalLog.Add(log);
            status = _entity.SaveChanges() > 0;
            if (status)
            {
                //var id = model.request_table_id.ToString() + '~' + "0~ForwardView" + "~0~1";// 12-02-2020 ARCHANA SRISHTI (EMNAIL FORWARD CHANGE FOR URL HIDE )
                //string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;

                //string mailcontent = "Please click this link for view the request details : " + host + "/Request/DetailedRequest?id=" + model.eForwardUrl;
                //if (model.reason != null && model.reason != string.Empty)
                //{
                //    mailcontent = mailcontent + " because of " + model.reason;
                //}
                var to = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.forward_emp_id && x.IsActive == true && x.eMail != null).FirstOrDefault();
                if (to != null)
                {
                    //status = _ApprovalLogRepository.Send_Forward_Mail_To_Forwarded_Employee(to.eMail, to.Emp_Name, data, mailcontent);
                    EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                    model1.process_type = EmailProcessType.Eforward;
                    model1.wf_id = data.WF_ID;
                    model1.request_id = data.Id;
                    model1.who_am_i = model.my_id;
                    model1.reason = "";
                    model1.eforwardPerson = to.LocalEmplyee_ID;

                    try
                    {
                        Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                        email.Start();
                    }
                    catch
                    {

                    }
                    status = true;
                }
                if (status)
                {
                    msg = "Request forward successfully";
                    //if (model.distribution_id != null)//03-03-2020 ARCHANA K V SRISHTI II
                    //{
                    //    DistributionRequest(data, Convert.ToInt64(model.distribution_id), data.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHTI
                    //}
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_Cancel_Request_By_Creator(SubmitRequest model)
        {
            bool status = false;
            string msg = "Failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {

                #region T004 Update Available Seat George Shristi 06-07-2020
                var wfid = data.tb_WFType.WF_ID;
                if (wfid == "T004" && data.Status_ID != "NEW")
                {
                    UpdateAvailableSeatsForCourses(model.request_id, "CNL");
                }
                #endregion

                data.Status_ID = "CNL";
                status = _entity.SaveChanges() > 0;
                #region Keep Log 
                var log = _entity.tb_ApprovalLog.Create();
                log.RequestId = model.request_id;
                log.EmployeeId = data.Employee_ID;
                log.Actor_Id = model.my_id;
                log.RoleId = "";
                log.SequenceNo = 0;
                log.Remark = "Request Canceled by creator";
                log.TimeStamp = CurrentTime;
                log.IsActive = true;
                log.Actor_To = "";
                log.RoleId_To = "";
                //log.Reason = "";
                log.Reason = model.reason;//Terrin on 13/5/2020
                log.Status = "CNL";
                _entity.tb_ApprovalLog.Add(log);
                _entity.SaveChanges();
                #endregion Keep Log 

                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.Cancel;
                model1.wf_id = data.WF_ID;
                model1.request_id = data.Id;
                model1.who_am_i = data.Employee_ID;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
            }
            else
            {
                status = true;
            }
            if (status)
                msg = "Successfully cancel the request ! ";
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_BalanceHousingAllowance_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_HousingAllowance.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p055
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HousingAllowance", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p055
                        #endregion Cash
                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.To_IBAN = model.to_iban;
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        //edit_pp_data.Bank_Attachment = model.bank_attachment;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Remark = model.remark;
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p055
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.remark + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HousingAllowance", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p055
                        #endregion Bank
                    }
                    //Basheer on 28-02-2020
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult PP_Request_SendBack_To_Creator(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.my_role = splitData[3];
            return PartialView("~/Views/Request/_pv_Send_Back_Creator_Reason.cshtml", model);
        }
        public object Submit_RequestBack_To_Creator(SubmitRequest model)
        {
            bool status = false;
            string msg = "Failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault();
            var my_data = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();
            //data.Status_ID = "NEW"; Basheer on 31-01-2020 to change status to NEW to BKI 
            data.Status_ID = "BKI";
            data.WFTemplate_ID = null;
            data.TimeStamp = CurrentTime;
            data.Approval_No = Convert.ToString(0);
            data.Approver_ID = null;
            data.OrgApprover_ID = null;
            data.Process_Complete = 0;
            data.Escalaton_NO = null;
            data.RoleId = null;
            status = _entity.SaveChanges() > 0;

            if (status)
            {

                #region T004 Update Available Seat by George Shristi 06-07-2020
                var wfid = data.tb_WFType.WF_ID;
                if (wfid == "T004")
                {
                    UpdateAvailableSeatsForCourses(model.request_id, "BKI");
                }
                #endregion


                msg = "Request send back successfully";
                string remark = "Request was send back to creator ";
                _ApprovalLogRepository.Send_Back_Creator_Mail_Login(data.Request_ID, model.my_role + " " + my_data.Emp_Name, model.my_role, data.Employee_ID, model.my_id, remark, model.reason, data);

                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.BK_Initiator;
                model1.wf_id = data.WF_ID;
                model1.request_id = data.Id;
                model1.who_am_i = my_data.LocalEmplyee_ID;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
                //if (model.distribution_id != null) // 03-03-2020 ARCHANA K V SRISHTI II
                //{
                //    DistributionRequest(data, Convert.ToInt64(model.distribution_id), data.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHTI
                //}
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult PP_Request_SendBack_To_Previous_Approver(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.my_role = splitData[3];
            return PartialView("~/Views/Request/_pv_Send_Back_To_Previous_Approver.cshtml", model);
        }
        public object Submit_RequestBack_To_Previous_Approver(SubmitRequest model)
        {
            bool status = false;
            string msg = "Failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault();
            var my_data = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();
            var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
            var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
            int approval_no = Convert.ToInt32(data.Approval_No ?? "0");
            approval_no = approval_no + (data.Escalaton_NO == null ? 0 : data.Escalaton_NO ?? 0);// 24-02-2020 ARCHANA SRISHTI
            var logs = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.IsActive == true && x.Actor_To == data.Approver_ID).OrderByDescending(x => x.Id).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
            if (logs.Status == "ESC")
            {

                var dataoflog = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).ToList();
                var log = dataoflog.Where(x => x.Status == "INT").OrderByDescending(x => x.Id).FirstOrDefault();
                var role = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId && x.IsActive == true).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
                var previous_template = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Role_ID == role.Id && x.Id != data.WFTemplate_ID).OrderByDescending(x => x.Sequence_NO).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
                                                                                                                                                                                                                                                //var previous_template = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Status_ID == "INT" && x.IsActive == true && x.Sequence_NO < approval_no && x.Action_Flag == 1 && x.Id != data.WFTemplate_ID).OrderByDescending(x => x.Sequence_NO).FirstOrDefault();// 24-02-2020 ARCHANA SRISHTI
                if (previous_template != null)
                //if (log != null)
                {
                    try
                    {
                        long role_id = Convert.ToInt64(previous_template.Role_ID);
                        long country_id = Convert.ToInt64(emp.tb_Location.Country_Id ?? 0);
                        string applicationId = data.tb_Application.Application_Code;
                        //var role_details = _rpp.Find_RoleDetails(previous_template.tb_Role, data, emp, previous_template.Status_ID);// 21-02-2020 ARCHANA SRISHTI
                        //var previousApprover = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == role_details.deligated_personId && x.IsActive == true).FirstOrDefault();//24-02-2020 ARCHANA SRISHTI
                        var previousApprover = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == log.Actor_Id && x.IsActive == true).FirstOrDefault();//24-02-2020 ARCHANA SRISHTI 03-03-2020 ARCHANA K V SRISHTI II
                        var newApprover = previous_template.tb_Role.Role_Desc + " " + previousApprover.Emp_Name;

                        data.Status_ID = "INT";
                        //data.Approver_ID = role_details.deligated_personId;//24-02-2020 ARCHANA SRISHTI
                        //data.OrgApprover_ID = role_details.assigned_person_id;
                        data.Approver_ID = previousApprover.LocalEmplyee_ID; //03-03-2020 ARCHANA K V SRISHTI II
                        data.OrgApprover_ID = previousApprover.LocalEmplyee_ID; //03-03-2020 ARCHANA K V SRISHTI II
                        //data.Approval_No = previous_template.Sequence_NO.ToString(); //Basheer on 19-03-2020
                        data.Approval_No = data.Approval_No;
                        data.RoleId = previous_template.Role_ID;
                        data.WFTemplate_ID = previous_template.Id;

                        //Basheer on 28-03-2020 For escalation issue 
                        if (data.Escalaton_NO == 0)
                        {

                        }
                        else
                        {
                            data.Escalaton_NO = data.Escalaton_NO - 1;
                        }

                        //Basheer code end here

                        //data.Approver_ID = log.Actor_Id;
                        //data.OrgApprover_ID = log.Actor_Id;
                        //data.Approval_No =( Convert.ToInt32(data.Approval_No) - 1).ToString();
                        //data.RoleId = previous_template.Role_ID;
                        //data.WFTemplate_ID = previous_template.Id;
                        //data.TimeStamp = CurrentTime;
                        //data.Process_Complete = 0;

                        status = _entity.SaveChanges() > 0;
                        if (status)
                        {
                            msg = "Request send back successfully";
                            string remark = "Request was send back to previous approver ";
                            _ApprovalLogRepository.Send_Back_Approver_Mail_Login(data.Request_ID, model.my_role + " " + my_data.Emp_Name, model.my_role, data.Employee_ID, model.my_id, remark, model.reason, data, data.Approver_ID, previous_template.tb_Role.Role_Desc, newApprover);// 21-02-2020 ARCHANA SRISHTI
                            EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI
                            model1.process_type = EmailProcessType.BKP_Approver;
                            model1.wf_id = data.WF_ID;
                            model1.request_id = data.Id;
                            model1.who_am_i = my_data.LocalEmplyee_ID;
                            model1.reason = "";
                            try
                            {
                                Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                                email.Start();
                            }
                            catch
                            {

                            }
                            //if (model.distribution_id != null) //03-03-2020 ARCHANA K V SRISHTI II
                            //{
                            // DistributionRequest(data, Convert.ToInt64(model.distribution_id), data.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHJTI
                            //}
                        }
                    }
                    catch
                    {

                    }
                }
                else
                {
                    msg = "No Previous Approver !";
                }


            }
            else if (logs.Status == "RRT")
            {

                var dataoflog = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).ToList();
                var log = dataoflog.Where(x => x.Status == "INT").OrderByDescending(x => x.Id).FirstOrDefault();
                var role = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId && x.IsActive == true).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
                var previous_template = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Role_ID == role.Id && x.Id != data.WFTemplate_ID).OrderByDescending(x => x.Sequence_NO).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
                                                                                                                                                                                                                                                //var previous_template = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Status_ID == "INT" && x.IsActive == true && x.Sequence_NO < approval_no && x.Action_Flag == 1 && x.Id != data.WFTemplate_ID).OrderByDescending(x => x.Sequence_NO).FirstOrDefault();// 24-02-2020 ARCHANA SRISHTI
                if (previous_template != null)
                //if (log != null)
                {
                    try
                    {
                        long role_id = Convert.ToInt64(previous_template.Role_ID);
                        long country_id = Convert.ToInt64(emp.tb_Location.Country_Id ?? 0);
                        string applicationId = data.tb_Application.Application_Code;
                        //var role_details = _rpp.Find_RoleDetails(previous_template.tb_Role, data, emp, previous_template.Status_ID);// 21-02-2020 ARCHANA SRISHTI
                        //var previousApprover = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == role_details.deligated_personId && x.IsActive == true).FirstOrDefault();//24-02-2020 ARCHANA SRISHTI
                        var previousApprover = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == log.Actor_Id && x.IsActive == true).FirstOrDefault();//24-02-2020 ARCHANA SRISHTI 03-03-2020 ARCHANA K V SRISHTI II
                        var newApprover = previous_template.tb_Role.Role_Desc + " " + previousApprover.Emp_Name;

                        data.Status_ID = "INT";
                        //data.Approver_ID = role_details.deligated_personId;//24-02-2020 ARCHANA SRISHTI
                        //data.OrgApprover_ID = role_details.assigned_person_id;
                        data.Approver_ID = previousApprover.LocalEmplyee_ID; //03-03-2020 ARCHANA K V SRISHTI II
                        data.OrgApprover_ID = previousApprover.LocalEmplyee_ID; //03-03-2020 ARCHANA K V SRISHTI II
                        data.Approval_No = previous_template.Sequence_NO.ToString();
                        data.RoleId = previous_template.Role_ID;
                        data.WFTemplate_ID = previous_template.Id;

                        //data.Approver_ID = log.Actor_Id;
                        //data.OrgApprover_ID = log.Actor_Id;
                        //data.Approval_No =( Convert.ToInt32(data.Approval_No) - 1).ToString();
                        //data.RoleId = previous_template.Role_ID;
                        //data.WFTemplate_ID = previous_template.Id;
                        //data.TimeStamp = CurrentTime;
                        //data.Process_Complete = 0;

                        status = _entity.SaveChanges() > 0;
                        if (status)
                        {
                            msg = "Request send back successfully";
                            string remark = "Request was send back to previous approver ";
                            _ApprovalLogRepository.Send_Back_Approver_Mail_Login(data.Request_ID, model.my_role + " " + my_data.Emp_Name, model.my_role, data.Employee_ID, model.my_id, remark, model.reason, data, data.Approver_ID, previous_template.tb_Role.Role_Desc, newApprover);// 21-02-2020 ARCHANA SRISHTI
                            EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI
                            model1.process_type = EmailProcessType.BKP_Approver;
                            model1.wf_id = data.WF_ID;
                            model1.request_id = data.Id;
                            model1.who_am_i = my_data.LocalEmplyee_ID;
                            model1.reason = "";
                            try
                            {
                                Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                                email.Start();
                            }
                            catch
                            {

                            }
                            //if (model.distribution_id != null) //03-03-2020 ARCHANA K V SRISHTI II
                            //{
                            // DistributionRequest(data, Convert.ToInt64(model.distribution_id), data.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHJTI
                            //}
                        }
                    }
                    catch
                    {

                    }
                }
                else
                {
                    msg = "No Previous Approver !";
                }

            }
            else
            {
                #region Normal
                //var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.IsActive == true && x.Actor_To == data.Approver_ID && x.Status=="INT").OrderByDescending(x => x.Id).FirstOrDefault();
                var log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.IsActive == true && x.Actor_To == data.Approver_ID && x.Status == "INT").OrderByDescending(x => x.Id).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
                var role = _entity.tb_Role.Where(x => x.Role_Desc == log.RoleId && x.IsActive == true).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
                var previous_template = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Role_ID == role.Id && x.Id != data.WFTemplate_ID).OrderByDescending(x => x.Sequence_NO).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI

                //Template sequence issue when sendbacked and approved it is not keeping the sequence>>Preema>>17-06-2020
                int seq_no = (Convert.ToInt32(data.Approval_No) - 1);


                if (previous_template.Profile_ID != null)
                {
                    previous_template = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Role_ID == role.Id && x.Profile_ID == profile.Id && x.Status_ID == "INT" && x.Id != data.WFTemplate_ID && x.Sequence_NO == seq_no && x.IsActive == true).OrderByDescending(x => x.Sequence_NO).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
                                                                                                                                                                                                                                                                                                                                                       //var previous_template = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Status_ID == "INT" && x.IsActive == true && x.Sequence_NO < approval_no && x.Action_Flag == 1 && x.Id != data.WFTemplate_ID).OrderByDescending(x => x.Sequence_NO).FirstOrDefault();// 24-02-2020 ARCHANA SRISHTI
                }
                else
                {
                    previous_template = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Role_ID == role.Id && x.Status_ID == "INT" && x.Id != data.WFTemplate_ID && x.IsActive == true).OrderByDescending(x => x.Sequence_NO).FirstOrDefault(); //02-03-2020 ARCHANA K V SRISHTI
                }
                if (previous_template != null)
                //if (log != null)
                {
                    try
                    {
                        long role_id = Convert.ToInt64(previous_template.Role_ID);
                        long country_id = Convert.ToInt64(emp.tb_Location.Country_Id ?? 0);
                        string applicationId = data.tb_Application.Application_Code;
                        var role_details = _rpp.Find_RoleDetails(previous_template.tb_Role, data, emp, previous_template.Status_ID);// 21-02-2020 ARCHANA SRISHTI
                                                                                                                                    //var previousApprover = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == role_details.deligated_personId && x.IsActive == true).FirstOrDefault();//24-02-2020 ARCHANA SRISHTI
                        var previousApprover = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == log.Actor_Id && x.IsActive == true).FirstOrDefault();//24-02-2020 ARCHANA SRISHTI 03-03-2020 ARCHANA K V SRISHTI II
                        var newApprover = previous_template.tb_Role.Role_Desc + " " + previousApprover.Emp_Name;

                        data.Status_ID = "INT";
                        //data.Approver_ID = role_details.deligated_personId;//24-02-2020 ARCHANA SRISHTI
                        //data.OrgApprover_ID = role_details.assigned_person_id;
                        data.Approver_ID = previousApprover.LocalEmplyee_ID; //03-03-2020 ARCHANA K V SRISHTI II
                        data.OrgApprover_ID = previousApprover.LocalEmplyee_ID; //03-03-2020 ARCHANA K V SRISHTI II
                        data.Approval_No = previous_template.Sequence_NO.ToString();
                        data.RoleId = previous_template.Role_ID;
                        data.WFTemplate_ID = previous_template.Id;

                        //data.Approver_ID = log.Actor_Id;
                        //data.OrgApprover_ID = log.Actor_Id;
                        //data.Approval_No =( Convert.ToInt32(data.Approval_No) - 1).ToString();
                        //data.RoleId = previous_template.Role_ID;
                        //data.WFTemplate_ID = previous_template.Id;
                        //data.TimeStamp = CurrentTime;
                        //data.Process_Complete = 0;

                        status = _entity.SaveChanges() > 0;
                        if (status)
                        {
                            msg = "Request send back successfully";
                            string remark = "Request was send back to previous approver ";
                            _ApprovalLogRepository.Send_Back_Approver_Mail_Login(data.Request_ID, model.my_role + " " + my_data.Emp_Name, model.my_role, data.Employee_ID, model.my_id, remark, model.reason, data, data.Approver_ID, previous_template.tb_Role.Role_Desc, newApprover);// 21-02-2020 ARCHANA SRISHTI
                            EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI
                            model1.process_type = EmailProcessType.BKP_Approver;
                            model1.wf_id = data.WF_ID;
                            model1.request_id = data.Id;
                            model1.who_am_i = my_data.LocalEmplyee_ID;
                            model1.reason = "";
                            try
                            {
                                Thread email = new Thread(() => Email_Template(model1, data.tb_WFType));
                                email.Start();
                            }
                            catch
                            {

                            }
                            //if (model.distribution_id != null) //03-03-2020 ARCHANA K V SRISHTI II
                            //{
                            // DistributionRequest(data, Convert.ToInt64(model.distribution_id), data.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHJTI
                            //}
                        }
                    }
                    catch
                    {

                    }
                }
                else
                {
                    msg = "No Previous Approver !";
                }

                #endregion Normal
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult RequestRejectView(SubmitRequest model)
        {
            //SubmitRequest model = new SubmitRequest();
            //string[] splitData = id.Split('~');
            //model.my_id = splitData[0];
            //model.request_id = splitData[1];
            //model.request_table_id = Convert.ToInt64(splitData[2]);
            return PartialView("~/Views/Request/_pv_request_reject_reason.cshtml", model);
        }
        public object Submit_Reject(SubmitRequest model)
        {
            string msg = "Failed";
            bool status = false;
            Tuple<bool, string, string, string, string, string, tb_Request_Hdr> result = _rpp.RejectRequest(model.request_id, model.my_id);
            #region Old
            //var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).OrderByDescending(x => x.Id).FirstOrDefault(); // Last row of the request
            //data.Process_Complete = 3; // This request not completed , but the all others are rejected by this rejection 
            //_entity.SaveChanges();

            //string myPosition = "";
            //string myRole = "";
            //if (data.Approver_ID == data.OrgApprover_ID)
            //{
            //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.Approver_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
            //    myPosition = role.Role_Desc;
            //    myRole = role.Role_ID;
            //}
            //else
            //{
            //    var role = _entity.tb_Role.Where(x => x.Assigned_ID == data.OrgApprover_ID && x.Application_ID == data.Application_ID && x.IsActive == true).FirstOrDefault();
            //    myPosition = role.Role_Desc;
            //    myRole = role.Role_ID;
            //}

            //var paid = _entity.tb_Request_Hdr.Create();
            //paid.Request_ID = data.Request_ID;
            //paid.WF_ID = data.WF_ID;
            //paid.Application_ID = data.Application_ID;
            //paid.Employee_ID = data.Employee_ID;
            //paid.Approver_ID = model.my_id;
            //paid.OrgApprover_ID = model.my_id;
            //paid.Creater_ID = data.Creater_ID;
            //paid.Status_ID = "REJ";
            //paid.Approval_No = data.Approval_No;
            //paid.WFTemplate_ID = data.WFTemplate_ID;
            //paid.WebLink = "";
            //paid.IsActive = true;
            //paid.TimeStamp = CurrentTime;
            //paid.Process_Complete = 1;
            //_entity.tb_Request_Hdr.Add(paid);
            //status = _entity.SaveChanges() > 0;
            #endregion Old
            if (result.Item1)
            {
                /*----------If T004, when Rejecting--- update the Available Seats of Courses that are allocated */
                UpdateAvailableSeatsForCourses(model.request_id, "REJ");

                msg = "Rejected Successfully";
                status = true;
                string remark = "Requset was rejected by";
                //_ApprovalLogRepository.Send_Reject_Mail_Login(data.Request_ID, myPosition, myRole, data.Employee_ID, data.Approver_ID, data.Approval_No, remark);
                _ApprovalLogRepository.Send_Reject_Mail_Login(model.request_id, result.Item2, result.Item3, result.Item4, result.Item5, result.Item6, remark, result.Item7, model.reason);
                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.Reject;
                model1.wf_id = result.Item7.WF_ID;
                model1.request_id = result.Item7.Id;
                model1.who_am_i = model.my_id;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, result.Item7.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
                //if (model.distribution_id != null)//03-03-2020 ARCHANA K V SRISHTI II
                //{
                //    DistributionRequest(result.Item7, Convert.ToInt64(model.distribution_id), result.Item7.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHTI
                //}
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult PP_BalanceHousingAllowanceCancelReasonView(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            return PartialView("~/Views/Request/_pv_Reason_for_request_canel.cshtml", model);
        }
        public object Submit_RequestCancelFromProcessor(SubmitRequest model)
        {
            string msg = "Failed";
            bool status = false;
            Tuple<bool, string, string, string, string, string, tb_Request_Hdr> result = _rpp.CancelRequestByProcessor(model.request_id, model.my_id);
            if (result.Item1)
            {
                #region T004 Update Available Seat George Shristi 06-07-2020
                var wfid = result.Item7.tb_WFType.WF_ID;
                if (wfid == "T004")
                {
                    UpdateAvailableSeatsForCourses(model.request_id, result.Item7.Status_ID);
                }
                #endregion

                msg = "Cancelled Successfully";
                status = true;
                string remark = "Requset was cancelled by";
                _ApprovalLogRepository.Send_Cancel_Processor_Mail_Login(model.request_id, result.Item2, result.Item3, result.Item4, result.Item5, result.Item6, remark, result.Item7, model.reason);
                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.Cancel;
                model1.wf_id = result.Item7.WF_ID;
                model1.request_id = result.Item7.Id;
                model1.who_am_i = model.my_id;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, result.Item7.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
                //if (model.distribution_id != null)//03-03-2020 ARCHANA K V SRISHTI II
                //{
                //    DistributionRequest(result.Item7, Convert.ToInt64(model.distribution_id), result.Item7.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHTI 
                //}
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object CurrentStatus(string id)
        {
            string msg = "Failed";
            bool status = false;
            string[] splitData = id.Split('-');
            var reqId = splitData[1];
            string current = "";
            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqId && x.IsActive == true).FirstOrDefault();
            try
            {
                var currentStatus = _entity.tb_Status.Where(x => x.Status_ID.Trim() == request.Status_ID && x.IsActive == true).FirstOrDefault();

                if (currentStatus != null)
                {
                    if (request.Approval_No == "1" && request.Status_ID == "INT")
                    {
                        //Basheer on 13-03-2020
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "INT")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "APP") //basheer on 03-07-2020
                    {
                        if (request.RoleId == null && request.Approver_ID == null)
                        {
                            current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc;
                        }
                        else
                        {
                            current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        }



                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "PYD")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "CNL")
                    {
                        if (request.Approval_No == "1") //Basheer on 25-03-2020
                        {
                            string employee = _entity.tb_ApprovalLog.Where(x => x.RequestId == reqId && x.Status == "CNL").FirstOrDefault().Actor_Id;
                            var actor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == employee && x.IsActive == true).FirstOrDefault().Emp_Name;
                            //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                            current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + actor;
                            status = true;
                            msg = "Successful";
                        }
                        else
                        {
                            //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                            current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                            status = true;
                            msg = "Successful";
                        }
                    }
                    else if (request.Status_ID == "REJ")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "CLS")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        // Preema 10-07-2020
                        if (request.RoleId == null && request.Approver_ID == null)
                        {
                            current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc;
                        }
                        else
                        {
                            current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        }
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "HLD")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "UPC")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        status = true;
                        msg = "Successful";
                    }
                    else
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc;
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc;
                        status = true;
                        msg = "Successful";
                    }


                }
                //if (currentStatus != null)
                //{
                //    current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc;// 07-02-2020 Archana 
                //    status = true;
                //    msg = "Successful";
                //}
            }
            catch (Exception ex)
            {

            }

            return Json(new { Status = status, Message = msg, data = current }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult PP_Request_Reroute(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.my_role = splitData[3];
            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            var empDetails = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
            model.delegation_band = empDetails.DelegationBand == null ? "0" : empDetails.DelegationBand;
            return PartialView("~/Views/Request/_pv_RerouteList.cshtml", model);
        }
        public object Submit_RequestRerouting(SubmitRequest model)
        {
            string msg = "Failed";
            bool status = false;
            var result = _rpp.RequestRerouting(model.request_id, model.my_id, model.forward_emp_id);
            var mydetails = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();
            if (result.Item1)
            {
                msg = "Rerouted Successfully";
                status = true;
                string remark = "Requset was rerouted by";
                _ApprovalLogRepository.Send_Reroute_Request_Mail_Login(model.request_id, model.my_id, model.my_role, model.forward_emp_id, model.reason, result.Item2, mydetails.Emp_Name);
                EmailTemplateDataModel model1 = new EmailTemplateDataModel(); // 25-02-2020 ARCHANA SRISHTI 
                model1.process_type = EmailProcessType.Reroute;
                model1.wf_id = result.Item2.WF_ID;
                model1.request_id = result.Item2.Id;
                model1.who_am_i = model.my_id;
                model1.reason = "";
                try
                {
                    Thread email = new Thread(() => Email_Template(model1, result.Item2.tb_WFType));
                    email.Start();
                }
                catch
                {

                }
                //if (model.distribution_id != null)//03-03-2020 ARCHANA K V SRISHTI II
                //{
                //    DistributionRequest(result.Item2, Convert.ToInt64(model.distribution_id), result.Item2.Approval_No, "", model.my_id, model.my_role);//25-02-2020 ARCHANA SRISHTI
                //}
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult GetBankdetailsForPPrequestp009(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_HRRelatedPayment_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP009(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_HRRelatedPayment_Cheque.cshtml", model);
        }
        public PartialViewResult GetBankdetailsForPPrequestP010(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_NonHRRelatedPayment_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP010(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_NonHRRelatedPayment_Cheque.cshtml", model);
        }
        public object Submit_PP_HRRelatedPaymentRequest(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_HR_RelatedPayment.Create();
                insert_pp_data.RequestId = data.Item2;
                insert_pp_data.Remark = model.remark;
                insert_pp_data.File_Attachment = model.attachment_filepath;
                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.PurposeText = model.purpose_text;
                    insert_pp_data.Payable_To = model.payable_to;
                    insert_pp_data.Account_No = model.cheque_account_no;
                    insert_pp_data.supplier = model.supplier_to;
                    insert_pp_data.Currency = model.currenctType;//28-02-2020 ARCHANA K V SRISHTI 
                    _entity.tb_PP_HR_RelatedPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_p009
                    if (status)
                    {

                        string request_id = insert_pp_data.RequestId;
                        string record = model.cheque_date + " || " + model.payment_mode + " || " + model.amount_sar + " || " + model.cheque_account_no + " || " + model.purpose_text + " || " + model.supplier_to + " || " + model.payable_to + " || " + model.remark + " || " + CurrentTime + " || " + model.currenctType;  //nimmi 07/02/2020   28-02-2020 ARCHANA K V SRISHTI 
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HR_RelatedPayment", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p009

                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_BankName = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_Account_No = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_Account_No = model.to_account_no;
                    insert_pp_data.File_Attachment = model.attachment_filepath;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.PurposeText = model.purpose_text;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Currency = model.currenctType;//28-02-2020 ARCHANA K V SRISHTI 
                    _entity.tb_PP_HR_RelatedPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region attachments
                    //Basheer on 16-03-2020 to to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //Basheer code end here
                    #endregion
                    #region Keep AuditLog_p009
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.remark + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.to_iban + " || " + CurrentTime + " || " + model.currenctType; //nimmi 07/02/2020 -02-2020 ARCHANA K V SRISHTI 
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HR_RelatedPayment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog
                }
                #region attachments
                //Basheer on 26-02-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult UpdateLogDetails(string id)
        {
            ApproveLogDetails model = new ApproveLogDetails();
            string[] splitData = id.Split('~');
            model.req_id = splitData[0];
            model.type = splitData[1];
            return PartialView("~/Views/Request/_LogDetailsView.cshtml", model);
        }
        public object Submit_PP_NonHRRelatedPaymentRequest(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                //var insert_pp_data = _entity.tb_PP_HR_RelatedPayment.Create();
                var insert_pp_data = _entity.tb_PP_NonHR_RelatedPayment.Create();
                insert_pp_data.RequestId = data.Item2;
                insert_pp_data.Remark = model.remark;
                insert_pp_data.File_Attachment = model.attachment_filepath;
                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                insert_pp_data.Contract_Local_No = model.contract_local;
                insert_pp_data.BCharge_Invoice = model.backcharge_invoice;
                insert_pp_data.Project = model.project;
                insert_pp_data.Year_booked = model.year_booked;
                insert_pp_data.Customer = model.customer;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Payable_To = model.payable_to;
                    insert_pp_data.Supplier = model.supplier_to;
                    insert_pp_data.Account_No = model.cheque_account_no;
                    insert_pp_data.Currency = model.currenctType;//28-02-2020 ARCHANA K V SRISHTI 
                    _entity.tb_PP_NonHR_RelatedPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_p010
                    if (status)
                    {

                        string request_id = insert_pp_data.RequestId;
                        string record = model.contract_local + " || " + model.backcharge_invoice + " || " + model.project + " || " + model.year_booked + " || " + model.customer + " || " + model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.cheque_account_no + " || " + model.purpose_text + " || " + model.supplier_to + " || " + model.payable_to + " || " + model.remark + " || " + CurrentTime + " || " + model.currenctType;    //nimmi 07-02-2020 28-02-2020 ARCHANA K V SRISHTI 
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NonHR_RelatedPayment", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p010
                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_BankName = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_Account_No = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_Account_No = model.to_account_no;
                    insert_pp_data.File_Attachment = model.attachment_filepath;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Currency = model.currenctType;//28-02-2020 ARCHANA K V SRISHTI 
                    _entity.tb_PP_NonHR_RelatedPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region attachments
                    //Basheer on 16-03-2020 to to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //Basheer code end here
                    #endregion

                    #region Keep AuditLog_p010
                    if (status)
                    {


                        string request_id = insert_pp_data.RequestId;
                        string record = model.contract_local + " || " + model.backcharge_invoice + " || " + model.project + " || " + model.year_booked + " || " + model.customer + " || " + model.payment_mode + " || " + model.amount_sar + " || " + model.remark + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.to_iban + " || " + CurrentTime + " || " + model.currenctType;//nimmi 07-02-2020   28-02-2020 ARCHANA K V SRISHTI 
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NonHR_RelatedPayment", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p010


                }
                #region attachments
                //Basheer on 16-03-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_HRRelated_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_HR_RelatedPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    edit_pp_data.Remark = model.remark;
                    edit_pp_data.File_Attachment = model.attachment_filepath;
                    edit_pp_data.IsActive = true;
                    edit_pp_data.TimeStamp = CurrentTime;
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.PurposeText = model.purpose_text;
                        edit_pp_data.Payable_To = model.payable_to;
                        edit_pp_data.supplier = model.supplier_to;
                        edit_pp_data.Account_No = model.cheque_account_no;
                        edit_pp_data.Currency = model.currenctType; // 28-02-2020 ARCHANA K V SRISHTI 
                        status = _entity.SaveChanges() > 0;

                        #region Keep AuditLog_p009

                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.cheque_date + " || " + model.payment_mode + " || " + model.amount_sar + " || " + model.cheque_account_no + " || " + model.purpose_text + " || " + model.supplier_to + " || " + model.payable_to + " || " + model.remark + " || " + CurrentTime + " || " + model.currenctType;  //nimmi 07/02/2020   28-02-2020 ARCHANA K V SRISHTI
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HR_RelatedPayment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p009
                    }
                    else
                    {
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_BankName = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_Account_No = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_Account_No = model.to_account_no;
                        edit_pp_data.File_Attachment = model.attachment_filepath;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.PurposeText = model.purpose_text;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Currency = model.currenctType; // 28-02-2020 ARCHANA K V SRISHTI 
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p009

                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.amount_sar + " || " + model.remark + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.to_iban + " || " + CurrentTime + " || " + model.currenctType;   //nimmi 07/02/2020    28-02-2020 ARCHANA K V SRISHTI
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HR_RelatedPayment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p009
                    }
                    //Basheer on 16-03-2020
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }
                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_NonHRRelated_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_NonHR_RelatedPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    edit_pp_data.File_Attachment = model.attachment_filepath;
                    edit_pp_data.IsActive = true;
                    edit_pp_data.TimeStamp = CurrentTime;
                    edit_pp_data.Contract_Local_No = model.contract_local;
                    edit_pp_data.BCharge_Invoice = model.backcharge_invoice;
                    edit_pp_data.Project = model.project;
                    edit_pp_data.Year_booked = model.year_booked;
                    edit_pp_data.Customer = model.customer;
                    edit_pp_data.Remark = model.remark;
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Payable_To = model.payable_to;
                        edit_pp_data.Supplier = model.supplier_to;
                        edit_pp_data.Account_No = model.cheque_account_no;
                        edit_pp_data.Currency = model.currenctType;//28-02-2020 ARCHANA K V SRISHTI 
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p010
                        if (status)
                        {

                            string request_id = edit_pp_data.RequestId;
                            string record = model.contract_local + " || " + model.backcharge_invoice + " || " + model.project + " || " + model.year_booked + " || " + model.customer + " || " + model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.cheque_account_no + " || " + model.purpose_text + " || " + model.supplier_to + " || " + model.payable_to + " || " + model.remark + " || " + CurrentTime + " || " + model.currenctType;   //nimmi 07/02/2020 28-02-2020 ARCHANA K V SRISHTI 
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NonHR_RelatedPayment", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p010
                    }
                    else
                    {
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;  //13/02/2020 Nimmi
                        edit_pp_data.From_BankName = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_Account_No = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_Account_No = model.to_account_no;
                        edit_pp_data.File_Attachment = model.attachment_filepath;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Currency = model.currenctType;//28-02-2020 ARCHANA K V SRISHTI 
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p010
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.contract_local + " || " + model.backcharge_invoice + " || " + model.project + " || " + model.year_booked + " || " + model.customer + " || " + model.payment_mode + " || " + model.amount_sar + " || " + model.remark + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.to_iban + " || " + CurrentTime + " || " + model.currenctType; //nimmi 07/02/2020 28-02-2020 ARCHANA K V SRISHTI 
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NonHR_RelatedPayment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p010
                    }
                    //Basheer on 16-03-2020
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_NonHRRelatedPaymentRequest(HRPaymentrequest model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_NonHR_RelatedPayment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                insert_pp_data.Contract_Local_No = model.contract_local_no;
                insert_pp_data.BCharge_Invoice = model.back_invoice_no;
                insert_pp_data.Project = model.project;
                insert_pp_data.Year_booked = model.year_booked;
                insert_pp_data.Customer = model.customer;

                #region
                if (model.PaymentMode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.Cheque_Date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.Amount_SAR);
                    insert_pp_data.Payable_To = model.Payable_To;
                    insert_pp_data.Account_No = model.Account_No;
                    insert_pp_data.Purpose_Text = model.PurposeText;
                    insert_pp_data.Supplier = model.supplier;
                    insert_pp_data.Remark = model.Remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.Currency = model.currenctType ?? ""; // 28-02-2020 ARCHANA K V SRISHTI 
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_BankName = model.From_BankName;
                    insert_pp_data.Cheque_Date = null;    //13/02/2020 nimmi
                    insert_pp_data.From_Address = model.From_Address;
                    insert_pp_data.From_Account_No = model.From_Account_No;
                    insert_pp_data.To_Benificiary = model.To_Benificiary;
                    insert_pp_data.To_BankName = model.To_BankName;
                    insert_pp_data.To_Address = model.To_Address;
                    insert_pp_data.To_Account_No = model.To_Account_No;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.Amount_SAR);
                    insert_pp_data.Remark = model.Remark;
                    insert_pp_data.To_IBAN = model.To_IBAN;
                    insert_pp_data.Purpose_Text = model.PurposeText;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.Currency = model.currenctType ?? ""; // 28-02-2020 ARCHANA K V SRISHTI 
                    status = _entity.SaveChanges() > 0;
                }
                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    if (req.RoleId != null)
                    {
                        var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                        var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                        var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                        #region Keep AuditLog_p010
                        string request_id = insert_pp_data.RequestId;
                        string record = model.contract_local_no + " || " + model.back_invoice_no + " || " + model.project + " || " + model.year_booked + " || " + model.customer + " || " + model.PaymentMode + " || " + (model.Cheque_Date.Year == 0001 ? null : model.Cheque_Date.ToString()) + " || " + model.Amount_SAR + " || " + model.Account_No + " || " + model.PurposeText + " || " + model.supplier + " || " + model.Payable_To + " || " + model.Remark + " || " + model.From_BankName + " || " + model.From_Address + " || " + model.From_Account_No + " || " + model.To_Benificiary + " || " + model.To_BankName + " || " + model.To_Address + " || " + model.To_Account_No + " || " + model.To_IBAN + " || " + CurrentTime + " || " + model.currenctType; //nimmi 07/02/2020 ---//Changes in Cheque date updated on 13/02/2020 Nimmi--- 28-02-2020 ARCHANA K V SRISHTI 
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NonHR_RelatedPayment", request_id, role.Role_Desc);
                        #endregion Keep AuditLog_p010
                    }
                    else
                    {
                        #region Log for SaveChanges
                        //Basheer on 06-02-2020 to save log for savechanges
                        string remark = "Request was Edited by";
                        string[] split1 = model.request_id.Split('-');
                        string rqid1 = split[1];
                        //Basheer on 26-03-2020 for checking request
                        //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        if (req.Creater_ID == model.emp_local_id)
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        }
                        else
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                        }
                        #endregion

                        #region Keep AuditLog_p009 for initiator after backtoinitiator
                        string request_id = insert_pp_data.RequestId;
                        string record = model.contract_local_no + " || " + model.back_invoice_no + " || " + model.project + " || " + model.year_booked + " || " + model.customer + " || " + model.PaymentMode + " || " + (model.Cheque_Date.Year == 0001 ? null : model.Cheque_Date.ToString()) + " || " + model.Amount_SAR + " || " + model.Account_No + " || " + model.PurposeText + " || " + model.supplier + " || " + model.Payable_To + " || " + model.Remark + " || " + model.From_BankName + " || " + model.From_Address + " || " + model.From_Account_No + " || " + model.To_Benificiary + " || " + model.To_BankName + " || " + model.To_Address + " || " + model.To_Account_No + " || " + model.To_IBAN + " || " + CurrentTime + " || " + model.currenctType; //nimmi 07/02/2020----  //Changes in Cheque date updated on 13/02/2020 Nimmi---   28-02-2020  ARCHANA K V SRISHTI 
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NonHR_RelatedPayment", request_id, "INITIATOR");
                        #endregion Keep AuditLog_p009
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult View_Request_Handling_View(string id)
        {
            SubmitRequest model = new SubmitRequest();
            string[] splitData = id.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.my_role = splitData[3];
            model.button_code = splitData[4];
            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            var empDetails = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
            //model.my_country_id = empDetails.tb_Location.Country_Id ?? 0; //Basheer on 22-04-2020
            model.my_country_id = _entity.tb_Country.Where(x => x.Id == empDetails.Country_Id).FirstOrDefault().Id;
            if (model.button_code == "APR" || model.button_code == "CFM" || model.button_code == "SUT")
            {
                return PartialView("~/Views/Request/_pv_ApproveRequestReason.cshtml", model);
            }
            else if (model.button_code == "REJ")
            {
                return PartialView("~/Views/Request/_pv_request_reject_reason.cshtml", model);
            }
            else if (model.button_code == "ESC")
            {
                //model.escalation_no = Convert.ToInt32(splitData[5]);
                model.escalation_no = (request.Escalaton_NO ?? 0) + 1;
                return PartialView("~/Views/Request/_pv_EscalatePersonsList.cshtml", model);
            }
            else if (model.button_code == "HLD")
            {
                return PartialView("~/Views/Request/_pv_Request_Hold_Remark.cshtml", model);
            }
            else if (model.button_code == "EFW")
            {
                return PartialView("~/Views/Request/_pv_pp_Request_forward.cshtml", model);
            }
            else if (model.button_code == "BKI")
            {
                return PartialView("~/Views/Request/_pv_Send_Back_Creator_Reason.cshtml", model);
            }
            else if (model.button_code == "BKP")
            {
                return PartialView("~/Views/Request/_pv_Send_Back_To_Previous_Approver.cshtml", model);
            }
            else if (model.button_code == "CNL")
            {
                return PartialView("~/Views/Request/_pv_Reason_for_request_canel.cshtml", model);
            }
            else if (model.button_code == "RRT")
            {
                model.reqemployeeid = request.Employee_ID;
                model.delegation_band = empDetails.DelegationBand == null ? "0" : empDetails.DelegationBand;
                return PartialView("~/Views/Request/_pv_RerouteList.cshtml", model);
            }

            else
            {
                return PartialView("~/Views/Request/_pv_No_Pages.cshtml");
            }
        } // COMMON FUNCTION
        public object Request_Handiling_Processes(SubmitRequest model)
        {
            TempData["comment"] = model.reason;

            TempData["Emp_Id"] = model.my_id;

            //P016-Internal Transfer(Preema)
            if (model.button_code == "UPC" || model.button_code == "APR" || model.button_code == "REJ" || model.button_code == "ESC"
                || model.button_code == "HLD" || model.button_code == "EFW" || model.button_code == "BKI" || model.button_code == "BKP" ||
                model.button_code == "CNL" || model.button_code == "RRT" || model.button_code == "CLS")
            {
                var data_p016 = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).FirstOrDefault();
                if (data_p016 != null)
                {
                    if (data_p016.tb_WFType.WF_ID == "P016" || data_p016.tb_WFType.WF_ID == "P017")
                    {
                        UpdateRequestHistory(data_p016.tb_WFType.WF_ID, model.button_code, data_p016.Request_ID, "");
                    }
                }
            }
            if (model.button_code == "UPC")
            {
                return Submit_RequestUnderProcess(model);
            }
            else if (model.button_code == "APR")
            {
                return Submit_RequestApprove(model);
            }
            else if (model.button_code == "REJ")
            {
                return Submit_Reject(model);
            }
            else if (model.button_code == "ESC")
            {
                return Submit_RequestEscalatedApprove(model);
            }
            else if (model.button_code == "HLD")
            {
                return Submit_RequestHold(model);
            }
            else if (model.button_code == "EFW")
            {
                return Submit_RequestForward(model);
            }
            else if (model.button_code == "BKI")
            {
                return Submit_RequestBack_To_Creator(model);
            }
            else if (model.button_code == "BKP")
            {
                return Submit_RequestBack_To_Previous_Approver(model);
            }
            else if (model.button_code == "CNL")
            {
                var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).FirstOrDefault();
                if (model.status == "BKI" || (req.Employee_ID == model.my_id && model.status == req.Status_ID && req.Approval_No == "1" || model.status == "NEW")) //Basheer on 27-03-2020 
                {
                    return Submit_Cancel_Request_By_Creator(model); //Basheer on 04-02-2020 for cancel done by creator after backto initiator
                }
                else
                {
                    return Submit_RequestCancelFromProcessor(model);
                }
            }
            else if (model.button_code == "RRT")
            {
                return Submit_RequestRerouting(model);
            }
            else if (model.button_code == "CLS")
            {
                return Submit_RequestClose(model);

            }
            //Basheer on 28-05-2020
            else if (model.button_code == "PYD")
            {
                if (model.taisprocessor == false) //07-07-2020 
                    return Submit_RequestPaid(model);
                else
                    //Submit_Request_Cash_Advance_Ready(model);// CASH ADVANCE READY //Basheer 0n 2
                    return Processors(model);
            }
            else if (model.button_code == "TRD")// CASH ADVANCE NOT READY
            {
                //return Submit_Request_Cash_Advance_Not_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "TRD")// TICKET READY
            {
                //return Submit_Request_Tickt_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "TNR") // TICKET NOT READY
            {
                //return Submit_Request_Tickt_Not_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "CRD") //RENT CAR READY
            {
                //return Submit_Request_Rent_Car_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "CNR") // RENT CAR NOT READY 
            {
                //return Submit_Request_Rent_Car_Not_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "HBD") // HOTEL BOOKING READY
            {
                //return Submit_Request_Hotel_Booking_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "HNR") // HOTEL BOOKING NOT READY
            {
                //return Submit_Request_Hotel_Booking_Not_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "VRD") // EXIT ENTRY VISA READY
            {
                //return Submit_Request_Exit_Entry_Visa_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "VNR") // EXIT ENTRY VISA NOT READY 
            {
                //return Submit_Request_Exit_Entry_visa_Not_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "FRD") // FOREIGN VISA READY
            {
                //return Submit_Request_Foreign_Visa_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "FNR") // FOREIGN VISA NOT READY 
            {
                //return Submit_Request_Foreign_Visa_Not_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "IRD") // TRAVEL INSURANCE READY 
            {
                //return Submit_Request_Travel_Insurance_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "INR") // TRAVEL INSURANCE NOT READY 
            {
                //return Submit_Request_Travel_Insurance_Not_Ready(model);
                return Processors(model);
            }
            else if (model.button_code == "PRN")
            {
                return Json(new { Status = "PRN", Message = "Print" }, JsonRequestBehavior.AllowGet);
            }
            else if (model.button_code == "SUT")  //Bassheer on 04-02-2020 for Submit in approver side for backtoinitiator
            {
                var id = model.request_id + '~' + model.my_id + '~' + model.wftype;
                return SubmitRequestForApprove(id);
            }
            return true;
        }// COMMON FUNCTION

        /// <summary>
        /// Ctreated By Sibi 01-02-2020
        /// P051-Salary Advance for New Arrival Payment
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public object Submit_PP_Salary_Advance_for_New_Arrival_Payment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_SalaryAdvance_NewArrival.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_SalaryAdvance_NewArrival.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p051
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryAdvance_NewArrival", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p051
                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Bank_Attachment = model.bank_attachment;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_SalaryAdvance_NewArrival.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region attachments
                    //Basheer on 16-03-2020 to to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //Basheer code end here
                    #endregion
                    #region Keep AuditLog_p051
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.to_iban + " ||" + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryAdvance_NewArrival", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p051

                }
                #region attachments
                //Basheer on 16-03-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Ctreated By Sibi 01-02-2020
        /// P051-Salary Advance for New Arrival Payment
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public object Submit_PP_Salary_Advance_for_New_Arrival_Payment_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_SalaryAdvance_NewArrival.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p051
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.purpose_text + " || " + " || " + model.remark + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryAdvance_NewArrival", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p051
                        #endregion Cash
                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Bank_Attachment = model.bank_attachment;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p051
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryAdvance_NewArrival", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p051
                        #endregion Bank
                    }
                    //Basheer on 16-03-2020
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_Salary_Advance_for_New_Arrival_Payment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_SalaryAdvance_NewArrival.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.Cheque_Date = null;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                    {
                        if (req != null)
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p051
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + "||" + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime;//nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryAdvance_NewArrival", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p051
                        }
                    }
                    else
                    {
                        #region Log for SaveChanges
                        //Basheer on 06-02-2020 to save log for savechanges
                        string remark = "Request was Edited by";
                        string[] split1 = model.request_id.Split('-');
                        string rqid1 = split[1];
                        //Basheer on 26-03-2020 for checking request
                        //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        if (req.Creater_ID == model.emp_local_id)
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        }
                        else
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                        }
                        #endregion

                        #region Keep AuditLog_p051 initiator after backtoinitiator
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + "||" + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime;//nimmi 07/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SalaryAdvance_NewArrival", request_id, "INITIATOR");
                        #endregion Keep AuditLog_p051
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //Basheer code start here
        public ActionResult View_P050(WaitingRequestDetails model)
        {
            var _p050 = _entity.tb_PP_SettlingAllowancePayment.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            model.payment_mode = _p050.PaymentMode;
            if (_p050.PaymentMode == "C")
            {
                if (_p050.Cheque_Date != null)
                {
                    try
                    {
                        var stringDate = _p050.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _p050.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                }
                model.payment_mode = _p050.PaymentMode;
                model.amount_sar = _p050.Amount_SAR;
                model.purpose_text = _p050.Purpose_Text;
                model.payable_to = _p050.Cheque_Payable;
                model.attachment_filepath = _p050.Attachment_Filepath;
            }
            else
            {
                model.amount_sar = _p050.Amount_SAR;
                model.from_bank = _p050.From_Bank;
                model.from_addreess = _p050.From_Address;
                model.from_account_no = _p050.From_AccountNo;
                model.to_beneficiary = _p050.To_Benificiary;
                model.to_bankname = _p050.To_BankName;
                model.to_address = _p050.To_Address;
                model.to_account_no = _p050.To_AccountNo;
                model.bank_attachment = _p050.Bank_Attachment;
                model.attachment_filepath = _p050.Attachment_Filepath;
                model.remark = _p050.Remark;
            }
            return View(model);
        }
        public object Submit_PP_SettlingAllowancePayment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_SettlingAllowancePayment.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_SettlingAllowancePayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_p050
                    if (status)
                    {

                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SettlingAllowancePayment", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p050


                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Bank_Attachment = model.bank_attachment;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_SettlingAllowancePayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region attachments
                    //Basheer on 16-03-2020 to to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //Basheer code end here
                    #endregion
                    #region Keep AuditLog_p050
                    if (status)
                    {


                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.remark + " || " + " || " + model.to_iban + " || " + CurrentTime;//nimmi 07/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SettlingAllowancePayment", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p050


                }
                #region attachments
                //Basheer on 16-03-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_SettlingAllowancePayment_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_SettlingAllowancePayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Cash

                        #region Keep AuditLog_p050
                        if (status)
                        {

                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SettlingAllowancePayment", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p050



                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Bank_Attachment = model.bank_attachment;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Bank

                        #region Keep AuditLog_p050
                        if (status)
                        {

                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.remark + " || " + " || " + model.to_iban + " || " + CurrentTime;//nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SettlingAllowancePayment", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p050

                    }
                    //Basheer on 16-03-2020
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //----------------------Basheer 07/01/2020
        /// <summary>
        /// Ctreated By Sibi 01-02-2020
        /// P011-Introduction Certificate
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public object Submit_PP_Introduction_Certificate(IntroductionCertificateModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.WF_ID, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_Introduction_Certificate.Create();
                insert_pp_data.RequestId = data.Item2;

                insert_pp_data.LocalEmplyee_ID = model.LocalEmplyee_ID;
                insert_pp_data.Iqama_Number = model.Iqama_Number;
                insert_pp_data.Certificate_with_Salary = model.Certificate_with_Salary;
                insert_pp_data.Chamber_Of_Commerce_Stamp = model.Chamber_Of_Commerce_Stamp;
                insert_pp_data.Ministry_Of_Foreign_Affairs = model.Ministry_Of_Foreign_Affairs;
                //insert_pp_data.Location_Code = model.Location_Code;
                insert_pp_data.Location_Id = model.Location_Id;
                var locationcode = _entity.tb_Location.Where(x => x.Location_Id == model.Location_Id).FirstOrDefault().Location_Code;
                insert_pp_data.Location_Code = locationcode;
                insert_pp_data.Iqama_Identification = model.Iqama_Identification;
                insert_pp_data.Attachment_Filepath = model.Attachment_Filepath;

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;

                _entity.tb_PP_Introduction_Certificate.Add(insert_pp_data);
                status = _entity.SaveChanges() > 0;

                #region Keep AuditLog_p011
                if (status)
                {

                    string request_id = insert_pp_data.RequestId;
                    string record = model.LocalEmplyee_ID + " || " + model.Iqama_Number + " || " + model.Certificate_with_Salary + " || " + model.Chamber_Of_Commerce_Stamp + " || " + model.Ministry_Of_Foreign_Affairs + " || " + model.Location_Code + " || " + model.Iqama_Identification + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Introduction_Certificate", request_id, "INITIATOR");

                }
                #endregion Keep AuditLog_p011

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion



            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        //Terrin on 30/3/2020----P060----
        public object Submit_PP_Application_Mobile_Allowance(Applicationfor_mobile model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.WF_ID, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_Mobile_Allowance.Create();
                insert_pp_data.RequestId = data.Item2;
                insert_pp_data.Allowancepergrp = model.Allowance_per_group;
                insert_pp_data.Remarks = model.Remarks;
                insert_pp_data.Justification = model.Justification;
                insert_pp_data.Allowance_Date = model.Allowance_Date;
                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;

                _entity.tb_PP_Mobile_Allowance.Add(insert_pp_data);
                status = _entity.SaveChanges() > 0;
                #region Keep AuditLog_p060
                if (status)
                {

                    string request_id = insert_pp_data.RequestId;
                    string record = model.Allowance_per_group + " || " + model.Remarks + " || " + model.Justification + " || " + model.Allowance_Date + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Mobile_Allowance", request_id, "INITIATOR");

                }
                #endregion Keep AuditLog_p060


                //Terrin code end here
                #endregion



            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_Recruitment_Training_Payment(EmployeeRequestModel model) //Terrin po15
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_TrainingorRecruitmentPayment.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.traname = model.traname;
                    insert_pp_data.blcontrollerid = model.blcontrollerid;
                    insert_pp_data.currencytype = model.currenctType;
                    insert_pp_data.chargecostcenter = model.chargecostcenter;
                    insert_pp_data.chargeaccount = model.chargeaccount;
                    insert_pp_data.Remark = model.rt_remarks;
                    _entity.tb_PP_TrainingorRecruitmentPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p055
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.blcontrollerid + "||" + model.traname + "||" + "||" + model.chargecostcenter + " || " + model.chargeaccount + " || " + model.payment_mode + " || " + model.cheque_date + " || " + model.currenctType + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.rt_remarks + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_TrainingorRecruitmentPayment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p055
                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Bank_Attachment = model.bank_attachment;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.currencytype = model.currenctType;
                    insert_pp_data.traname = model.traname;
                    insert_pp_data.blcontrollerid = model.blcontrollerid;
                    insert_pp_data.chargecostcenter = model.chargecostcenter;
                    insert_pp_data.chargeaccount = model.chargeaccount;
                    insert_pp_data.Remark = model.rt_remarks;
                    _entity.tb_PP_TrainingorRecruitmentPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_p055
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.blcontrollerid + "||" + model.traname + "||" + model.chargecostcenter + " || " + model.chargeaccount + " || " + model.payment_mode + " || " + model.currenctType + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + " || " + model.purpose_text + " || " + model.rt_remarks + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_TrainingorRecruitmentPayment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p055
                }
                #region attachments
                //Basheer on 26-02-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_Recruitment_Training_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_TrainingorRecruitmentPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.traname = model.traname;
                        edit_pp_data.blcontrollerid = model.blcontrollerid;
                        edit_pp_data.currencytype = model.currenctType;
                        edit_pp_data.chargecostcenter = model.chargecostcenter;
                        edit_pp_data.chargeaccount = model.chargeaccount;
                        edit_pp_data.Remark = model.rt_remarks;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Cash
                        #region Keep AuditLog_p055
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.blcontrollerid + "||" + model.traname + "||" + model.chargecostcenter + " || " + model.chargeaccount + " || " + model.payment_mode + " || " + model.cheque_date + " || " + model.currenctType + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.rt_remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_TrainingorRecruitmentPayment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p055
                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Bank_Attachment = model.bank_attachment;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.currencytype = model.currenctType;
                        edit_pp_data.traname = model.traname;
                        edit_pp_data.blcontrollerid = model.blcontrollerid;
                        edit_pp_data.chargecostcenter = model.chargecostcenter;
                        edit_pp_data.chargeaccount = model.chargeaccount;
                        edit_pp_data.Remark = model.rt_remarks;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Bank

                        #region Keep AuditLog_p055
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.blcontrollerid + "||" + model.traname + "||" + model.chargecostcenter + " || " + model.chargeaccount + " || " + model.payment_mode + " || " + model.currenctType + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + " || " + model.purpose_text + " || " + model.rt_remarks + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_TrainingorRecruitmentPayment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p055
                    }

                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //-----------------P020---- Terrin on 8/4/2020-------------------
        public object Submit_MedicalInsurance(MedicalInsuranceApplication model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.WF_ID, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data
                    msg = "Success";
                    var insert_pp_data = _entity.tb_PP_Medical_Insurance.Create();
                    insert_pp_data.RequestId = data.Item2;
                    insert_pp_data.App_Type = Convert.ToString(model.App_Type);
                    insert_pp_data.Add_details = Convert.ToString(model.Add_details);
                    insert_pp_data.Effective = Convert.ToDateTime(model.Effective);
                    insert_pp_data.Date_Employee = Convert.ToDateTime(model.Date_Employee);
                    insert_pp_data.Iqama_no = Convert.ToString(model.Iqama_no);
                    insert_pp_data.Remarks = Convert.ToString(model.MedIns_Remarks);
                    insert_pp_data.Attachment_File = model.Attachment_Filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.Timestamp = CurrentTime;

                    _entity.tb_PP_Medical_Insurance.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;

                    if (status && model._Insurance_dependence != null && model._Insurance_dependence.Count > 0)
                    {


                        if (model._Insurance_dependence.Count > 0)
                        {
                            foreach (var item in model._Insurance_dependence)
                            {
                                var insert_pp_Insdependent_data = _entity.tb_PP_Medical_Insurance_Dependent.Create();
                                insert_pp_Insdependent_data.RequestId = data.Item2;
                                insert_pp_Insdependent_data.MedIns_Id = insert_pp_data.MedIns_Id;
                                insert_pp_Insdependent_data.Name = item.Name;
                                insert_pp_Insdependent_data.Date_of_birth = item.Date_of_birth;
                                insert_pp_Insdependent_data.Sex = item.Sex;
                                insert_pp_Insdependent_data.Relation = item.Relation;
                                insert_pp_Insdependent_data.Depend_class = item.Depend_class;
                                //insert_ao_guest_data.IsActive = true;
                                //insert_ao_guest_data.TimeStamp = CurrentTime;
                                if (insert_pp_Insdependent_data.Name != null || insert_pp_Insdependent_data.Relation != null || insert_pp_Insdependent_data.Depend_class != null)
                                {
                                    _entity.tb_PP_Medical_Insurance_Dependent.Add(insert_pp_Insdependent_data);
                                    _entity.SaveChanges();
                                }
                            }
                        }
                        // msg = status ? " Success!" : "Failed!";
                    }


                    #region Keep AuditLog_P029
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.App_Type + " || " + model.Add_details + " || " + model.Effective + " || " + model.Date_Employee;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Medical_Insurance", request_id, "INITIATOR");

                    }

                    #endregion Keep AuditLog_P020

                    #region attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                    #endregion

                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }

        //-----P029-----Terrin on 8/4/2020------
        public object Submit_PP_MedicalInsurance_Edit_After_Save(MedicalInsuranceApplication model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            try
            {
                if (data != null)
                {
                    #region Store Request Data
                    msg = "Success";
                    var edit_pp_data = _entity.tb_PP_Medical_Insurance.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    string request_id = edit_pp_data.RequestId;
                    if (edit_pp_data != null)
                    {
                        #region
                        edit_pp_data.RequestId = request_id;
                        edit_pp_data.App_Type = Convert.ToString(model.App_Type);
                        edit_pp_data.Add_details = Convert.ToString(model.Add_details);
                        edit_pp_data.Effective = Convert.ToDateTime(model.Effective);
                        edit_pp_data.Date_Employee = Convert.ToDateTime(model.Date_Employee);
                        edit_pp_data.Iqama_no = Convert.ToString(model.Iqama_no);
                        edit_pp_data.Remarks = Convert.ToString(model.MedIns_Remarks);
                        edit_pp_data.Attachment_File = model.Attachment_Filepath;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.Timestamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;

                        if (status && model._Insurance_dependence != null && model._Insurance_dependence.Count > 0)
                        {

                            // var delete_pp_data = _entity.tb_PP_Medical_Insurance_Dependent.Where(x => x.RequestId == request_id).FirstOrDefault();
                            //_entity.tb_PP_Medical_Insurance_Dependent.Remove(delete_pp_data);
                            //_entity.SaveChanges();
                            _entity.tb_PP_Medical_Insurance_Dependent.RemoveRange(_entity.tb_PP_Medical_Insurance_Dependent.Where(x => x.RequestId == request_id));

                            if (model._Insurance_dependence.Count > 0)
                            {
                                foreach (var item in model._Insurance_dependence)
                                {
                                    var insert_pp_Insdependent_data = _entity.tb_PP_Medical_Insurance_Dependent.Create();
                                    insert_pp_Insdependent_data.RequestId = request_id;
                                    insert_pp_Insdependent_data.MedIns_Id = edit_pp_data.MedIns_Id;
                                    insert_pp_Insdependent_data.Name = item.Name;
                                    insert_pp_Insdependent_data.Date_of_birth = item.Date_of_birth;
                                    insert_pp_Insdependent_data.Sex = item.Sex;
                                    insert_pp_Insdependent_data.Relation = item.Relation;
                                    insert_pp_Insdependent_data.Depend_class = item.Depend_class;
                                    //insert_ao_guest_data.IsActive = true;
                                    //insert_ao_guest_data.TimeStamp = CurrentTime;
                                    if (insert_pp_Insdependent_data.Name != null)
                                    {
                                        _entity.tb_PP_Medical_Insurance_Dependent.Add(insert_pp_Insdependent_data);
                                        status1 = _entity.SaveChanges() > 0;
                                    }
                                }
                            }
                            // msg = status ? " Success!" : "Failed!";
                        }


                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }


                        }




                        #endregion attachment edit


                        #region Keep AuditLog_P029

                        if (status == true)
                        {
                            request_id = edit_pp_data.RequestId;
                            string record = model.App_Type + " || " + model.Add_details + " || " + model.Effective + " || " + model.Date_Employee;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Medical_Insurance", request_id, "INITIATOR");

                            #endregion Keep AuditLog_P029

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                        #endregion

                    }

                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //...............................................................................


        //----------------------Basheer 07/01/2020

        public PartialViewResult GetBankdetailsForPPrequestp050(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_SettlingAllow_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP050(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_SettlingAllow_Cheque.cshtml", model);
        }
        public object Edit_PP_SettlingAllowancePayment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_SettlingAllowancePayment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.Cheque_Date = null;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                            #region Keep AuditLog_p050
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + "||" + model.remark + " || " + CurrentTime;//nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SettlingAllowancePayment", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p050
                        }
                        else
                        {
                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion

                            #region Keep AuditLog_p050 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + "||" + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime;//nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_SettlingAllowancePayment", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p050

                        }

                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //P013Basheer Code start here
        public PartialViewResult GetBankdetailsForPPrequestP013(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_VacationAdvance_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP013(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_VacationAdvance_Cheque.cshtml", model);
        }
        public object GetTaRequestDetails(string reqid)
        {
            long requestid = Convert.ToInt64(reqid);
            var data = _entity.tb_TA_Business_International.Where(x => x.RequestId == requestid && x.IsActive == true).FirstOrDefault();
            string lastdate = data.Last_Day_Of_Work.Value.ToShortDateString();
            string returntoduty = Convert.ToDateTime(data.Return_To_Duty).Date.ToShortDateString();
            return Json(new { lastdate = lastdate, returntoduty = returntoduty }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_VacationAdvancePayment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_VacationAdvancePayment.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.TaNumber = model.tanumber;
                    insert_pp_data.currencytype = model.taamountype;
                    insert_pp_data.chequeaccountno = model.tachequeaccountno;
                    insert_pp_data.chequeSupplier = model.tasupplier;
                    _entity.tb_PP_VacationAdvancePayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Bank_Attachment = model.bank_attachment;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.TaNumber = model.tanumber;
                    insert_pp_data.currencytype = model.taamountype;
                    _entity.tb_PP_VacationAdvancePayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult View_P013(WaitingRequestDetails model)
        {
            var _p013 = _entity.tb_PP_VacationAdvancePayment.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
            model.payment_mode = _p013.PaymentMode;
            if (_p013.PaymentMode == "C")
            {
                if (_p013.Cheque_Date != null)
                {
                    try
                    {
                        var stringDate = _p013.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                    catch
                    {
                        var stringDate = _p013.Cheque_Date.ToString();
                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                        model.cheque_date_string = xx;
                    }
                }
                model.payment_mode = _p013.PaymentMode;
                model.amount_sar = _p013.Amount_SAR;
                model.purpose_text = _p013.Purpose_Text;
                model.payable_to = _p013.Cheque_Payable;
                model.attachment_filepath = _p013.Attachment_Filepath;
                model.tanumber = _p013.TaNumber;
                model.taamountype = _p013.currencytype;
                model.tachequeaccountno = _p013.chequeaccountno;
                model.tasupplier = _p013.chequeSupplier;

            }
            else
            {
                model.amount_sar = _p013.Amount_SAR;
                model.from_bank = _p013.From_Bank;
                model.from_addreess = _p013.From_Address;
                model.from_account_no = _p013.From_AccountNo;
                model.to_beneficiary = _p013.To_Benificiary;
                model.to_bankname = _p013.To_BankName;
                model.to_address = _p013.To_Address;
                model.to_account_no = _p013.To_AccountNo;
                model.bank_attachment = _p013.Bank_Attachment;
                model.attachment_filepath = _p013.Attachment_Filepath;
                model.remark = _p013.Remark;
                model.tanumber = _p013.TaNumber;
                model.taamountype = _p013.currencytype;

            }
            return View(model);
        }
        public object Edit_PP_VacationAdvancePayment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_VacationAdvancePayment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.TaNumber = model.tanumber;
                    insert_pp_data.currencytype = model.taamountype;
                    insert_pp_data.chequeaccountno = model.tachequeaccountno;
                    insert_pp_data.chequeSupplier = model.tasupplier;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.TaNumber = model.tanumber;
                    insert_pp_data.currencytype = model.taamountype;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                        }
                        else
                        {
                            //Needed to add audit here too with Initiator as role description
                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //14/05/2020 Alena Sics EOSB Calculation
        public object Submit_PP_EOSBCalculation(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_EOSB_Calculation.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.ChequeDate = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.EndofServicePayment = model.endofservice;
                    _entity.tb_PP_EOSB_Calculation.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p052
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + CurrentTime + "||" + model.remark + "||" + model.endofservice;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EOSB_Calculation", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p052
                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Beneficiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.EndofServicePayment = model.endofservice;
                    _entity.tb_PP_EOSB_Calculation.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul                      
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }
                    #region Keep AuditLog_p052
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.purpose_text + " || " + CurrentTime + "||" + model.from_account_no + "||" + model.from_bank + "||" + model.from_addreess + "||" + model.to_beneficiary +
                            "||" + model.to_bankname + "||" + model.to_address + "||" + model.to_account_no + "||" + model.to_iban + "||" + model.endofservice + "||" + model.remark;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EOSB_Calculation", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p052
                }
                #endregion
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        //14/05/2020 Alena Sics EOSB Calculation
        public object Submit_PP_EOSBCalculation_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_EOSB_Calculation.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.ChequeDate = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.EndofServicePayment = model.endofservice;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p013
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + CurrentTime + "||" + model.remark + "||" + model.endofservice;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EOSB_Calculation", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p052
                        //end
                        #endregion Cash

                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Beneficiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.EndofServicePayment = model.endofservice;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p013
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.amount_sar + " || " + model.purpose_text + " || " + CurrentTime + "||" + model.from_account_no + "||" + model.from_bank + "||" + model.from_addreess + "||" + model.to_beneficiary +
    "||" + model.to_bankname + "||" + model.to_address + "||" + model.to_account_no + "||" + model.to_iban + "||" + model.endofservice + "||" + model.remark;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EOSB_Calculation", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p052
                        #endregion Bank
                    }
                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                    }
                    // attachment edit
                    if (status == true)
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        // 14/05/2020 Alena Sics EOSB calculation 

        public PartialViewResult GetBankdetailsForPPrequestP052(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_PP_EOSB_Calculation_BankTransfer.cshtml", model);
        }
        //14/05/2020 Alena Sics EOSB Calculation
        public PartialViewResult GetChequedetailsForPPrequestP052(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_PP_EOSB_Calculation_ChequeTransfer.cshtml", model);
        }
        // 19/05/2020 Alena Sics for EOSB Calculation
        // 19/05/2020 Alena Sics for EOSB Calculation
        public object Edit_PP_EOSB_Calculation(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_EOSB_Calculation.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Payment mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.ChequeDate = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    //26/05/2020 ALENA SICS
                    //insert_pp_data.EndofServicePayment = model.endofservice;
                    long endofservice = Convert.ToInt64(model.endofservice);
                    insert_pp_data.EndofServicePayment = endofservice;
                    //end
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Beneficiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Remark = model.remark;
                    //26/05/2020 ALENA SICS
                    //insert_pp_data.EndofServicePayment = model.endofservice;
                    long endofservice = Convert.ToInt64(insert_pp_data.EndofServicePayment);
                    insert_pp_data.EndofServicePayment = endofservice;
                    //end
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                #endregion                 
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }
                }
                #endregion attachment edit
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null)
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p052
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + model.endofservice + " || " + model.to_iban + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EOSB_Calculation", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p052
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion

                            #region Keep AuditLog_p052 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EOSB_Calculation", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p052



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Print Page .........
        /// </summary>
        /// <returns></returns>       
        //public ActionResult Public_Print_Pages()
        //{
        //    return View();
        //}

        //Basheer code end here
        //13-01-2020 - Sibi Started 
        public object Edit_PP_Recuirment_Training_Payment(EmployeeRequestModel model) //Terrin on P015
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_TrainingorRecruitmentPayment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.traname = model.traname;
                    insert_pp_data.blcontrollerid = model.blcontrollerid;
                    insert_pp_data.currencytype = model.currenctType;
                    insert_pp_data.chargecostcenter = model.chargecostcenter;
                    insert_pp_data.chargeaccount = model.chargeaccount;
                    insert_pp_data.Remark = model.rt_remarks;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    #region Bank
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Bank_Attachment = model.bank_attachment;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.currencytype = model.currenctType;
                    insert_pp_data.traname = model.traname;
                    insert_pp_data.blcontrollerid = model.blcontrollerid;
                    insert_pp_data.chargecostcenter = model.chargecostcenter;
                    insert_pp_data.chargeaccount = model.chargeaccount;
                    insert_pp_data.Remark = model.rt_remarks;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                    #endregion
                }

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p055
                            string request_id = insert_pp_data.RequestId;
                            string record = model.blcontrollerid + "||" + model.traname + "||" + "||" + model.chargecostcenter + " || " + model.chargeaccount + " || " + model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.currenctType + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.rt_remarks + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_TrainingorRecruitmentPayment", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p015
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //  _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");


                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion

                            #region Keep AuditLog_p015 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.blcontrollerid + "||" + model.traname + "||" + "||" + model.chargecostcenter + " || " + model.chargeaccount + " || " + model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.currenctType + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.rt_remarks + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_TrainingorRecruitmentPayment", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p015



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_Introduction_Certificate(IntroductionCertificateModel model)
        {
            bool status = false;
            string msg = "failed";
            //string[] split = model.request_id.Split('-');
            //string rqid = split[1];
            string rqid = model.request_id;
            var insert_pp_data = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                insert_pp_data.LocalEmplyee_ID = model.LocalEmplyee_ID;
                insert_pp_data.Iqama_Number = model.Iqama_Number;
                insert_pp_data.Certificate_with_Salary = model.Certificate_with_Salary;
                insert_pp_data.Chamber_Of_Commerce_Stamp = model.Chamber_Of_Commerce_Stamp;
                insert_pp_data.Ministry_Of_Foreign_Affairs = model.Ministry_Of_Foreign_Affairs;
                //insert_pp_data.Location_Code = model.Location_Code;
                insert_pp_data.Location_Id = model.Location_Id;    //14-03-2020 Nimmi Mohan
                var locationcode = _entity.tb_Location.Where(x => x.Location_Id == model.Location_Id).FirstOrDefault().Location_Code; //14-03-2020 Nimmi Mohan
                insert_pp_data.Location_Code = locationcode;//14-03-2020 Nimmi Mohan
                insert_pp_data.Iqama_Identification = model.Iqama_Identification;
                //insert_pp_data.Attachment_Filepath = model.Attachment_Filepath;

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;
                #endregion
                //Basheer on 16-03-2020  
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == insert_pp_data.RequestId && x.IsActive == true && x.filebatch == 2).ToList();
                        if (editattachment != null)
                        {
                            foreach (var item in editattachment)
                            {
                                item.IsActive = false;
                                status = _entity.SaveChanges() > 0;
                            }
                        }
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = insert_pp_data.RequestId;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == insert_pp_data.RequestId && x.IsActive == true && x.filebatch == 1).ToList();
                        if (editattachment != null)
                        {
                            foreach (var item in editattachment)
                            {
                                item.IsActive = false;
                                status = _entity.SaveChanges() > 0;
                            }
                        }
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = insert_pp_data.RequestId;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }




                #endregion attachment edit
                //Basheer code end here
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    // ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    ////var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var application = req.tb_Application;
                    //if (req != null)
                    //{
                    //    var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                    //    var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    //    var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                    //}
                    #region Keep AuditLog_p011
                    string request_id = insert_pp_data.RequestId;
                    string record = model.LocalEmplyee_ID + " || " + model.Iqama_Number + " || " + model.Certificate_with_Salary + " || " + model.Chamber_Of_Commerce_Stamp + " || " + model.Ministry_Of_Foreign_Affairs + " || " + model.Location_Code + " || " + model.Iqama_Identification + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Introduction_Certificate", request_id, "INITIATOR");
                    #endregion Keep AuditLog_p011


                    string remark = "Request was Edited by";
                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID.ToString(), "", "", "", "", "");

                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //13-01-2020 Sibi End

        //Terrin on 30/3/2020
        public object Edit_PP_Mobile_Allowance(Applicationfor_mobile model)
        {
            bool status = false;
            string msg = "failed";
            //string[] split = model.request_id.Split('-');
            //string rqid = split[1];
            string rqid = model.request_id;
            var insert_pp_data = _entity.tb_PP_Mobile_Allowance.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                insert_pp_data.Allowancepergrp = model.Allowance_per_group;
                insert_pp_data.Remarks = model.Remarks;
                insert_pp_data.Justification = model.Justification;
                insert_pp_data.Allowance_Date = model.Allowance_Date;
                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;
                #endregion

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    // ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    ////var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    //var application = req.tb_Application;
                    //if (req != null)
                    //{
                    //    var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                    //    var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    //    var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                    //}
                    #region Keep AuditLog_p060
                    string request_id = insert_pp_data.RequestId;
                    string record = model.Allowance_per_group + " || " + model.Remarks + " || " + model.Justification + " || " + model.Allowance_Date + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Mobile_Allowance", request_id, "INITIATOR");
                    #endregion Keep AuditLog_p060


                    string remark = "Request was Edited by";
                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID.ToString(), "", "", "", "", "");

                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //16-01-2020 Nimmi start P056

        /*P056 Relocation Allowance on 16-01-2020 By Nimmi Mohan*/
        public object Submit_PP_RelocationAllowance(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_RelocationAllowance.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_RelocationAllowance.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;


                    #region Keep AuditLog_p056
                    if (status)
                    {

                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_RelocationAllowance", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p056

                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Bank_Attachment = model.bank_attachment;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_RelocationAllowance.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;

                    #region attachments
                    //Basheer on 16-03-2020 to to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //Basheer code end here
                    #endregion

                    #region Keep AuditLog_p056
                    if (status)
                    {


                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_RelocationAllowance", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p056

                }
                #region attachments
                //Basheer on 16-03-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }  //P056
        public object Submit_PP_RelocationAllowance_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_RelocationAllowance.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Cash

                        #region Keep AuditLog_p056
                        if (status)
                        {

                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_RelocationAllowance", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p056

                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Bank_Attachment = model.bank_attachment;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Bank

                        #region Keep AuditLog_p056
                        if (status)
                        {

                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_RelocationAllowance", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p056

                    }
                    //Basheer on 16-03-2020
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }
                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }  //P056
        //Nimmi End


        // 27-01-2020 SIBI - P061 START 

        //--------------------------------P023 End--------------------------------------
        public object Edit_PP_RelocationAllowance(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_RelocationAllowance.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.Cheque_Date = null;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p056
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_RelocationAllowance", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p056
                        }
                        else
                        {
                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion


                            #region Keep AuditLog_p056 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_RelocationAllowance", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p056
                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }   //P056 Nimmi 
        public PartialViewResult GetBankdetailsForPPrequestP056(string id)    //P056
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_RlnAllow_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP056(string id) //P056
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_RlnAllow_Cheque.cshtml", model);
        }
        public object GetSelectedCompany_PayrollCode(long CompanyId)
        {
            var data = _entity.tb_Company.Where(x => x.Company_Id == CompanyId && x.IsActive == true).FirstOrDefault();
            return Json(data, JsonRequestBehavior.AllowGet);
        }
        ////P015 Code Start Here
        //public PartialViewResult GetBankdetailsForPPrequestP015(string id)
        //{
        //    RequestModel model = new RequestModel();
        //    model.employeeid = id;
        //    return PartialView("~/Views/Request/_pv_TrainingorRecruitment_BankTransfer.cshtml", model);
        //}

        //public PartialViewResult GetChequedetailsForPPrequestP015(string id)
        //{
        //    RequestModel model = new RequestModel();
        //    model.employeeid = id;
        //    return PartialView("~/Views/Request/_pv_TrainingorRecruitment_Cheque.cshtml", model);
        //}
        public object Submit_PP_TrainingorRecruitmentPayment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_TrainingorRecruitmentPayment.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.traname = model.traname;
                    insert_pp_data.blcontrollerid = model.blcontrollerid;
                    insert_pp_data.currencytype = model.taamountype;
                    insert_pp_data.chargecostcenter = model.chargecostcenter;
                    insert_pp_data.chargeaccount = model.chargeaccount;
                    _entity.tb_PP_TrainingorRecruitmentPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.Bank_Attachment = model.bank_attachment;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.currencytype = model.taamountype;
                    insert_pp_data.traname = model.traname;
                    insert_pp_data.blcontrollerid = model.blcontrollerid;
                    insert_pp_data.chargecostcenter = model.chargecostcenter;
                    insert_pp_data.chargeaccount = model.chargeaccount;
                    _entity.tb_PP_TrainingorRecruitmentPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_TrainingorRecruitment_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_TrainingorRecruitmentPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.traname = model.traname;
                        edit_pp_data.blcontrollerid = model.blcontrollerid;
                        edit_pp_data.currencytype = model.taamountype;
                        edit_pp_data.chargecostcenter = model.chargecostcenter;
                        edit_pp_data.chargeaccount = model.chargeaccount;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Cash
                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Bank_Attachment = model.bank_attachment;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.currencytype = model.taamountype;
                        edit_pp_data.traname = model.traname;
                        edit_pp_data.blcontrollerid = model.blcontrollerid;
                        edit_pp_data.chargecostcenter = model.chargecostcenter;
                        edit_pp_data.chargeaccount = model.chargeaccount;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Bank
                    }
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult View_P015(WaitingRequestDetails model)
        {
            return View(model);
        }
        public object GetLBUcontroller(string reqid)
        {
            long requestid = Convert.ToInt64(reqid);
            var data = _entity.tb_TA_Business_International.Where(x => x.RequestId == requestid && x.IsActive == true).FirstOrDefault();
            string lastdate = data.Last_Day_Of_Work.Value.ToShortDateString();
            string returntoduty = Convert.ToDateTime(data.Return_To_Duty).Date.ToShortDateString();
            return Json(new { lastdate = lastdate, returntoduty = returntoduty }, JsonRequestBehavior.AllowGet);
        }
        // Using this save because we have to chooosefinal approver from drop down list
        #region commented by basheer for his P015
        //public object Submit_RequestApproveP015(SubmitRequest model)
        //{
        //    string blcontroller = model.bl_controller.ToString();
        //    string request_id = model.request_id;
        //    string myId = model.my_id;
        //    bool status = false;
        //    string msg = "Failed";
        //    string roleId = "";
        //    string myPosition = "";
        //    string myRole = "";
        //    int identify_escalation = 3;
        //    int approvalStatus = Convert.ToInt32(statusEnum.Approval);
        //    var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == request_id).FirstOrDefault();
        //    string old_Approval_np = data.Approval_No;
        //    string old_approver_id = data.Approver_ID;
        //    string old_status = data.Status_ID;
        //    var my_data = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == myId && x.IsActive == true).FirstOrDefault();
        //    if (model.level == 2)
        //    {
        //        long newroleId = 0;
        //        if (model.next_processor_role != null)
        //            newroleId = Convert.ToInt64(model.next_processor_role);

        //        var new_processor_role = _entity.tb_Role.Where(x => x.Id == newroleId && x.IsActive == true).FirstOrDefault();
        //        var nextApproverDetails = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == blcontroller && x.IsActive == true).FirstOrDefault();
        //        if (nextApproverDetails.DelegationFlag == true)
        //            data.Approver_ID = nextApproverDetails.Delegate_Emp_Code;
        //        else
        //            data.Approver_ID = nextApproverDetails.LocalEmplyee_ID;
        //        var temp = _entity.tb_WF_Template.Where(x => x.WF_Template_ID == data.tb_WF_Template.WF_Template_ID && x.Role_ID == newroleId && x.IsActive == true).FirstOrDefault();
        //        data.OrgApprover_ID = nextApproverDetails.LocalEmplyee_ID;
        //        data.Status_ID = model.next_process;
        //        data.Approval_No = (Convert.ToInt32(data.Approval_No) + 1).ToString();
        //        if (temp != null)
        //            data.WFTemplate_ID = temp.Id;
        //        data.RoleId = new_processor_role.Id;
        //        status = _entity.SaveChanges() > 0;
        //        if (status)
        //        {
        //            #region For History
        //            msg = "Approved Successfully";
        //            string mailMsg = "Forwarded by " + my_data.Emp_Name;
        //            string remark = "Request was approved by ";
        //            bool sendMail = _rpp.Send_Approval_Mail_Login(old_status, request_id, myPosition, myRole, data.Employee_ID, myId, old_Approval_np, data.Approver_ID, new_processor_role.Role_Desc, remark, data, model.reason);
        //            #endregion For History
        //        }
        //    }
        //    else
        //    {
        //        var initiator_details = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID).FirstOrDefault();// Requset for whom 
        //        var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();
        //        int current_sequence = Convert.ToInt32(data.Approval_No);
        //        if (role != null)
        //        {
        //            myRole = role.Role_Desc;
        //            #region Find the next approver process
        //            if (data.tb_WFType.HaveProfile == true)
        //            {
        //                #region Profile Oriented
        //                var wfTemplate = _entity.tb_WF_Template.Where(x => x.WF_ID == data.WF_ID && x.Profile_ID == initiator_details.Profile_ID && x.Sequence_NO > current_sequence && x.Action_Flag != identify_escalation).OrderBy(x => x.Sequence_NO).FirstOrDefault();// For approve
        //                if (wfTemplate != null)
        //                {
        //                    #region Have Next Approver
        //                    //var next_role = _entity.tb_Role.Where(x => x.Id == wfTemplate.Role_ID && x.IsActive == true).FirstOrDefault();
        //                    if (wfTemplate.tb_Role != null)
        //                    {
        //                        RoleDetails roleDetails = Find_RoleDetailsP015(wfTemplate.tb_Role, data, initiator_details);
        //                        data.Approver_ID = roleDetails.deligated_personId;
        //                        data.OrgApprover_ID = roleDetails.assigned_person_id;
        //                        data.Approval_No = (Convert.ToInt32(data.Approval_No) + 1).ToString();
        //                        data.WFTemplate_ID = wfTemplate.Id;
        //                        data.RoleId = wfTemplate.Role_ID;
        //                        data.Status_ID = wfTemplate.Status_ID;
        //                        data.TimeStamp = CurrentTime;
        //                        status = _entity.SaveChanges() > 0;
        //                        if (status)
        //                        {
        //                            #region For History
        //                            msg = "Approved Successfully";
        //                            string mailMsg = "Forwarded by " + my_data.Emp_Name;
        //                            string remark = "Request was approved by ";
        //                            bool sendMail = _rpp.Send_Approval_Mail_Login(old_status, request_id, myPosition, myRole, data.Employee_ID, myId, old_Approval_np, data.Approver_ID, roleDetails.role_name, remark, data, model.reason);
        //                            if (wfTemplate.DistributionList_ID != null)
        //                            {
        //                                try
        //                                {
        //                                    DistributionRequest(data, wfTemplate.DistributionList_ID ?? 0, data.Approval_No, "", myId, myRole);// Check the distribution and mail the data //25-02-2020 ARCHANA
        //                                }
        //                                catch (Exception es)
        //                                {
        //                                    msg = es.Message;
        //                                }
        //                            }
        //                            #endregion For History
        //                        }
        //                        if (wfTemplate.Action_Flag != approvalStatus)//This is the last approvers
        //                        {
        //                            #region  Keep Log for APC 
        //                            var apcLog = _entity.tb_ApprovalLog.Create();
        //                            apcLog.RequestId = request_id;
        //                            apcLog.Remark = "Request Approval Cycle Completed by";
        //                            apcLog.EmployeeId = data.Employee_ID;
        //                            apcLog.Actor_Id = myId;
        //                            apcLog.RoleId = myRole;
        //                            apcLog.SequenceNo = data.Approval_No == null ? 0 : Convert.ToInt32(data.Approval_No);
        //                            apcLog.TimeStamp = CurrentTime;
        //                            apcLog.IsActive = true;
        //                            apcLog.Status = "APC";
        //                            apcLog.Reason = model.reason;
        //                            _entity.tb_ApprovalLog.Add(apcLog);
        //                            status = _entity.SaveChanges() > 0;
        //                            if (status)
        //                            {
        //                                string remark = "Request Approval Cycle Completed by";
        //                                bool sendMail = _rpp.Send_Approval_Mail_Login(old_status, request_id, myPosition, myRole, data.Employee_ID, myId, old_Approval_np, "", "", remark, data, "");
        //                            }
        //                            #endregion
        //                        }
        //                    }
        //                    #endregion Have Next Approver
        //                }
        //                else
        //                {
        //                    if (data.tb_WFType.tb_Closing_Type.Code == "CC")
        //                    {
        //                        #region CC 
        //                        data.Status_ID = "CLS";
        //                        data.Approval_No = Convert.ToString(Convert.ToInt32(data.Approval_No) + 2);// APC have a approval number increament
        //                        data.TimeStamp = CurrentTime;
        //                        status = _entity.SaveChanges() > 0;
        //                        if (status)
        //                        {
        //                            string remark = "Request was closed by";
        //                            bool sendMail = _rpp.Send_Approval_Mail_Login(old_status, request_id, myPosition, myRole, data.Employee_ID, myId, old_Approval_np, "", "", remark, data, model.reason);
        //                        }
        //                        #endregion CC
        //                    }
        //                    else if (data.tb_WFType.tb_Closing_Type.Code == "PC")
        //                    {
        //                        #region CC 
        //                        data.Status_ID = "CLS";
        //                        data.Approval_No = Convert.ToString(Convert.ToInt32(data.Approval_No) + 2);
        //                        data.TimeStamp = CurrentTime;
        //                        status = _entity.SaveChanges() > 0;
        //                        if (status)
        //                        {
        //                            string remark = "Request was closed by";
        //                            bool sendMail = _rpp.Send_Approval_Mail_Login(old_status, request_id, myPosition, myRole, data.Employee_ID, myId, old_Approval_np, "", "", remark, data, model.reason);
        //                        }
        //                        #endregion CC
        //                    }
        //                }
        //                #endregion Profile Oriented
        //            }
        //            else
        //            {
        //                #region Not Profile Oriented
        //                var wfTemplate = _entity.tb_WF_Template.Where(x => x.WF_ID == data.WF_ID && x.Sequence_NO > current_sequence && x.Action_Flag != identify_escalation).OrderBy(x => x.Sequence_NO).FirstOrDefault();
        //                if (wfTemplate != null)
        //                {
        //                    #region Have Next Approver

        //                    var next_role = _entity.tb_Role.Where(x => x.Id == wfTemplate.Role_ID && x.IsActive == true).FirstOrDefault();
        //                    if (next_role != null)
        //                    {
        //                        RoleDetails roleDetails = Find_RoleDetailsP015(next_role, data, initiator_details);
        //                        data.Approver_ID = roleDetails.deligated_personId;
        //                        data.OrgApprover_ID = roleDetails.assigned_person_id;
        //                        data.Approval_No = (Convert.ToInt32(data.Approval_No) + 1).ToString();
        //                        data.RoleId = wfTemplate.Role_ID;
        //                        data.WFTemplate_ID = wfTemplate.Id;
        //                        data.Status_ID = wfTemplate.Status_ID;
        //                        data.TimeStamp = CurrentTime;
        //                        status = _entity.SaveChanges() > 0;
        //                        if (status)
        //                        {
        //                            #region For History
        //                            msg = "Approved Successfully";
        //                            string mailMsg = "Forwarded by " + my_data.Emp_Name;
        //                            string remark = "Request was approved by ";
        //                            bool sendMail = _rpp.Send_Approval_Mail_Login("INT", request_id, myPosition, role.Role_Desc, data.Employee_ID, myId, old_Approval_np, data.Approver_ID, roleDetails.role_name, remark, data, model.reason);
        //                            if (wfTemplate.DistributionList_ID != null)
        //                            {
        //                                try
        //                                {
        //                                    DistributionRequest(data, wfTemplate.DistributionList_ID ?? 0, data.Approval_No, "", myId, myRole);// Check the distribution and mail the data //25-02-2020 ARCHANA SRISHTI
        //                                }
        //                                catch (Exception es)
        //                                {
        //                                    msg = es.Message;
        //                                }
        //                            }
        //                            #endregion For History
        //                        }
        //                        if (wfTemplate.Action_Flag != approvalStatus)//This is the last approvers
        //                        {
        //                            #region  Keep Log for APC 
        //                            var apcLog = _entity.tb_ApprovalLog.Create();
        //                            apcLog.RequestId = request_id;
        //                            apcLog.Remark = "Request Approval Cycle Completed by";
        //                            apcLog.EmployeeId = data.Employee_ID;
        //                            apcLog.Actor_Id = myId;
        //                            apcLog.RoleId = myRole;
        //                            apcLog.SequenceNo = data.Approval_No == null ? 0 : Convert.ToInt32(data.Approval_No);
        //                            apcLog.TimeStamp = CurrentTime;
        //                            apcLog.IsActive = true;
        //                            apcLog.Status = "APC";
        //                            apcLog.Reason = model.reason;
        //                            _entity.tb_ApprovalLog.Add(apcLog);
        //                            status = _entity.SaveChanges() > 0;
        //                            if (status)
        //                            {
        //                                //string remark = "Request Approval Cycle Completed by";
        //                                //bool sendMail = Send_Approval_Mail_Login(old_status, request_id, myPosition, myRole, data.Employee_ID, myId, old_Approval_np, "", "", remark, data, "");
        //                            }
        //                            #endregion
        //                        }
        //                    }
        //                    #endregion Have Next Approver
        //                }
        //                else
        //                {
        //                    if (data.tb_WFType.tb_Closing_Type.Code == "CC")
        //                    {
        //                        #region CC 
        //                        data.Status_ID = "CLS";
        //                        data.Approval_No = Convert.ToString(Convert.ToInt32(data.Approval_No) + 2);// APC have a approval number increament
        //                        data.TimeStamp = CurrentTime;
        //                        status = _entity.SaveChanges() > 0;
        //                        if (status)
        //                        {
        //                            string remark = "Request was closed by";
        //                            bool sendMail = _rpp.Send_Approval_Mail_Login(old_status, request_id, myPosition, myRole, data.Employee_ID, myId, old_Approval_np, "", "", remark, data, model.reason);
        //                        }
        //                        #endregion CC
        //                    }
        //                    else if (data.tb_WFType.tb_Closing_Type.Code == "PC")
        //                    {
        //                        #region CC 
        //                        data.Status_ID = "CLS";
        //                        data.Approval_No = Convert.ToString(Convert.ToInt32(data.Approval_No) + 2);
        //                        data.TimeStamp = CurrentTime;
        //                        status = _entity.SaveChanges() > 0;
        //                        if (status)
        //                        {
        //                            string remark = "Request was closed by";
        //                            bool sendMail = _rpp.Send_Approval_Mail_Login(old_status, request_id, myPosition, myRole, data.Employee_ID, myId, old_Approval_np, "", "", remark, data, model.reason);
        //                        }
        //                        #endregion CC
        //                    }
        //                }
        //                #endregion Not Profile Oriented
        //            }
        //            #endregion Find the next approver process
        //        }
        //        if (status)
        //            msg = "Successful";
        //    }


        //    return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        //}
        //private RoleDetails Find_RoleDetailsP015(tb_Role next_role, tb_Request_Hdr data, tb_WF_Employee employee)
        //{
        //    RoleDetails role = new RoleDetails();
        //    role.role_id = next_role.Role_ID;
        //    role.role_name = next_role.Role_Desc;
        //    if (next_role.Organization_Flag == false)
        //    {
        //        if (next_role.Assigned_ID != null)
        //        {
        //            #region Normal
        //            role.assigned_person_id = next_role.Assigned_ID;
        //            #endregion Normal
        //        }
        //        else
        //        {
        //            if (next_role.GroupRole == true)
        //            {
        //                #region Having Multiple 
        //                var universal = _entity.tb_UniversalLookupTable.Where(x => x.Table_Name == next_role.Role_ID && x.IsActive == true).FirstOrDefault();
        //                if (universal != null)
        //                {
        //                    role.assigned_person_id = universal.Table_Name;
        //                }
        //                #endregion Having Multiple 
        //            }
        //            else
        //            {
        //                #region Having Single 
        //                var universal = _entity.tb_UniversalLookupTable.Where(x => x.Table_Name == next_role.Role_ID && x.IsActive == true && (x.Code == null || x.Code == data.tb_WFType.WF_ID)).FirstOrDefault();
        //                if (universal != null)
        //                {
        //                    role.assigned_person_id = universal.Description;
        //                }
        //                #endregion Having Single
        //            }
        //        }
        //    }
        //    else
        //    {
        //        #region 
        //        if (next_role.org_type == null || next_role.org_type == string.Empty)
        //        {
        //            role.assigned_person_id = employee.Line_Manager;
        //        }
        //        else if (next_role.org_type.Trim() == "DT")// Check the department table 
        //        {
        //            #region Department
        //            var department = _entity.tb_Department.Where(x => x.IsActive == true && x.Department_Id == employee.Department_Id).FirstOrDefault();
        //            if (department != null)
        //            {
        //                if (next_role.role_type == "MN" && department.Dept_Manager != null)
        //                {
        //                    role.assigned_person_id = department.Dept_Manager;
        //                }
        //                else if (next_role.role_type == "CR" && department.Dept_Controller != null)
        //                {
        //                    role.assigned_person_id = department.Dept_Controller;
        //                }
        //                else if (next_role.role_type == "OA" && department.Dep_Office_Admin != null)
        //                {
        //                    role.assigned_person_id = department.Dep_Office_Admin;
        //                }
        //            }
        //            #endregion Department
        //        }
        //        else if (next_role.org_type.Trim() == "BL")// Check the business line table 
        //        {
        //            #region Business Line
        //            var business = _entity.tb_BusinessLine.Where(x => x.IsActive == true && x.BL_Id == employee.tb_Department.tb_ProductGroup.BusinessLine_Id).FirstOrDefault();
        //            if (business != null)
        //            {
        //                if (next_role.role_type == "MN" && business.BL_Manager != null)
        //                {
        //                    role.assigned_person_id = business.BL_Manager;
        //                }
        //                else if (next_role.role_type == "CR" && business.BL_Controller != null)
        //                {
        //                    role.assigned_person_id = business.BL_Controller;
        //                }
        //                else if (next_role.role_type == "OA" && business.BL_Office_Admin != null)
        //                {
        //                    role.assigned_person_id = business.BL_Office_Admin;
        //                }

        //            }
        //            #endregion Business Line
        //        }
        //        else if (next_role.org_type.Trim() == "B")// Check the business 
        //        {
        //            #region Business
        //            var business = _entity.tb_Business.Where(x => x.IsActive == true && x.Bus_Id == employee.tb_Department.tb_ProductGroup.tb_BusinessLine.Business_Id).FirstOrDefault();
        //            if (business != null)
        //            {
        //                if (next_role.role_type == "MN" && business.Bus_Manager != null)
        //                {
        //                    role.assigned_person_id = business.Bus_Manager;
        //                }
        //                else if (next_role.role_type == "CR" && business.Bus_Controller != null)
        //                {
        //                    role.assigned_person_id = business.Bus_Controller;
        //                }
        //                else if (next_role.role_type == "OA" && business.Bus_Office_Admin != null)
        //                {
        //                    role.assigned_person_id = business.Bus_Office_Admin;
        //                }
        //            }
        //            #endregion Business
        //        }
        //        else if (next_role.org_type == "PG")// Check the Product group table 
        //        {
        //            #region Product Group
        //            var product = _entity.tb_ProductGroup.Where(x => x.IsActive == true && x.PG_Id == employee.tb_Department.PG_Id).FirstOrDefault();
        //            if (product != null)
        //            {
        //                if (next_role.role_type == "MN" && product.PG_Manager != null)
        //                {
        //                    role.assigned_person_id = product.PG_Manager;
        //                }
        //                else if (next_role.role_type == "CR" && product.PG_Controller != null)
        //                {
        //                    role.assigned_person_id = product.PG_Controller;
        //                }
        //                else if (next_role.role_type == "OA" && product.PG_Office_Admin != null)
        //                {
        //                    role.assigned_person_id = product.PG_Office_Admin;
        //                }
        //            }
        //            #endregion Product Group 
        //        }
        //        #endregion
        //    }
        //    var next_emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == role.assigned_person_id && x.IsActive == true).FirstOrDefault();
        //    #region
        //    if (next_emp != null)
        //    {
        //        role.assigned_person_id = next_emp.LocalEmplyee_ID;
        //        if (next_emp.DelegationFlag == true)
        //            role.deligated_personId = next_emp.Delegate_Emp_Code == null ? next_emp.LocalEmplyee_ID : next_emp.Delegate_Emp_Code;
        //        else
        //            role.deligated_personId = next_emp.LocalEmplyee_ID;
        //        if (role.deligated_personId == data.Employee_ID)
        //        {
        //            //var bus_line = _entity.tb_BusinessLine.Where(x => x.BL_Id == employee.BusinessLine_Id && x.Country_Id == country.Id && x.IsActive == true).FirstOrDefault();
        //            //var line_manager = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == bus_line.BL_Manager && x.IsActive == true).FirstOrDefault();
        //            var line_manager = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == employee.Line_Manager && x.IsActive == true).FirstOrDefault();
        //            if (line_manager != null)
        //            {
        //                if (line_manager.DelegationFlag == true)
        //                    role.assigned_person_id = line_manager.Delegate_Emp_Code == null ? line_manager.LocalEmplyee_ID : line_manager.Delegate_Emp_Code;
        //                else
        //                    role.assigned_person_id = line_manager.LocalEmplyee_ID;
        //            }
        //        }
        //    }
        //    else
        //    {
        //        role.deligated_personId = role.assigned_person_id;
        //    }
        //    #endregion
        //    return role;
        //}

        #endregion
        //basheer code end here

        //START 03-02-2020  Nimmi P099)


        //--------------P099------------------------------------------//

        //START 03-02-2020  Nimmi P099)

        //Last Edited on 18/02/2020   

        //sibi 03-02-2020
        public PartialViewResult GetBankdetailsForPPrequest51(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_SalaryAdvance_BankTransfer.cshtml", model);
        }
        public object Edit_BackToInitiator_PP_Introduction_Certificate(IntroductionCertificateModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];

            var insert_pp_data = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                insert_pp_data.LocalEmplyee_ID = model.LocalEmplyee_ID;
                insert_pp_data.Iqama_Number = model.Iqama_Number;
                insert_pp_data.Certificate_with_Salary = model.Certificate_with_Salary;
                insert_pp_data.Chamber_Of_Commerce_Stamp = model.Chamber_Of_Commerce_Stamp;
                insert_pp_data.Ministry_Of_Foreign_Affairs = model.Ministry_Of_Foreign_Affairs;
                //insert_pp_data.Location_Code = model.Location_Code; //Nimmi 20-03-2020
                insert_pp_data.Location_Id = model.Location_Id;  //Nimmi 20-03-2020
                var locationcode = _entity.tb_Location.Where(x => x.Location_Id == model.Location_Id).FirstOrDefault().Location_Code;//Nimmi 20-03-2020
                insert_pp_data.Location_Code = locationcode;//Nimmi 20-03-2020
                insert_pp_data.Iqama_Identification = model.Iqama_Identification;
                //insert_pp_data.Attachment_Filepath = model.Attachment_Filepath;

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;
                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    // ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    // sibi.... 1111 Edit
                    //var application = req.tb_Application;
                    //if (req != null)
                    //{
                    //    var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                    //    var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    //    var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                    //}

                    //End Edit
                    #region Keep AuditLog_p011
                    string request_id = insert_pp_data.RequestId;
                    string record = model.LocalEmplyee_ID + " || " + model.Iqama_Number + " || " + model.Certificate_with_Salary + " || " + model.Chamber_Of_Commerce_Stamp + " || " + model.Ministry_Of_Foreign_Affairs + " || " + model.Location_Code + " || " + model.Iqama_Identification + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Introduction_Certificate", request_id, "INITIATOR");
                    #endregion Keep AuditLog_p011


                    string remark = "Request was Edited by";
                    // _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID.ToString(), "", "", "", "", "");

                    /////////////Test Start..........................
                    ///

                    #region Log for SaveChanges

                    //string remark = "Request was Edited by";
                    //string[] split1 = model.request_id.Split('-');
                    //string rqid1 = split[1];


                    //Basheer on 26-03-2020 for checking request
                    // _rpp.InsertApproveLog("EDIT", rqid, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                    if (req.Creater_ID == model.emp_local_id)
                    {
                        _rpp.InsertApproveLog("EDIT", rqid, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                    }
                    else
                    {
                        _rpp.InsertApproveLog("EDIT", rqid, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                    }
                    //#endregion

                    //#region Keep AuditLog_p055 for initiator after backtoinitiator
                    //string request_id = insert_pp_data.RequestId;
                    //string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + CurrentTime; //nimmi 07/02/2020
                    //bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HousingAllowance", request_id, "INITIATOR");
                    #endregion Keep AuditLog_p055


                    //............................End




                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //*************************************************EMAIL TEMPLATE START****************************************************************************************
        public void Email_Template(EmailTemplateDataModel model, tb_WFType wftype) //25-02-2020 ARCHANA SRISHTI 
        {
            var request = _entity.tb_Request_Hdr.Where(x => x.Id == model.request_id).FirstOrDefault();
            var request_status = _entity.tb_Status.Where(x => x.Status_ID == request.Status_ID).FirstOrDefault();
            _entity.Entry(request).Reload();


            //EMail message adjustment
            string status_msg = "";
            string comment = "";
            string from_employee_name = "";
            string to_employee_name = "";
            string to_employee_id = "";

            var content = FindDataForEmail(model, wftype, request);
            if (TempData.ContainsKey("status_message"))
            {
                status_msg = TempData["status_message"] as string;
            }
            if (TempData.ContainsKey("comment"))
            {
                comment = TempData["comment"] as string;
            }
            if (TempData.ContainsKey("from_employee_name"))
            {
                from_employee_name = TempData["from_employee_name"] as string;

            }
            if (TempData.ContainsKey("to_employee_name"))
            {
                to_employee_name = TempData["to_employee_name"] as string;
            }


            TempData.Remove("status_message");
            TempData.Remove("comment");
            TempData.Remove("from_employee_name");
            TempData.Remove("to_employee_name");

            //EMail message adjustment
            //Basheer on 20-03-2020
            if (model.process_type == EmailProcessType.Eforward) //to check if emailprocesstype is eforward or not, if its eforward create one link
            {
                var filePath = System.Web.Hosting.HostingEnvironment.MapPath(@"~/Content/Template/Email_Template_View_Eforward.html");
                #region eforward
                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Approver_ID).FirstOrDefault();
                if (emp != null && (model.process_type != EmailProcessType.Eforward || model.process_type != EmailProcessType.Distribution))
                {
                    #region 
                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                    var mBody = emailTemplate.
                          Replace("{{employeename}}", from_employee_name).
                           Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                        Replace("{{requestHeader}}", content.req_head).
                        Replace("{{requestDetails}}", content.details).
                        Replace("{{MailURL}}", content.approvarURL).
                        Replace("{{requestdisclimer}}", content.declaration).
                        Replace("{{requestSignature}}", content.sighOff);
                    var sendMail = SendmailTo(content.subject, mBody, request, model);
                    #endregion
                }
                else // WHICH MEANS THIS IS FROM THE LOOK UP TABLE 
                {
                    if (request.Approver_ID == null)
                    {
                        var newEmp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson).FirstOrDefault();
                        if (newEmp != null || model.process_type == EmailProcessType.BK_Initiator)
                        {
                            #region 
                            var emailTemplate = System.IO.File.ReadAllText(filePath);
                            var mBody = emailTemplate.
                            Replace("{{employeename}}", from_employee_name).
                                  Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                Replace("{{requestHeader}}", content.req_head).
                                Replace("{{requestDetails}}", content.details).
                                 Replace("{{MailURL}}", content.approvarURL).
                        Replace("{{requestdisclimer}}", content.declaration).
                        Replace("{{requestSignature}}", content.sighOff);
                            var sendMail = SendmailTo(content.subject, mBody, request, model);
                            #endregion
                        }

                    }
                    else
                    {
                        if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.BK_Initiator || model.process_type == EmailProcessType.Distribution || model.process_type == EmailProcessType.Eforward)//04-02-2020 ARCHANA K V SRISHTI 
                        {
                            if (model.process_type == EmailProcessType.Distribution || model.process_type == EmailProcessType.Eforward)
                            {
                                var eFor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson).FirstOrDefault();
                                if (eFor != null)
                                {
                                    #region
                                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                                    var mBody = emailTemplate.
                            Replace("{{employeename}}", from_employee_name).
                                         Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                        Replace("{{requestHeader}}", content.req_head).
                                        Replace("{{requestDetails}}", content.details).
                                          Replace("{{MailURL}}", content.approvarURL).
                                        Replace("{{requestdisclimer}}", content.declaration).
                                        Replace("{{requestSignature}}", content.sighOff);
                                    var sendMail = SendmailTo(content.subject, mBody, request, model);
                                    #endregion
                                }
                            }
                            else
                            {
                                #region
                                var emailTemplate = System.IO.File.ReadAllText(filePath);
                                var mBody = emailTemplate.
                            Replace("{{employeename}}", from_employee_name).
                                      Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                    Replace("{{requestHeader}}", content.req_head).
                                    Replace("{{requestDetails}}", content.details).
                                      Replace("{{MailURL}}", content.approvarURL).
                                    Replace("{{requestdisclimer}}", content.declaration).
                                    Replace("{{requestSignature}}", content.sighOff);
                                var sendMail = SendmailTo(content.subject, mBody, request, model);
                                #endregion
                            }
                        }
                        else
                        {
                            try
                            {
                                int i = 0;
                                string[] split = content.approvarURL.Split('~');
                                string[] users = content.approverId.Split('~');
                                foreach (var item in split)
                                {
                                    #region
                                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                                    var mBody = emailTemplate.
                            Replace("{{employeename}}", from_employee_name).
                                        Replace("{{requestHeader}}", content.req_head).
                                        Replace("{{status}}", status_msg).
                                        Replace("{{comment}}", comment).
                                        Replace("{{requestDetails}}", content.details).
                                        Replace("{{requestApproverURL}}", item).
                                        Replace("{{MailURL}}", content.approvarURL).
                                        Replace("{{requestdisclimer}}", content.declaration).
                                        Replace("{{requestSignature}}", content.sighOff);

                                    string xx = users[i];
                                    var approver = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == xx && x.IsActive == true).FirstOrDefault();
                                    //string subject = content.subject + " is waiting for the Process of " + approver.Emp_Name;
                                    string subject = content.subject + " is waiting for the Process of " + request.Approver_ID; // 04-03-2020 ARCHANA KV SRISHTI 
                                    if (i == 0)
                                    {
                                        var creartor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Creater_ID && x.IsActive == true).FirstOrDefault();
                                        var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
                                        //if (model.process_type == EmailProcessType.Submit)
                                        //{
                                        string[] ccAddress = new string[] { creartor.eMail, employee.eMail };
                                        Send(subject, mBody, approver.eMail, ccAddress);
                                        //}
                                    }
                                    else
                                    {
                                        string[] ccAddress = new string[] { };
                                        Send(content.subject, mBody, approver.eMail, ccAddress);
                                    }
                                    i = i + 1;
                                    #endregion
                                }

                            }
                            catch (Exception ex)
                            {

                            }
                        }
                    }
                }

                #endregion 

            }
            //Basheer on 13-05-2020
            else if (model.process_type == EmailProcessType.ApproveCompleted || model.process_type == EmailProcessType.Processor) //28-05-2020
            {
                #region approve completed

                var filePath = System.Web.Hosting.HostingEnvironment.MapPath(@"~/Content/Template/Email_Template_View__WithoutApprover.html");


                var creartor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Creater_ID && x.IsActive == true).FirstOrDefault();
                var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();

                if (request.Creater_ID == request.Employee_ID)
                {

                    #region
                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                    var mBody = emailTemplate.
                        Replace("{{employeename}}", from_employee_name).
                        Replace("{{status}}", status_msg).
                        Replace("{{comment}}", comment).
                        Replace("{{requestHeader}}", content.req_head).
                        Replace("{{requestDetails}}", content.details).
                        Replace("{{requestEmployeeURL}}", content.employeeURL).
                        Replace("{{requestCreatorURL}}", content.creatorURL).
                        Replace("{{requestdisclimer}}", content.declaration).
                        Replace("{{requestSignature}}", content.sighOff);
                    #endregion
                    string[] ccAddress = new string[] { };
                    Send(content.subject, mBody, creartor.eMail, ccAddress);
                }
                else
                {
                    string[] ccAddress = new string[] { };

                    #region Creator
                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                    var mBody = emailTemplate.
                        Replace("{{employeename}}", creartor.Emp_Name).
                        Replace("{{status}}", status_msg).
                        Replace("{{comment}}", comment).
                        Replace("{{requestHeader}}", content.req_head).
                        Replace("{{requestDetails}}", content.details).
                        Replace("{{requestEmployeeURL}}", content.employeeURL).
                        Replace("{{requestCreatorURL}}", content.creatorURL).
                        Replace("{{requestdisclimer}}", content.declaration).
                        Replace("{{requestSignature}}", content.sighOff);
                    #endregion
                    Send(content.subject, mBody, creartor.eMail, ccAddress);


                    #region employee
                    var emailTemplate1 = System.IO.File.ReadAllText(filePath);
                    var mBody1 = emailTemplate1.
                        Replace("{{employeename}}", employee.Emp_Name).
                        Replace("{{status}}", status_msg).
                        Replace("{{comment}}", comment).
                        Replace("{{requestHeader}}", content.req_head).
                        Replace("{{requestDetails}}", content.details).
                        Replace("{{requestEmployeeURL}}", content.employeeURL).
                        Replace("{{requestCreatorURL}}", content.creatorURL).
                        Replace("{{requestdisclimer}}", content.declaration).
                        Replace("{{requestSignature}}", content.sighOff);
                    #endregion

                    Send(content.subject, mBody1, employee.eMail, ccAddress);
                }



                #endregion
            }
            else if (model.process_type == EmailProcessType.BK_Initiator || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.PaidClose || model.process_type == EmailProcessType.Close) //Basheer on 28-05-2020
            {
                #region new

                var filePath = System.Web.Hosting.HostingEnvironment.MapPath(@"~/Content/Template/Email_Template_View__WithoutApprover.html");
                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Approver_ID).FirstOrDefault();
                if ((emp != null && (model.process_type != EmailProcessType.Eforward || model.process_type != EmailProcessType.Distribution)) || (model.ista == true && model.process_type == EmailProcessType.Close)) //Basheer on 28-05-2020
                {
                    #region 
                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                    var mBody = emailTemplate.
                          Replace("{{employeename}}", from_employee_name).
                           Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                        Replace("{{requestHeader}}", content.req_head).
                        Replace("{{requestDetails}}", content.details).
                        //Replace("{{requestApproverURL}}", content.approvarURL).
                        Replace("{{requestEmployeeURL}}", content.employeeURL).
                        Replace("{{requestCreatorURL}}", content.creatorURL).
                        Replace("{{requestdisclimer}}", content.declaration).
                        Replace("{{requestSignature}}", content.sighOff);
                    var sendMail = SendmailTo(content.subject, mBody, request, model);
                    #endregion
                }
                else // WHICH MEANS THIS IS FROM THE LOOK UP TABLE 
                {
                    if (request.Approver_ID == null)
                    {
                        var newEmp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson).FirstOrDefault();
                        if (newEmp != null || model.process_type == EmailProcessType.BK_Initiator)
                        {
                            #region 
                            var emailTemplate = System.IO.File.ReadAllText(filePath);
                            var mBody = emailTemplate.
                                    Replace("{{employeename}}", from_employee_name).
                                  Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                Replace("{{requestHeader}}", content.req_head).
                                Replace("{{requestDetails}}", content.details).
                                //Replace("{{requestApproverURL}}", content.approvarURL).
                                Replace("{{requestEmployeeURL}}", content.employeeURL).
                                Replace("{{requestCreatorURL}}", content.creatorURL).
                                Replace("{{requestdisclimer}}", content.declaration).
                                Replace("{{requestSignature}}", content.sighOff);
                            var sendMail = SendmailTo(content.subject, mBody, request, model);
                            #endregion
                        }

                    }
                    else
                    {
                        if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.BK_Initiator || model.process_type == EmailProcessType.Distribution || model.process_type == EmailProcessType.Eforward)//04-02-2020 ARCHANA K V SRISHTI 
                        {
                            if (model.process_type == EmailProcessType.Distribution || model.process_type == EmailProcessType.Eforward)
                            {
                                var eFor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson).FirstOrDefault();
                                if (eFor != null)
                                {
                                    #region
                                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                                    var mBody = emailTemplate.
                                            Replace("{{employeename}}", from_employee_name).
                                         Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                        Replace("{{requestHeader}}", content.req_head).
                                        Replace("{{requestDetails}}", content.details).
                                        //Replace("{{requestApproverURL}}", content.approvarURL).
                                        Replace("{{requestEmployeeURL}}", content.employeeURL).
                                        Replace("{{requestCreatorURL}}", content.creatorURL).
                                        Replace("{{requestdisclimer}}", content.declaration).
                                        Replace("{{requestSignature}}", content.sighOff);
                                    var sendMail = SendmailTo(content.subject, mBody, request, model);
                                    #endregion
                                }
                            }
                            else
                            {
                                #region
                                var emailTemplate = System.IO.File.ReadAllText(filePath);
                                var mBody = emailTemplate.
                                        Replace("{{employeename}}", from_employee_name).
                                      Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                    Replace("{{requestHeader}}", content.req_head).
                                    Replace("{{requestDetails}}", content.details).
                                    //Replace("{{requestApproverURL}}", content.approvarURL).
                                    Replace("{{requestEmployeeURL}}", content.employeeURL).
                                    Replace("{{requestCreatorURL}}", content.creatorURL).
                                    Replace("{{requestdisclimer}}", content.declaration).
                                    Replace("{{requestSignature}}", content.sighOff);
                                var sendMail = SendmailTo(content.subject, mBody, request, model);
                                #endregion
                            }
                        }
                        else
                        {
                            try
                            {
                                int i = 0;
                                string[] split = content.approvarURL.Split('~');
                                string[] users = content.approverId.Split('~');
                                foreach (var item in split)
                                {
                                    #region
                                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                                    var mBody = emailTemplate.
                                        Replace("{{employeename}}", from_employee_name).
                                        Replace("{{requestHeader}}", content.req_head).
                                       Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                        Replace("{{requestDetails}}", content.details).
                                        //Replace("{{requestApproverURL}}", item).
                                        Replace("{{requestEmployeeURL}}", content.employeeURL).
                                        Replace("{{requestCreatorURL}}", content.creatorURL).
                                        Replace("{{requestdisclimer}}", content.declaration).
                                        Replace("{{requestSignature}}", content.sighOff);

                                    string xx = users[i];
                                    var approver = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == xx && x.IsActive == true).FirstOrDefault();
                                    //string subject = content.subject + " is waiting for the Process of " + approver.Emp_Name;
                                    string subject = content.subject + " is waiting for the Process of " + request.Approver_ID; // 04-03-2020 ARCHANA KV SRISHTI 
                                    if (i == 0)
                                    {
                                        var creartor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Creater_ID && x.IsActive == true).FirstOrDefault();
                                        var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
                                        //if (model.process_type == EmailProcessType.Submit)
                                        //{
                                        string[] ccAddress = new string[] { creartor.eMail, employee.eMail };
                                        Send(subject, mBody, approver.eMail, ccAddress);
                                        //}
                                    }
                                    else
                                    {
                                        string[] ccAddress = new string[] { };
                                        Send(content.subject, mBody, approver.eMail, ccAddress);
                                    }
                                    i = i + 1;
                                    #endregion
                                }

                            }
                            catch (Exception ex)
                            {

                            }
                        }
                    }
                }
                #endregion
            }
            else
            {
                var filePath = System.Web.Hosting.HostingEnvironment.MapPath(@"~/Content/Template/Email_Template_View.html");
                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Approver_ID).FirstOrDefault();
                if (emp != null && (model.process_type != EmailProcessType.Eforward || model.process_type != EmailProcessType.Distribution))
                {
                    #region 
                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                    var mBody = emailTemplate.
                          Replace("{{employeename}}", from_employee_name).
                           Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                        Replace("{{requestHeader}}", content.req_head).
                        Replace("{{requestDetails}}", content.details).
                        Replace("{{requestApproverURL}}", content.approvarURL).
                        Replace("{{requestEmployeeURL}}", content.employeeURL).
                        Replace("{{requestCreatorURL}}", content.creatorURL).
                        Replace("{{requestdisclimer}}", content.declaration).
                        Replace("{{requestSignature}}", content.sighOff);
                    var sendMail = SendmailTo(content.subject, mBody, request, model);
                    #endregion
                }
                else // WHICH MEANS THIS IS FROM THE LOOK UP TABLE 
                {
                    if (request.Approver_ID == null && request.Status_ID != "APP") //Basheer on 28-05-2020
                    {
                        var newEmp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson).FirstOrDefault();
                        if (newEmp != null || model.process_type == EmailProcessType.BK_Initiator)
                        {
                            #region 
                            var emailTemplate = System.IO.File.ReadAllText(filePath);
                            var mBody = emailTemplate.
                                    Replace("{{employeename}}", from_employee_name).
                                  Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                Replace("{{requestHeader}}", content.req_head).
                                Replace("{{requestDetails}}", content.details).
                                Replace("{{requestApproverURL}}", content.approvarURL).
                                Replace("{{requestEmployeeURL}}", content.employeeURL).
                                Replace("{{requestCreatorURL}}", content.creatorURL).
                                Replace("{{requestdisclimer}}", content.declaration).
                                Replace("{{requestSignature}}", content.sighOff);
                            var sendMail = SendmailTo(content.subject, mBody, request, model);
                            #endregion
                        }

                    }
                    else
                    {
                        if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.BK_Initiator || model.process_type == EmailProcessType.Distribution || model.process_type == EmailProcessType.Eforward)//04-02-2020 ARCHANA K V SRISHTI 
                        {
                            if (model.process_type == EmailProcessType.Distribution || model.process_type == EmailProcessType.Eforward)
                            {
                                //Basheer on 28-05-2020 created if else for vendor..vendor details are taken from vendor table also need different template email
                                string[] splitData = model.eforwardPerson.Split('-');
                                if (splitData.Count() > 1)
                                {
                                    string vendor = splitData[0];
                                    long vendorid = Convert.ToInt32(splitData[1]);
                                    if (vendor == "VENDOR")
                                    {
                                        var eFor = _entity.tb_Vendor.Where(x => x.Vendor_id == vendorid).FirstOrDefault();
                                        if (eFor != null)
                                        {
                                            #region
                                            var filePathvender = System.Web.Hosting.HostingEnvironment.MapPath(@"~/Content/Template/Email_Template_View_Vender.html");
                                            var emailTemplate = System.IO.File.ReadAllText(filePathvender);
                                            var mBody = emailTemplate.
                                                Replace("{{employeename}}", from_employee_name).
                                                Replace("{{status}}", status_msg).
                                                Replace("{{comment}}", comment).
                                                Replace("{{requestHeader}}", content.req_head).
                                                Replace("{{requestDetails}}", content.details).
                                                Replace("{{requestdisclimer}}", content.declaration).
                                                Replace("{{requestSignature}}", content.sighOff);
                                            var sendMail = SendmailTo(content.subject, mBody, request, model);
                                            #endregion
                                        }
                                    }
                                }
                                //Basheer end here 28-05-2020
                                else
                                {
                                    var eFor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson).FirstOrDefault();
                                    if (eFor != null)
                                    {
                                        #region
                                        var emailTemplate = System.IO.File.ReadAllText(filePath);
                                        var mBody = emailTemplate.
                                            Replace("{{employeename}}", from_employee_name).
                                            Replace("{{status}}", status_msg).
                                            Replace("{{comment}}", comment).
                                            Replace("{{requestHeader}}", content.req_head).
                                            Replace("{{requestDetails}}", content.details).
                                            Replace("{{requestApproverURL}}", content.approvarURL).
                                            Replace("{{requestEmployeeURL}}", content.employeeURL).
                                            Replace("{{requestCreatorURL}}", content.creatorURL).
                                            Replace("{{requestdisclimer}}", content.declaration).
                                            Replace("{{requestSignature}}", content.sighOff);
                                        var sendMail = SendmailTo(content.subject, mBody, request, model);
                                        #endregion
                                    }
                                }
                            }
                            else
                            {
                                #region
                                var emailTemplate = System.IO.File.ReadAllText(filePath);
                                var mBody = emailTemplate.
                                        Replace("{{employeename}}", from_employee_name).
                                      Replace("{{status}}", status_msg).
                             Replace("{{comment}}", comment).
                                    Replace("{{requestHeader}}", content.req_head).
                                    Replace("{{requestDetails}}", content.details).
                                    Replace("{{requestApproverURL}}", content.approvarURL).
                                    Replace("{{requestEmployeeURL}}", content.employeeURL).
                                    Replace("{{requestCreatorURL}}", content.creatorURL).
                                    Replace("{{requestdisclimer}}", content.declaration).
                                    Replace("{{requestSignature}}", content.sighOff);
                                var sendMail = SendmailTo(content.subject, mBody, request, model);
                                #endregion
                            }
                        }
                        else
                        {
                            try
                            {
                                int i = 0;
                                string[] split = content.approvarURL.Split('~');
                                string[] users = content.approverId.Split('~');
                                //Basheer on 28-05-2020 for Status on each processors
                                string[] status = null;
                                if (content.status != null)
                                {
                                    status = content.status.Split('~');
                                }

                                //End here
                                foreach (var item in split.Distinct())
                                {
                                    #region
                                    string xx = users[i];
                                    var approver = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == xx && x.IsActive == true).FirstOrDefault();
                                    var emailTemplate = System.IO.File.ReadAllText(filePath);
                                    //Basheer on 28-05-2020 for Status on each processors
                                    if (content.status != null)
                                    {
                                        var mBody = emailTemplate.
                                        Replace("{{employeename}}", approver.Emp_Name).
                                        Replace("{{requestHeader}}", content.req_head).
                                        Replace("{{status}}", status[i]).
                                        Replace("{{comment}}", comment).
                                        Replace("{{requestDetails}}", content.details).
                                        Replace("{{requestApproverURL}}", item).
                                        Replace("{{requestEmployeeURL}}", content.employeeURL).
                                        Replace("{{requestCreatorURL}}", content.creatorURL).
                                        Replace("{{requestdisclimer}}", content.declaration).
                                        Replace("{{requestSignature}}", content.sighOff);

                                        if (i == 0)
                                        {
                                            var creartor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Creater_ID && x.IsActive == true).FirstOrDefault();
                                            var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
                                            //if (model.process_type == EmailProcessType.Submit)
                                            //{
                                            string[] ccAddress = new string[] { creartor.eMail, employee.eMail };
                                            Send(content.subject, mBody, approver.eMail, ccAddress);
                                            //}
                                        }
                                        else
                                        {
                                            string[] ccAddress = new string[] { };
                                            //Send(content.subject, mBody, approver.eMail, ccAddress); //Basheer on 09-04-2020
                                            Send(content.subject, mBody, approver.eMail, ccAddress);

                                        }
                                    }
                                    else
                                    {
                                        var mBody = emailTemplate.
                                       Replace("{{employeename}}", approver.Emp_Name).
                                       Replace("{{requestHeader}}", content.req_head).
                                       Replace("{{status}}", status_msg).
                                       Replace("{{comment}}", comment).
                                       Replace("{{requestDetails}}", content.details).
                                       Replace("{{requestApproverURL}}", item).
                                       Replace("{{requestEmployeeURL}}", content.employeeURL).
                                       Replace("{{requestCreatorURL}}", content.creatorURL).
                                       Replace("{{requestdisclimer}}", content.declaration).
                                       Replace("{{requestSignature}}", content.sighOff);

                                        //string subject = content.subject + " is waiting for the Process of " + request.Approver_ID; // 04-03-2020 ARCHANA KV SRISHTI 
                                        if (i == 0)
                                        {
                                            var creartor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Creater_ID && x.IsActive == true).FirstOrDefault();
                                            var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
                                            //if (model.process_type == EmailProcessType.Submit)
                                            //{
                                            string[] ccAddress = new string[] { creartor.eMail, employee.eMail };
                                            Send(content.subject, mBody, approver.eMail, ccAddress);
                                            //}
                                        }
                                        else
                                        {
                                            string[] ccAddress = new string[] { };
                                            //Send(content.subject, mBody, approver.eMail, ccAddress); //Basheer on 09-04-2020
                                            Send(content.subject, mBody, approver.eMail, ccAddress);

                                        }
                                    }
                                    //Basheer on 28-05-2020 for Status on each processors

                                    //string subject = content.subject + " is waiting for the Process of " + approver.Emp_Name;

                                    i = i + 1;
                                    #endregion
                                }

                            }
                            catch (Exception ex)
                            {

                            }
                        }
                    }
                }
            }


        }
        public MailContents FindDataForEmail(EmailTemplateDataModel model, tb_WFType wftype, tb_Request_Hdr request)
        {
            MailContents returnData = new MailContents();
            _entity.Entry(request).Reload();

            string reasonFor = FindTheReason(model.process_type, model.request_id, model.buttoncode); //Basheer on 28-05-2020
            var data = _entity.tb_eMessage.Where(x => x.WF_Id == model.wf_id && x.IsActive == true).FirstOrDefault();
            var from_employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();//EMail message adjustment
            string from_employee_name = "";
            string to_employee_name = "";
            from_employee_name = from_employee.Emp_Name;

            if (data != null)
            {
                if (model.process_type == EmailProcessType.Eforward || model.process_type == EmailProcessType.Distribution) // e forwarded msg wants to go for the person who is not in the request header table 
                {
                    //Basheer on 28-05-2020 added else condetion for vendor..because vendor details taken from vendor table
                    //for log
                    string[] splitData = model.eforwardPerson.Split('-');
                    if (splitData.Count() > 1)
                    {
                        string vendor = splitData[0];
                        long vendorid = Convert.ToInt32(splitData[1]);
                        if (vendor == "VENDOR")
                        {
                            #region Other details 
                            var toEmp = _entity.tb_Vendor.Where(x => x.Vendor_id == vendorid && x.IsActive == true).FirstOrDefault();

                            if (toEmp != null)
                            {
                                to_employee_name = toEmp.Vendor_Name;
                                string req_Tostring = request.Request_ID.ToString();
                                returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + vendorid + ".";
                                returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                                returnData.declaration = data.Disclaimer;
                                returnData.sighOff = data.Signature;

                                string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                                returnData.approvarURL = host + FindURL(request.Id.ToString(), toEmp.Vendor_Code, "ForwardView", "", 1);// For Approver
                                returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "ForwardView", "My Request", 0);// For Employee - Request owner
                                if (request.Creater_ID == request.Employee_ID)
                                {
                                    returnData.creatorURL = returnData.employeeURL;// For Request creator
                                }
                                else
                                {
                                    //Basheer on 24-03-2020 to fix creator link issue
                                    //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "ForwardView", "My Request", 0);// For request creator
                                    returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "ForwardView", "My Request", 0);// For request creator

                                }
                                returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                            }
                            #endregion
                        }
                    }
                    else
                    {
                        //Basheer end here
                        #region Other details 
                        var toEmp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson && x.IsActive == true).FirstOrDefault();

                        if (toEmp != null)
                        {
                            to_employee_name = toEmp.Emp_Name;
                            var me = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.who_am_i && x.IsActive == true).FirstOrDefault();
                            string req_Tostring = request.Request_ID.ToString();
                            returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + toEmp.Emp_Name + " ( " + toEmp.LocalEmplyee_ID + " ).";
                            returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                            returnData.declaration = data.Disclaimer;
                            returnData.sighOff = data.Signature;

                            string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                            returnData.approvarURL = host + FindURL(request.Id.ToString(), toEmp.LocalEmplyee_ID, "ForwardView", "", 1);// For Approver
                            returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "ForwardView", "My Request", 0);// For Employee - Request owner
                            if (request.Creater_ID == request.Employee_ID)
                            {
                                returnData.creatorURL = returnData.employeeURL;// For Request creator
                            }
                            else
                            {
                                //Basheer on 24-03-2020 to fix creator link issue
                                //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "ForwardView", "My Request", 0);// For request creator
                                returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "ForwardView", "My Request", 0);// For request creator

                            }
                            returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                        }
                        else   // 28-02-2020 ARCHANA K V SRISHTI 
                        {
                            var empList = _entity.tb_UniversalLookupTable.Where(x => x.Table_Name == model.eforwardPerson && x.IsActive == true).ToList();
                            foreach (var item in empList)
                            {
                                var toEmpNew = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Description && x.IsActive == true).FirstOrDefault();

                                if (toEmpNew != null)
                                {
                                    to_employee_name = toEmpNew.Emp_Name;
                                    var me = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.who_am_i && x.IsActive == true).FirstOrDefault();
                                    string req_Tostring = request.Request_ID.ToString();
                                    returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + toEmpNew.Emp_Name + " ( " + toEmpNew.LocalEmplyee_ID + " )" + " by " + me.Emp_Name + " (" + me.LocalEmplyee_ID + ").";
                                    returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                                    returnData.declaration = data.Disclaimer;
                                    returnData.sighOff = data.Signature;

                                    string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                                    //returnData.approvarURL = host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "ForwardView", "", 1);// For Approver
                                    returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "ForwardView", "My Request", 0);// For Employee - Request owner
                                    if (returnData.approvarURL == null)// 04-03-2020 ARCHANA K V SRISHTI 
                                    {
                                        returnData.approvarURL = host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "ForwardView", "", 1);// For Approver
                                        returnData.approverId = toEmpNew.LocalEmplyee_ID;
                                    }
                                    else
                                    {
                                        returnData.approvarURL = returnData.approvarURL + '~' + host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "ForwardView", "", 1);// For Approver
                                        returnData.approverId = returnData.approverId + '~' + toEmpNew.LocalEmplyee_ID;
                                    }
                                    if (request.Creater_ID == request.Employee_ID)
                                    {
                                        returnData.creatorURL = returnData.employeeURL;// For Request creator
                                    }
                                    else
                                    {
                                        //Basheer on 24-03-2020 to fix creator link issue
                                        //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "ForwardView", "My Request", 0);// For request creator
                                        returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "ForwardView", "My Request", 0);// For request creator
                                    }
                                    returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                                }
                            }
                        }
                        #endregion
                    }

                }
                else
                {
                    #region Other details 

                    if (model.ista == true) //28-05-2020 Basheer
                    {
                        #region TA
                        long reqid = Convert.ToInt32(request.Request_ID);
                        var empList = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqid && x.IsActive == true && x.IsCompleted == false && x.distribution_flag == false).ToList();
                        //Remove duplicates in the list(Preema 10-07-2020)
                        var distinctItems = empList.GroupBy(x => x.RoleId).Select(x => x.FirstOrDefault()).ToList(); 
                        foreach (var items in distinctItems)
                        {
                            var universalinfo = _entity.tb_UniversalLookupTable.Where(x => x.Table_Name == items.RoleId && x.IsActive == true).ToList();
                            foreach (var item in universalinfo)
                            {
                                var toEmpNew = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Description && x.IsActive == true).FirstOrDefault();
                                if (toEmpNew != null)
                                {
                                    var role = _entity.tb_Role.Where(x => x.IsActive == true && x.Role_ID == item.Table_Name).FirstOrDefault();

                                    //log for email send for Processors 07-07-2020
                                    _rpp.InsertApproveLog("PRSEMAIL", request.Request_ID, "Request was sent for Processing of", request.Employee_ID, model.who_am_i, "", request.Approval_No, toEmpNew.LocalEmplyee_ID, role.Role_Desc, "");
                                    //end process log
                                    //Basheer on 28-05-2020  for message status



                                    if (returnData.status == null)
                                    {
                                        returnData.status = RequestStatus(request.Request_ID, role.Role_Desc);
                                    }
                                    else
                                    {
                                        returnData.status = returnData.status + '~' + RequestStatus(request.Request_ID, role.Role_Desc);
                                    }

                                    //Basheer code end here

                                    to_employee_name = toEmpNew.Emp_Name;
                                    string req_Tostring = request.Request_ID.ToString();
                                    returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + "is Waiting for the Processing"; //07-07-2020
                                    returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                                    returnData.declaration = data.Disclaimer;
                                    returnData.sighOff = data.Signature;

                                    string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                                    if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.BK_Initiator)
                                    {
                                        returnData.approvarURL = "";
                                    }
                                    else //03-03-2020 ARCHANA K V SRISHTI II
                                    {
                                        if (returnData.approvarURL == null) //03-03-2020 ARCHANA K V SRISHTI II
                                        {
                                            returnData.approvarURL = host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "", "", 1);// For Approver
                                            returnData.approverId = toEmpNew.LocalEmplyee_ID;
                                        }
                                        else
                                        {
                                            returnData.approvarURL = returnData.approvarURL + '~' + host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "", "", 1);// For Approver
                                            returnData.approverId = returnData.approverId + '~' + toEmpNew.LocalEmplyee_ID;
                                        }
                                    }
                                    //Basheer on 09-04-2020
                                    //returnData.employeeURL = host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "", "My Request", 0);// For Employee - Request owner
                                    returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "", "My Request", 0);
                                    if (request.Creater_ID == request.Employee_ID)
                                    {
                                        returnData.creatorURL = returnData.employeeURL;// For Request creator
                                    }
                                    else
                                    {
                                        //Basheer on 24-03-2020 to fix creator link issue
                                        //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator
                                        returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator

                                    }
                                    returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                                }
                            }
                        }
                        if (empList.Count() == 0) //for close
                        {
                            var iam = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.who_am_i && x.IsActive == true).FirstOrDefault();
                            to_employee_name = iam.Emp_Name;
                            string req_Tostring = request.Request_ID.ToString();
                            returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + iam.Emp_Name + " ( " + iam.LocalEmplyee_ID + " ).";
                            returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                            returnData.declaration = data.Disclaimer;
                            returnData.sighOff = data.Signature;
                            string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                            returnData.approvarURL = "";
                            returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "", "My Request", 0);// For Employee - Request owner
                            if (request.Creater_ID == request.Employee_ID)
                            {
                                returnData.creatorURL = returnData.employeeURL;// For Request creator
                            }
                            else
                            {
                                //Basheer on 24-03-2020 to fix creator link issue

                                //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator
                                returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator


                            }
                            returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                        }

                        #endregion TA
                    }
                    else
                    {
                        var toEmp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Approver_ID && x.IsActive == true).FirstOrDefault();
                        if (toEmp != null)
                        {
                            to_employee_name = toEmp.Emp_Name;
                            string req_Tostring = request.Request_ID.ToString();
                            if (model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess)
                            {
                                var myRe = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.who_am_i && x.IsActive == true).FirstOrDefault();
                                returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + myRe.Emp_Name + " ( " + myRe.LocalEmplyee_ID + " ).";
                            }
                            else
                            {
                                var myRe = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
                                returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + toEmp.Emp_Name + " ( " + toEmp.LocalEmplyee_ID + " ).";
                            }

                            returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                            returnData.declaration = data.Disclaimer;
                            returnData.sighOff = data.Signature;

                            string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                            if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.BK_Initiator)
                            {
                                returnData.approvarURL = "";
                            }
                            else
                            {
                                returnData.approvarURL = host + FindURL(request.Id.ToString(), request.Approver_ID, "", "", 1);// For Approver
                            }
                            returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "", "My Request", 0);// For Employee - Request owner
                            if (request.Creater_ID == request.Employee_ID)
                            {
                                returnData.creatorURL = returnData.employeeURL;// For Request creator
                            }
                            else
                            {//Basheer on 24-03-2020 to fix creator link issue
                             //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator
                                returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator

                            }
                            returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                        }
                        else // 28-02-2020 ARCHANA K V SRISHTI 
                        {
                            if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.BK_Initiator || model.process_type == EmailProcessType.Processor)  //Basheer on 28-05-2020
                            {

                                string req_Tostring = request.Request_ID.ToString();
                                if (model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess)
                                {
                                    var myRe = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.who_am_i && x.IsActive == true).FirstOrDefault();
                                    to_employee_name = myRe.Emp_Name;
                                    returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + myRe.Emp_Name + " ( " + myRe.LocalEmplyee_ID + " ).";
                                }
                                else
                                {
                                    //Send back
                                    var myRe = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.who_am_i && x.IsActive == true).FirstOrDefault();
                                    to_employee_name = myRe.Emp_Name;
                                    returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + myRe.Emp_Name + " ( " + myRe.LocalEmplyee_ID + " ).";
                                }
                                returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + request.Employee_ID;
                                returnData.declaration = data.Disclaimer;
                                returnData.sighOff = data.Signature;

                                string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                                if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.BK_Initiator || model.process_type == EmailProcessType.Processor) //Basheer 28-05-2020
                                {
                                    returnData.approvarURL = "";
                                }
                                else
                                {
                                    returnData.approvarURL = host + FindURL(request.Id.ToString(), request.Approver_ID, "", "", 1);// For Approver
                                }
                                returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "", "My Request", 0);// For Employee - Request owner
                                if (request.Creater_ID == request.Employee_ID)
                                {
                                    returnData.creatorURL = returnData.employeeURL;// For Request creator
                                }
                                else
                                {
                                    //Basheer on 24-03-2020 to fix creator link issue

                                    //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator
                                    returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator

                                }
                                returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                            }
                            else
                            {


                                var empList = _entity.tb_UniversalLookupTable.Where(x => x.Table_Name == request.Approver_ID && x.IsActive == true).ToList(); //03-03-2020 ARCHANA K V SRISHTI 
                                foreach (var item in empList)
                                {
                                    var toEmpNew = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == item.Description && x.IsActive == true).FirstOrDefault();

                                    if (toEmpNew != null)
                                    {
                                        to_employee_name = toEmpNew.Emp_Name;
                                        string req_Tostring = request.Request_ID.ToString();
                                        //returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + request.Employee_ID + reasonFor + " " + toEmpNew.Emp_Name + " ( " + toEmpNew.LocalEmplyee_ID + " ).";
                                        returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                                        returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                                        returnData.declaration = data.Disclaimer;
                                        returnData.sighOff = data.Signature;

                                        string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                                        if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.BK_Initiator)
                                        {
                                            returnData.approvarURL = "";
                                        }
                                        else //03-03-2020 ARCHANA K V SRISHTI II
                                        {
                                            if (returnData.approvarURL == null) //03-03-2020 ARCHANA K V SRISHTI II
                                            {
                                                returnData.approvarURL = host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "", "", 1);// For Approver
                                                returnData.approverId = toEmpNew.LocalEmplyee_ID;
                                            }
                                            else
                                            {
                                                returnData.approvarURL = returnData.approvarURL + '~' + host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "", "", 1);// For Approver
                                                returnData.approverId = returnData.approverId + '~' + toEmpNew.LocalEmplyee_ID;
                                            }
                                        }
                                        //Basheer on 09-04-2020
                                        //returnData.employeeURL = host + FindURL(request.Id.ToString(), toEmpNew.LocalEmplyee_ID, "", "My Request", 0);// For Employee - Request owner
                                        returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "", "My Request", 0);
                                        if (request.Creater_ID == request.Employee_ID)
                                        {
                                            returnData.creatorURL = returnData.employeeURL;// For Request creator
                                        }
                                        else
                                        {
                                            //Basheer on 24-03-2020 to fix creator link issue
                                            //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator
                                            returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator

                                        }
                                        returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                                    }
                                }
                                if (empList.Count() == 0 && model.process_type == EmailProcessType.BK_Initiator) //03-03-2020 ARCHANA K V SRISHTI 
                                {
                                    var iam = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.who_am_i && x.IsActive == true).FirstOrDefault();
                                    to_employee_name = iam.Emp_Name;
                                    string req_Tostring = request.Request_ID.ToString();
                                    returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + iam.Emp_Name + " ( " + iam.LocalEmplyee_ID + " ).";
                                    returnData.req_head = data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )";
                                    returnData.declaration = data.Disclaimer;
                                    returnData.sighOff = data.Signature;
                                    string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
                                    returnData.approvarURL = "";
                                    returnData.employeeURL = host + FindURL(request.Id.ToString(), request.Employee_ID, "", "My Request", 0);// For Employee - Request owner
                                    if (request.Creater_ID == request.Employee_ID)
                                    {
                                        returnData.creatorURL = returnData.employeeURL;// For Request creator
                                    }
                                    else
                                    {
                                        //Basheer on 24-03-2020 to fix creator link issue

                                        //returnData.creatorURL = FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator
                                        returnData.creatorURL = host + FindURL(request.Id.ToString(), request.Creater_ID, "", "My Request", 0);// For request creator


                                    }
                                    returnData.details = Content(wftype.WF_ID, request.Request_ID, model.process_type);
                                }


                            }


                        }
                    }
                    #endregion
                }

                //EMail message adjustment 26-03-2020 Preema

                var to_employee_owner = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();//EMail message adjustment
                var to_employee_creator = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Creater_ID && x.IsActive == true).FirstOrDefault();//EMail message adjustment

                if (model.process_type == EmailProcessType.Reject || model.process_type == EmailProcessType.Cancel || model.process_type == EmailProcessType.Hold || model.process_type == EmailProcessType.UnderProcess || model.process_type == EmailProcessType.Close) //Basheer on 20-04-2020 added close
                {
                    from_employee_name = to_employee_owner.Emp_Name;
                }
                else if (model.process_type == EmailProcessType.BK_Initiator)
                {
                    //from_employee_name = to_employee_creator.Emp_Name; //Basheer on 28-03-2020
                    from_employee_name = from_employee.Emp_Name;
                }
                else if (model.process_type == EmailProcessType.PaidClose) //Basheer on 28-03-2020 for paid and close
                {
                    from_employee_name = from_employee.Emp_Name;
                }
                //Basheer on 13-05-2020 
                else if (model.process_type == EmailProcessType.ApproveCompleted)
                {
                    from_employee_name = from_employee.Emp_Name;
                    returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor;
                }
                //Basheer on 13-05-2020 end
                //Basheer on 28-05-2020 
                else if (model.process_type == EmailProcessType.Processor)
                {
                    var empnew = _entity.tb_WF_Employee.Where(x => x.IsActive == true && x.LocalEmplyee_ID == model.who_am_i).FirstOrDefault();
                    from_employee_name = from_employee.Emp_Name;
                    returnData.subject = "Automated Workflow: " + data.tb_Application.Application_Code + "-" + request.Request_ID + "  " + wftype.WF_App_Name + " of " + " " + from_employee.Emp_Name + " ( " + from_employee.LocalEmplyee_ID + " )" + reasonFor + " " + empnew.Emp_Name + " ( " + empnew.LocalEmplyee_ID + " ).";
                }
                //Basheer on 28-05-2020 end
                else
                {
                    from_employee_name = to_employee_name;
                }

                string message = "";
                if (model.process_type == EmailProcessType.Eforward)
                {
                    var Actor = (from p in _entity.tb_ApprovalLog.Where(x => x.RequestId == request.Request_ID && x.IsActive == true)
                                 orderby p.Id descending
                                 select p).FirstOrDefault();

                    var toEmpNew = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == Actor.Actor_To && x.IsActive == true).FirstOrDefault();
                    to_employee_name = toEmpNew.Emp_Name;
                    //message = RequestStatus(request.Request_ID, to_employee_name); //Basheer on 30-03-2020
                    message = RequestStatus(request.Request_ID, ""); //Basheer on 30-03-2020
                }
                else if (model.process_type == EmailProcessType.Distribution && model.ista != true) //Basheer on 28-05-2020
                {
                    var grouprole = _entity.tb_Role.Where(x => x.Id == request.RoleId && x.IsActive == true).FirstOrDefault().GroupRole;
                    if (grouprole == true)
                    {
                        message = RequestStatus(request.Request_ID, request.Approver_ID);
                    }
                    else
                    {
                        var employeename = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Approver_ID && x.IsActive == true).FirstOrDefault().Emp_Name;
                        message = RequestStatus(request.Request_ID, employeename);
                    }


                }
                else if (model.process_type == EmailProcessType.ApproveCompleted) //Basheer on 13-05-2020
                {
                    message = request.tb_Application.Application_Code + "-" + request.Request_ID + "  Approval Cycle Completed";
                }
                else if (model.process_type == EmailProcessType.Processor) //Basheer on 28-05-2020
                {
                    var empnew = _entity.tb_WF_Employee.Where(x => x.IsActive == true && x.LocalEmplyee_ID == model.who_am_i).FirstOrDefault();
                    message = request.tb_Application.Application_Code + "-" + request.Request_ID + " for " + reasonFor + empnew.Emp_Name;
                }
                else if (model.ista == true && model.process_type == EmailProcessType.Close) //Basheer on 28-05-2020
                {
                    message = request.tb_Application.Application_Code + "-" + request.Request_ID + "  Is Closed by " + to_employee_name + " Processor";
                }


                else
                {
                    message = RequestStatus(request.Request_ID, to_employee_name);
                }

                TempData["status_message"] = message;
                TempData["from_employee_name"] = from_employee_name;
                TempData["to_employee_name"] = to_employee_name;

                //string approver_url = returnData.approvarURL;
                //returnData.approvarURL = @"< a href = " + approver_url + " >  Approver / Processor: Please Click Here !</ a ><br />";

                //EMail message adjustment 26-03-2020 Preema

            }
            return returnData;
        }
        private bool Send(string subject, string mailbody, string email, string[] ccAddress)
        {
            bool status = false;
            var fromAddress = _entity.tb_From_EmailAddress.Where(x => x.IsActive == true).FirstOrDefault();
            string userName = "abb@srishtis.com";
            string password = "123456";
            if (fromAddress != null)
            {
                userName = fromAddress.Email_Address;
                password = fromAddress.Password;
            }
            SmtpClient client = new SmtpClient();
            string fromName = "WF";
            MailAddress address = new MailAddress(userName, fromName);
            MailMessage message = new MailMessage();
            message.To.Add(new MailAddress(email, "WF Team"));
            message.From = address;
            message.Subject = subject;
            message.IsBodyHtml = true;
            message.Body = mailbody;
            //if (ccAddress != null && ccAddress.Count() > 0) //Changed count checking from 1 to 0 by Basheer on 28-03-2020
            //{
            //    foreach (var item in ccAddress.Distinct())
            //    {
            //        MailAddress ccMail = new MailAddress(item, fromName);
            //        message.CC.Add(ccMail);
            //    }
            //}
            if (ccAddress.Length > 0 && ccAddress.Count() > 0)//Basheer on 30-03-2020
            {
                foreach (var item in ccAddress.Distinct())
                {
                    MailAddress ccMail = new MailAddress(item, fromName);
                    message.CC.Add(ccMail);
                }
            }
            client.Host = fromAddress.Host_Address;
            client.Port = Convert.ToInt32(fromAddress.Port);
            client.EnableSsl = false;
            client.UseDefaultCredentials = true;
            client.Credentials = new NetworkCredential(userName, password);
            try
            {
                client.Send(message);
                status = true;
            }
            catch (Exception e)
            {
                status = false;
            }
            return status;
        }
        private string FindTheReason(EmailProcessType id, long requestid, string buttoncode) //Basheer on 28-05-2020
        {
            string reason = "";
            if (id == EmailProcessType.Submit)
            {
                reason = " is waiting for the Approval of";
            }
            else if (id == EmailProcessType.Approve)
            {
                //Basheer on 20-04-2020
                string status = _entity.tb_Request_Hdr.Where(x => x.Id == requestid && x.IsActive == true).FirstOrDefault().Status_ID;
                if (status == "APP")
                {
                    reason = " is waiting for the Processing of"; //Basheer on 22-04-2020
                }
                else
                {
                    reason = " is waiting for the Approval of";
                }
            }
            else if (id == EmailProcessType.Reject)
            {
                reason = " is rejected by";
            }
            else if (id == EmailProcessType.Escalate)
            {
                reason = " is escalated to "; // 03-03-2020 ARCHANA K V SRISHTI II 
            }
            else if (id == EmailProcessType.Cancel)
            {
                reason = " is cancelled by";
            }
            else if (id == EmailProcessType.Hold)
            {
                reason = " is hold by";
            }
            else if (id == EmailProcessType.UnderProcess)
            {
                reason = " is under proccessed by ";
            }
            else if (id == EmailProcessType.BKP_Approver)
            {
                reason = " is send back to previous approver ";
            }
            else if (id == EmailProcessType.BK_Initiator)
            {
                reason = " is send back to initiator by";
            }
            else if (id == EmailProcessType.PaidClose)
            {
                reason = " is paid and Closed by";
            }
            else if (id == EmailProcessType.Close)
            {
                reason = " is closed by";
            }
            else if (id == EmailProcessType.Reroute)
            {
                reason = " is re-routed to"; //28-02-2020 ARCHANA K V SRISHTI 
            }
            else if (id == EmailProcessType.Eforward)
            {
                reason = " is eforwarded to ";
            }
            else if (id == EmailProcessType.Distribution)
            {
                reason = " is distributed to ";
            }
            else if (id == EmailProcessType.ApproveCompleted) //Basheer on 13-05-2020
            {
                reason = " is Completed the Approval Cycle ";
            }
            else if (id == EmailProcessType.Processor) //Basheer on 28-05-2020
            {
                if (buttoncode == "TAP")// CASH ADVANCE NOT READY
                {
                    reason = " Cash advance (Cash Paid) is Processed by ";
                }
                else if (buttoncode == "NTP")// CASH ADVANCE NOT READY
                {
                    reason = " Cash advance (Cash not Paid) is Processed by ";
                }
                else if (buttoncode == "TRD")// TICKET READY
                {
                    reason = " Travel Ticket Booking (Ticket Ready) is Processed by ";
                }
                else if (buttoncode == "TNR") // TICKET NOT READY
                {
                    reason = " Travel Ticket Booking (Ticket not Ready) is Processed by ";
                }
                else if (buttoncode == "CRD") //RENT CAR READY
                {
                    reason = " Rent a car Booking (Car Ready) is Processed by ";
                }
                else if (buttoncode == "CNR") // RENT CAR NOT READY 
                {
                    reason = " Rent a car Booking (Car not Ready) is  Processed by ";
                }
                else if (buttoncode == "HBD") // HOTEL BOOKING READY
                {
                    reason = " Hotel Booking (Hotel Ready) is Processed by ";
                }
                else if (buttoncode == "HNR") // HOTEL BOOKING NOT READY
                {
                    reason = " Hotel Booking (Hotel not Ready) not Processed by ";
                }
                else if (buttoncode == "VRD") // EXIT ENTRY VISA READY
                {
                    reason = " Exit Entry Visa (Visa Ready) is Processed by ";
                }
                else if (buttoncode == "VNR") // EXIT ENTRY VISA NOT READY 
                {
                    reason = " Exit Entry Visa (Visa not Ready) is  Processed by ";
                }
                else if (buttoncode == "FRD") // FOREIGN VISA READY
                {
                    reason = " Foreign Visa (Visa Ready) is Processed by ";
                }
                else if (buttoncode == "FNR") // FOREIGN VISA NOT READY 
                {
                    reason = " Foreign Visa (Visa not Ready) is  Processed by ";
                }
                else if (buttoncode == "IRD") // TRAVEL INSURANCE READY 
                {
                    reason = " Travel Insurance (Insurance Ready) is Processed by ";
                }
                else if (buttoncode == "INR") // TRAVEL INSURANCE NOT READY 
                {
                    reason = " Travel Insurance (Insurance not Ready) is Processed by ";
                }
            }
            return reason;
        }
        private string FindURL(string reqId, string approverId, string processType, string myrequest, int dataViewId)
        {
            var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == approverId && x.IsActive == true).FirstOrDefault();
            string url = "";
            string normalUrl = reqId + "|" + approverId + "|" + processType + "|" + myrequest + "|" + dataViewId + "|" + emp.ADAccount;
            url = "/Request/DetailedRequest?id=" + EncryptedURL(normalUrl);
            return url;
        }
        private string EncryptedURL(string url)
        {
            byte[] b = System.Text.ASCIIEncoding.ASCII.GetBytes(url);
            string encrypted = Convert.ToBase64String(b);
            return encrypted;
        }
        private bool SendmailTo(string subject, string mailContent, tb_Request_Hdr request, EmailTemplateDataModel model)
        {
            bool sendMail = false;
            string[] ccAddress = new string[] { };
            var approver = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Approver_ID && x.IsActive == true).FirstOrDefault();
            var creartor = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Creater_ID && x.IsActive == true).FirstOrDefault();
            var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
            if (model.process_type == EmailProcessType.Submit)
            {
                ccAddress = new string[] { creartor.eMail, employee.eMail };
                sendMail = Send(subject, mailContent, approver.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Approve)
            {
                ccAddress = new string[] { creartor.eMail, employee.eMail };
                sendMail = Send(subject, mailContent, approver.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Reject)
            {
                ccAddress = new string[] { employee.eMail };
                sendMail = Send(subject, mailContent, creartor.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Escalate)
            {
                ccAddress = new string[] { creartor.eMail, employee.eMail };
                sendMail = Send(subject, mailContent, approver.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Cancel)
            {
                ccAddress = new string[] { employee.eMail };
                sendMail = Send(subject, mailContent, creartor.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Hold)
            {
                ccAddress = new string[] { employee.eMail };
                sendMail = Send(subject, mailContent, creartor.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.UnderProcess)
            {
                ccAddress = new string[] { employee.eMail };
                sendMail = Send(subject, mailContent, creartor.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.BKP_Approver)
            {
                ccAddress = new string[] { creartor.eMail, employee.eMail };
                sendMail = Send(subject, mailContent, approver.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.BK_Initiator)
            {
                ccAddress = new string[] { employee.eMail };
                sendMail = Send(subject, mailContent, creartor.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.PaidClose)
            {
                ccAddress = new string[] { employee.eMail };
                sendMail = Send(subject, mailContent, creartor.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Close)
            {
                ccAddress = new string[] { employee.eMail };
                sendMail = Send(subject, mailContent, creartor.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Reroute)
            {
                ccAddress = new string[] { creartor.eMail, employee.eMail };
                sendMail = Send(subject, mailContent, approver.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Eforward)
            {
                var eForwarded = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson && x.IsActive == true).FirstOrDefault();
                //ccAddress = new string[] { creartor.eMail, employee.eMail }; //Basheer on 26-03-2020 tp avoid CC in Eforward
                sendMail = Send(subject, mailContent, eForwarded.eMail, ccAddress);
            }
            else if (model.process_type == EmailProcessType.Distribution)
            {
                //Basheer on 28-05-2020 
                string[] splitData = model.eforwardPerson.Split('-');
                if (splitData.Count() > 1)
                {
                    string vendor = splitData[0];
                    long vendorid = Convert.ToInt32(splitData[1]);
                    if (vendor == "VENDOR")
                    {
                        var eFor = _entity.tb_Vendor.Where(x => x.Vendor_id == vendorid && x.IsActive == true).FirstOrDefault();
                        ccAddress = new string[] { };
                        sendMail = Send(subject, mailContent, eFor.Email, ccAddress);
                    }
                }
                //Basheer end here
                else
                {
                    var eForwarded = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson && x.IsActive == true).FirstOrDefault();
                    ccAddress = new string[] { };
                    sendMail = Send(subject, mailContent, eForwarded.eMail, ccAddress);
                }
            }
            return sendMail;
        }
        public string DecryptString(string encrString)
        {
            byte[] b;
            string decrypted;
            try
            {
                b = Convert.FromBase64String(encrString);
                decrypted = System.Text.ASCIIEncoding.ASCII.GetString(b);
            }
            catch (FormatException fe)
            {
                decrypted = "";
            }
            return decrypted;
        }
        public string Content(string type, string requestId, EmailProcessType id)
        {
            string data = "";
            //Basheer on 01-04-2020
            var emessage = _entity.tb_eMessage.Where(x => x.tb_WFType.WF_ID == type && x.IsActive == true && x.Type == 0).FirstOrDefault();
            string[] content = emessage.Parameter.Split('~');

            #region P041
            if (type == "P041")
            {
                // var requestDetails = _entity.tb_TA_Child_Birth_Leave.Where(x => x.RequestId.ToString() == requestId && x.IsActive == true).FirstOrDefault();
                var requestDetails = _entity.tb_TA_Child_Birth_Leave.Where(x => x.RequestId.ToString() == requestId && x.IsActive == true).OrderByDescending(x => x.TimeStamp).FirstOrDefault();

                if (requestDetails != null)
                {
                    //data = "Amount: " + requestDetails.Amount_SAR + ",      Purpose: " + requestDetails.Purpose_Text + ",      Remark: " + requestDetails.Remark + ",      Payment Mode: " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank"); // 28-02-2020 ARCHANA K V SRISHTI 
                    data = content[0] + ": " + requestDetails.Reasons + ",      " + content[1] + ": " + requestDetails.Last_Day_Of_Work + ",      " + content[2] + ": " + requestDetails.Return_To_Duty;

                }
            }
            #endregion
            #region P055
            if (type == "P055")
            {
                var requestDetails = _entity.tb_PP_HousingAllowance.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    //data = "Amount: " + requestDetails.Amount_SAR + ",      Purpose: " + requestDetails.Purpose_Text + ",      Remark: " + requestDetails.Remark + ",      Payment Mode: " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank"); // 28-02-2020 ARCHANA K V SRISHTI 
                    data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",      " + content[2] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer" + ",      " + content[3] + ": " + requestDetails.Remark);

                }
            }
            #endregion

            // 20/05/2020 ALENA SICS FOR P052
            #region P052
            if (type == "P052")
            {
                var requestDetails = _entity.tb_PP_EOSB_Calculation.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",  " + content[2] + ": " + requestDetails.Remark + ",  " + content[3] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer");

                }
            }
            #endregion
            #region A008 25/06/2020 ALENA SICS FOR A008
            if (type == "A008")
            {
                var requestDetails = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Cost_Center + ",      " + content[1] + ": " + requestDetails.Employee_Name + ",  " + content[2] + ": " + requestDetails.Pick_up;

                }
            }
            #endregion
            #region A009 02/07/2020 ALENA SICS FOR A009
            if (type == "A009")
            {
                var requestDetails = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Cost_Center + ",      " + content[1] + ": " + requestDetails.Employee_Name + ",  " + content[2] + ": " + requestDetails.Drop_at;

                }
            }
            #endregion
            #region P009
            else if (type == "P009")
            {
                var requestDetails = _entity.tb_PP_HR_RelatedPayment.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    //data = "Amount: " + requestDetails.Amount_SAR + ",      Purpose: " + requestDetails.PurposeText + ",      Remark: " + requestDetails.Remark + ",      Payment Mode: " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank"); // 28-02-2020 ARCHANA K V SRISHTI 
                    data = content[0] + " : " + requestDetails.Amount_SAR + ",      " + content[1] + " : " + requestDetails.PurposeText + ",      " + content[2] + " : " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer" + ",      " + content[3] + " : " + requestDetails.Remark);
                }
            }
            #endregion

            #region P010
            else if (type == "P010")
            {
                var requestDetails = _entity.tb_PP_NonHR_RelatedPayment.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.Amount_SAR + ",      " + content[1] + " : " + requestDetails.Purpose_Text + ",      " + content[2] + " : " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer" + ",      " + content[3] + " : " + requestDetails.Remark);
                }
            }
            #endregion

            #region P051
            else if (type == "P051")
            {
                var requestDetails = _entity.tb_PP_SalaryAdvance_NewArrival.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",      " + content[2] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer" + ",      " + content[3] + ": " + requestDetails.Remark);
                }
            }
            #endregion

            #region P050
            else if (type == "P050")
            {
                var requestDetails = _entity.tb_PP_SettlingAllowancePayment.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",      " + content[2] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer" + ",      " + content[3] + ": " + requestDetails.Remark);
                }
            }
            #endregion

            #region P056
            else if (type == "P056")
            {
                var requestDetails = _entity.tb_PP_RelocationAllowance.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",      " + content[2] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer" + ",      " + content[3] + ": " + requestDetails.Remark);
                }
            }
            #endregion

            #region P054
            else if (type == "P054")
            {
                var requestDetails = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    //data = content[0] + " : " + requestDetails.Amount_SAR + ",      " + content[1] + " : " + requestDetails.Purpose_Text + ",      " + content[2] + " : " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank");
                    /* data = content[0] + " : " + requestDetails.Amount_SAR + ",      " + content[1] + " : " + requestDetails.Purpose_Text + ",      " + content[2] + " : " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank" + ",      " + content[3] + " : " + requestDetails.Remark); */ // Nimmi 20-04-2020
                    data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",      " + content[2] + ": " + requestDetails.Remark + ",      " + content[3] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer");  //21-04-2020 Nimmi

                }
            }
            #endregion

            #region P011
            else if (type == "P011")
            {
                var requestDetails = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.Iqama_Number + ",      " + content[1] + " : " + requestDetails.Location_Code;
                }
            }
            #endregion

            #region P012
            else if (type == "P012")
            {
                var requestDetails = _entity.tb_PP_Letter_To_RealEstate.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    //data = content[0] + requestDetails.Iqama_Number + ",      " + content[1] + " : " + requestDetails.Location_Code;
                    data = content[0] + " : " + requestDetails.Iqama_Number + ",      " + content[1] + " : " + requestDetails.Location_Code;  //21-04-2020 Nimmi
                }
            }
            #endregion

            #region P023
            else if (type == "P023")
            {
                var requestDetails = _entity.tb_PP_Carloan_Request.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    //data = content[0] + requestDetails.Reason + ",      " + content[1] + " : " + requestDetails.Joining_Date;
                    data = content[0] + " : " + requestDetails.Reason + ",      " + content[1] + " : " + requestDetails.Joining_Date;  //21-04-2020 Nimmi
                }
            }
            #endregion

            #region P099
            else if (type == "P099")
            {
                var requestDetails = _entity.tb_PP_CarLoanPayment.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    //data = content[0] + " : " + requestDetails.Amount_SAR + ",      " + content[1] + " : " + requestDetails.Purpose_Text + ",      " + content[2] + " : " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank");
                    /* data = content[0] + " : " + requestDetails.Amount_SAR + ",      " + content[1] + " : " + requestDetails.Purpose_Text + ",      " + content[2] + " : " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank" + ",      " + content[3] + " : " + requestDetails.Remark); */ // Nimmi 20-04-2020
                    data = content[0] + " : " + requestDetails.Amount_SAR + ",      " + content[1] + " : " + requestDetails.Purpose_Text + ",      " + content[2] + " : " + requestDetails.Remark + ",      " + content[3] + " : " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer");  //21-04-2020 Nimmi
                }
            }
            #endregion

            #region P049
            else if (type == "P049")
            {
                var requestDetails = _entity.tb_PP_Other_Personnel_Services.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.Request_Details;
                }
            }
            #endregion

            #region P053
            else if (type == "P053")
            {
                var requestDetails = _entity.tb_PP_GOSI_Payment.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    if (requestDetails.PaymentMode == "C")
                    {
                        data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",      " + content[2] + ": " + requestDetails.Remark + ",      " + content[3] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer");
                    }
                    else
                    {
                        data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Remark + ",      " + content[2] + ": " + requestDetails.Purpose_Text + ",      " + content[3] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer");
                    }
                }
            }
            #endregion

            #region P061
            else if (type == "P061")
            {
                var requestDetails = _entity.tb_PP_ESAP_Contribution.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.For_the_Period_of + ",      " + content[1] + " : " + requestDetails.Grand_Total + ",      " + content[2] + " : " + requestDetails.Note;
                }
            }
            #endregion

            #region P062
            else if (type == "P062")
            {
                var requestDetails = _entity.tb_PP_Retirement_Contribution.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.For_the_Period_of + ",      " + content[1] + " : " + requestDetails.Grand_Total + ",      " + content[2] + " : " + requestDetails.Bank_Details;
                }
            }
            #endregion

            #region P024
            else if (type == "P024")
            {
                var requestDetails = _entity.tb_PP_Bank_Loan_Request.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.Purpose + ",      " + content[1] + " : " + requestDetails.Date_of_Hire;
                }
            }
            #endregion

            #region P016
            else if (type == "P016")
            {
                var requestDetails = _entity.tb_PP_Internal_Transfer.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.Transfer_Type;
                }
            }
            #endregion

            #region P017
            else if (type == "P017")
            {
                var requestDetails = _entity.tb_PP_Contract_Modification.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.Contract_Type;
                }
            }
            #endregion

            #region P025
            else if (type == "P025")
            {
                var requestDetails = _entity.tb_PP_EndofServiceClearance.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    //data = content[0] + requestDetails.Reason_Clearance + ",      " + content[1] + " : " + requestDetails.Termination_Date;
                    data = content[0] + " : " + requestDetails.Reason_Clearance + ",      " + content[1] + " : " + requestDetails.Termination_Date;//27-04-2020 Nimmi
                }
            }
            #endregion

            #region P057

            else if (type == "P057")
            {
                var requestDetails = _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {

                    data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",      " + content[2] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer");

                }
            }
            #endregion

            #region P060
            else if (type == "P060")
            {
                var requestDetails = _entity.tb_PP_Mobile_Allowance.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    // data = content[1] + " : " + requestDetails.Remarks + ",      " + content[2] + " : " + requestDetails.Justification;

                    data = content[1] + " : " + requestDetails.Remarks;
                }
            }
            #endregion

            #region P029

            else if (type == "P029")
            {
                var requestDetails = _entity.tb_PP_Medical_Insurance.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[1] + " : " + requestDetails.Iqama_no + ",      " + content[2] + " : " + requestDetails.Remarks;
                }
            }
            #endregion
            #region P030

            else if (type == "P030")
            {
                var requestDetails = _entity.tb_PP_Educational_Assistance.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.Emp_GroupId + ",      " + content[1] + " : " + requestDetails.Remarks;
                }
            }
            #endregion
            #region P003

            else if (type == "P003")
            {
                var requestDetails = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.TA_Request_No + ",      " + content[1] + " : " + requestDetails.Ticket_No;
                }
            }
            #endregion
            #region SAS01

            else if (type == "SAS01")
            {
                var requestDetails = _entity.tb_SAS_Bank_Guarantee_Application.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.tb_Company.Company_Name + ",      " + content[1] + " : " + requestDetails.Guarantee_Type + "," + content[2] + " : " + requestDetails.Benf_Name + "," + content[3] + " : " + requestDetails.Total_Contract;
                }
            }
            #endregion
            #region P045

            if (type == "P045")
            {
                var requestDetails = _entity.tb_ER_HR_Related.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.ChargeTo + ",      " + content[1] + ": " + requestDetails.TARequest + ",      " + content[2] + ": " + requestDetails.AmtTotal + ",      " + content[3] + ": " + requestDetails.NetToReceive;

                }
            }
            #endregion
            #region P015
            else if (type == "P015") //Terrin on 14-5-2020
            {
                var requestDetails = _entity.tb_PP_TrainingorRecruitmentPayment.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {

                    data = content[0] + ": " + requestDetails.Amount_SAR + ",      " + content[1] + ": " + requestDetails.Purpose_Text + ",      " + content[2] + ": " + (requestDetails.PaymentMode == "C" ? "Cheque" : "Bank Transfer");

                }
            }
            #endregion
            #region P034

            else if (type == "P034") //Basheer on 28-05-2020
            {
                long reqid = Convert.ToInt32(requestId);
                var requestDetails = _entity.tb_TA_Business_International.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {

                    data = content[0] + ": " + requestDetails.Place_Visit + ",      " + content[1] + ": " + requestDetails.Last_Day_Of_Work + ",      " + content[2] + ": " + requestDetails.Return_To_Duty + ",      " + content[3] + ": " + requestDetails.Travel_Mode;

                }
            }
            #endregion
            #region P007
            else if (type == "P007") //P007-Vacation(Preema)
            {
                long reqid = Convert.ToInt64(requestId);
                var requestDetails = _entity.tb_TA_Vacation.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Place_Visit + ",      " + content[1] + ": " + requestDetails.Last_Day_Of_Work + ",      " + content[2] + ": " + requestDetails.Return_To_Duty + ",      " + content[3] + ": " + requestDetails.Travel_Mode;
                }
            }
            #endregion
            #region P037
            else if (type == "P037") //P037-Dependents Only(Preema)
            {
                long reqid = Convert.ToInt64(requestId);
                var requestDetails = _entity.tb_TA_DependentsOnly.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Travel_Mode + ",      " + content[1] + ": " + requestDetails.Departure_Date + ",      " + content[2] + ": " + requestDetails.Return_Date;
                }
            }
            #endregion
            #region T006
            else if (type == "T006") //Terrin on 30-6-2020
            {
                var requestDetails = _entity.tb_TR_TrainingFolder.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {

                    data = content[0] + ": " + requestDetails.Date + ",      " + content[1] + ": " + requestDetails.quantity;

                }
            }
            #endregion
            #region T007
            else if (type == "T007") //Terrin on 30-6-2020
            {
                var requestDetails = _entity.tb_TR_Training_Certificate.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {

                    data = content[0] + ": " + requestDetails.Titlecourse + ",      " + content[1] + ": " + requestDetails.Course_period_from;

                }
            }
            #endregion
            #region T004 mail_content
            else if (type == "T004")
            {
                var requestDetails = _entity.tb_TR_InHouse_Training_Details.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + " : " + requestDetails.Course_Name + ",      " + content[1] + " : " + requestDetails.From_Date + ",      " + content[2] + " : " + requestDetails.To_Date;
                }
            }
            #endregion
            #region P067
            else if (type == "P067") //P067-Site Visit International(Preema)
            {
                long reqid = Convert.ToInt64(requestId);
                var requestDetails = _entity.tb_TA_SiteVisit_International.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                if (requestDetails != null)
                {
                    data = content[0] + ": " + requestDetails.Place_Visit + ",      " + content[1] + ": " + requestDetails.Last_Day_Of_Work + ",      " + content[2] + ": " + requestDetails.Return_To_Duty + ",      " + content[3] + ": " + requestDetails.Travel_Mode;
                }
            }
            #endregion
            #region T001 mail_content
            else if (type == "T001")
            {
                var _T001 = _entity.tb_TR_External_Training.Where(x => x.RequestId == requestId && x.IsActive == true).FirstOrDefault();
                var Coursedata = _T001.tb_TR_External_Training_Detail.FirstOrDefault();

                if (Coursedata != null && _T001 != null)
                {
                    data = content[0] + " : " + Coursedata.Course_Name + ",      " + content[1] + " : " + Coursedata.Location + ",      " + content[2] + " : " + Coursedata.Cost + ",      " + content[3] + " : " + _T001.Justification;
                }
            }
            #endregion
            return data;
        }
        public bool DistributionRequest(tb_Request_Hdr request, long distributionId, string sequence, string mailContent, string my_id, string my_role, bool isdistributionflag) // Basheer on 28-05-2020
        {
            bool status = false;
            int level = Convert.ToInt32(sequence);
            long dis = Convert.ToInt64(distributionId);
            var employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
            var distribution_list = _entity.tb_DistributionList.Where(x => x.DistributionList_Code == dis && x.WF_Level == level && x.WF_ID == request.WF_ID && x.IsActive == true).ToList();
            string host = _entity.tb_Hostaddress.Where(x => x.IsActive == true).FirstOrDefault().Host_Address;
            var id = request.Id.ToString() + '~' + "0~ForwardView";
            mailContent = "Please click this link for view the request details : " + host + "/Request/DetailedRequest?id=" + id + "~0~1~Distribution";
            if (isdistributionflag == true) //Basheer on 28-05-2020
            {
                #region Distribution for TA
                long reqid = Convert.ToInt32(request.Request_ID);
                var Ta_DistributionList = _entity.tb_ProcessHdr.Where(x => x.IsCompleted == true && x.RequestId == reqid && x.distribution_flag == true && x.IsActive == true).ToList();
                foreach (var item in Ta_DistributionList)
                {
                    var check_user = _rpp.Find_Role_ForDistribution_TA(item.RoleId, employee.tb_Location.Country_Id ?? 0, employee);
                    string[] users = check_user.Split('~');
                    foreach (var item1 in users)
                    {
                        if (item1 != "")
                        {
                            var eforwardperson = item1;
                            //for log
                            string[] splitData = item1.Split('-');
                            if (splitData.Count() > 1)
                            {
                                string vendor = splitData[0];
                                if (vendor == "VENDOR")
                                {

                                    _rpp.InsertApproveLog("DST", request.Request_ID, "Request was distributed by", request.Employee_ID, my_id, my_role, request.Approval_No, splitData[1], "VENDOR", "");
                                    eforwardperson = item1;
                                }
                            }
                            else
                            {
                                string roleto = _entity.tb_Role.Where(x => x.Role_ID == item.RoleId && x.IsActive == true).FirstOrDefault().Role_Desc;
                                _rpp.InsertApproveLog("DST", request.Request_ID, "Request was distributed by", request.Employee_ID, my_id, my_role, request.Approval_No, item1, roleto, "");

                            }//log end here

                            EmailTemplateDataModel model = new EmailTemplateDataModel();
                            model.process_type = EmailProcessType.Distribution;
                            model.wf_id = request.WF_ID;
                            model.request_id = request.Id;
                            model.who_am_i = my_id;
                            model.eforwardPerson = eforwardperson; //Basheer on 28-05-2020
                            model.reason = "";
                            model.ista = true;//Basheer on 28-05-2020

                            try
                            {
                                Email_Template(model, request.tb_WFType);
                                status = true;
                            }
                            catch (Exception ex)
                            {
                                status = false;
                            }
                        }
                    }
                }
                #endregion

            }
            else
            {
                foreach (var item in distribution_list)
                {
                    var check_user = _rpp.Find_Role_UserOnlyForDistribution(request, item.Role_Id ?? 0, employee.tb_Location.Country_Id ?? 0, my_id, my_role, mailContent, employee);
                    if (check_user == "" && item.Employee_ID != null && item.Employee_ID != string.Empty)
                    {
                        //_rpp.Send_Distribution_mail(request.Request_ID, my_id, my_role, item.Employee_ID, "", mailContent, request, employee);

                        EmailTemplateDataModel model = new EmailTemplateDataModel();
                        model.process_type = EmailProcessType.Distribution; // 04-03-2020 ARCHANA K V SRISHTI 
                        model.wf_id = request.WF_ID;
                        model.request_id = request.Id;
                        model.who_am_i = my_id;
                        model.eforwardPerson = item.Employee_ID;
                        model.reason = "";
                        try
                        {
                            //04-03-2020   ARCHANA K V SRISHTOI 
                            //Thread email = new Thread(() => Email_Template(model, request.tb_WFType));
                            //email.Start();
                            Email_Template(model, request.tb_WFType);
                            status = true; //Basheer on 13-05-2020 
                        }
                        catch
                        {
                            status = false; //Basheer on 13-05-2020 
                        }
                    }
                    else
                    {
                        string[] users = check_user.Split('~'); // UNIVERSAL LOOK UP TABLE RETURN MULTIPLE DATA //  04-03-2020 ARCHANA K V SRISHTI 
                        foreach (var item1 in users)
                        {
                            if (item1 != "")
                            {
                                //_rpp.Send_Distribution_mail(request.Request_ID, my_id, my_role, item1, "", mailContent, request, employee);

                                EmailTemplateDataModel model = new EmailTemplateDataModel();
                                model.process_type = EmailProcessType.Distribution; //04-03-2020 ARCHANA K V SRISHTI 
                                model.wf_id = request.WF_ID;
                                model.request_id = request.Id;
                                model.who_am_i = my_id;
                                model.eforwardPerson = item1;
                                model.reason = "";
                                try
                                {
                                    //04-03-2020   ARCHANA K V SRISHTOI 
                                    //Thread email = new Thread(() => Email_Template(model, request.tb_WFType));
                                    //email.Start();
                                    Email_Template(model, request.tb_WFType);
                                    status = true; //Basheer on 13-05-2020 
                                }
                                catch (Exception ex)
                                {
                                    status = false; //Basheer on 13-05-2020 
                                }
                            }
                        }
                    }
                }
            }
            return status;
        }
        //*************************************************EMAIL TEMPLATE END****************************************************************************************



        //Basheer on 25-02-2020

        public object UploadFileNew()
        {
            bool status = false;
            string msg = "Failed";
            string fileSave = "";
            string filename = "";
            try
            {
                if (Request.Files.Count > 0)
                {
                    var httpPostedFile = Request.Files[0];
                    string folderPath = Server.MapPath("~/Media/PPRequestFiles/");
                    var split = httpPostedFile.FileName.Split('.').ToList();
                    var ext = split[(split.Count() - 1)];
                    if (!Directory.Exists(folderPath))
                        Directory.CreateDirectory(folderPath);
                    string fileName = Guid.NewGuid().ToString() + "." + ext;
                    var pdfFilePath = Server.MapPath("~/Media/PPRequestFiles/" + fileName);
                    fileSave = "/Media/PPRequestFiles/" + fileName;
                    httpPostedFile.SaveAs(pdfFilePath);
                    msg = "Success";
                    status = true;
                    filename = httpPostedFile.FileName;
                }
            }
            catch (Exception ex)
            {

            }
            return Json(new { status = status, msg = msg, fileSave = fileSave, filename = filename }, JsonRequestBehavior.AllowGet);
        }

        //Basheer on 27-02-2020 for attachment delete
        public object attachmentdelete(string id)
        {
            long attachmentid = Convert.ToInt32(id);
            bool status = false;
            string msg = "failed";
            var attachment = _entity.tb_ReqestAttachments.Where(x => x.ID == attachmentid && x.IsActive == true).FirstOrDefault();
            if (attachment != null)
            {
                attachment.IsActive = false;
                status = _entity.SaveChanges() > 0;
                if (status)
                    msg = "Attachment Removed";
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult Print_Page_Creatorside(string id)
        {
            //Print page encryption(Preema)
            var encryptData = "";
            StringBuilder inSb = new StringBuilder(id);
            StringBuilder outSb = new StringBuilder(id.Length);
            char c;
            for (int i = 0; i < id.Length; i++)
            {
                c = inSb[i];
                c = (char)(c ^ 2020);
                outSb.Append(c);
            }
            encryptData = outSb.ToString();

            WaitingRequestDetails model = new WaitingRequestDetails();
            string[] splitData = encryptData.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.my_role = splitData[3];
            var requestprint = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            var empDetailsprint = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == requestprint.Employee_ID && x.IsActive == true).FirstOrDefault();
            model.my_country_id = empDetailsprint.tb_Location.Country_Id ?? 0;
            model.local_id = requestprint.Employee_ID;
            model.wf_type = requestprint.tb_WFType.WF_ID;

            //Print page url encryption    
            var currentAD = Convert.ToString(Session["adAccount"]);
            if (currentAD == null && currentAD == string.Empty)
            {
                var username = User.Identity.Name;
                string[] addata = username.Split('\\');
                currentAD = addata[1];
            }

            if (model.my_id == "0")
            {
                if (TempData.ContainsKey("Emp_Id"))
                    model.my_id = TempData["Emp_Id"].ToString();
            }

            var empData = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();

            if (empData != null)
            {
                model.local_id = requestprint.Employee_ID;
                model.creator_id = requestprint.Creater_ID;
                model.ad_account = empData.ADAccount;

                if (empData.ADAccount == currentAD)
                {
                    if (model.wf_type == "P055")   /*NIMMI MOHAN*/
                    {
                        #region P055
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p055 = _entity.tb_PP_HousingAllowance.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p055.PaymentMode;
                        if (_p055.PaymentMode == "C")
                        {
                            if (_p055.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p055.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p055.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "Cheque";
                            model.amount_sar = _p055.Amount_SAR;
                            model.purpose_text = _p055.Purpose_Text;
                            model.payable_to = _p055.Cheque_Payable;
                            model.attachment_filepath = _p055.Attachment_Filepath;
                            model.remark = _p055.Remark;
                        }
                        else
                        {
                            model.payment_mode = "Bank Transfer";
                            model.amount_sar = _p055.Amount_SAR;
                            model.from_bank = _p055.From_Bank;
                            model.from_addreess = _p055.From_Address;
                            model.from_account_no = _p055.From_AccountNo;
                            model.to_beneficiary = _p055.To_Benificiary;
                            model.to_bankname = _p055.To_BankName;
                            model.to_address = _p055.To_Address;
                            model.to_account_no = _p055.To_AccountNo;
                            model.to_iban = _p055.To_IBAN;
                            model.bank_attachment = _p055.Bank_Attachment;
                            model.attachment_filepath = _p055.Attachment_Filepath;
                            model.purpose_text = _p055.Purpose_Text;
                            model.remark = _p055.Remark;

                        }
                        // return RedirectToAction("Print_Page_P055", "Request", model);
                        return View("Print_Page_P055", model);
                        #endregion P055
                    }
                    // 15/05/2020 ALENA SICS EOSB CALCULATION
                    else if (model.wf_type == "P052")
                    {
                        #region P052
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p052 = _entity.tb_PP_EOSB_Calculation.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p052.PaymentMode;
                        if (_p052.PaymentMode == "C")
                        {
                            #region   // chequedate
                            if (_p052.ChequeDate != null)
                            {
                                try
                                {
                                    var stringDate = _p052.ChequeDate.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p052.ChequeDate.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            #endregion
                            model.payment_mode = "C";
                            model.amount_sar = _p052.Amount_SAR;
                            model.purpose_text = _p052.Purpose_Text;
                            model.payable_to = _p052.Cheque_Payable;
                            model.attachment_filepath = _p052.Attachment_Filepath;
                            model.remark = _p052.Remark;
                            model.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
                        }
                        else
                        {
                            model.payment_mode = "B";
                            model.amount_sar = _p052.Amount_SAR;
                            model.from_bank = _p052.From_Bank;
                            model.from_addreess = _p052.From_Address;
                            model.from_account_no = _p052.From_AccountNo;
                            model.to_beneficiary = _p052.To_Beneficiary;
                            model.to_bankname = _p052.To_BankName;
                            model.to_address = _p052.To_Address;
                            model.to_account_no = _p052.To_AccountNo;
                            model.attachment_filepath = _p052.Attachment_Filepath;
                            model.remark = _p052.Remark;
                            model.to_iban = _p052.To_IBAN;
                            model.purpose_text = _p052.Purpose_Text;
                            model.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
                        }
                        // 23/05/2020 commented below line and added new code 
                        //return RedirectToAction("Print_Page_P052", "Request", model);
                        return View("Print_Page_P052", model);
                        #endregion P052
                    }
                    //vyas 
                    else if (model.wf_type == "P041")
                    {

                        #region P041
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        ////var _p041 = _entity.tb_TA_Child_Birth_Leave.Where(x => x.RequestId.ToString() == reqid && x.IsActive).FirstOrDefault();
                        var _p041 = _entity.tb_TA_Child_Birth_Leave.Where(x => x.RequestId.ToString() == reqid && x.IsActive == true).OrderByDescending(x => x.TimeStamp).FirstOrDefault();

                        model.reason = _p041.Reasons;
                        model.remarks = _p041.Remark;
                        model.is_compliance = _p041.Is_Compliance_Approval;

                        if (_p041.Is_Compliance_Approval == true)

                        {
                            var stringDate = _p041.Compliance_Approval_Date.ToString();
                            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            model.compliance_approval_date = xx;

                        }
                        else
                        {

                            model.compliance_approval_date = "";
                        }
                        var stringDate1 = _p041.Last_Day_Of_Work.ToString();
                        var xx1 = Convert.ToDateTime(stringDate1).ToString("yyyy-MM-dd");

                        model.Last_dayof_work = xx1;
                        var stringDate2 = _p041.Return_To_Duty.ToString();
                        var xx2 = Convert.ToDateTime(stringDate2).ToString("yyyy-MM-dd");
                        model.Return_to_duty = xx2;
                        model.is_workflow_delegated = _p041.IsDelegated;
                        if (_p041.IsDelegated == true)
                        {
                            model.justification_provided = "";

                        }
                        else
                        {

                            model.justification_provided = _p041.Just_No_Delegated;
                        }

                        model.address_during_absence = _p041.Address_During_Absence;
                        model.Contact_number = _p041.Telephone_No;
                        model.Child_Birth_Leave = Convert.ToInt32(_p041.Business_Days);
                        model.Saturday = Convert.ToInt32(_p041.Saturday);
                        model.Friday = Convert.ToInt32(_p041.Friday);
                        model.Total = Convert.ToInt32(_p041.Total);




                        return View("Print_Page_P041", model);
                        #endregion P041
                    }
                    else if (model.wf_type == "P056")  /*NIMMI MOHAN*/
                    {
                        #region P056
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p056 = _entity.tb_PP_RelocationAllowance.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p056.PaymentMode;
                        if (_p056.PaymentMode == "C")
                        {
                            if (_p056.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p056.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p056.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "Cheque";
                            model.amount_sar = _p056.Amount_SAR;
                            model.purpose_text = _p056.Purpose_Text;
                            model.payable_to = _p056.Cheque_Payable;
                            model.remark = _p056.Remark;
                            model.attachment_filepath = _p056.Attachment_Filepath;
                        }
                        else
                        {
                            model.payment_mode = "Bank Transfer";
                            model.amount_sar = _p056.Amount_SAR;
                            model.from_bank = _p056.From_Bank;
                            model.from_addreess = _p056.From_Address;
                            model.from_account_no = _p056.From_AccountNo;
                            model.to_iban = _p056.To_IBAN;
                            model.to_beneficiary = _p056.To_Benificiary;
                            model.to_bankname = _p056.To_BankName;
                            model.to_address = _p056.To_Address;
                            model.to_account_no = _p056.To_AccountNo;
                            model.bank_attachment = _p056.Bank_Attachment;
                            model.attachment_filepath = _p056.Attachment_Filepath;
                            model.purpose_text = _p056.Purpose_Text;
                            model.remark = _p056.Remark;
                        }
                        // return RedirectToAction("Print_Page_P056", "Request", model);
                        return View("Print_Page_P056", model);
                        #endregion P056
                    }


                    else if (model.wf_type == "P050")  /*NIMMI MOHAN*/
                    {
                        #region P050
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p050 = _entity.tb_PP_SettlingAllowancePayment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p050.PaymentMode;
                        if (_p050.PaymentMode == "C")
                        {
                            if (_p050.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p050.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p050.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "Cheque";
                            model.amount_sar = _p050.Amount_SAR;
                            model.purpose_text = _p050.Purpose_Text;
                            model.remark = _p050.Remark;
                            model.payable_to = _p050.Cheque_Payable;
                            model.attachment_filepath = _p050.Attachment_Filepath;
                        }
                        else
                        {
                            model.payment_mode = "Bank Transfer";
                            model.amount_sar = _p050.Amount_SAR;
                            model.from_bank = _p050.From_Bank;
                            model.from_addreess = _p050.From_Address;
                            model.from_account_no = _p050.From_AccountNo;
                            model.to_beneficiary = _p050.To_Benificiary;
                            model.to_bankname = _p050.To_BankName;
                            model.to_address = _p050.To_Address;
                            model.to_account_no = _p050.To_AccountNo;
                            model.to_iban = _p050.To_IBAN;
                            model.bank_attachment = _p050.Bank_Attachment;
                            model.attachment_filepath = _p050.Attachment_Filepath;
                            model.purpose_text = _p050.Purpose_Text;
                            model.remark = _p050.Remark;
                        }
                        // return RedirectToAction("Print_Page_P050", "Request", model);
                        return View("Print_Page_P050", model);
                        #endregion P050
                    }

                    else if (model.wf_type == "P051")  /*NIMMI MOHAN*/
                    {
                        #region P051
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p051 = _entity.tb_PP_SalaryAdvance_NewArrival.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p051.PaymentMode;
                        if (_p051.PaymentMode == "C")
                        {
                            if (_p051.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p051.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p051.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "Cheque";
                            model.amount_sar = _p051.Amount_SAR;
                            model.purpose_text = _p051.Purpose_Text;
                            model.remark = _p051.Remark;
                            model.payable_to = _p051.Cheque_Payable;
                            model.attachment_filepath = _p051.Attachment_Filepath;
                        }
                        else
                        {
                            model.payment_mode = "Bank Transfer";
                            model.amount_sar = _p051.Amount_SAR;
                            model.from_bank = _p051.From_Bank;
                            model.from_addreess = _p051.From_Address;
                            model.from_account_no = _p051.From_AccountNo;
                            model.to_beneficiary = _p051.To_Benificiary;
                            model.to_bankname = _p051.To_BankName;
                            model.to_address = _p051.To_Address;
                            model.to_account_no = _p051.To_AccountNo;
                            model.to_iban = _p051.To_IBAN;
                            model.bank_attachment = _p051.Bank_Attachment;
                            model.attachment_filepath = _p051.Attachment_Filepath;
                            model.purpose_text = _p051.Purpose_Text;
                            model.remark = _p051.Remark;
                        }
                        // return RedirectToAction("Print_Page_P051", "Request", model);
                        return View("Print_Page_P051", model);
                        #endregion P051
                    }


                    else if (model.wf_type == "P009")  /*NIMMI MOHAN*/
                    {
                        #region P009
                        var model1 = new HRPaymentrequest();
                        string reqid = splitData[1];
                        model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model1.local_id = requestprint.Employee_ID;
                        var _p009 = _entity.tb_PP_HR_RelatedPayment.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        model1.PaymentMode = _p009.PaymentMode;
                        if (_p009.PaymentMode == "C")
                        {
                            if (_p009.Cheque_Date != null)
                            {
                                #region 
                                try
                                {
                                    var stringDate = _p009.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model1.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p009.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model1.cheque_date_string = xx;
                                }
                                #endregion
                            }
                            model1.table_Id = _p009.Id;
                            model1.RequestId = _p009.RequestId;
                            model1.PaymentMode = "Cheque";
                            model1.Amount_SAR = _p009.Amount_SAR;
                            model1.Currency = _p009.Currency;
                            model1.Account_No = _p009.Account_No;
                            model1.PurposeText = _p009.PurposeText;
                            model1.supplier = _p009.supplier;
                            model1.Payable_To = _p009.Payable_To;
                            model1.File_Attachment = _p009.File_Attachment;
                            model1.Remark = _p009.Remark;
                        }
                        else
                        {
                            model1.table_Id = _p009.Id;
                            model1.RequestId = _p009.RequestId;
                            model1.PaymentMode = "Bank Transfer";
                            model1.Amount_SAR = _p009.Amount_SAR;
                            model1.Currency = _p009.Currency;
                            model1.From_BankName = _p009.From_BankName;
                            model1.From_Address = _p009.From_Address;
                            model1.From_Account_No = _p009.From_Account_No;
                            model1.To_Benificiary = _p009.To_Benificiary;
                            model1.To_BankName = _p009.To_BankName;
                            model1.To_Address = _p009.To_Address;
                            model1.To_Account_No = _p009.To_Account_No;
                            model1.To_IBAN = _p009.To_IBAN;
                            model1.PurposeText = _p009.PurposeText;
                            model1.Remark = _p009.Remark;

                        }


                        return View("Print_Page_P009", model1);
                        // return RedirectToAction("Print_Page_P009", "Request", model1);
                        #endregion P009
                    }


                    else if (model.wf_type == "P010")  /*NIMMI MOHAN*/
                    {
                        #region P010
                        var model1 = new HRPaymentrequest();
                        string reqid = splitData[1];
                        model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model1.local_id = requestprint.Employee_ID;
                        var _p010 = _entity.tb_PP_NonHR_RelatedPayment.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        model1.contract_local_no = _p010.Contract_Local_No;
                        model1.back_invoice_no = _p010.BCharge_Invoice;
                        model1.project = _p010.Project;
                        model1.year_booked = _p010.Year_booked;
                        model1.customer = _p010.Customer;
                        model1.PaymentMode = _p010.PaymentMode;
                        if (_p010.PaymentMode == "C")
                        {
                            if (_p010.Cheque_Date != null)
                            {
                                #region 
                                try
                                {
                                    var stringDate = _p010.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model1.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p010.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model1.cheque_date_string = xx;
                                }
                                #endregion
                            }
                            model1.table_Id = _p010.Id;
                            model1.RequestId = _p010.RequestId;
                            model1.PaymentMode = "Cheque";
                            model1.Amount_SAR = _p010.Amount_SAR ?? 0;
                            model1.Currency = _p010.Currency;
                            model1.Account_No = _p010.Account_No;
                            model1.PurposeText = _p010.Purpose_Text;
                            model1.supplier = _p010.Supplier;
                            model1.Payable_To = _p010.Payable_To;
                            model1.File_Attachment = _p010.File_Attachment;
                            model1.Remark = _p010.Remark;
                        }
                        else
                        {
                            model1.table_Id = _p010.Id;
                            model1.RequestId = _p010.RequestId;
                            model1.PaymentMode = "Bank Transfer";
                            model1.Amount_SAR = _p010.Amount_SAR ?? 0;
                            model1.Currency = _p010.Currency;
                            model1.From_BankName = _p010.From_BankName;
                            model1.From_Address = _p010.From_Address;
                            model1.From_Account_No = _p010.From_Account_No;
                            model1.To_Benificiary = _p010.To_Benificiary;
                            model1.To_BankName = _p010.To_BankName;
                            model1.To_Address = _p010.To_Address;
                            model1.To_Account_No = _p010.To_Account_No;
                            model1.To_IBAN = _p010.To_IBAN;
                            model1.PurposeText = _p010.Purpose_Text;
                            model1.Remark = _p010.Remark;

                        }

                        return View("Print_Page_P010", model1);
                        // return RedirectToAction("Print_Page_P010", "Request", model1);
                        #endregion P010
                    }


                    else if (model.wf_type == "P011")  /*NIMMI MOHAN*/
                    {
                        #region P011
                        var model1 = new IntroductionCertificateModel();
                        string reqid = splitData[1];
                        model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model1.local_id = requestprint.Employee_ID;
                        //var _P011 = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                        var _P011 = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_P011 != null)
                        {

                            model1.RequestId = _P011.RequestId;
                            model1.LocalEmplyee_ID = _P011.LocalEmplyee_ID;
                            model1.Iqama_Number = _P011.Iqama_Number;
                            model1.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P011.Location_Code).Select(x => x.Location).FirstOrDefault();
                            model1.Iqama_Identification = _P011.Iqama_Identification;
                            model1.Attachment_Filepath = _P011.Attachment_Filepath;
                            model1.TimeStamp = _P011.TimeStamp;

                            if (_P011.Certificate_with_Salary == 1)
                            {
                                model1.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P011.Certificate_with_Salary == 0)
                            {
                                model1.Certificate_with_Salary_String = BooleanValue.No.ToString();
                            }

                            if (_P011.Chamber_Of_Commerce_Stamp == 1)
                            {
                                model1.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P011.Chamber_Of_Commerce_Stamp == 0)
                            {
                                model1.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
                            }

                            if (_P011.Ministry_Of_Foreign_Affairs == 1)
                            {
                                model1.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P011.Ministry_Of_Foreign_Affairs == 0)
                            {
                                model1.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
                            }
                        }


                        return View("Print_Page_P011", model1);
                        // return RedirectToAction("Print_Page_P011", "Request", model1);
                        #endregion P011
                    }


                    else if (model.wf_type == "P012")  /*NIMMI MOHAN 23-03-2020*/
                    {
                        #region P012
                        var model1 = new LetterToRealEstateModel();
                        string reqid = splitData[1];
                        model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model1.local_id = requestprint.Employee_ID;
                        var _P012 = _entity.tb_PP_Letter_To_RealEstate.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_P012 != null)
                        {

                            model1.RequestId = _P012.RequestId;
                            model1.LocalEmplyee_ID = _P012.LocalEmplyee_ID;
                            model1.Iqama_Number = _P012.Iqama_Number;
                            model1.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P012.Location_Code).Select(x => x.Location).FirstOrDefault();
                            model1.Iqama_Identification = _P012.Iqama_Identification;
                            model1.Attachment_Filepath = _P012.Attachment_Filepath;
                            model1.TimeStamp = _P012.TimeStamp;

                            if (_P012.Certificate_with_Salary == 1)
                            {
                                model1.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P012.Certificate_with_Salary == 0)
                            {
                                model1.Certificate_with_Salary_String = BooleanValue.No.ToString();
                            }

                            if (_P012.Chamber_Of_Commerce_Stamp == 1)
                            {
                                model1.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P012.Chamber_Of_Commerce_Stamp == 0)
                            {
                                model1.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
                            }

                            if (_P012.Ministry_Of_Foreign_Affairs == 1)
                            {
                                model1.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
                            }
                            else if (_P012.Ministry_Of_Foreign_Affairs == 0)
                            {
                                model1.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
                            }
                        }


                        return View("Print_Page_P012", model1);
                        // return RedirectToAction("Print_Page_P012", "Request", model1);
                        #endregion P012
                    }

                    else if (model.wf_type == "P054") /*NIMMI MOHAN 24-03-2020*/
                    {
                        #region P054
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p054 = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p054.PaymentMode;
                        if (_p054.PaymentMode == "C")
                        {
                            if (_p054.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p054.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p054.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "Cheque";
                            model.amount_sar = _p054.Amount_SAR;
                            model.purpose_text = _p054.Purpose_Text;
                            model.remark = _p054.Remark;
                            model.payable_to = _p054.Cheque_Payable;
                            model.attachment_filepath = _p054.Attachment_Filepath;
                        }
                        else
                        {
                            model.payment_mode = "Bank Transfer";
                            model.amount_sar = _p054.Amount_SAR;
                            model.from_bank = _p054.From_Bank;
                            model.from_addreess = _p054.From_Address;
                            model.from_account_no = _p054.From_AccountNo;
                            model.to_beneficiary = _p054.To_Benificiary;
                            model.to_bankname = _p054.To_BankName;
                            model.to_address = _p054.To_Address;
                            model.to_account_no = _p054.To_AccountNo;
                            model.to_iban = _p054.To_IBAN;
                            model.bank_attachment = _p054.Bank_Attachment;
                            model.attachment_filepath = _p054.Attachment_Filepath;
                            model.purpose_text = _p054.Purpose_Text;
                            model.remark = _p054.Remark;

                        }
                        // return RedirectToAction("Print_Page_P054", "Request", model);
                        return View("Print_Page_P054", model);
                        #endregion P054
                    }

                    else if (model.wf_type == "P023") /*NIMMI MOHAN 24-03-2020*/
                    {
                        #region P023
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p023 = _entity.tb_PP_Carloan_Request.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                        if (_p023 != null)
                        {
                            model.reason = _p023.Reason;
                            model.employee_grade = Convert.ToInt32(_p023.Employee_Grade);
                            model.joining_date = Convert.ToDateTime(_p023.Joining_Date);

                            //05-01-2020 Nimmi
                            if (_p023.Joining_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p023.Joining_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.joining_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p023.Joining_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.joining_date_string = xx;
                                }
                            }

                            //model.att_quotation_filepath = _p023.Att_Quotation_Filepath;
                            //model.car_cost_reimbursement = Convert.ToDecimal(_p023.Car_Cost_Reimbursement);
                            //model.first_loan = _p023.First_Loan;
                            //model.subsequent_loan = _p023.Subsequent_Loan;
                            //model.car_quotation_amount = Convert.ToDecimal(_p023.Car_Quotation_Amount);
                            //model.maximum_entitlement = Convert.ToDecimal(_p023.Maximum_Entitlement);
                            //model.monthly_installment = Convert.ToDecimal(_p023.Monthly_Installment);
                            //model.effective_date = Convert.ToDateTime(_p023.Effective_Date);
                            //model.attachment_filepath = _p023.Attachment_Filepath;
                            //(model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString())
                            //if (model.compliance_approval_date.Year != 0001)
                            //    insert_pp_data.Compliance_Approval_Date = model.compliance_approval_date;
                            //if (model.effective_date.Year != 0001)
                            //{
                            //   model.effective_date = Convert.ToDateTime(_p023.Effective_Date);
                            //}
                            //else
                            //{
                            //    model.effective_date = nu;
                            //}


                            model.effective_date_string = "";



                        }



                        return View("Print_Page_P023", model);
                        #endregion P023
                    }


                    else if (model.wf_type == "P099")   /*NIMMI MOHAN*/
                    {
                        #region P099
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p099 = _entity.tb_PP_CarLoanPayment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p099.PaymentMode;
                        if (_p099.PaymentMode == "C")
                        {
                            if (_p099.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p099.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p099.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "Cheque";
                            model.amount_sar = _p099.Amount_SAR;
                            model.purpose_text = _p099.Purpose_Text;
                            model.payable_to = _p099.Cheque_Payable;
                            model.carloanrequest_number = _p099.Carloan_Request_No;
                            model.cheque_account_no = _p099.Account_No;
                            model.supplier_to = _p099.supplier;
                            model.currenctType = _p099.Currency;
                            model.remark = _p099.Remark;
                            model.attachment_filepath = _p099.Attachment_Filepath;
                        }
                        else
                        {
                            model.payment_mode = "Bank Transfer";
                            model.amount_sar = _p099.Amount_SAR;
                            model.from_bank = _p099.From_Bank;
                            model.from_addreess = _p099.From_Address;
                            model.from_account_no = _p099.From_AccountNo;
                            model.to_beneficiary = _p099.To_Benificiary;
                            model.to_bankname = _p099.To_BankName;
                            model.to_address = _p099.To_Address;
                            model.to_account_no = _p099.To_AccountNo;
                            model.carloanrequest_number = _p099.Carloan_Request_No;
                            model.bank_attachment = _p099.Bank_Attachment;
                            model.attachment_filepath = _p099.Attachment_Filepath;
                            model.remark = _p099.Remark;
                            model.purpose_text = _p099.Purpose_Text;
                            model.currenctType = _p099.Currency;
                            model.to_iban = _p099.To_IBAN;

                        }


                        return View("Print_Page_P099", model);
                        //return RedirectToAction("Print_Page_P099", "Request", model);
                        #endregion P099
                    }
                    //A007-Accommodation in Hotel/Compound(Preema)
                    else if (model.wf_type == "A007")
                    {
                        #region A007
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _A007 = _entity.tb_AO_Accommodation.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                        model.accommodation_type = Convert.ToString(_A007.Accommodation_Type);
                        model.hotel_name = Convert.ToString(_A007.Hotel_Name);
                        model.hotel_location = Convert.ToString(_A007.Hotel_Location);
                        model.room_type = Convert.ToString(_A007.Room_Type);
                        model.room_preference = Convert.ToString(_A007.Room_Preference);
                        model.no_of_room = Convert.ToString(_A007.No_of_Rooms);
                        model.hotel_address = Convert.ToString(_A007.Hotel_Address);
                        model.contact_person = Convert.ToString(_A007.Contact_Person);
                        model.fax = Convert.ToString(_A007.Fax);
                        model.approaximate_date = Convert.ToDateTime(_A007.Approximate_Date);
                        model.approaximate_time = Convert.ToDateTime(_A007.Approximate_Time);
                        model.payment_mode = Convert.ToString(_A007.Payment_Type);
                        model.from_period = Convert.ToDateTime(_A007.From_Period);
                        model.to_period = Convert.ToDateTime(_A007.To_Period);
                        model.remarks = Convert.ToString(_A007.Remarks);

                        List<tb_AO_Accommodation_Guest_Details> guest = new List<tb_AO_Accommodation_Guest_Details>();
                        guest = _A007.tb_AO_Accommodation_Guest_Details.ToList();

                        for (int i = 0; i < guest.Count; i++)
                        {
                            model.guest.Add(guest[i].Guest_Name.ToString());
                        }

                        return View("Print_Page_A007", model);

                        #endregion A007
                    }
                    else if (model.wf_type == "A008") // 24/06/2020 ALENA SICS FOR A008
                    {
                        #region A008 
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _A008 = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                        model.cost_center = Convert.ToString(_A008.Cost_Center);
                        model.emp_name = _A008.Employee_Name;
                        model.pickup_at = Convert.ToString(_A008.Pick_up);
                        model.date = Convert.ToString(_A008.Pickup_Date);
                        model.time = Convert.ToString(_A008.Pickup_Time);
                        model.remarks = Convert.ToString(_A008.Remarks);
                        return View("Print_Page_A008", model);
                        #endregion A008
                    }
                    else if (model.wf_type == "A009") // 01/07/2020 ALENA SICS FOR A009
                    {
                        #region A009 
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _A009 = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        model.cost_center = Convert.ToString(_A009.Cost_Center);
                        model.emp_name = _A009.Employee_Name;
                        model.drop_at = Convert.ToString(_A009.Drop_at);
                        model.date = Convert.ToString(_A009.Drop_Date);
                        model.time = Convert.ToString(_A009.Drop_Time);
                        model.remarks = Convert.ToString(_A009.Remarks);
                        return View("Print_Page_A009", model);
                        #endregion A009
                    }
                    //P049-Other Personnel Services(Preema)
                    else if (model.wf_type == "P049")
                    {
                        #region P049               
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p049 = _entity.tb_PP_Other_Personnel_Services.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.request_details = _p049.Request_Details;
                        model.is_hr_department = false;

                        #region common_attachments
                        if (model._FileListPrint != null && model._FileListPrint.Count > 0)
                        {
                            var fillistprint = model._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }
                        #endregion

                        return View("Print_Page_P049", model);

                        #endregion P049
                    }
                    //P061-ESAP Contribution(Preema)
                    else if (model.wf_type == "P061")
                    {
                        #region P061

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _P061 = _entity.tb_PP_ESAP_Contribution.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                        ESAP_ContributionModel esap = new ESAP_ContributionModel();
                        esap.For_the_Period_of = _P061.For_the_Period_of;
                        esap.Remarks = _P061.Remarks;
                        esap.Grand_Total = Convert.ToDecimal(_P061.Grand_Total);
                        esap.Note = _P061.Note;

                        model.ESAP_Contribution = esap;

                        List<tb_PP_ESAP_Company> Company = new List<tb_PP_ESAP_Company>();
                        Company = _P061.tb_PP_ESAP_Company.ToList();

                        for (int i = 0; i < Company.Count; i++)
                        {
                            model.ESAP_Contribution.lstCompanyId.Add(Company[i].Company_Id.ToString());
                            long CId = Convert.ToInt64(Company[i].Company_Id);
                            var name = _entity.tb_Company.Where(x => x.Company_Id == CId && x.IsActive == true).FirstOrDefault();

                            model.ESAP_Contribution.lstCompanyName.Add(name.Company_Name);

                            model.ESAP_Contribution.lstPayrollCode.Add(Company[i].tb_Company.Payroll_code.ToString());
                            model.ESAP_Contribution.lstTotal.Add(Company[i].Total_Amount_in_USD.ToString());
                        }



                        #region common_attachments


                        if (esap._FileListPrint != null && esap._FileListPrint.Count > 0)
                        {
                            var fillistprint = esap._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }



                        #endregion
                        return View("Print_Page_P061", model);

                        #endregion P061

                    }

                    //P062-Retirement Contribution(Preema)
                    else if (model.wf_type == "P062")
                    {
                        #region P062

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _P062 = _entity.tb_PP_Retirement_Contribution.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                        RetirementContributionModel retirement = new RetirementContributionModel();
                        retirement.For_the_Period_of = _P062.For_the_Period_of;
                        retirement.Remarks = _P062.Remarks;
                        retirement.Grand_Total = Convert.ToDecimal(_P062.Grand_Total);
                        retirement.Bank_Details = _P062.Bank_Details;

                        model.RetirementContributionModel = retirement;

                        List<tb_PP_Retirement_Contribution_Company> Company = new List<tb_PP_Retirement_Contribution_Company>();
                        Company = _P062.tb_PP_Retirement_Contribution_Company.ToList();

                        for (int i = 0; i < Company.Count; i++)
                        {
                            model.RetirementContributionModel.lstCompanyId.Add(Company[i].Company_Id.ToString());
                            long CId = Convert.ToInt64(Company[i].Company_Id);
                            var name = _entity.tb_Company.Where(x => x.Company_Id == CId && x.IsActive == true).FirstOrDefault();

                            model.RetirementContributionModel.lstCompanyName.Add(name.Company_Name);

                            model.RetirementContributionModel.lstPayrollCode.Add(Company[i].tb_Company.Payroll_code.ToString());
                            model.RetirementContributionModel.lstTotal.Add(Company[i].Total_Amount_in_USD.ToString());
                        }



                        #region common_attachments


                        if (retirement._FileListPrint != null && retirement._FileListPrint.Count > 0)
                        {
                            var fillistprint = retirement._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }



                        #endregion

                        return View("Print_Page_P062", model);

                        #endregion P062

                    }
                    //P053-GOSI Payment(Preema)
                    else if (model.wf_type == "P053")
                    {
                        #region P053
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p053 = _entity.tb_PP_GOSI_Payment.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        model.payment_mode = _p053.PaymentMode;
                        if (_p053.PaymentMode == "C")
                        {
                            if (_p053.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p053.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p053.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "Cheque";
                            model.amount_sar = Convert.ToDecimal(_p053.Amount_SAR);
                            model.purpose_text = _p053.Purpose_Text;
                            model.payable_to = _p053.Cheque_Payable;
                            model.remark = _p053.Remark;

                        }
                        else
                        {
                            model.payment_mode = "Bank Transfer";
                            model.amount_sar = Convert.ToDecimal(_p053.Amount_SAR);
                            model.from_bank = _p053.From_Bank;
                            model.from_addreess = _p053.From_Address;
                            model.from_account_no = _p053.From_AccountNo;
                            model.to_beneficiary = _p053.To_Benificiary;
                            model.to_bankname = _p053.To_BankName;
                            model.to_address = _p053.To_Address;
                            model.to_account_no = _p053.To_AccountNo;
                            model.bank_attachment = _p053.Bank_Attachment;
                            model.to_iban = _p053.To_IBAN;
                            model.purpose_text = _p053.Purpose_Text;
                            model.remark = _p053.Remark;
                            #region Bank_attachments
                            if (model._FileListPrint != null && model._FileListPrint.Count > 0)
                            {
                                var fillistprint = model._FileListPrint.Where(x => x.filebatch == 2).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }


                            #endregion
                        }

                        #region common_attachments


                        if (model._FileListPrint != null && model._FileListPrint.Count > 0)
                        {
                            var fillistprint = model._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }

                        #endregion

                        return View("Print_Page_P053", model);

                        #endregion P053
                    }
                    //P024-Bank Loan Request(Preema)
                    else if (model.wf_type == "P024")
                    {
                        #region P024

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p024 = _entity.tb_PP_Bank_Loan_Request.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                        BankLoanRequestModel bank = new BankLoanRequestModel();

                        bank.Id = _p024.Id;
                        bank.RequestId = _p024.RequestId;
                        bank.TimeStamp = Convert.ToDateTime(_p024.TimeStamp);
                        bank.Bank_Name = _p024.Bank_Name;
                        bank.Account_No = _p024.Account_No;
                        bank.Loan_Amount = Convert.ToDecimal(_p024.Loan_Amount);
                        bank.Nationality = _p024.Nationality;

                        bank.Date_of_Hire = Convert.ToString(_p024.Date_of_Hire);
                        bank.Saudi_Id = _p024.Saudi_Id;
                        bank.Purpose = _p024.Purpose;

                        bank.End_of_Service_Benefit = _p024.End_of_Service_Benefit;
                        bank.As_of_Date = Convert.ToString(_p024.As_of_Date);

                        #region common_attachments


                        if (bank._FileListPrint != null && bank._FileListPrint.Count > 0)
                        {
                            var fillistprint = bank._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }



                        #endregion

                        model.BankLoanRequestModel = bank;


                        return View("Print_Page_P024", model);

                        #endregion P024

                    }

                    //P016-Internal Transfer(Preema)
                    else if (model.wf_type == "P016")
                    {
                        #region P016

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model.checkstatus = "NEW";
                        var _p016 = _entity.SelectAllInternalTransfer_by_RequestId(reqid).FirstOrDefault();

                        InternalTransferModel internaltransfer = new InternalTransferModel();

                        internaltransfer.Id = _p016.Id;
                        internaltransfer.RequestId = _p016.RequestId;
                        internaltransfer.TimeStamp = Convert.ToDateTime(_p016.TimeStamp);

                        internaltransfer.Transfer_Type = _p016.Transfer_Type.Trim();

                        internaltransfer.Receiving_Manager_Id = _p016.Receiving_Manager;
                        internaltransfer.Receiving_Manager = _p016.Receiving_Manager_Name;

                        internaltransfer.Releasing_Manager_Id = _p016.Releasing_Manager;
                        internaltransfer.Releasing_Manager = _p016.Releasing_Manager_Name;

                        internaltransfer.Transfer_From = _p016.Transfer_From.Trim();
                        internaltransfer.Transfer_To = _p016.Transfer_To.Trim();
                        if (_p016.Effective_Date != null)
                        {
                            var stringDate = _p016.Effective_Date.ToString();
                            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            internaltransfer.Effective_Date = xx;
                        }

                        internaltransfer.From_Company_id = Convert.ToInt64(_p016.From_Company);
                        internaltransfer.From_Company = _p016.FromCompanyName;

                        internaltransfer.To_Company_Id = Convert.ToInt64(_p016.To_Company);
                        internaltransfer.To_Company = _p016.ToCompanyName != null ? _p016.ToCompanyName : "No Change";

                        internaltransfer.From_Business_Line_id = Convert.ToInt64(_p016.From_BusinessLine);
                        internaltransfer.From_Business_Line = _p016.FromBusinessLineName;

                        internaltransfer.To_Business_Line_Id = Convert.ToInt64(_p016.To_BusinessLine);
                        internaltransfer.To_Business_Line = _p016.ToBusinessLineName != null ? _p016.ToBusinessLineName : "No Change";

                        internaltransfer.From_Product_Group_id = Convert.ToInt64(_p016.From_ProductGroup);
                        internaltransfer.From_Product_Group = _p016.FromProduct;

                        internaltransfer.To_Product_Group_Id = Convert.ToInt64(_p016.To_Product_Group);
                        internaltransfer.To_Product_Group = _p016.ToProduct != null ? _p016.ToProduct : "No Change";

                        internaltransfer.From_Department_id = Convert.ToInt64(_p016.From_Department);
                        internaltransfer.From_Department = _p016.FromDepartmentName;

                        internaltransfer.To_Department_Id = Convert.ToInt64(_p016.To_Department);
                        internaltransfer.To_Department = _p016.ToDepartmentName != null ? _p016.ToDepartmentName : "No Change";

                        internaltransfer.From_Position_id = _p016.From_Position;
                        internaltransfer.From_Position = _p016.FromPositionName;

                        internaltransfer.To_Position_Id = _p016.To_Position;
                        internaltransfer.To_Position = _p016.ToPositionName != "" ? _p016.ToPositionName : "No Change";

                        internaltransfer.From_Global_Grade_id = _p016.From_Global_Grade;
                        internaltransfer.From_Global_Grade = _p016.From_Global_Grade;

                        internaltransfer.To_Global_Grade_Id = _p016.To_Global_Grade;
                        internaltransfer.To_Global_Grade = _p016.To_Global_Grade != null ? _p016.To_Global_Grade : "No Change";

                        internaltransfer.From_Local_Grade = _p016.From_Local_Grade;

                        internaltransfer.To_Local_Grade_Id = _p016.To_Local_Grade;
                        internaltransfer.To_Local_Grade = _p016.To_Local_Grade != null ? _p016.To_Local_Grade : "No Change";

                        internaltransfer.From_Cost_Center_id = Convert.ToInt64(_p016.From_Cost_Center);
                        internaltransfer.From_Cost_Center = _p016.FromCCName;

                        internaltransfer.To_Cost_Center_Id = Convert.ToInt64(_p016.To_Cost_Center);
                        internaltransfer.To_Cost_Center = _p016.ToCCName != null ? _p016.ToCCName : "No Change";

                        internaltransfer.From_status = _p016.From_Status;
                        internaltransfer.To_status = _p016.To_Status;

                        internaltransfer.From_Notice_Period = _p016.From_Notice_Period;
                        internaltransfer.To_Notice_Period = _p016.To_Notice_Period;

                        internaltransfer.From_Location_id = Convert.ToInt64(_p016.From_Location);
                        internaltransfer.From_Location = _p016.FromLocationName;

                        internaltransfer.To_Location_Id = Convert.ToInt64(_p016.To_Location);
                        internaltransfer.To_Location = _p016.ToLocationName != null ? _p016.ToLocationName : "No Change";

                        internaltransfer.From_Basic_Salary = _p016.From_BasicSalary;
                        internaltransfer.To_Basic_Salary = _p016.To_BasicSalary;

                        internaltransfer.From_Annual_Housing = _p016.From_AnnualHousing;
                        internaltransfer.To_Annual_Housing = _p016.To_AnnualHousing;

                        internaltransfer.From_Car_Cost = _p016.From_CarCost;
                        internaltransfer.To_Car_Cost = _p016.To_CarCost;

                        internaltransfer.From_Transport = _p016.From_Transport;
                        internaltransfer.To_Transport = _p016.To_Transport;

                        internaltransfer.From_Travel_Allowance = _p016.From_TravelHardshipAllowance;
                        internaltransfer.To_Travel_Allowance = _p016.To_TravelHardshipAllowance;

                        internaltransfer.From_Mobile_Allowance = _p016.From_MobileAllowance;
                        internaltransfer.To_Mobile_Allowance = _p016.To_MobileAllowance;


                        #region common_attachments


                        if (internaltransfer._FileListPrint != null && internaltransfer._FileListPrint.Count > 0)
                        {
                            var fillistprint = internaltransfer._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }



                        #endregion



                        model.InternalTransferModel = internaltransfer;

                        return View("Print_Page_P016", model);
                        #endregion P016

                    }

                    //P017-Contract Modification(Preema)
                    else if (model.wf_type == "P017")
                    {
                        #region P017

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model.checkstatus = "NEW";
                        var _p017 = _entity.SelectAllContractModification_by_RequestId(reqid).FirstOrDefault();

                        ContractModificationModel contractmodification = new ContractModificationModel();

                        contractmodification.Id = _p017.Id;
                        contractmodification.RequestId = _p017.RequestId;
                        contractmodification.TimeStamp = Convert.ToDateTime(_p017.TimeStamp);
                        contractmodification.Contract_Type = _p017.Contract_Type.Trim();

                        contractmodification.Releasing_Manager_Id = _p017.Releasing_Manager;
                        contractmodification.Releasing_Manager = _p017.Releasing_Manager_Name;

                        if (_p017.Effective_Date != null)
                        {
                            var stringDate = _p017.Effective_Date.ToString();
                            var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                            contractmodification.Effective_Date = xx;
                        }

                        contractmodification.From_Company_id = Convert.ToInt64(_p017.From_Company);
                        contractmodification.From_Company = _p017.FromCompanyName;

                        contractmodification.To_Company_Id = Convert.ToInt64(_p017.To_Company);
                        contractmodification.To_Company = _p017.ToCompanyName != null ? _p017.ToCompanyName : "No Change";

                        contractmodification.From_Business_Line_id = Convert.ToInt64(_p017.From_BusinessLine);
                        contractmodification.From_Business_Line = _p017.FromBusinessLineName;

                        contractmodification.To_Business_Line_Id = Convert.ToInt64(_p017.To_BusinessLine);
                        contractmodification.To_Business_Line = _p017.ToBusinessLineName != null ? _p017.ToBusinessLineName : "No Change";

                        contractmodification.From_Product_Group_id = Convert.ToInt64(_p017.From_ProductGroup);
                        contractmodification.From_Product_Group = _p017.FromProduct;

                        contractmodification.To_Product_Group_Id = Convert.ToInt64(_p017.To_Product_Group);
                        contractmodification.To_Product_Group = _p017.ToProduct != null ? _p017.ToProduct : "No Change";

                        contractmodification.From_Department_id = Convert.ToInt64(_p017.From_Department);
                        contractmodification.From_Department = _p017.FromDepartmentName;

                        contractmodification.To_Department_Id = Convert.ToInt64(_p017.To_Department);
                        contractmodification.To_Department = _p017.ToDepartmentName != null ? _p017.ToDepartmentName : "No Change";

                        contractmodification.From_Position_id = _p017.From_Position;
                        contractmodification.From_Position = _p017.FromPositionName;

                        contractmodification.To_Position_Id = _p017.To_Position;
                        contractmodification.To_Position = _p017.ToPositionName != "" ? _p017.ToPositionName : "No Change";

                        contractmodification.From_Global_Grade_id = _p017.From_Global_Grade;
                        contractmodification.From_Global_Grade = _p017.From_Global_Grade;

                        contractmodification.To_Global_Grade_Id = _p017.To_Global_Grade;
                        contractmodification.To_Global_Grade = _p017.To_Global_Grade != null ? _p017.To_Global_Grade : "No Change";


                        contractmodification.From_Local_Grade = _p017.From_Local_Grade;

                        contractmodification.To_Local_Grade_Id = _p017.To_Local_Grade;
                        contractmodification.To_Local_Grade = _p017.To_Local_Grade != null ? _p017.To_Local_Grade : "No Change";


                        contractmodification.From_Cost_Center_id = Convert.ToInt64(_p017.From_Cost_Center);
                        contractmodification.From_Cost_Center = _p017.FromCCName;

                        contractmodification.To_Cost_Center_Id = Convert.ToInt64(_p017.To_Cost_Center);
                        contractmodification.To_Cost_Center = _p017.ToCCName != null ? _p017.ToCCName : "No Change";

                        contractmodification.From_status = _p017.From_Status;
                        contractmodification.To_status = _p017.To_Status;

                        contractmodification.From_Notice_Period = _p017.From_Notice_Period;
                        contractmodification.To_Notice_Period = _p017.To_Notice_Period;

                        contractmodification.From_Location_id = Convert.ToInt64(_p017.From_Location);
                        contractmodification.From_Location = _p017.FromLocationName;

                        contractmodification.To_Location_Id = Convert.ToInt64(_p017.To_Location);
                        contractmodification.To_Location = _p017.ToLocationName != null ? _p017.ToLocationName : "No Change";

                        contractmodification.From_Basic_Salary = _p017.From_BasicSalary;
                        contractmodification.To_Basic_Salary = _p017.To_BasicSalary;

                        contractmodification.From_Annual_Housing = _p017.From_AnnualHousing;
                        contractmodification.To_Annual_Housing = _p017.To_AnnualHousing;

                        contractmodification.From_Car_Cost = _p017.From_CarCost;
                        contractmodification.To_Car_Cost = _p017.To_CarCost;

                        contractmodification.From_Transport = _p017.From_Transport;
                        contractmodification.To_Transport = _p017.To_Transport;

                        contractmodification.From_Travel_Allowance = _p017.From_TravelHardshipAllowance;
                        contractmodification.To_Travel_Allowance = _p017.To_TravelHardshipAllowance;

                        contractmodification.From_Mobile_Allowance = _p017.From_MobileAllowance;
                        contractmodification.To_Mobile_Allowance = _p017.To_MobileAllowance;

                        #region common_attachments

                        if (contractmodification._FileListPrint != null && contractmodification._FileListPrint.Count > 0)
                        {
                            var fillistprint = contractmodification._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }

                        #endregion

                        model.ContractModificationModel = contractmodification;

                        return View("Print_Page_P017", model);
                        #endregion P017

                    }

                    else if (model.wf_type == "P025") /*NIMMI MOHAN 30-03-2020*/
                    {
                        #region P025
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p025 = _entity.tb_PP_EndofServiceClearance.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();

                        model.reason_clearance = _p025.Reason_Clearance;
                        model.termination_Date = Convert.ToDateTime(_p025.Termination_Date);
                        model.eb_Toolbox_Returned = _p025.EB_Toolbox_Returned;
                        model.eb_Workstation_Cleared = _p025.EB_Workstation_Cleared;
                        model.eb_OfficialBusiness_Documents = _p025.EB_OfficialBusiness_Documents;
                        model.eb_SiteProject_Clearance = _p025.EB_SiteProject_Clearance;
                        model.eb_Uniform = _p025.EB_Uniform;
                        model.eb_Safety_Equipment = _p025.EB_Safety_Equipment;
                        model.eb_AllWorkflow_Approvals = _p025.EB_AllWorkflow_Approvals;
                        model.eb_ISService_Deactivation_Date = Convert.ToDateTime(_p025.EB_ISService_Deactivation_Date);
                        model.eb_Assigned_Delegate = _p025.EB_Assigned_Delegate;
                        model.ad_HousingHousehold_cleared = _p025.AD_HousingHousehold_cleared;
                        model.ad_Util_Water_cleared = _p025.AD_Util_Water_cleared;
                        model.ad_CarGarageKey_Returned = _p025.AD_CarGarageKey_Returned;
                        model.ad_Gatepass_Returned = _p025.AD_Gatepass_Returned;
                        model.ad_Mobile_SimCard_Returned = _p025.AD_Mobile_SimCard_Returned;
                        model.ad_CompanyID_Returned = _p025.AD_CompanyID_Returned;
                        model.tr_Amount_SAR = Convert.ToDecimal(_p025.TR_Amount_SAR);
                        model.tr_ExternalTraining_Cost = _p025.TR_ExternalTraining_Cost;
                        model.is_Desktop_Returned = _p025.IS_Desktop_Returned;
                        model.ft_Clearance_Obtained = _p025.FT_Clearance_Obtained;
                        model.ft_eBank_Token = _p025.FT_eBank_Token;
                        model.ae_Clearance_Obtained = _p025.AE_Clearance_Obtained;
                        model.hr_CarLoan_Cleared = _p025.HR_CarLoan_Cleared;
                        model.hr_SalaryAdvances_Settled = _p025.HR_SalaryAdvances_Settled;
                        model.hr_CompanyStamp_Returned = _p025.HR_CompanyStamp_Returned;
                        model.hr_MedicalInsurance_Returned = _p025.HR_MedicalInsurance_Returned;
                        model.hr_Visa_Mastercard_Communicated = _p025.HR_Visa_Mastercard_Communicated;
                        model.hr_Savingcurrent_communicated = _p025.HR_Savingcurrent_communicated;
                        model.hr_Remarks = _p025.HR_Remarks;
                        model.hr_Attachment_Filepath = _p025.HR_Attachment_Filepath;
                        model.attachment_filepath = _p025.Attachment_Filepath;

                        //05-05-2020
                        model.eb_toolbx_returned_date = _p025.EB_toolbx_returned_date;
                        model.workstation_cleared_date = _p025.EB_workstation_cleared_date;
                        model.official_business_doc_date = _p025.EB_official_business_doc_date;
                        model.site_project_clearance_date = _p025.EB_site_project_clearance_date;
                        model.uni_form_date = _p025.EB_uni_form_date;
                        model.safety_equipment_date = _p025.EB_safety_equipment_date;
                        model.workflow_approvals_date = _p025.EB_workflow_approvals_date;
                        model.housing_household_date = _p025.AD_housing_household_date;
                        model.car_garage_key_date = _p025.AD_car_garage_key_date;
                        model.gatepass_sticker_date = _p025.AD_gatepass_sticker_date;
                        model.Mobile_returned_date = _p025.AD_Mobile_returned_date;
                        model.company_id_returned_date = _p025.AD_company_id_returned_date;
                        model.utilities_water_etc_date = _p025.AD_utilities_water_etc_date;
                        model.desktop_etc_cleared_date = _p025.IS_desktop_etc_cleared_date;
                        model.clearance_obtained_fin_date = _p025.FT_clearance_obtained_fin_date;
                        model.e_bank_token_date = _p025.FT_e_bank_token_date;
                        model.clearance_obtained_ae_date = _p025.AE_clearance_obtained_ae_date;
                        model.car_loan_cleared_date = _p025.HR_car_loan_cleared_date;
                        model.salary_advance_settled_date = _p025.HR_salary_advance_settled_date;
                        model.company_stamp_returned_date = _p025.HR_company_stamp_returned_date;
                        model.medical_insurance_date = _p025.HR_medical_insurance_date;
                        model.visa_master_commun_date = _p025.HR_visa_master_commun_date;
                        model.sav_current_account_date = _p025.HR_sav_current_account_date;
                        model.external_training_cost_date = _p025.external_training_cost_date;



                        if (_p025.Termination_Date != null)
                        {
                            try
                            {
                                var stringDate = _p025.Termination_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.termination_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p025.Termination_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                model.termination_date_string = xx;
                            }
                        }

                        if (_p025.EB_ISService_Deactivation_Date != null)
                        {
                            try
                            {
                                var stringdate = _p025.EB_ISService_Deactivation_Date.ToString();
                                var xx = Convert.ToDateTime(stringdate).ToString("yyyy-MM-dd");
                                model.eb_ISService_Deactivation_Date_string = xx;
                            }
                            catch
                            {
                                var stringdate = _p025.EB_ISService_Deactivation_Date.ToString();
                                var xx = Convert.ToDateTime(stringdate).ToString("yyyy-MM-dd");
                                model.eb_ISService_Deactivation_Date_string = xx;
                            }
                        }



                        //return RedirectToAction("Print_Page_P025", "Request", model);
                        return View("Print_Page_P025", model);
                        #endregion P025
                    }

                    else if (model.wf_type == "P060")  //------Terrin on 31/3/2020
                    {
                        #region P060
                        var model1 = new Applicationfor_mobile();
                        string reqid = splitData[1];
                        //model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        //model1.emp_local_id = requestprint.Employee_ID;
                        model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model1.local_id = requestprint.Employee_ID;
                        //var _P011 = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                        var _P060 = _entity.tb_PP_Mobile_Allowance.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_P060 != null)
                        {

                            // model1.RequestId = _P060.RequestId;
                            model1.Allowance_per_group = _P060.Allowancepergrp;
                            model1.Remarks = _P060.Remarks;
                            model1.Justification = _P060.Justification;
                            model1.Allowance_Date = _P060.Allowance_Date;
                            model1.Remarks = _P060.Remarks;
                            model1.TimeStamp = _P060.TimeStamp;

                        }
                        //return RedirectToAction("Print_Page_P060", "Request", model1);
                        return View("Print_Page_P060", model1);
                        #endregion P060
                    }

                    else if (model.wf_type == "P057")   //-----Terrin on 25/3/20 P057
                    {
                        #region P057
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _p057 = _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                        model.payment_mode = _p057.PaymentMode;
                        if (_p057.PaymentMode == "C")
                        {
                            if (_p057.Cheque_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p057.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p057.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model.cheque_date_string = xx;
                                }
                            }
                            model.payment_mode = "Cheque";
                            model.amount_sar = _p057.Amount_SAR;
                            model.purpose_text = _p057.Purpose_Text;
                            model.remark = _p057.Remark;
                            model.payable_to = _p057.Cheque_Payable;
                            model.attachment_filepath = _p057.Attachment_Filepath;
                        }
                        else
                        {
                            model.payment_mode = "Bank Transfer";
                            model.amount_sar = _p057.Amount_SAR;
                            model.from_bank = _p057.From_Bank;
                            model.from_addreess = _p057.From_Address;
                            model.from_account_no = _p057.From_AccountNo;
                            model.to_beneficiary = _p057.To_Benificiary;
                            model.to_bankname = _p057.To_BankName;
                            model.to_address = _p057.To_Address;
                            model.to_account_no = _p057.To_AccountNo;
                            model.to_iban = _p057.To_IBAN;
                            model.bank_attachment = _p057.Bank_Attachment;
                            model.attachment_filepath = _p057.Attachment_Filepath;
                            model.purpose_text = _p057.Purpose_Text;
                            model.remark = _p057.Remark;
                            #region Bank_attachments
                            if (model._FileListPrint != null && model._FileListPrint.Count > 0)
                            {
                                var fillistprint = model._FileListPrint.Where(x => x.filebatch == 2).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }


                            #endregion
                        }

                        #region common_attachments


                        if (model._FileListPrint != null && model._FileListPrint.Count > 0)
                        {
                            var fillistprint = model._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }


                        #endregion

                        //  return RedirectToAction("Print_Page_P057", "Request", model);
                        return View("Print_Page_P057", model);
                        #endregion P057
                    }

                    else if (model.wf_type == "P029")  //-----Terrin on 08/04/2020
                    {
                        #region P029
                        MedicalInsuranceApplication model_Med = new MedicalInsuranceApplication();
                        string reqid = splitData[1];
                        model_Med.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model_Med.local_id = requestprint.Employee_ID;
                        var _P029 = _entity.tb_PP_Medical_Insurance.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                        model_Med.App_Type = Convert.ToString(_P029.App_Type);
                        model_Med.Add_details = Convert.ToString(_P029.Add_details);
                        model_Med.Effective = Convert.ToDateTime(_P029.Effective);
                        model_Med.Date_Employee = Convert.ToDateTime(_P029.Date_Employee);
                        model_Med.Iqama_no = Convert.ToString(_P029.Iqama_no);
                        model_Med.MedIns_Remarks = Convert.ToString(_P029.Remarks);
                        //insert_pp_data.Attachment_File = model.Attachment_Filepath;

                        List<tb_PP_Medical_Insurance_Dependent> Insurancedependence = new List<tb_PP_Medical_Insurance_Dependent>();
                        Insurancedependence = _P029.tb_PP_Medical_Insurance_Dependent.ToList();
                        List<Insurance_dependence> Ins_dep = new List<Insurance_dependence>();


                        if (Insurancedependence != null && Insurancedependence.Count > 0)
                        {

                            foreach (var item in Insurancedependence)
                            {

                                Insurance_dependence ins = new Insurance_dependence();
                                ins.Name = item.Name;
                                ins.Date_of_birth = Convert.ToDateTime(item.Date_of_birth);
                                ins.Sex = item.Sex;
                                ins.Relation = item.Relation;
                                ins.Depend_class = item.Depend_class;
                                //model_Med._Insurance_dependence.Add(ins);

                                Ins_dep.Add(ins);
                            }

                        }
                        model_Med._Insurance_dependence = Ins_dep;
                        return View("Print_Page_P029", model_Med);

                        #endregion P029
                    }
                    else if (model.wf_type == "P030")  //-----Chitra Srishti on 04.06.2020
                    {
                        #region P030
                        EducationalAssistanceModel model_Edu = new EducationalAssistanceModel();
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _P030 = _entity.tb_PP_Educational_Assistance.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                        if (_P030 != null)
                        {

                            model_Edu.Employee_Group = _P030.Emp_GroupId;
                            model_Edu.Grand_Total = Convert.ToDecimal(_P030.Grand_Total);
                            model_Edu.Total_Entitlement = Convert.ToDecimal(_P030.Total_Entitlement);
                            model_Edu.Amount_Approved = Convert.ToDecimal(_P030.Amount_Approved);
                            model_Edu.Amount_Paid = Convert.ToDecimal(_P030.Amount_Paid);
                            model_Edu.Paid_Payroll = Convert.ToDecimal(_P030.Paid_Payroll);
                            model_Edu.Remarks = _P030.Remarks;

                        }


                        List<tb_PP_Educational_Assistance_Details> educationassistance = new List<tb_PP_Educational_Assistance_Details>();
                        educationassistance = _P030.tb_PP_Educational_Assistance_Details.ToList();
                        List<EducationalAssistanceModel> Edu_dep = new List<EducationalAssistanceModel>();


                        if (educationassistance != null && educationassistance.Count > 0)
                        {

                            foreach (var item in educationassistance)
                            {

                                EducationalAssistanceModel ins = new EducationalAssistanceModel();
                                ins.Child_Name = item.Child_Name;
                                ins.Birth_Date = Convert.ToDateTime(item.Birth_Date);
                                ins.School_Fees = Convert.ToDecimal(item.School_Fees);
                                ins.Transport_Fees = Convert.ToDecimal(item.Transport_Fees);
                                ins.Others = Convert.ToDecimal(item.Others);
                                ins.Exchange_Rate = Convert.ToDecimal(item.Exchange_Rate);
                                ins.Foreign_Currency = Convert.ToDecimal(item.Foreign_Currency);
                                ins.From_Date = Convert.ToDateTime(item.From_Date);
                                ins.To_Date = Convert.ToDateTime(item.To_Date);
                                ins.Location_Id = Convert.ToInt32(item.Location_Id);
                                var stringDate = item.Birth_Date.ToString();
                                var xx = Convert.ToDateTime(item.Birth_Date.ToString()).ToString("yyyy-MM-dd");
                                ins.Date_birth_string_date = xx;

                                var stringFromDate = item.From_Date.ToString();
                                var xxx = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                ins.From_Date_string_date = xxx;

                                var stringToDate = item.To_Date.ToString();
                                var xxxx = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                ins.To_Date_string_date = xxxx;
                                Edu_dep.Add(ins);
                            }

                        }
                        model.EducationalAssistanceModel = model_Edu;
                        model._Education = Edu_dep;
                        return View("Print_Page_P030", model);

                        #endregion P030
                    }
                    else if (model.wf_type == "P003")  //-----Chitra  Srishti on 16.06.2020
                    {
                        #region P003
                        TicketRefundModel model_Edu = new TicketRefundModel();
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _P003 = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_P003 != null)
                        {
                            model_Edu.TA_Request_No = _P003.TA_Request_No;
                            model_Edu.TicketNumber = _P003.Ticket_No;
                            model_Edu.TicketRouting = _P003.Ticket_Routing;
                            model_Edu.RequestDetails = _P003.Request_Details;

                        }
                        model.TicketRefundModel = model_Edu;
                        return View("Print_Page_P003", model);

                        #endregion P003
                    }
                    else if (model.wf_type == "SAS01")  //-----Chitra  Srishti on 25.06.2020
                    {
                        #region SAS01
                        BankGuaranteeModel model_Edu = new BankGuaranteeModel();
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _SAS01 = _entity.tb_SAS_Bank_Guarantee_Application.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_SAS01 != null)
                        {
                            model_Edu.RequestId = _SAS01.RequestId;
                            model_Edu.Company_Id = _SAS01.Company_Id;
                            model_Edu.Company_Name = _SAS01.tb_Company.Company_Name;
                            model_Edu.Guarantee_Type = Convert.ToInt32(_SAS01.Guarantee_Type);
                            model_Edu.BenfName = _SAS01.Benf_Name;
                            model_Edu.BenfAdress1 = _SAS01.Benf_Address1;
                            model_Edu.BenfAdress2 = _SAS01.Benf_Address2;
                            model_Edu.BenfTelephone = _SAS01.Benf_Telephone_No;
                            model_Edu.BenfFax = _SAS01.Benf_Fax_No;
                            model_Edu.Currency = _SAS01.Currency;
                            model_Edu.CurrencyValue = Convert.ToDecimal(_SAS01.Value);
                            model_Edu.Amount = _SAS01.Amount_Words;
                            model_Edu.ContractPercent = Convert.ToInt32(_SAS01.Contract_Percent);
                            model_Edu.ContractTotal = Convert.ToDecimal(_SAS01.Total_Contract);
                            model_Edu.From_Date = Convert.ToDateTime(_SAS01.From_Date);
                            model_Edu.To_Date = Convert.ToDateTime(_SAS01.To_Date);
                            model_Edu.Description = _SAS01.Description;
                            model_Edu.CustPONo = _SAS01.Cust_PO_No;
                            model_Edu.ABBQutnNo = _SAS01.ABB_Quotation_No;
                            model_Edu.WBSNo = _SAS01.WBS_No;
                            model_Edu.BL_Id = _SAS01.BL_Id;
                            model_Edu.BL_Code = _SAS01.tb_BusinessLine.BusinessLine_Code;
                            model_Edu.PG_Id = _SAS01.PG_Id;
                            model_Edu.PGNo = _SAS01.tb_ProductGroup.PG_Code;
                            model_Edu.CostCenter = _SAS01.Cost_Center;
                            model_Edu.Branch = _SAS01.Bank_Branch;
                            model_Edu.CollectorName = _SAS01.Collector_Name;
                            model_Edu.Remarks = _SAS01.Remarks;
                            model_Edu.GuaranteeNo = _SAS01.Guarantee_No;
                            model_Edu.Bank = _SAS01.Bank_Name;
                            model_Edu.AccountRemarks = _SAS01.Account_Remarks;
                            model_Edu.Comments = _SAS01.Comments;
                            var xxx = Convert.ToDateTime(_SAS01.From_Date.ToString()).ToString("yyyy-MM-dd");
                            model_Edu.From_Date_string_date = xxx;

                            var xxxx = Convert.ToDateTime(_SAS01.To_Date.ToString()).ToString("yyyy-MM-dd");
                            model_Edu.To_Date_string_date = xxxx;


                        }
                        model.BankGuaranteeModel = model_Edu;
                        return View("Print_Page_SAS01", model);

                        #endregion SAS01
                    }
                    else if (model.wf_type == "P015")  /*terrin*/
                    {
                        #region P009
                        var model1 = new EmployeeRequestModel();
                        string reqid = splitData[1];
                        model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model1.local_id = requestprint.Employee_ID;
                        var _p015 = _entity.tb_PP_TrainingorRecruitmentPayment.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        model1.payment_mode = _p015.PaymentMode;
                        model1.traname = _p015.traname;
                        model1.blcontrollerid = _p015.blcontrollerid;
                        model1.chargecostcenter = _p015.chargecostcenter;
                        model1.chargeaccount = _p015.chargeaccount;
                        model1.rt_remarks = _p015.Remark;
                        if (_p015.PaymentMode == "C")
                        {
                            if (_p015.Cheque_Date != null)
                            {
                                #region 
                                try
                                {
                                    var stringDate = _p015.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model1.cheque_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p015.Cheque_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    model1.cheque_date_string = xx;
                                }
                                #endregion
                            }
                            model1.table_Id = _p015.Id;
                            // model1.request_id= _p015.RequestId;
                            model1.payment_mode = "Cheque";
                            model1.amount_sar = _p015.Amount_SAR;
                            model1.currenctType = _p015.currencytype;
                            //model1.Account_No = _p015.ac;
                            model1.purpose_text = _p015.Purpose_Text;
                            // model1.s = _p015.supplier;
                            model1.payable_to = _p015.Cheque_Payable;
                            model1.filedata = _p015.Attachment_Filepath;

                        }
                        else
                        {
                            model1.table_Id = _p015.Id;
                            // model1.request_id = _p015.RequestId;
                            model1.payment_mode = "Bank Transfer";
                            model1.amount_sar = _p015.Amount_SAR;
                            model1.currenctType = _p015.currencytype;
                            model1.from_bank = _p015.From_Bank;
                            model1.from_addreess = _p015.From_Address;
                            model1.from_account_no = _p015.From_AccountNo;
                            model1.to_beneficiary = _p015.To_Benificiary;
                            model1.to_bankname = _p015.To_BankName;
                            model1.to_address = _p015.To_Address;
                            model1.to_account_no = _p015.To_AccountNo;
                            model1.to_iban = _p015.To_IBAN;
                            model1.purpose_text = _p015.Purpose_Text;

                        }


                        return View("Print_Page_P015", model1);
                        // return RedirectToAction("Print_Page_P015", "Request", model1);
                        #endregion P009
                    }

                    //P007-Vacation(Preema)
                    else if (model.wf_type == "P007")
                    {
                        #region P007

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model.checkstatus = "NEW";
                        model.wf_type = "P007";

                        #region RequestData

                        long reqId = Convert.ToInt32(reqid);
                        var _p007 = _entity.tb_TA_Vacation.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
                        VacationModel vacation = new VacationModel();

                        vacation.place_to_visit = _p007.Place_Visit;
                        vacation.reason = _p007.Reasons;
                        vacation.remark_one = _p007.Remark;
                        vacation.is_complaince_approval_required = Convert.ToInt32(_p007.Is_Compliance_Approval);
                        if (vacation.is_complaince_approval_required == 1)
                        {
                            vacation.str_complaince_approval_required = "Yes";
                        }
                        else
                        {
                            vacation.str_complaince_approval_required = "No";
                        }

                        vacation.compliance_approval_date = _p007.Compliance_Approval_Date ?? CurrentTime;
                        vacation.last_day_of_work = _p007.Last_Day_Of_Work ?? CurrentTime;
                        vacation.return_to_duty = _p007.Return_To_Duty ?? CurrentTime;
                        vacation.workflow_delegated = Convert.ToInt32(_p007.IsDelegated);
                        if (vacation.workflow_delegated == 1)
                        {
                            vacation.str_workflow_delegated = "Yes";
                        }
                        else
                        {
                            vacation.str_workflow_delegated = "No";
                        }
                        vacation.justification_no_delegation = _p007.Just_No_Delegated;
                        vacation.address_during_absence = _p007.Address_During_Absence;
                        vacation.telephone = _p007.Telephone_No;
                        vacation.mode_of_travel = _p007.Travel_Mode;
                        vacation.abb_locations = (Location)_p007.Location_Id;
                        var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p007.Location_Id).FirstOrDefault();
                        if (location_name != null)
                        {
                            vacation.location_name = location_name.Location;
                        }
                     
                        vacation.required_exit_visa = Convert.ToInt32(_p007.Is_Exit_ReEntry_Visa);
                        vacation.type_of_exit_visa = _p007.Type_Exit_ReEntry_Visa;

                        vacation.Visa_Duration = _p007.Visa_duration;
                        vacation.Visa_With = _p007.Visa_with;

                        vacation.travel_visa_charged_to = _p007.Visa_Charged_to;
                        vacation.required_foreign_visa = Convert.ToInt32(_p007.Is_Foreign_Visa);
                        if (vacation.required_foreign_visa == 1)
                        {
                            vacation.str_required_foreign_visa = "Yes";
                        }
                        else
                        {
                            vacation.str_required_foreign_visa = "No";
                        }

                        vacation.foreign_visa_countries = _p007.Foreign_Visa_Countries;
                        vacation.foreign_visa_quantity = _p007.Foreign_Visa_Quantity;
                        vacation.required_travel_insurance = Convert.ToInt32(_p007.Is_Travel_Insurance);
                        if (vacation.required_travel_insurance == 1)
                        {
                            vacation.str_required_travel_insurance = "Yes";
                        }
                        else
                        {
                            vacation.str_required_travel_insurance = "No";
                        }
                        vacation.travel_insurance_countries = _p007.Travel_Insurance_Countries;
                        vacation.travel_insurance_quantity = _p007.Travel_Insurance_Quantity;
                        vacation.required_rent_car = Convert.ToInt32(_p007.Is_RentCar);
                        if (vacation.required_rent_car == 1)
                        {
                            vacation.str_required_rent_car = "Yes";
                        }
                        else
                        {
                            vacation.str_required_rent_car = "No";
                        }
                        vacation.rent_car_charged_to = _p007.RentCar_Charged_to;
                        vacation.rent_car_project_no = _p007.RentCar_ProjectNo;
                        vacation.car_type = _p007.Car_Type;
                        vacation.rent_car_picked_up_at = _p007.Car_PickUp_at;
                        vacation.rent_car_pick_up_date = _p007.Car_PickUp_date ?? CurrentTime;
                        vacation.rent_car_pick_up_time = _p007.Car_PickUp_Time;

                        vacation.rent_car_return_date = _p007.Car_Return_date ?? CurrentTime;
                        vacation.rent_car_return_time = _p007.Car_Return_Time;
                        vacation.rent_car_payment_type = _p007.Car_Payment_Type;
                        vacation.number_of_rooms = Convert.ToInt32(_p007.Number_Of_Rooms);
                        vacation.type_of_ticket = Convert.ToString(_p007.Ticket_Type);

                        vacation.rent_car_remark = _p007.Car_Remark;
                        vacation.required_hotel_booking = Convert.ToInt32(_p007.Is_Hotel);
                        if (vacation.required_hotel_booking == 1)
                        {
                            vacation.str_required_hotel_booking = "Yes";
                        }
                        else
                        {
                            vacation.str_required_hotel_booking = "No";
                        }
                        vacation.hotel_booking_charged_to = _p007.Hotel_Charged_to;
                        vacation.hotel_booking_project_no = _p007.Hotel_ProjectNo;
                        vacation.hotel_name = _p007.Hotel_Name;
                        vacation.hotel_location = _p007.Hotel_Location;
                        vacation.room_preferences = _p007.Room_Preference;
                        vacation.type_of_room = _p007.Room_Type;
                        vacation.hotel_booking_payment_mode = _p007.Hotel_Payment_Type;
                        vacation.hotel_booking_check_in_date = _p007.Hote_Check_In_Date ?? CurrentTime;
                        vacation.hotel_check_in_time = _p007.Hotel_Check_In_Time;
                        vacation.hotel_booking_check_out_date = _p007.Hotel_Check_Out_Date ?? CurrentTime;
                        vacation.hotel_check_out_time = _p007.Hotel_Check_Out_Time;
                        vacation.hotel_booking_remark = _p007.Hotel_Remark;
                        vacation.departure_date = _p007.Departure_Date ?? CurrentTime;
                        vacation.departure_flight_number = _p007.Departure_Flight_No;
                        vacation.return_date = _p007.Return_Date ?? CurrentTime;
                        vacation.return_flight_number = _p007.Return_Flight_No;
                        vacation.travel_routing = _p007.Travel_Routing;
                        vacation.note = _p007.Note;
                        vacation.cash_advance = Convert.ToInt32(_p007.Cash_Advance);
                        vacation.amx_holder = Convert.ToInt32(_p007.Amex_Holder);
                        if (vacation.amx_holder == 1)
                        {
                            vacation.str_amx_holder = "Yes";
                        }
                        else
                        {
                            vacation.str_amx_holder = "No";
                        }
                        if (vacation.cash_advance == 1)
                        {
                            vacation.str_cash_advance = "Yes";
                        }
                        else
                        {
                            vacation.str_cash_advance = "No";
                        }
                        vacation.salary_advance = _p007.Salary_Advance;
                        vacation.bank_account = _p007.Bank_account;
                        vacation.ticket_cost = _p007.Ticket_Cost;
                        vacation.iban = _p007.IBAN;
                        vacation.hotel_cost = _p007.Hotel_Cost;
                        vacation.daily_allowance = _p007.Daily_allowance;
                        vacation.other_expenses = _p007.Other_Expenses;
                        vacation.travel_advance_remark = _p007.Advance_Remark;
                        vacation.travel_advance_total = _p007.Travel_Advance_Total;

                        vacation._dependentsInfo = new List<TA_DependentsInfo>();
                        var dependentInfo = _entity.tb_TA_Vacation_DependentsInfo.Where(x => x.TA_Id == _p007.Id && x.IsActive == true).ToList();
                        foreach (var item in dependentInfo)
                        {
                            TA_DependentsInfo one = new TA_DependentsInfo();
                            one.name = item.Name;
                            one.relation_ship = item.Relationship;
                            one.age = item.Age;
                            one.visa_type = item.Visa_Type;
                            one.ta_type = item.TA_Type;
                            one.remark = item.Remark;
                            vacation._dependentsInfo.Add(one);
                        }

                        vacation._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                        long requestid = Convert.ToInt32(reqId);
                        var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                        foreach (var item in travel)
                        {
                            TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                            one.ticket_number = item.Ticket_Number;
                            one.ticket_price = item.TicketPrice;
                            one.issue_date = item.IssueDate;
                            vacation._travelAgencyInfo.Add(one);
                        }

                        vacation.revalidation_charge = _p007.Revalidation_Charge;
                        vacation.over_all_ticket_status = _p007.Ticket_Status ?? 0;
                        vacation.total_ticket_price = _p007.Total_Ticket_Price;
                        if (vacation.over_all_ticket_status == 1)
                        {
                            vacation.str_over_all_ticket_status = "All Ticket Issued";
                        }
                        else
                        {
                            vacation.str_over_all_ticket_status = "With Pending Tickets";
                        }

                        vacation.employee_ticket_number = _p007.Ticket_Number_employee;
                        vacation.employee_date_of_issue = _p007.IssueDate_employee;
                        vacation.employee_ticket_price = _p007.TicketPrice_employee;


                        #region Number of Days Information                    
                        //vacation.ticket_charged_to = _p007.Ticket_Charged_To;
                        if (_p007.Ticket_Charged_To == "1")
                        {
                            vacation.ticket_charged_to = "Company";
                        }
                        else
                        {
                            vacation.ticket_charged_to = "Personal";
                        }
                        vacation.from_period = Convert.ToString(_p007.From_Period);
                        vacation.to_period = Convert.ToString(_p007.To_Period);
                        vacation.from_period_date = Convert.ToDateTime(_p007.From_Period);
                        vacation.to_period_date = Convert.ToDateTime(_p007.To_Period);
                        vacation.Vacation = Convert.ToInt32(_p007.Vacation);
                        vacation.Leave_WO_Pay = Convert.ToInt32(_p007.Leave_Pay);
                        vacation.Holidays = Convert.ToInt32(_p007.Holidays);
                        vacation.Friday = Convert.ToInt32(_p007.Friday);
                        vacation.Saturday = Convert.ToInt32(_p007.Saturday);
                        vacation.Total_No_of_Days = Convert.ToString(_p007.Total_No_of_Days);
                        #endregion

                        #region Employee Entitlements to be processed by SAS             

                        if (_p007.Visa_Amount_Claim == true)
                        {
                            vacation.Visa_Amount_Claim = "Yes";
                        }
                        else
                        {
                            vacation.Visa_Amount_Claim = "No";
                        }
                        if (_p007.Taxi_Fare_Claim == true)
                        {
                            vacation.Taxi_Fare_Claim = "Yes";
                        }
                        else
                        {
                            vacation.Taxi_Fare_Claim = "No";
                        }

                        vacation.HR_Remarks_Visa = Convert.ToString(_p007.Visa_Remarks);
                        vacation.HR_Remarks_Taxi = Convert.ToString(_p007.Taxi_Fare_Remarks);
                        #endregion

                        #endregion RequestData


                        #region common_attachments

                        if (vacation._FileListPrint != null && vacation._FileListPrint.Count > 0)
                        {
                            var fillistprint = vacation._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }

                        #endregion

                        model.VacationModel = vacation;

                        return View("Print_Page_P007", model);
                        #endregion P007
                    }

                    //P037-Dependents Only(Preema)
                    else if (model.wf_type == "P037")
                    {
                        #region P037

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model.checkstatus = "NEW";
                        model.wf_type = "P037";

                        #region RequestData

                        long reqId = Convert.ToInt32(reqid);
                        var _p037 = _entity.tb_TA_DependentsOnly.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
                        VacationModel vacation = new VacationModel();

                        //vacation.place_to_visit = _p037.Place_Visit;
                        //vacation.reason = _p037.Reasons;
                        //vacation.remark_one = _p037.Remark;
                        vacation.is_complaince_approval_required = Convert.ToInt32(_p037.Is_Compliance_Approval);
                        if (vacation.is_complaince_approval_required == 1)
                        {
                            vacation.str_complaince_approval_required = "Yes";
                        }
                        else
                        {
                            vacation.str_complaince_approval_required = "No";
                        }

                        vacation.compliance_approval_date = _p037.Compliance_Approval_Date ?? CurrentTime;
                        //vacation.last_day_of_work = _p037.Last_Day_Of_Work ?? CurrentTime;
                        //vacation.return_to_duty = _p037.Return_To_Duty ?? CurrentTime;
                        vacation.workflow_delegated = Convert.ToInt32(_p037.IsDelegated);
                        if (vacation.workflow_delegated == 1)
                        {
                            vacation.str_workflow_delegated = "Yes";
                        }
                        else
                        {
                            vacation.str_workflow_delegated = "No";
                        }
                        vacation.justification_no_delegation = _p037.Just_No_Delegated;
                        //vacation.address_during_absence = _p037.Address_During_Absence;
                        //vacation.telephone = _p037.Telephone_No;
                        vacation.mode_of_travel = _p037.Travel_Mode;
                        vacation.abb_locations = (Location)_p037.Location_Id;
                        var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p037.Location_Id).FirstOrDefault();
                        if (location_name != null)
                        {
                            vacation.location_name = location_name.Location;
                        }
                        vacation.required_exit_visa = Convert.ToInt32(_p037.Is_Exit_ReEntry_Visa);
                        vacation.type_of_exit_visa = _p037.Type_Exit_ReEntry_Visa;

                        vacation.Visa_Duration = _p037.Visa_duration;
                        vacation.Visa_With = _p037.Visa_with;

                        vacation.travel_visa_charged_to = _p037.Visa_Charged_to;
                        vacation.required_foreign_visa = Convert.ToInt32(_p037.Is_Foreign_Visa);
                        if (vacation.required_foreign_visa == 1)
                        {
                            vacation.str_required_foreign_visa = "Yes";
                        }
                        else
                        {
                            vacation.str_required_foreign_visa = "No";
                        }

                        vacation.foreign_visa_countries = _p037.Foreign_Visa_Countries;
                        vacation.foreign_visa_quantity = _p037.Foreign_Visa_Quantity;
                        vacation.required_travel_insurance = Convert.ToInt32(_p037.Is_Travel_Insurance);
                        if (vacation.required_travel_insurance == 1)
                        {
                            vacation.str_required_travel_insurance = "Yes";
                        }
                        else
                        {
                            vacation.str_required_travel_insurance = "No";
                        }
                        vacation.travel_insurance_countries = _p037.Travel_Insurance_Countries;
                        vacation.travel_insurance_quantity = _p037.Travel_Insurance_Quantity;
                        //vacation.required_rent_car = Convert.ToInt32(_p037.Is_RentCar);
                        //if (vacation.required_rent_car == 1)
                        //{
                        //    vacation.str_required_rent_car = "Yes";
                        //}
                        //else
                        //{
                        //    vacation.str_required_rent_car = "No";
                        //}
                        //vacation.rent_car_charged_to = _p037.RentCar_Charged_to;
                        //vacation.rent_car_project_no = _p037.RentCar_ProjectNo;
                        //vacation.car_type = _p037.Car_Type;
                        //vacation.rent_car_picked_up_at = _p037.Car_PickUp_at;
                        //vacation.rent_car_pick_up_date = _p037.Car_PickUp_date ?? CurrentTime;
                        //vacation.rent_car_pick_up_time = _p037.Car_PickUp_Time;

                        //vacation.rent_car_return_date = _p037.Car_Return_date ?? CurrentTime;
                        //vacation.rent_car_return_time = _p037.Car_Return_Time;
                        //vacation.rent_car_payment_type = _p037.Car_Payment_Type;
                        //vacation.number_of_rooms = Convert.ToInt32(_p037.Number_Of_Rooms);
                        vacation.type_of_ticket = Convert.ToString(_p037.Ticket_Type);

                        //vacation.rent_car_remark = _p037.Car_Remark;
                        //vacation.required_hotel_booking = Convert.ToInt32(_p037.Is_Hotel);
                        //if (vacation.required_hotel_booking == 1)
                        //{
                        //    vacation.str_required_hotel_booking = "Yes";
                        //}
                        //else
                        //{
                        //    vacation.str_required_hotel_booking = "No";
                        //}
                        //vacation.hotel_booking_charged_to = _p037.Hotel_Charged_to;
                        //vacation.hotel_booking_project_no = _p037.Hotel_ProjectNo;
                        //vacation.hotel_name = _p037.Hotel_Name;
                        //vacation.hotel_location = _p037.Hotel_Location;
                        //vacation.room_preferences = _p037.Room_Preference;
                        //vacation.type_of_room = _p037.Room_Type;
                        //vacation.hotel_booking_payment_mode = _p037.Hotel_Payment_Type;
                        //vacation.hotel_booking_check_in_date = _p037.Hote_Check_In_Date ?? CurrentTime;
                        //vacation.hotel_check_in_time = _p037.Hotel_Check_In_Time;
                        //vacation.hotel_booking_check_out_date = _p037.Hotel_Check_Out_Date ?? CurrentTime;
                        //vacation.hotel_check_out_time = _p037.Hotel_Check_Out_Time;
                        //vacation.hotel_booking_remark = _p037.Hotel_Remark;
                        vacation.departure_date = _p037.Departure_Date ?? CurrentTime;
                        vacation.departure_flight_number = _p037.Departure_Flight_No;
                        vacation.return_date = _p037.Return_Date ?? CurrentTime;
                        vacation.return_flight_number = _p037.Return_Flight_No;
                        vacation.travel_routing = _p037.Travel_Routing;
                        vacation.note = _p037.Note;
                        //vacation.cash_advance = Convert.ToInt32(_p037.Cash_Advance);
                        //vacation.amx_holder = Convert.ToInt32(_p037.Amex_Holder);
                        //if (vacation.amx_holder == 1)
                        //{
                        //    vacation.str_amx_holder = "Yes";
                        //}
                        //else
                        //{
                        //    vacation.str_amx_holder = "No";
                        //}
                        //if (vacation.cash_advance == 1)
                        //{
                        //    vacation.str_cash_advance = "Yes";
                        //}
                        //else
                        //{
                        //    vacation.str_cash_advance = "No";
                        //}
                        //vacation.salary_advance = _p037.Salary_Advance;
                        //vacation.bank_account = _p037.Bank_account;
                        //vacation.ticket_cost = _p037.Ticket_Cost;
                        //vacation.iban = _p037.IBAN;
                        //vacation.hotel_cost = _p037.Hotel_Cost;
                        //vacation.daily_allowance = _p037.Daily_allowance;
                        //vacation.other_expenses = _p037.Other_Expenses;
                        //vacation.travel_advance_remark = _p037.Advance_Remark;
                        //vacation.travel_advance_total = _p037.Travel_Advance_Total;

                        vacation._dependentsInfo = new List<TA_DependentsInfo>();
                        var dependentInfo = _entity.tb_TA_DependentsOnly_DependentsInfo.Where(x => x.TA_Id == _p037.Id && x.IsActive == true).ToList();
                        foreach (var item in dependentInfo)
                        {
                            TA_DependentsInfo one = new TA_DependentsInfo();
                            one.name = item.Name;
                            one.relation_ship = item.Relationship;
                            one.age = item.Age;
                            one.visa_type = item.Visa_Type;
                            one.ta_type = item.TA_Type;
                            one.remark = item.Remark;
                            vacation._dependentsInfo.Add(one);
                        }

                        vacation._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                        long requestid = Convert.ToInt32(reqId);
                        var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                        foreach (var item in travel)
                        {
                            TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                            one.ticket_number = item.Ticket_Number;
                            one.ticket_price = item.TicketPrice;
                            one.issue_date = item.IssueDate;
                            vacation._travelAgencyInfo.Add(one);
                        }

                        vacation.revalidation_charge = _p037.Revalidation_Charge;
                        vacation.over_all_ticket_status = _p037.Ticket_Status ?? 0;
                        vacation.total_ticket_price = _p037.Total_Ticket_Price;
                        if (vacation.over_all_ticket_status == 1)
                        {
                            vacation.str_over_all_ticket_status = "All Ticket Issued";
                        }
                        else
                        {
                            vacation.str_over_all_ticket_status = "With Pending Tickets";
                        }

                        vacation.employee_ticket_number = _p037.Ticket_Number_employee;
                        vacation.employee_date_of_issue = _p037.IssueDate_employee;
                        vacation.employee_ticket_price = _p037.TicketPrice_employee;


                        //#region Number of Days Information                    
                        ////vacation.ticket_charged_to = _p037.Ticket_Charged_To;
                        //if (_p037.Ticket_Charged_To == "1")
                        //{
                        //    vacation.ticket_charged_to = "Company";
                        //}
                        //else
                        //{
                        //    vacation.ticket_charged_to = "Personal";
                        //}
                        //vacation.from_period = Convert.ToString(_p037.From_Period);
                        //vacation.to_period = Convert.ToString(_p037.To_Period);
                        //vacation.from_period_date = Convert.ToDateTime(_p037.From_Period);
                        //vacation.to_period_date = Convert.ToDateTime(_p037.To_Period);
                        //vacation.Vacation = Convert.ToInt32(_p037.Vacation);
                        //vacation.Leave_WO_Pay = Convert.ToInt32(_p037.Leave_Pay);
                        //vacation.Holidays = Convert.ToInt32(_p037.Holidays);
                        //vacation.Friday = Convert.ToInt32(_p037.Friday);
                        //vacation.Saturday = Convert.ToInt32(_p037.Saturday);
                        //vacation.Total_No_of_Days = Convert.ToString(_p037.Total_No_of_Days);
                        //#endregion

                        #region Employee Entitlements to be processed by SAS             

                        if (_p037.Visa_Amount_Claim == true)
                        {
                            vacation.Visa_Amount_Claim = "Yes";
                        }
                        else
                        {
                            vacation.Visa_Amount_Claim = "No";
                        }
                        if (_p037.Taxi_Fare_Claim == true)
                        {
                            vacation.Taxi_Fare_Claim = "Yes";
                        }
                        else
                        {
                            vacation.Taxi_Fare_Claim = "No";
                        }

                        vacation.HR_Remarks_Visa = Convert.ToString(_p037.Visa_Remarks);
                        vacation.HR_Remarks_Taxi = Convert.ToString(_p037.Taxi_Fare_Remarks);
                        #endregion

                        #endregion RequestData


                        #region common_attachments

                        if (vacation._FileListPrint != null && vacation._FileListPrint.Count > 0)
                        {
                            var fillistprint = vacation._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }

                        #endregion

                        model.VacationModel = vacation;

                        return View("Print_Page_P037", model);
                        #endregion P037
                    }

                    else if (model.wf_type == "T006")  //Terrin  on 30.06.2020
                    {
                        #region T006
                        TrainingFolderModel model_T006 = new TrainingFolderModel();
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _T006 = _entity.tb_TR_TrainingFolder.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_T006 != null)
                        {
                            model_T006.RequestId = _T006.RequestId;
                            model_T006.Date_training = Convert.ToDateTime(_T006.Date);
                            model_T006.quantity = _T006.quantity;
                            model_T006.Attachment_Filepath = _T006.Attachment_Filepath;

                            var xxx = Convert.ToDateTime(_T006.Date.ToString()).ToString("yyyy-MM-dd");
                            model_T006.Date_training_string = xxx;

                            //var xxxx = Convert.ToDateTime(_T006.To_Date.ToString()).ToString("yyyy-MM-dd");
                            //model_T006.To_Date_string_date = xxxx;


                        }
                        model.TrainingFolderModel = model_T006;
                        return View("Print_Page_T006", model);

                        #endregion T006
                    }
                    else if (model.wf_type == "T007")  //Terrin  on 3.06.2020
                    {
                        #region T007
                        TrainingCertificateModel model_T007 = new TrainingCertificateModel();
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _T007 = _entity.tb_TR_Training_Certificate.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_T007 != null)
                        {
                            model_T007.RequestId = _T007.RequestId;
                            model_T007.Titlecourse = _T007.Titlecourse;
                            model_T007.Course_period_from = Convert.ToDateTime(_T007.Course_period_from);
                            model_T007.Course_period_to = Convert.ToDateTime(_T007.Course_period_to);
                            model_T007.Location = _T007.Location;
                            model_T007.Clientname = _T007.Clientname;
                            model_T007.Noof_particants = _T007.Noof_particants;
                           // model_T007.Noof_trainer = _T007.Noof_trainer;
                            model_T007.nameofparticipants = _T007.Nameof_participants;
                            var xxx = Convert.ToDateTime(_T007.Course_period_from.ToString()).ToString("yyyy-MM-dd");
                            model_T007.Course_period_from_string = xxx;
                            var yyy = Convert.ToDateTime(_T007.Course_period_to.ToString()).ToString("yyyy-MM-dd");
                            model_T007.Course_period_to_string = yyy;

                            //var xxxx = Convert.ToDateTime(_T006.To_Date.ToString()).ToString("yyyy-MM-dd");
                            //model_T006.To_Date_string_date = xxxx;


                        }
                        model.TrainingCertificateModel = model_T007;
                        return View("Print_Page_T007", model);

                        #endregion T007
                    }
                    //Basheer on 03-07-2020
                    else if (model.wf_type == "P034")
                    {
                        #region P034

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model.checkstatus = "NEW";
                        model.wf_type = "P034";

                        #region RequestData

                        long reid = Convert.ToInt32(reqid);
                        var _p034 = _entity.tb_TA_Business_International.Where(x => x.RequestId == reid && x.IsActive == true).FirstOrDefault();
                        BusinessInternational businessinternational = new BusinessInternational();
                        businessinternational.Place_Visit = _p034.Place_Visit;
                        businessinternational.Reasons = _p034.Reasons;
                        businessinternational.Remark = _p034.Remark;
                        if (businessinternational.Is_Compliance_Approval_Required == 1)
                        {
                            businessinternational.str_complaince_approval_required = "Yes";
                        }
                        else
                        {
                            businessinternational.str_complaince_approval_required = "No";
                        }

                        //businessinternational.Compliance_Approval_Date = _p034.Compliance_Approval_Date ?? CurrentTime;
                        if (_p034.Compliance_Approval_Date != null)
                        {
                            try
                            {
                                var stringDate = _p034.Compliance_Approval_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.compliance_approval_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Compliance_Approval_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.compliance_approval_date_string = xx;
                            }
                        }
                        if (_p034.Last_Day_Of_Work != null)
                        {
                            try
                            {
                                var stringDate = _p034.Last_Day_Of_Work.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Last_Day_Of_Work_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Last_Day_Of_Work.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Last_Day_Of_Work_date_string = xx;
                            }
                        }
                        if (_p034.Return_To_Duty != null)
                        {
                            try
                            {
                                var stringDate = _p034.Return_To_Duty.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Return_To_Duty_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Return_To_Duty.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Return_To_Duty_date_string = xx;
                            }
                        }
                        businessinternational.Is_WorkFlow_delegated = Convert.ToInt32(_p034.IsDelegated);
                        if (businessinternational.Is_WorkFlow_delegated == 1)
                        {
                            businessinternational.str_workflow_delegated = "Yes";
                        }
                        else
                        {
                            businessinternational.str_workflow_delegated = "No";
                        }
                        businessinternational.Justification_Not_Delegated = _p034.Just_No_Delegated;
                        businessinternational.IsPossible_Video_Conference = Convert.ToInt32(_p034.IsVideo_Conference);
                        if (businessinternational.IsPossible_Video_Conference == 1)
                        {
                            businessinternational.str_is_video_conference_required = "Yes";
                        }
                        else
                        {
                            businessinternational.str_is_video_conference_required = "No";
                        }
                        businessinternational.Justification_No_Video_Conference = _p034.Just_No_Video;
                        businessinternational.Address_During_Absence = _p034.Address_During_Absence;
                        businessinternational.telephone = _p034.Telephone_No;
                        businessinternational.Mode_Of_Travel = _p034.Travel_Mode;
                        var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p034.Location_Id).FirstOrDefault();
                        businessinternational.location_name = location_name.Location;
                        businessinternational.Required_Ext_or_Reentry_Visa = Convert.ToInt32(_p034.Is_Exit_ReEntry_Visa);
                        businessinternational.Type_of_Required_Ext_or_Reentry_Visa = _p034.Type_Exit_ReEntry_Visa;
                        businessinternational.Visa_Charged_to = _p034.Visa_Charged_to;
                        businessinternational.Visa_duration = _p034.Visa_duration;
                        businessinternational.Visa_with = _p034.Visa_with;
                        businessinternational.Visa_Charged_to = _p034.Visa_Charged_to;
                        businessinternational.Required_Foreign_Visa = Convert.ToInt32(_p034.Is_Foreign_Visa);
                        if (businessinternational.Required_Foreign_Visa == 1)
                        {
                            businessinternational.str_required_foreign_visa = "Yes";
                        }
                        else
                        {
                            businessinternational.str_required_foreign_visa = "No";
                        }
                        businessinternational.Foreign_Visa_Countries = _p034.Foreign_Visa_Countries;
                        businessinternational.Foreign_Visa_Quantity = _p034.Foreign_Visa_Quantity;
                        businessinternational.Requied_Travel_Insurance = Convert.ToInt32(_p034.Is_Travel_Insurance);

                        if (businessinternational.Requied_Travel_Insurance == 1)
                        {
                            businessinternational.str_required_travel_insurance = "Yes";
                        }
                        else
                        {
                            businessinternational.str_required_travel_insurance = "No";
                        }
                        businessinternational.Travel_Insurance_Countries = _p034.Travel_Insurance_Countries;
                        businessinternational.Travel_Insurance_Quantity = _p034.Travel_Insurance_Quantity;
                        businessinternational.Required_RentCar = Convert.ToInt32(_p034.Is_RentCar);
                        if (businessinternational.Required_RentCar == 1)
                        {
                            businessinternational.str_required_rent_car = "Yes";
                        }
                        else
                        {
                            businessinternational.str_required_rent_car = "No";
                        }
                        businessinternational.RentCar_Charged_to = _p034.RentCar_Charged_to;
                        businessinternational.RentCar_ProjectNo = _p034.RentCar_ProjectNo;
                        businessinternational.Car_Type = _p034.Car_Type;
                        businessinternational.Car_PickUp_at = _p034.Car_PickUp_at;
                        if (_p034.Car_PickUp_date != null)
                        {
                            try
                            {
                                var stringDate = _p034.Car_PickUp_date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Car_PickUp_date_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Car_PickUp_date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Car_PickUp_date_date_string = xx;
                            }
                        }
                        if (_p034.Car_Return_date != null)
                        {
                            try
                            {
                                var stringDate = _p034.Car_Return_date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Car_Return_date_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Car_Return_date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Car_Return_date_date_string = xx;
                            }
                        }
                        businessinternational.Car_PickUp_Time = _p034.Car_PickUp_Time;
                        businessinternational.Car_Return_Time = _p034.Car_Return_Time;
                        businessinternational.Car_Payment_Type = _p034.Car_Payment_Type;
                        businessinternational.Car_Remark = _p034.Car_Remark;
                        businessinternational.Required_Hotel_Booking = Convert.ToInt32(_p034.Is_Hotel);
                        if (businessinternational.Required_Hotel_Booking == 1)
                        {
                            businessinternational.str_required_hotel_booking = "Yes";
                        }
                        else
                        {
                            businessinternational.str_required_hotel_booking = "No";
                        }
                        businessinternational.HotelBooking_Charged_to = _p034.Hotel_Charged_to;
                        businessinternational.Hotel_ProjectNo = _p034.Hotel_ProjectNo;
                        businessinternational.Hotel_Name = _p034.Hotel_Name;
                        businessinternational.hotel_location = _p034.Hotel_Location;
                        businessinternational.Room_Preference = _p034.Room_Preference;
                        businessinternational.Type_Of_rooms = _p034.Room_Type;
                        businessinternational.Number_Of_Rooms = _p034.Number_Of_Rooms.ToString();
                        businessinternational.HotelBooking_Payment_Type = _p034.Hotel_Payment_Type;
                        businessinternational.Hote_Checking_Date = _p034.Hote_Check_In_Date ?? CurrentTime;
                        if (_p034.Hote_Check_In_Date != null)
                        {
                            try
                            {
                                var stringDate = _p034.Hote_Check_In_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Hote_Checking_Date_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Hote_Check_In_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Hote_Checking_Date_date_string = xx;
                            }
                        }
                        businessinternational.Hotel_Check_In_Time = _p034.Hotel_Check_In_Time;
                        if (_p034.Hotel_Check_Out_Date != null)
                        {
                            try
                            {
                                var stringDate = _p034.Hotel_Check_Out_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Hotel_Check_Out_Date_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Hotel_Check_Out_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Hotel_Check_Out_Date_date_string = xx;
                            }
                        }
                        businessinternational.Hotel_Check_Out_Time = _p034.Hotel_Check_Out_Time;
                        businessinternational.Hotel_Remark = _p034.Hotel_Remark;
                        if (_p034.Departure_Date != null)
                        {
                            try
                            {
                                var stringDate = _p034.Departure_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Departure_Date_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Departure_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Departure_Date_date_string = xx;
                            }
                        }
                        businessinternational.Departure_Flight_Number = _p034.Departure_Flight_No;
                        businessinternational.Return_Date = _p034.Return_Date ?? CurrentTime;
                        if (_p034.Return_Date != null)
                        {
                            try
                            {
                                var stringDate = _p034.Return_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Return_Date_date_string = xx;
                            }
                            catch
                            {
                                var stringDate = _p034.Return_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                businessinternational.Return_Date_date_string = xx;
                            }
                        }
                        businessinternational.Return_Flight_Number = _p034.Return_Flight_No;
                        businessinternational.Travel_Routing = _p034.Travel_Routing;
                        businessinternational.Note = _p034.Note;
                        businessinternational.type_of_ticket = _p034.Type_Of_Ticket;
                        businessinternational.Cash_Advance = Convert.ToInt32(_p034.Cash_Advance);
                        businessinternational.Amex_Holder = Convert.ToInt32(_p034.Amex_Holder);
                        if (businessinternational.Amex_Holder == 1)
                        {
                            businessinternational.str_amx_holder = "Yes";
                        }
                        else
                        {
                            businessinternational.str_amx_holder = "No";
                        }
                        if (businessinternational.Cash_Advance == 1)
                        {
                            businessinternational.str_cash_advance = "Yes";
                        }
                        else
                        {
                            businessinternational.str_cash_advance = "No";
                        }
                        businessinternational.Salary_Advance = _p034.Salary_Advance;
                        businessinternational.Bank_account = _p034.Bank_account;
                        businessinternational.Ticket_Cost = _p034.Ticket_Cost;
                        businessinternational.IBAN = _p034.IBAN;
                        businessinternational.Hotel_Cost = _p034.Hotel_Cost;
                        businessinternational.Daily_allowance = _p034.Daily_allowance;
                        businessinternational.Other_Expenses = _p034.Other_Expenses;
                        businessinternational.Advance_Remark = _p034.Advance_Remark;
                        businessinternational.Travel_Advance_Total = _p034.Travel_Advance_Total;
                        businessinternational._dependentsInfo = new List<TA_DependentsInfo>();
                        var dependentInfo = _entity.tb_TA_DependentsInfo.Where(x => x.TA_Id == _p034.Id && x.IsActive == true).ToList();
                        foreach (var item in dependentInfo)
                        {
                            TA_DependentsInfo one = new TA_DependentsInfo();
                            one.name = item.Name;
                            one.relation_ship = item.Relationship;
                            one.age = item.Age;
                            one.visa_type = item.Visa_Type;
                            one.ta_type = item.TA_Type;
                            one.remark = item.Remark;
                            businessinternational._dependentsInfo.Add(one);
                        }
                        //businessinternational._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                        //var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.TA_Id == _p034.Id && x.IsActive == true).ToList();
                        //foreach (var item in travel)
                        //{
                        //    TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                        //    one.ticket_number = item.Ticket_Number;
                        //    one.ticket_price = item.TicketPrice;
                        //    one.issue_date = item.IssueDate;
                        //    businessinternational._travelAgencyInfo.Add(one);
                        //}
                        businessinternational.Ticket_Status = _p034.Ticket_Status ?? 0;
                        if (businessinternational.Ticket_Status == 1)
                        {
                            businessinternational.str_over_all_ticket_status = "All Ticket Issued";
                        }
                        else
                        {
                            businessinternational.str_over_all_ticket_status = "With Pending Tickets";
                        }
                        businessinternational.Business_Days = _p034.Business_Days ?? 0;
                        businessinternational.Friday = _p034.Friday ?? 0;
                        businessinternational.Saturday = _p034.Saturday ?? 0;
                        businessinternational.Total = _p034.Total ?? 0;




                        #endregion RequestData


                        #region common_attachments

                        if (businessinternational._FileListPrint != null && businessinternational._FileListPrint.Count > 0)
                        {
                            var fillistprint = businessinternational._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }

                        #endregion

                        model.BusinessInternational = businessinternational;

                        return View("Print_Page_P034", model);
                        #endregion P034
                    }

                    //T004 -Inhouse training (George) 06-07-2020
                    else if (model.wf_type == "T004")
                    {
                        #region T004

                        InHouseTrainingModel model_HouseTrain = new InHouseTrainingModel();
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _T004 = _entity.tb_TR_InHouseTraining.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_T004 != null)
                        {
                            model_HouseTrain.RequestId = _T004.RequestId;
                            model_HouseTrain.Remarks = _T004.Remarks;
                        }

                        var CourseInfo = _T004.tb_TR_InHouse_Training_Details.ToList();
                        List<InHouseTrainingCourseModel> ListofCourses = new List<InHouseTrainingCourseModel>();

                        if (CourseInfo != null && CourseInfo.Count > 0)
                        {

                            foreach (var item in CourseInfo)
                            {
                                InHouseTrainingCourseModel cou = new InHouseTrainingCourseModel();
                                cou.TrainingId = item.TrainingId;
                                cou.Code = item.Code;
                                cou.Course_Name = item.Course_Name;
                                cou.Type = item.Type;
                                cou.From_Date = Convert.ToDateTime(item.From_Date);
                                cou.To_Date = Convert.ToDateTime(item.To_Date);

                                var stringFromDate = item.From_Date.ToString();
                                var fdate = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                cou.From_Date_string_date = fdate;

                                var stringToDate = item.To_Date.ToString();
                                var tdate = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                cou.To_Date_string_date = tdate;
                                ListofCourses.Add(cou);

                            }
                        }
                        model._CourseList = ListofCourses;
                        model.InhouseTraining = model_HouseTrain;
                        return View("Print_Page_T004", model);

                        #endregion                        
                    }
                    else if (model.wf_type == "P045")    // P045 -Chitra Srishti 08.07.2020
                    {
                        #region P045

                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        model.checkstatus = "NEW";

                        var _p045 = _entity.tb_ER_HR_Related.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        ExpenseReportModel expenseReportModel = new ExpenseReportModel();

                        expenseReportModel.RequestId = reqid.ToString();
                        expenseReportModel.ChargeTo = _p045.ChargeTo;
                        expenseReportModel.PlacesVisited = _p045.PlacesVisited;
                        expenseReportModel.Region = _p045.Region;
                        expenseReportModel.PersonnelVisited = _p045.PersonnelVisited;
                        expenseReportModel.BusinessLine = _p045.BusinessLine;
                        expenseReportModel.TARequest = _p045.TARequest;
                        expenseReportModel.TARequestDate = _p045.TARequestDate;
                        expenseReportModel.LastDayOfWork = _p045.LastDayOfWork;
                        expenseReportModel.ReturnToDuty = _p045.ReturnToDuty;
                        expenseReportModel.ComplianceApproved = _p045.ComplianceApproved;
                        expenseReportModel.ComplianceApprovalDate = _p045.ComplianceApprovalDate;

                        expenseReportModel.ExpenseReportDetailList = new List<ExpenseReportDetailModel>();
                        var detailList = _entity.tb_ER_HR_Related_Detail.Where(x => x.ER_ParentId == _p045.Id && x.IsActive == true).OrderBy(x => x.SequenceNum).ToList();
                        foreach (var item in detailList)
                        {
                            ExpenseReportDetailModel detail = new ExpenseReportDetailModel();
                            detail.AccountTypeId = item.AccountTypeId;
                            detail.AccountTypeName = item.AccountTypeName;
                            detail.ERAccount = item.ERAccount;
                            detail.TicketNumbers = item.TicketNumbers;
                            detail.KM = item.KM;
                            detail.Allowance = item.Allowance;
                            detail.Description1 = item.Description1;
                            detail.Description2 = item.Description2;
                            detail.Currency = item.Currency;
                            detail.Amount = item.Amount;
                            detail.ExchangeRate = item.ExchangeRate;
                            detail.AmtLocal = item.AmtLocal;
                            detail.SequenceNum = item.SequenceNum;

                            expenseReportModel.ExpenseReportDetailList.Add(detail);
                        }

                        expenseReportModel.AmtTotal = _p045.AmtTotal;
                        expenseReportModel.LessAdvance = _p045.LessAdvance;
                        expenseReportModel.TicketsPaidByCo = _p045.TicketsPaidByCo;
                        expenseReportModel.NetToReceive = _p045.NetToReceive;

                        #region common_attachments

                        if (expenseReportModel._FileListPrint != null && expenseReportModel._FileListPrint.Count > 0)
                        {
                            var fillistprint = expenseReportModel._FileListPrint.Where(x => x.filebatch == 1).ToList();
                            if (fillistprint.Count > 0)
                            {
                                foreach (var item in fillistprint)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                }
                            }
                        }

                        #endregion

                        model.ExpenseReport = expenseReportModel;

                        return View("Print_Page_P045", model);
                        #endregion P045
                    }
                    //T001 -External training (George) 13-07-2020
                    else if (model.wf_type == "T001")
                    {
                        #region T001

                        ExternalTrainingModel model_ExtTrain = new ExternalTrainingModel();
                        string reqid = splitData[1];
                        model.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                        var _T001 = _entity.tb_TR_External_Training.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                        if (_T001 != null)
                        {
                            model_ExtTrain.RequestId = _T001.RequestId;
                            model_ExtTrain.Justification = _T001.Justification;
                            model_ExtTrain.Years = _T001.Years;
                            model_ExtTrain.GrandTotal = _T001.GrandTotal;
                        }

                        var CourseInfo = _T001.tb_TR_External_Training_Detail.ToList();
                        List<ExternalTrainingDetailModel> ListofCourses = new List<ExternalTrainingDetailModel>();

                        if (CourseInfo != null && CourseInfo.Count > 0)
                        {

                            foreach (var item in CourseInfo)
                            {
                                ExternalTrainingDetailModel cou = new ExternalTrainingDetailModel();
                                cou.ExternTrainingId = item.ExternTrainingId;
                                cou.Course_Name = item.Course_Name;
                                cou.From_Date = Convert.ToDateTime(item.From_Date);
                                cou.To_Date = Convert.ToDateTime(item.To_Date);
                                cou.Training_Type = item.Training_Type;
                                cou.Location = item.Location;
                                cou.Cost = item.Cost;
                                cou.NoofDays = item.NoofDays;

                                var stringFromDate = item.From_Date.ToString();
                                var fdate = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                cou.From_Date_string_date = fdate;

                                var stringToDate = item.To_Date.ToString();
                                var tdate = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                cou.To_Date_string_date = tdate;
                                ListofCourses.Add(cou);

                            }
                        }
                        model._TrainingDetails = ListofCourses;
                        model.ExternalTraining = model_ExtTrain;
                        return View("Print_Page_T001", model);

                        #endregion
                    }
                    else
                    {
                        return View("~/Views/Request/_pv_No_Pages.cshtml");
                    }
                }
                else
                {
                    //model.approver_id = requestprint.Approver_ID;
                    //model.ad_account = empData.ADAccount;
                    //model.emp_name = empData.Emp_Name;
                    //model.my_id = model.my_id;
                    return View("~/Views/Request/Print_NoPermission_View.cshtml", model);
                }
            }
            else
            {
                //model.approver_id = requestprint.Approver_ID;
                //model.ad_account = empData.ADAccount;
                //model.emp_name = empData.Emp_Name;
                //model.my_id = model.my_id;
                return View("~/Views/Request/Print_NoPermission_View.cshtml", model);
            }
        }

        public ActionResult Print_Page_Approverside(string id)
        {
            //Print page encryption(Preema)
            var encryptData = "";
            StringBuilder inSb = new StringBuilder(id);
            StringBuilder outSb = new StringBuilder(id.Length);
            char c;
            for (int i = 0; i < id.Length; i++)
            {
                c = inSb[i];
                c = (char)(c ^ 2020);
                outSb.Append(c);
            }
            encryptData = outSb.ToString();

            SubmitRequest model = new SubmitRequest();
            string[] splitData = encryptData.Split('~');
            model.my_id = splitData[0];
            model.request_id = splitData[1];
            model.request_table_id = Convert.ToInt64(splitData[2]);
            model.my_role = splitData[3];
            model.button_code = splitData[4];
            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            var empDetails = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
            model.my_country_id = empDetails.tb_Location.Country_Id ?? 0;

            //Print page url encryption    
            var currentAD = Convert.ToString(Session["adAccount"]);
            if (currentAD == null && currentAD == string.Empty)
            {
                var username = User.Identity.Name;
                string[] addata = username.Split('\\');
                currentAD = addata[1];
            }

            if (model.my_id == "0")
            {
                if (TempData.ContainsKey("Emp_Id"))
                    model.my_id = TempData["Emp_Id"].ToString();

            }

            var empData = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.my_id && x.IsActive == true).FirstOrDefault();

            if (empData != null)
            {
                if (empData.ADAccount == currentAD)
                {
                    if (model.button_code == "PRN")
                    {
                        WaitingRequestDetails modelprint = new WaitingRequestDetails();
                        string[] splitDataprint = id.Split('~');
                        modelprint.my_id = splitData[0];
                        //modelprint.request_id = splitData[1];
                        modelprint.request_table_id = Convert.ToInt64(splitData[2]);
                        modelprint.my_role = splitData[3];
                        modelprint.button_code = splitData[4];
                        var requestprint = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                        var empDetailsprint = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == request.Employee_ID && x.IsActive == true).FirstOrDefault();
                        modelprint.my_country_id = empDetailsprint.tb_Location.Country_Id ?? 0;
                        modelprint.local_id = requestprint.Employee_ID;
                        modelprint.wf_type = requestprint.tb_WFType.WF_ID;

                        modelprint.creator_id = requestprint.Creater_ID;
                        modelprint.ad_account = empData.ADAccount;


                        if (modelprint.wf_type == "P055")    /*NIMMI MOHAN*/
                        {
                            #region P055
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p055 = _entity.tb_PP_HousingAllowance.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.payment_mode = _p055.PaymentMode;
                            if (_p055.PaymentMode == "C")
                            {
                                if (_p055.Cheque_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p055.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p055.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "Cheque";
                                modelprint.amount_sar = _p055.Amount_SAR;
                                modelprint.purpose_text = _p055.Purpose_Text;
                                modelprint.remark = _p055.Remark;
                                modelprint.payable_to = _p055.Cheque_Payable;
                                modelprint.attachment_filepath = _p055.Attachment_Filepath;
                            }
                            else
                            {
                                modelprint.amount_sar = _p055.Amount_SAR;
                                modelprint.payment_mode = "Bank Transfer";
                                modelprint.from_bank = _p055.From_Bank;
                                modelprint.from_addreess = _p055.From_Address;
                                modelprint.from_account_no = _p055.From_AccountNo;
                                modelprint.to_beneficiary = _p055.To_Benificiary;
                                modelprint.to_bankname = _p055.To_BankName;
                                modelprint.to_address = _p055.To_Address;
                                modelprint.to_account_no = _p055.To_AccountNo;
                                modelprint.to_iban = _p055.To_IBAN;
                                modelprint.bank_attachment = _p055.Bank_Attachment;
                                modelprint.attachment_filepath = _p055.Attachment_Filepath;
                                modelprint.purpose_text = _p055.Purpose_Text;
                                modelprint.remark = _p055.Remark;




                            }


                            // return RedirectToAction("Print_Page_P055", "Request", modelprint);
                            return View("Print_Page_P055", modelprint);
                            #endregion P055
                        }
                        //vyas
                        else if (modelprint.wf_type == "P041")
                        {

                            #region P041
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            //var _p041 = _entity.tb_TA_Child_Birth_Leave.Where(x => x.RequestId.ToString() == reqid && x.IsActive).FirstOrDefault();
                            var _p041 = _entity.tb_TA_Child_Birth_Leave.Where(x => x.RequestId.ToString() == reqid && x.IsActive == true).OrderByDescending(x => x.TimeStamp).FirstOrDefault();

                            modelprint.reason = _p041.Reasons;
                            modelprint.remarks = _p041.Remark;
                            modelprint.is_compliance = _p041.Is_Compliance_Approval;

                            if (_p041.Is_Compliance_Approval == true)

                            {
                                var stringDate = _p041.Compliance_Approval_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                modelprint.compliance_approval_date = xx;

                            }
                            else
                            {

                                modelprint.compliance_approval_date = "";
                            }
                            var stringDate1 = _p041.Last_Day_Of_Work.ToString();
                            var xx1 = Convert.ToDateTime(stringDate1).ToString("yyyy-MM-dd");

                            modelprint.Last_dayof_work = xx1;
                            var stringDate2 = _p041.Return_To_Duty.ToString();
                            var xx2 = Convert.ToDateTime(stringDate2).ToString("yyyy-MM-dd");
                            modelprint.Return_to_duty = xx2;
                            modelprint.is_workflow_delegated = _p041.IsDelegated;
                            if (_p041.IsDelegated == true)
                            {
                                modelprint.justification_provided = "";

                            }
                            else
                            {

                                modelprint.justification_provided = _p041.Just_No_Delegated;
                            }

                            modelprint.address_during_absence = _p041.Address_During_Absence;
                            modelprint.Contact_number = _p041.Telephone_No;
                            modelprint.Child_Birth_Leave = Convert.ToInt32(_p041.Business_Days);
                            modelprint.Saturday = Convert.ToInt32(_p041.Saturday);
                            modelprint.Friday = Convert.ToInt32(_p041.Friday);
                            modelprint.Total = Convert.ToInt32(_p041.Total);




                            return View("Print_Page_P041", modelprint);
                            #endregion P041
                        }
                        // 15/05/2020 ALENA SICS
                        else if (modelprint.wf_type == "P052")
                        {
                            #region P052
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p052 = _entity.tb_PP_EOSB_Calculation.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.payment_mode = _p052.PaymentMode;
                            if (_p052.PaymentMode == "C")
                            {
                                if (_p052.ChequeDate != null)
                                {
                                    try
                                    {
                                        var stringDate = _p052.ChequeDate.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p052.ChequeDate.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "C";
                                modelprint.amount_sar = _p052.Amount_SAR;
                                modelprint.payable_to = _p052.Cheque_Payable;
                                modelprint.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
                                modelprint.purpose_text = _p052.Purpose_Text;
                                modelprint.remark = _p052.Remark;
                                modelprint.attachment_filepath = _p052.Attachment_Filepath;
                            }
                            else
                            {
                                modelprint.amount_sar = _p052.Amount_SAR;
                                modelprint.payment_mode = "B";
                                modelprint.endofservice = Convert.ToInt64(_p052.EndofServicePayment);
                                modelprint.from_bank = _p052.From_Bank;
                                modelprint.from_addreess = _p052.From_Address;
                                modelprint.from_account_no = _p052.From_AccountNo;
                                modelprint.to_beneficiary = _p052.To_Beneficiary;
                                modelprint.to_bankname = _p052.To_BankName;
                                modelprint.to_address = _p052.To_Address;
                                modelprint.to_account_no = _p052.To_AccountNo;
                                modelprint.to_iban = _p052.To_IBAN;
                                modelprint.purpose_text = _p052.Purpose_Text;
                                modelprint.remark = _p052.Remark;
                                modelprint.attachment_filepath = _p052.Attachment_Filepath;

                            }
                            // 23/05/2020 Alena Sics
                            //return RedirectToAction("Print_Page_P052", "Request", modelprint);
                            return View("Print_Page_P052", modelprint);
                            #endregion P052
                        }
                        else if (modelprint.wf_type == "A008")// 25/06/2020 ALENA SICS FOR A008
                        {
                            #region A008
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _A008 = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            modelprint.cost_center = Convert.ToString(_A008.Cost_Center);
                            modelprint.emp_name = Convert.ToString(_A008.Employee_Name);
                            modelprint.pickup_at = Convert.ToString(_A008.Pick_up);
                            modelprint.date = Convert.ToString(_A008.Pickup_Date);
                            modelprint.time = Convert.ToString(_A008.Pickup_Time);
                            modelprint.remarks = Convert.ToString(_A008.Remarks);
                            /*------ for administartion 06/07/2020 ALENA SICS----- */
                            modelprint.quantity = Convert.ToString(_A008.quantity);
                            modelprint.drivername = _A008.driver_name;
                            modelprint.Mobile_No = _A008.driver_mobile;
                            modelprint.Employee_id = _A008.driver_emp_id;
                            modelprint.carmodel = _A008.car_model;
                            /*---------------------- END---------------------------------- */
                            return View("Print_Page_A008", modelprint);
                            #endregion A008
                        }
                        else if (modelprint.wf_type == "A009")// 01/07/2020 ALENA SICS FOR A009
                        {
                            #region A009
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _A009 = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            modelprint.cost_center = Convert.ToString(_A009.Cost_Center);
                            modelprint.emp_name = Convert.ToString(_A009.Employee_Name);
                            modelprint.drop_at = Convert.ToString(_A009.Drop_at);
                            modelprint.date = Convert.ToString(_A009.Drop_Date);
                            modelprint.time = Convert.ToString(_A009.Drop_Time);
                            modelprint.remarks = Convert.ToString(_A009.Remarks);
                            /*------ for administartion 06/07/2020 ALENA SICS----- */
                            modelprint.quantity_drop = Convert.ToString(_A009.quantity);
                            modelprint.drivername_drop = _A009.driver_name;
                            modelprint.Mobile_No_drop = _A009.driver_mobile;
                            modelprint.Employee_id_drop = _A009.driver_emp_id;
                            modelprint.carmodel_drop = _A009.car_model;
                            /*---------------------- END---------------------------------- */
                            return View("Print_Page_A009", modelprint);
                            #endregion A009
                        }
                        else if (modelprint.wf_type == "P056")   /*NIMMI MOHAN*/
                        {
                            #region P056
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p056 = _entity.tb_PP_RelocationAllowance.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.payment_mode = _p056.PaymentMode;
                            if (_p056.PaymentMode == "C")
                            {
                                if (_p056.Cheque_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p056.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p056.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "Cheque";
                                modelprint.amount_sar = _p056.Amount_SAR;
                                modelprint.purpose_text = _p056.Purpose_Text;
                                modelprint.payable_to = _p056.Cheque_Payable;
                                modelprint.remark = _p056.Remark;
                                modelprint.attachment_filepath = _p056.Attachment_Filepath;
                            }
                            else
                            {
                                modelprint.amount_sar = _p056.Amount_SAR;
                                modelprint.payment_mode = "Bank Transfer";
                                modelprint.from_bank = _p056.From_Bank;
                                modelprint.from_addreess = _p056.From_Address;
                                modelprint.from_account_no = _p056.From_AccountNo;
                                modelprint.to_beneficiary = _p056.To_Benificiary;
                                modelprint.to_bankname = _p056.To_BankName;
                                modelprint.to_address = _p056.To_Address;
                                modelprint.to_account_no = _p056.To_AccountNo;
                                modelprint.to_iban = _p056.To_IBAN;
                                modelprint.bank_attachment = _p056.Bank_Attachment;
                                modelprint.attachment_filepath = _p056.Attachment_Filepath;
                                modelprint.purpose_text = _p056.Purpose_Text;
                                modelprint.remark = _p056.Remark;


                            }


                            // return RedirectToAction("Print_Page_P056", "Request", modelprint);
                            return View("Print_Page_P056", modelprint);
                            #endregion P056
                        }


                        else if (modelprint.wf_type == "P050")  /*NIMMI MOHAN*/
                        {
                            #region P050
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p050 = _entity.tb_PP_SettlingAllowancePayment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.payment_mode = _p050.PaymentMode;
                            if (_p050.PaymentMode == "C")
                            {
                                if (_p050.Cheque_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p050.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p050.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "Cheque";
                                modelprint.amount_sar = _p050.Amount_SAR;
                                modelprint.purpose_text = _p050.Purpose_Text;
                                modelprint.remark = _p050.Remark;
                                modelprint.payable_to = _p050.Cheque_Payable;
                                modelprint.attachment_filepath = _p050.Attachment_Filepath;
                            }
                            else
                            {
                                modelprint.amount_sar = _p050.Amount_SAR;
                                modelprint.payment_mode = "Bank Transfer";
                                modelprint.from_bank = _p050.From_Bank;
                                modelprint.from_addreess = _p050.From_Address;
                                modelprint.from_account_no = _p050.From_AccountNo;
                                modelprint.to_beneficiary = _p050.To_Benificiary;
                                modelprint.to_bankname = _p050.To_BankName;
                                modelprint.to_address = _p050.To_Address;
                                modelprint.to_account_no = _p050.To_AccountNo;
                                modelprint.to_iban = _p050.To_IBAN;
                                modelprint.bank_attachment = _p050.Bank_Attachment;
                                modelprint.attachment_filepath = _p050.Attachment_Filepath;
                                modelprint.purpose_text = _p050.Purpose_Text;
                                modelprint.remark = _p050.Remark;


                            }


                            // return RedirectToAction("Print_Page_P050", "Request", modelprint);
                            return View("Print_Page_P050", modelprint);
                            #endregion P050
                        }


                        else if (modelprint.wf_type == "P051")  /*NIMMI MOHAN*/
                        {
                            #region P051
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p051 = _entity.tb_PP_SalaryAdvance_NewArrival.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.payment_mode = _p051.PaymentMode;
                            if (_p051.PaymentMode == "C")
                            {
                                if (_p051.Cheque_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p051.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p051.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "Cheque";
                                modelprint.amount_sar = _p051.Amount_SAR;
                                modelprint.purpose_text = _p051.Purpose_Text;
                                modelprint.remark = _p051.Remark;
                                modelprint.payable_to = _p051.Cheque_Payable;
                                modelprint.attachment_filepath = _p051.Attachment_Filepath;
                            }
                            else
                            {
                                modelprint.amount_sar = _p051.Amount_SAR;
                                modelprint.payment_mode = "Bank Transfer";
                                modelprint.from_bank = _p051.From_Bank;
                                modelprint.from_addreess = _p051.From_Address;
                                modelprint.from_account_no = _p051.From_AccountNo;
                                modelprint.to_beneficiary = _p051.To_Benificiary;
                                modelprint.to_bankname = _p051.To_BankName;
                                modelprint.to_address = _p051.To_Address;
                                modelprint.to_account_no = _p051.To_AccountNo;
                                modelprint.to_iban = _p051.To_IBAN;
                                modelprint.bank_attachment = _p051.Bank_Attachment;
                                modelprint.attachment_filepath = _p051.Attachment_Filepath;
                                modelprint.purpose_text = _p051.Purpose_Text;
                                modelprint.remark = _p051.Remark;


                            }


                            //return RedirectToAction("Print_Page_P051", "Request", modelprint);
                            return View("Print_Page_P051", modelprint);
                            #endregion P051
                        }


                        else if (modelprint.wf_type == "P010")  /*NIMMI MOHAN*/
                        {
                            #region P010
                            var model1 = new HRPaymentrequest();
                            string reqid = splitData[1];
                            model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            model1.local_id = requestprint.Employee_ID;
                            var _p010 = _entity.tb_PP_NonHR_RelatedPayment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            model1.contract_local_no = _p010.Contract_Local_No;
                            model1.back_invoice_no = _p010.BCharge_Invoice;
                            model1.project = _p010.Project;
                            model1.year_booked = _p010.Year_booked;
                            model1.customer = _p010.Customer;
                            model1.PaymentMode = _p010.PaymentMode;
                            if (_p010.PaymentMode == "C")
                            {
                                if (_p010.Cheque_Date != null)
                                {
                                    #region 
                                    try
                                    {
                                        var stringDate = _p010.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        model1.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p010.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        model1.cheque_date_string = xx;
                                    }
                                    #endregion
                                }
                                model1.table_Id = _p010.Id;
                                model1.RequestId = _p010.RequestId;
                                model1.PaymentMode = "Cheque";
                                model1.Amount_SAR = _p010.Amount_SAR ?? 0;
                                model1.Currency = _p010.Currency;
                                model1.Account_No = _p010.Account_No;
                                model1.PurposeText = _p010.Purpose_Text;
                                model1.supplier = _p010.Supplier;
                                model1.Payable_To = _p010.Payable_To;
                                model1.File_Attachment = _p010.File_Attachment;
                                model1.Remark = _p010.Remark;
                            }
                            else
                            {
                                model1.table_Id = _p010.Id;
                                model1.RequestId = _p010.RequestId;
                                model1.PaymentMode = "Bank Transfer";
                                model1.Amount_SAR = _p010.Amount_SAR ?? 0;
                                model1.Currency = _p010.Currency;
                                model1.From_BankName = _p010.From_BankName;
                                model1.From_Address = _p010.From_Address;
                                model1.From_Account_No = _p010.From_Account_No;
                                model1.To_Benificiary = _p010.To_Benificiary;
                                model1.To_BankName = _p010.To_BankName;
                                model1.To_Address = _p010.To_Address;
                                model1.To_Account_No = _p010.To_Account_No;
                                model1.To_IBAN = _p010.To_IBAN;
                                model1.PurposeText = _p010.Purpose_Text;
                                model1.Remark = _p010.Remark;

                            }
                            return View("Print_Page_P010", model1);
                            //return RedirectToAction("Print_Page_P010", "Request", model1);
                            #endregion P010
                        }


                        else if (modelprint.wf_type == "P009")  /*NIMMI MOHAN*/
                        {
                            #region P009
                            var model1 = new HRPaymentrequest();
                            string reqid = splitData[1];
                            model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            model1.local_id = requestprint.Employee_ID;
                            var _p009 = _entity.tb_PP_HR_RelatedPayment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            model1.PaymentMode = _p009.PaymentMode;
                            if (_p009.PaymentMode == "C")
                            {
                                if (_p009.Cheque_Date != null)
                                {
                                    #region 
                                    try
                                    {
                                        var stringDate = _p009.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        model1.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p009.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        model1.cheque_date_string = xx;
                                    }
                                    #endregion
                                }
                                model1.table_Id = _p009.Id;
                                model1.RequestId = _p009.RequestId;
                                model1.PaymentMode = "Cheque";
                                model1.Amount_SAR = _p009.Amount_SAR;
                                model1.Currency = _p009.Currency;
                                model1.Account_No = _p009.Account_No;
                                model1.PurposeText = _p009.PurposeText;
                                model1.supplier = _p009.supplier;
                                model1.Payable_To = _p009.Payable_To;
                                model1.File_Attachment = _p009.File_Attachment;
                                model1.Remark = _p009.Remark;
                            }
                            else
                            {
                                model1.table_Id = _p009.Id;
                                model1.RequestId = _p009.RequestId;
                                model1.PaymentMode = "Bank Transfer";
                                model1.Amount_SAR = _p009.Amount_SAR;
                                model1.Currency = _p009.Currency;
                                model1.From_BankName = _p009.From_BankName;
                                model1.From_Address = _p009.From_Address;
                                model1.From_Account_No = _p009.From_Account_No;
                                model1.To_Benificiary = _p009.To_Benificiary;
                                model1.To_BankName = _p009.To_BankName;
                                model1.To_Address = _p009.To_Address;
                                model1.To_Account_No = _p009.To_Account_No;
                                model1.To_IBAN = _p009.To_IBAN;
                                model1.PurposeText = _p009.PurposeText;
                                model1.Remark = _p009.Remark;


                            }
                            return View("Print_Page_P009", model1);
                            // return RedirectToAction("Print_Page_P009", "Request", model1);
                            #endregion P009

                        }


                        else if (modelprint.wf_type == "P011")     /*14-03-2020 NIMMI MOHAN*/
                        {
                            #region P011
                            var model1 = new IntroductionCertificateModel();
                            string reqid = splitData[1];
                            model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            model1.local_id = requestprint.Employee_ID;
                            var _P011 = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_P011 != null)
                            {

                                model1.RequestId = _P011.RequestId;
                                model1.LocalEmplyee_ID = _P011.LocalEmplyee_ID;
                                model1.Iqama_Number = _P011.Iqama_Number;
                                model1.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P011.Location_Code).Select(x => x.Location).FirstOrDefault();
                                model1.Iqama_Identification = _P011.Iqama_Identification;
                                model1.Attachment_Filepath = _P011.Attachment_Filepath;
                                model1.TimeStamp = _P011.TimeStamp;

                                if (_P011.Certificate_with_Salary == 1)
                                {
                                    model1.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
                                }
                                else if (_P011.Certificate_with_Salary == 0)
                                {
                                    model1.Certificate_with_Salary_String = BooleanValue.No.ToString();
                                }

                                if (_P011.Chamber_Of_Commerce_Stamp == 1)
                                {
                                    model1.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
                                }
                                else if (_P011.Chamber_Of_Commerce_Stamp == 0)
                                {
                                    model1.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
                                }

                                if (_P011.Ministry_Of_Foreign_Affairs == 1)
                                {
                                    model1.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
                                }
                                else if (_P011.Ministry_Of_Foreign_Affairs == 0)
                                {
                                    model1.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
                                }
                            }


                            return View("Print_Page_P011", model1);
                            // return RedirectToAction("Print_Page_P011", "Request", model1);
                            #endregion P011

                        }



                        else if (modelprint.wf_type == "P012")     /*23-03-2020 NIMMI MOHAN*/
                        {
                            #region P012
                            var model1 = new LetterToRealEstateModel();
                            string reqid = splitData[1];
                            model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            model1.local_id = requestprint.Employee_ID;
                            var _P012 = _entity.tb_PP_Letter_To_RealEstate.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_P012 != null)
                            {

                                model1.RequestId = _P012.RequestId;
                                model1.LocalEmplyee_ID = _P012.LocalEmplyee_ID;
                                model1.Iqama_Number = _P012.Iqama_Number;
                                model1.Location_Name = _entity.tb_Location.Where(x => x.Location_Code == _P012.Location_Code).Select(x => x.Location).FirstOrDefault();
                                model1.Iqama_Identification = _P012.Iqama_Identification;
                                model1.Attachment_Filepath = _P012.Attachment_Filepath;
                                model1.TimeStamp = _P012.TimeStamp;

                                if (_P012.Certificate_with_Salary == 1)
                                {
                                    model1.Certificate_with_Salary_String = BooleanValue.Yes.ToString();
                                }
                                else if (_P012.Certificate_with_Salary == 0)
                                {
                                    model1.Certificate_with_Salary_String = BooleanValue.No.ToString();
                                }

                                if (_P012.Chamber_Of_Commerce_Stamp == 1)
                                {
                                    model1.Chamber_Of_Commerce_Stamp_String = BooleanValue.Yes.ToString();
                                }
                                else if (_P012.Chamber_Of_Commerce_Stamp == 0)
                                {
                                    model1.Chamber_Of_Commerce_Stamp_String = BooleanValue.No.ToString();
                                }

                                if (_P012.Ministry_Of_Foreign_Affairs == 1)
                                {
                                    model1.Ministry_Of_Foreign_Affairs_String = BooleanValue.Yes.ToString();
                                }
                                else if (_P012.Ministry_Of_Foreign_Affairs == 0)
                                {
                                    model1.Ministry_Of_Foreign_Affairs_String = BooleanValue.No.ToString();
                                }
                            }


                            return View("Print_Page_P012", model1);
                            //return RedirectToAction("Print_Page_P012", "Request", model1);
                            #endregion P012

                        }

                        else if (modelprint.wf_type == "P054")    /*24-03-2020 NIMMI MOHAN*/
                        {
                            #region P054
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p054 = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.payment_mode = _p054.PaymentMode;
                            if (_p054.PaymentMode == "C")
                            {
                                if (_p054.Cheque_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p054.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p054.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "Cheque";
                                modelprint.amount_sar = _p054.Amount_SAR;
                                modelprint.purpose_text = _p054.Purpose_Text;
                                modelprint.remark = _p054.Remark;
                                modelprint.payable_to = _p054.Cheque_Payable;
                                modelprint.attachment_filepath = _p054.Attachment_Filepath;
                            }
                            else
                            {
                                modelprint.amount_sar = _p054.Amount_SAR;
                                modelprint.payment_mode = "Bank Transfer";
                                modelprint.from_bank = _p054.From_Bank;
                                modelprint.from_addreess = _p054.From_Address;
                                modelprint.from_account_no = _p054.From_AccountNo;
                                modelprint.to_beneficiary = _p054.To_Benificiary;
                                modelprint.to_bankname = _p054.To_BankName;
                                modelprint.to_address = _p054.To_Address;
                                modelprint.to_account_no = _p054.To_AccountNo;
                                modelprint.to_iban = _p054.To_IBAN;
                                modelprint.bank_attachment = _p054.Bank_Attachment;
                                modelprint.attachment_filepath = _p054.Attachment_Filepath;
                                modelprint.purpose_text = _p054.Purpose_Text;
                                modelprint.remark = _p054.Remark;




                            }


                            // return RedirectToAction("Print_Page_P054", "Request", modelprint);
                            return View("Print_Page_P054", modelprint);
                            #endregion P054
                        }


                        else if (modelprint.wf_type == "P023")    /*25-03-2020 NIMMI MOHAN*/
                        {
                            #region P023
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p023 = _entity.tb_PP_Carloan_Request.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            if (_p023 != null)
                            {
                                modelprint.reason = _p023.Reason;
                                modelprint.employee_grade = Convert.ToInt32(_p023.Employee_Grade);
                                modelprint.joining_date = Convert.ToDateTime(_p023.Joining_Date);
                                modelprint.att_quotation_filepath = _p023.Att_Quotation_Filepath;
                                modelprint.car_cost_reimbursement = Convert.ToDecimal(_p023.Car_Cost_Reimbursement);
                                modelprint.first_loan = _p023.First_Loan;
                                modelprint.subsequent_loan = _p023.Subsequent_Loan;
                                modelprint.car_quotation_amount = Convert.ToDecimal(_p023.Car_Quotation_Amount);
                                modelprint.maximum_entitlement = Convert.ToDecimal(_p023.Maximum_Entitlement);
                                modelprint.monthly_installment = Convert.ToDecimal(_p023.Monthly_Installment);
                                modelprint.effective_date = Convert.ToDateTime(_p023.Effective_Date);
                                modelprint.attachment_filepath = _p023.Attachment_Filepath;


                                //05-01-2020 Nimmi
                                if (_p023.Joining_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p023.Joining_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.joining_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p023.Joining_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.joining_date_string = xx;
                                    }
                                }

                                if (_p023.Effective_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p023.Effective_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.effective_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p023.Effective_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.effective_date_string = xx;
                                    }
                                }

                            }




                            return View("Print_Page_P023", modelprint);
                            #endregion P023
                        }
                        else if (modelprint.wf_type == "P099")    /*27-03-2020 NIMMI MOHAN*/
                        {
                            #region P099
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p099 = _entity.tb_PP_CarLoanPayment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.payment_mode = _p099.PaymentMode;
                            if (_p099.PaymentMode == "C")
                            {
                                if (_p099.Cheque_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p099.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p099.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "Cheque";
                                modelprint.amount_sar = _p099.Amount_SAR;
                                modelprint.purpose_text = _p099.Purpose_Text;
                                modelprint.payable_to = _p099.Cheque_Payable;
                                modelprint.carloanrequest_number = _p099.Carloan_Request_No;
                                modelprint.attachment_filepath = _p099.Attachment_Filepath;
                                modelprint.cheque_account_no = _p099.Account_No;
                                modelprint.supplier_to = _p099.supplier;
                                modelprint.currenctType = _p099.Currency;
                                modelprint.remark = _p099.Remark;

                            }
                            else
                            {
                                modelprint.amount_sar = _p099.Amount_SAR;
                                modelprint.payment_mode = "Bank Transfer";
                                modelprint.from_bank = _p099.From_Bank;
                                modelprint.from_addreess = _p099.From_Address;
                                modelprint.from_account_no = _p099.From_AccountNo;
                                modelprint.to_beneficiary = _p099.To_Benificiary;
                                modelprint.to_bankname = _p099.To_BankName;
                                modelprint.to_address = _p099.To_Address;
                                modelprint.to_account_no = _p099.To_AccountNo;
                                modelprint.carloanrequest_number = _p099.Carloan_Request_No;
                                modelprint.bank_attachment = _p099.Bank_Attachment;
                                modelprint.attachment_filepath = _p099.Attachment_Filepath;
                                modelprint.remark = _p099.Remark;
                                modelprint.currenctType = _p099.Currency;
                                modelprint.purpose_text = _p099.Purpose_Text;
                                modelprint.to_iban = _p099.To_IBAN;

                            }

                            return View("Print_Page_P099", modelprint);  /*05-05-2020 Nimmi*/
                            //return RedirectToAction("Print_Page_P099", "Request", modelprint);
                            #endregion P099
                        }


                        else if (modelprint.wf_type == "A007")//A007-Accommodation in Hotel/Compound(Preema)
                        {
                            #region A007
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _A007 = _entity.tb_AO_Accommodation.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            modelprint.accommodation_type = Convert.ToString(_A007.Accommodation_Type);
                            modelprint.hotel_name = Convert.ToString(_A007.Hotel_Name);
                            modelprint.hotel_location = Convert.ToString(_A007.Hotel_Location);
                            modelprint.room_type = Convert.ToString(_A007.Room_Type);
                            modelprint.room_preference = Convert.ToString(_A007.Room_Preference);
                            modelprint.no_of_room = Convert.ToString(_A007.No_of_Rooms);
                            modelprint.hotel_address = Convert.ToString(_A007.Hotel_Address);
                            modelprint.contact_person = Convert.ToString(_A007.Contact_Person);
                            modelprint.fax = Convert.ToString(_A007.Fax);
                            modelprint.approaximate_date = Convert.ToDateTime(_A007.Approximate_Date);
                            modelprint.approaximate_time = Convert.ToDateTime(_A007.Approximate_Time);
                            modelprint.payment_mode = Convert.ToString(_A007.Payment_Type);
                            modelprint.from_period = Convert.ToDateTime(_A007.From_Period);
                            modelprint.to_period = Convert.ToDateTime(_A007.To_Period);
                            modelprint.remarks = Convert.ToString(_A007.Remarks);

                            List<tb_AO_Accommodation_Guest_Details> guest = new List<tb_AO_Accommodation_Guest_Details>();
                            guest = _A007.tb_AO_Accommodation_Guest_Details.ToList();

                            for (int i = 0; i < guest.Count; i++)
                            {
                                modelprint.guest.Add(guest[i].Guest_Name.ToString());
                            }

                            return View("Print_Page_A007", modelprint);

                            #endregion A007
                        }
                        else if (modelprint.wf_type == "P049")  //P049-Other Personnel Services(Preema)
                        {
                            #region P049               
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p049 = _entity.tb_PP_Other_Personnel_Services.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.request_details = _p049.Request_Details;
                            modelprint.document_price = _p049.document_price;
                            modelprint.is_hr_department = true;
                            #region common_attachments
                            if (modelprint._FileListPrint != null && modelprint._FileListPrint.Count > 0)
                            {
                                var fillistprint = modelprint._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }
                            #endregion

                            return View("Print_Page_P049", modelprint);

                            #endregion P049
                        }

                        else if (modelprint.wf_type == "P061")//P061-ESAP Contribution(Preema)
                        {
                            #region P061

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _P061 = _entity.tb_PP_ESAP_Contribution.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            ESAP_ContributionModel esap = new ESAP_ContributionModel();
                            esap.For_the_Period_of = _P061.For_the_Period_of;
                            esap.Remarks = _P061.Remarks;
                            esap.Grand_Total = Convert.ToDecimal(_P061.Grand_Total);
                            esap.Note = _P061.Note;

                            modelprint.ESAP_Contribution = esap;

                            List<tb_PP_ESAP_Company> Company = new List<tb_PP_ESAP_Company>();
                            Company = _P061.tb_PP_ESAP_Company.ToList();

                            for (int i = 0; i < Company.Count; i++)
                            {
                                modelprint.ESAP_Contribution.lstCompanyId.Add(Company[i].Company_Id.ToString());
                                long CId = Convert.ToInt64(Company[i].Company_Id);
                                var name = _entity.tb_Company.Where(x => x.Company_Id == CId && x.IsActive == true).FirstOrDefault();

                                modelprint.ESAP_Contribution.lstCompanyName.Add(name.Company_Name);

                                modelprint.ESAP_Contribution.lstPayrollCode.Add(Company[i].tb_Company.Payroll_code.ToString());
                                modelprint.ESAP_Contribution.lstTotal.Add(Company[i].Total_Amount_in_USD.ToString());
                            }



                            #region common_attachments


                            if (esap._FileListPrint != null && esap._FileListPrint.Count > 0)
                            {
                                var fillistprint = esap._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }



                            #endregion
                            return View("Print_Page_P061", modelprint);

                            #endregion P061

                        }
                        else if (modelprint.wf_type == "P060")  //------Terrin on 31/3/2020
                        {
                            #region P060
                            var model1 = new Applicationfor_mobile();
                            string reqid = splitData[1];
                            //model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            //model1.emp_local_id = requestprint.Employee_ID;
                            model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            model1.local_id = requestprint.Employee_ID;
                            //var _P011 = _entity.tb_PP_Introduction_Certificate.Where(x => x.RequestId == model.req_id_only && x.IsActive).FirstOrDefault();
                            var _P060 = _entity.tb_PP_Mobile_Allowance.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_P060 != null)
                            {

                                // model1.RequestId = _P060.RequestId;
                                model1.Allowance_per_group = _P060.Allowancepergrp;
                                model1.Remarks = _P060.Remarks;
                                model1.Justification = _P060.Justification;
                                model1.Allowance_Date = _P060.Allowance_Date;
                                model1.Remarks = _P060.Remarks;
                                model1.TimeStamp = _P060.TimeStamp;

                            }


                            //return RedirectToAction("Print_Page_P060", "Request", model1);
                            return View("Print_Page_P060", model1);
                            #endregion P060
                        }

                        else if (modelprint.wf_type == "P057")   //-----Terrin on 25/3/20 P057
                        {
                            #region P057
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p057 = _entity.tb_PP_SalaryforEmployeeUnderIqamaprocessPayment.Where(x => x.RequestId == reqid && x.IsActive).FirstOrDefault();
                            modelprint.payment_mode = _p057.PaymentMode;
                            if (_p057.PaymentMode == "C")
                            {
                                if (_p057.Cheque_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p057.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p057.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "Cheque";
                                modelprint.amount_sar = _p057.Amount_SAR;
                                modelprint.purpose_text = _p057.Purpose_Text;
                                modelprint.remark = _p057.Remark;
                                modelprint.payable_to = _p057.Cheque_Payable;
                                modelprint.attachment_filepath = _p057.Attachment_Filepath;
                            }
                            else
                            {
                                modelprint.payment_mode = "Bank Transfer";
                                modelprint.amount_sar = _p057.Amount_SAR;
                                modelprint.from_bank = _p057.From_Bank;
                                modelprint.from_addreess = _p057.From_Address;
                                modelprint.from_account_no = _p057.From_AccountNo;
                                modelprint.to_beneficiary = _p057.To_Benificiary;
                                modelprint.to_bankname = _p057.To_BankName;
                                modelprint.to_address = _p057.To_Address;
                                modelprint.to_account_no = _p057.To_AccountNo;
                                modelprint.to_iban = _p057.To_IBAN;
                                modelprint.bank_attachment = _p057.Bank_Attachment;
                                modelprint.attachment_filepath = _p057.Attachment_Filepath;
                                modelprint.purpose_text = _p057.Purpose_Text;
                                modelprint.remark = _p057.Remark;
                                #region Bank_attachments
                                if (modelprint._FileListPrint != null && modelprint._FileListPrint.Count > 0)
                                {
                                    var fillistprint = modelprint._FileListPrint.Where(x => x.filebatch == 2).ToList();
                                    if (fillistprint.Count > 0)
                                    {
                                        foreach (var item in fillistprint)
                                        {
                                            var datas = _entity.tb_ReqestAttachments.Create();
                                            datas.fil_path = item.filepath;
                                            datas.fil_name = item.filename;
                                            datas.filebatch = item.filebatch;
                                            datas.IsActive = true;
                                            datas.TimeStamp = CurrentTime;
                                        }
                                    }
                                }


                                #endregion
                            }

                            #region common_attachments


                            if (modelprint._FileListPrint != null && modelprint._FileListPrint.Count > 0)
                            {
                                var fillistprint = modelprint._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }


                            #endregion

                            //return RedirectToAction("Print_Page_P057", "Request", modelprint);
                            return View("Print_Page_P057", modelprint);
                            #endregion P057
                        }

                        else if (modelprint.wf_type == "P029")  //-----Terrin on 08/04/2020
                        {
                            #region P029
                            MedicalInsuranceApplication model_Med = new MedicalInsuranceApplication();
                            string reqid = splitData[1];
                            model_Med.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            model_Med.local_id = requestprint.Employee_ID;
                            var _P029 = _entity.tb_PP_Medical_Insurance.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            model_Med.App_Type = Convert.ToString(_P029.App_Type);
                            model_Med.Add_details = Convert.ToString(_P029.Add_details);
                            model_Med.Effective = Convert.ToDateTime(_P029.Effective);
                            model_Med.Date_Employee = Convert.ToDateTime(_P029.Date_Employee);
                            model_Med.Iqama_no = Convert.ToString(_P029.Iqama_no);
                            model_Med.MedIns_Remarks = Convert.ToString(_P029.Remarks);
                            //insert_pp_data.Attachment_File = model.Attachment_Filepath;

                            List<tb_PP_Medical_Insurance_Dependent> Insurancedependence = new List<tb_PP_Medical_Insurance_Dependent>();
                            Insurancedependence = _P029.tb_PP_Medical_Insurance_Dependent.ToList();
                            List<Insurance_dependence> Ins_dep = new List<Insurance_dependence>();


                            if (Insurancedependence != null && Insurancedependence.Count > 0)
                            {

                                foreach (var item in Insurancedependence)
                                {

                                    Insurance_dependence ins = new Insurance_dependence();
                                    ins.Name = item.Name;
                                    ins.Date_of_birth = Convert.ToDateTime(item.Date_of_birth);
                                    ins.Sex = item.Sex;
                                    ins.Relation = item.Relation;
                                    ins.Depend_class = item.Depend_class;
                                    //model_Med._Insurance_dependence.Add(ins);

                                    Ins_dep.Add(ins);
                                }

                            }
                            model_Med._Insurance_dependence = Ins_dep;
                            return View("Print_Page_P029", model_Med);

                            #endregion P029
                        }
                        else if (modelprint.wf_type == "P030")  //-----Chitra Srishti on 04.06.2020
                        {
                            #region P030
                            EducationalAssistanceModel model_Edu = new EducationalAssistanceModel();
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _P030 = _entity.tb_PP_Educational_Assistance.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            if (_P030 != null)
                            {
                                //submodel.RequestId = _P030.RequestId;
                                model_Edu.Employee_Group = _P030.Emp_GroupId;
                                model_Edu.Grand_Total = Convert.ToDecimal(_P030.Grand_Total);
                                model_Edu.Total_Entitlement = Convert.ToDecimal(_P030.Total_Entitlement);
                                model_Edu.Amount_Approved = Convert.ToDecimal(_P030.Amount_Approved);
                                model_Edu.Amount_Paid = Convert.ToDecimal(_P030.Amount_Paid);
                                model_Edu.Paid_Payroll = Convert.ToDecimal(_P030.Paid_Payroll);
                                model_Edu.Remarks = _P030.Remarks;

                            }


                            List<tb_PP_Educational_Assistance_Details> educationassistance = new List<tb_PP_Educational_Assistance_Details>();
                            educationassistance = _P030.tb_PP_Educational_Assistance_Details.ToList();
                            List<EducationalAssistanceModel> Edu_dep = new List<EducationalAssistanceModel>();


                            if (educationassistance != null && educationassistance.Count > 0)
                            {

                                foreach (var item in educationassistance)
                                {

                                    EducationalAssistanceModel ins = new EducationalAssistanceModel();
                                    ins.Child_Name = item.Child_Name;
                                    ins.Birth_Date = Convert.ToDateTime(item.Birth_Date);
                                    ins.School_Fees = Convert.ToDecimal(item.School_Fees);
                                    ins.Transport_Fees = Convert.ToDecimal(item.Transport_Fees);
                                    ins.Others = Convert.ToDecimal(item.Others);
                                    ins.Exchange_Rate = Convert.ToDecimal(item.Exchange_Rate);
                                    ins.Foreign_Currency = Convert.ToDecimal(item.Foreign_Currency);
                                    ins.From_Date = Convert.ToDateTime(item.From_Date);
                                    ins.To_Date = Convert.ToDateTime(item.To_Date);
                                    ins.Location_Id = Convert.ToInt32(item.Location_Id);
                                    var stringDate = item.Birth_Date.ToString();
                                    var xx = Convert.ToDateTime(item.Birth_Date.ToString()).ToString("yyyy-MM-dd");
                                    ins.Date_birth_string_date = xx;

                                    var stringFromDate = item.From_Date.ToString();
                                    var xxx = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                    ins.From_Date_string_date = xxx;

                                    var stringToDate = item.To_Date.ToString();
                                    var xxxx = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                    ins.To_Date_string_date = xxxx;

                                    Edu_dep.Add(ins);
                                }

                            }
                            modelprint._Education = Edu_dep;
                            modelprint.EducationalAssistanceModel = model_Edu;
                            return View("Print_Page_P030APR", modelprint);

                            #endregion P030
                        }
                        else if (modelprint.wf_type == "P003")  //-----Chitra Srishti on 16.06.2020
                        {
                            #region P003
                            TicketRefundModel model_Edu = new TicketRefundModel();
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _P003 = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_P003 != null)
                            {
                                model_Edu.TA_Request_No = _P003.TA_Request_No;
                                model_Edu.TicketNumber = _P003.Ticket_No;
                                model_Edu.TicketRouting = _P003.Ticket_Routing;
                                model_Edu.RequestDetails = _P003.Request_Details;

                            }

                            modelprint.TicketRefundModel = model_Edu;
                            return View("Print_Page_P003", modelprint);

                            #endregion P030
                        }
                        else if (modelprint.wf_type == "SAS01")  //-----Chitra Srishti on 25.06.2020
                        {
                            #region SAS01
                            BankGuaranteeModel model_Edu = new BankGuaranteeModel();
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _SAS01 = _entity.tb_SAS_Bank_Guarantee_Application.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_SAS01 != null)
                            {

                                model_Edu.RequestId = _SAS01.RequestId;
                                model_Edu.Company_Id = _SAS01.Company_Id;
                                model_Edu.Company_Name = _SAS01.tb_Company.Company_Name;
                                model_Edu.Guarantee_Type = Convert.ToInt32(_SAS01.Guarantee_Type);
                                model_Edu.BenfName = _SAS01.Benf_Name;
                                model_Edu.BenfAdress1 = _SAS01.Benf_Address1;
                                model_Edu.BenfAdress2 = _SAS01.Benf_Address2;
                                model_Edu.BenfTelephone = _SAS01.Benf_Telephone_No;
                                model_Edu.BenfFax = _SAS01.Benf_Fax_No;
                                model_Edu.Currency = _SAS01.Currency;
                                model_Edu.CurrencyValue = Convert.ToDecimal(_SAS01.Value);
                                model_Edu.Amount = _SAS01.Amount_Words;
                                model_Edu.ContractPercent = Convert.ToInt32(_SAS01.Contract_Percent);
                                model_Edu.ContractTotal = Convert.ToDecimal(_SAS01.Total_Contract);
                                model_Edu.From_Date = Convert.ToDateTime(_SAS01.From_Date);
                                model_Edu.To_Date = Convert.ToDateTime(_SAS01.To_Date);
                                model_Edu.Description = _SAS01.Description;
                                model_Edu.CustPONo = _SAS01.Cust_PO_No;
                                model_Edu.ABBQutnNo = _SAS01.ABB_Quotation_No;
                                model_Edu.WBSNo = _SAS01.WBS_No;
                                model_Edu.BL_Id = _SAS01.BL_Id;
                                model_Edu.BL_Code = _SAS01.tb_BusinessLine.BusinessLine_Code;
                                model_Edu.PG_Id = _SAS01.PG_Id;
                                model_Edu.PGNo = _SAS01.tb_ProductGroup.PG_Code;
                                model_Edu.CostCenter = _SAS01.Cost_Center;
                                model_Edu.Branch = _SAS01.Bank_Branch;
                                model_Edu.CollectorName = _SAS01.Collector_Name;
                                model_Edu.Remarks = _SAS01.Remarks;
                                model_Edu.GuaranteeNo = _SAS01.Guarantee_No;
                                model_Edu.Bank = _SAS01.Bank_Name;
                                model_Edu.AccountRemarks = _SAS01.Account_Remarks;
                                model_Edu.Comments = _SAS01.Comments;
                                var xxx = Convert.ToDateTime(_SAS01.From_Date.ToString()).ToString("yyyy-MM-dd");
                                model_Edu.From_Date_string_date = xxx;

                                var xxxx = Convert.ToDateTime(_SAS01.To_Date.ToString()).ToString("yyyy-MM-dd");
                                model_Edu.To_Date_string_date = xxxx;




                            }

                            modelprint.BankGuaranteeModel = model_Edu;
                            return View("Print_Page_SAS01APR", modelprint);

                            #endregion SAS01
                        }
                        //P062-Retirement Contribution(Preema)
                        else if (modelprint.wf_type == "P062")
                        {
                            #region P062

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _P062 = _entity.tb_PP_Retirement_Contribution.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            RetirementContributionModel retirement = new RetirementContributionModel();
                            retirement.For_the_Period_of = _P062.For_the_Period_of;
                            retirement.Remarks = _P062.Remarks;
                            retirement.Grand_Total = Convert.ToDecimal(_P062.Grand_Total);
                            retirement.Bank_Details = _P062.Bank_Details;

                            modelprint.RetirementContributionModel = retirement;

                            List<tb_PP_Retirement_Contribution_Company> Company = new List<tb_PP_Retirement_Contribution_Company>();
                            Company = _P062.tb_PP_Retirement_Contribution_Company.ToList();

                            for (int i = 0; i < Company.Count; i++)
                            {
                                modelprint.RetirementContributionModel.lstCompanyId.Add(Company[i].Company_Id.ToString());
                                long CId = Convert.ToInt64(Company[i].Company_Id);
                                var name = _entity.tb_Company.Where(x => x.Company_Id == CId && x.IsActive == true).FirstOrDefault();

                                modelprint.RetirementContributionModel.lstCompanyName.Add(name.Company_Name);

                                modelprint.RetirementContributionModel.lstPayrollCode.Add(Company[i].tb_Company.Payroll_code.ToString());
                                modelprint.RetirementContributionModel.lstTotal.Add(Company[i].Total_Amount_in_USD.ToString());
                            }



                            #region common_attachments


                            if (retirement._FileListPrint != null && retirement._FileListPrint.Count > 0)
                            {
                                var fillistprint = retirement._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }



                            #endregion
                            return View("Print_Page_P062", modelprint);

                            #endregion P062

                        }
                        //P053-GOSI Payment(Preema)
                        //P053-GOSI Payment(Preema)
                        else if (modelprint.wf_type == "P053")
                        {
                            #region P053
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p053 = _entity.tb_PP_GOSI_Payment.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            modelprint.payment_mode = _p053.PaymentMode;
                            if (_p053.PaymentMode == "C")
                            {
                                if (_p053.Cheque_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p053.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p053.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.cheque_date_string = xx;
                                    }
                                }
                                modelprint.payment_mode = "Cheque";
                                modelprint.amount_sar = Convert.ToDecimal(_p053.Amount_SAR);
                                modelprint.purpose_text = _p053.Purpose_Text;
                                modelprint.payable_to = _p053.Cheque_Payable;
                                modelprint.remark = _p053.Remark;

                            }
                            else
                            {
                                modelprint.amount_sar = Convert.ToDecimal(_p053.Amount_SAR);
                                modelprint.payment_mode = "Bank Transfer";
                                modelprint.from_bank = _p053.From_Bank;
                                modelprint.from_addreess = _p053.From_Address;
                                modelprint.from_account_no = _p053.From_AccountNo;
                                modelprint.to_beneficiary = _p053.To_Benificiary;
                                modelprint.to_bankname = _p053.To_BankName;
                                modelprint.to_address = _p053.To_Address;
                                modelprint.to_account_no = _p053.To_AccountNo;
                                modelprint.bank_attachment = _p053.Bank_Attachment;
                                modelprint.to_iban = _p053.To_IBAN;
                                modelprint.purpose_text = _p053.Purpose_Text;
                                modelprint.remark = _p053.Remark;

                                #region Bank_attachments
                                if (modelprint._FileListPrint != null && modelprint._FileListPrint.Count > 0)
                                {
                                    var fillistprint = modelprint._FileListPrint.Where(x => x.filebatch == 2).ToList();
                                    if (fillistprint.Count > 0)
                                    {
                                        foreach (var item in fillistprint)
                                        {
                                            var datas = _entity.tb_ReqestAttachments.Create();
                                            datas.fil_path = item.filepath;
                                            datas.fil_name = item.filename;
                                            datas.filebatch = item.filebatch;
                                            datas.IsActive = true;
                                            datas.TimeStamp = CurrentTime;
                                        }
                                    }
                                }


                                #endregion


                            }
                            #region common_attachments


                            if (modelprint._FileListPrint != null && modelprint._FileListPrint.Count > 0)
                            {
                                var fillistprint = modelprint._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }


                            #endregion

                            return View("Print_Page_P053", modelprint);

                            #endregion P053
                        }
                        //P024-Bank Loan Request(Preema)
                        else if (modelprint.wf_type == "P024")
                        {
                            #region P024

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p024 = _entity.tb_PP_Bank_Loan_Request.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            BankLoanRequestModel bank = new BankLoanRequestModel();

                            bank.Id = _p024.Id;
                            bank.RequestId = _p024.RequestId;
                            bank.TimeStamp = Convert.ToDateTime(_p024.TimeStamp);
                            bank.Bank_Name = _p024.Bank_Name;
                            bank.Account_No = _p024.Account_No;
                            bank.Loan_Amount = Convert.ToDecimal(_p024.Loan_Amount);
                            bank.Nationality = _p024.Nationality;

                            bank.Date_of_Hire = Convert.ToString(_p024.Date_of_Hire);
                            bank.Saudi_Id = _p024.Saudi_Id;
                            bank.Purpose = _p024.Purpose;

                            bank.End_of_Service_Benefit = _p024.End_of_Service_Benefit;
                            bank.As_of_Date = Convert.ToString(_p024.As_of_Date);

                            modelprint.BankLoanRequestModel = bank;

                            #region common_attachments


                            if (bank._FileListPrint != null && bank._FileListPrint.Count > 0)
                            {
                                var fillistprint = bank._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }



                            #endregion

                            return View("Print_Page_P024", modelprint);

                            #endregion P024

                        }
                        //P016-Internal Transfer(Preema)
                        else if (modelprint.wf_type == "P016")
                        {
                            #region P016

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];

                            ////Hide Entitlements
                            string canview = splitData[5];

                            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqid).FirstOrDefault();

                            var request_history = _entity.tb_Request_Hdr_History.Where(x => x.Request_ID == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();

                            modelprint.checkstatus = data.Status_ID;

                            if (data.Approver_ID != null)
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();

                                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();

                                var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();

                                tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);

                                if (temp != null)
                                {

                                    modelprint.level = Convert.ToInt32(temp.Sequence_NO);
                                    modelprint.my_process_code = temp.Status_ID;
                                    modelprint.my_role_code = role.Role_ID;

                                }

                            }

                            if (canview == "true")
                            {
                                var approver_status = _entity.tb_ApprovalLog.Where(x => x.RequestId == reqid && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();
                                modelprint.refresh_view = true;
                                if (request_history != null)
                                {
                                    modelprint.checkstatus = request_history.Status_ID;
                                    //data.Approver_ID == null && 
                                    if (request_history.Status_ID == "SUB" && data.Status_ID == "INT")
                                    {
                                        modelprint.checkstatus = "NEW";

                                    }
                                    else if (request_history.Status_ID == "INT" && request_history.Approval_No == "1" && approver_status.Status == "EDIT")
                                    {
                                        modelprint.checkstatus = "NEW";

                                    }
                                }
                            }
                            else
                            {
                                modelprint.refresh_view = false;
                                //if (request_history.Status_ID == "SUB")
                                //{
                                //    modelprint.checkstatus = "NEW";

                                //}                               
                            }

                            ////Hide Entitlements

                            var _p016 = _entity.SelectAllInternalTransfer_by_RequestId(reqid).FirstOrDefault();

                            InternalTransferModel internaltransfer = new InternalTransferModel();

                            internaltransfer.Id = _p016.Id;
                            internaltransfer.RequestId = _p016.RequestId;
                            internaltransfer.TimeStamp = Convert.ToDateTime(_p016.TimeStamp);

                            internaltransfer.Transfer_Type = _p016.Transfer_Type.Trim();

                            internaltransfer.Receiving_Manager_Id = _p016.Receiving_Manager;
                            internaltransfer.Receiving_Manager = _p016.Receiving_Manager_Name;

                            internaltransfer.Releasing_Manager_Id = _p016.Releasing_Manager;
                            internaltransfer.Releasing_Manager = _p016.Releasing_Manager_Name;

                            internaltransfer.Transfer_From = _p016.Transfer_From.Trim();
                            internaltransfer.Transfer_To = _p016.Transfer_To.Trim();
                            if (_p016.Effective_Date != null)
                            {
                                var stringDate = _p016.Effective_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                internaltransfer.Effective_Date = xx;
                            }

                            internaltransfer.From_Company_id = Convert.ToInt64(_p016.From_Company);
                            internaltransfer.From_Company = _p016.FromCompanyName;

                            internaltransfer.To_Company_Id = Convert.ToInt64(_p016.To_Company);
                            internaltransfer.To_Company = _p016.ToCompanyName != null ? _p016.ToCompanyName : "No Change";

                            internaltransfer.From_Business_Line_id = Convert.ToInt64(_p016.From_BusinessLine);
                            internaltransfer.From_Business_Line = _p016.FromBusinessLineName;

                            internaltransfer.To_Business_Line_Id = Convert.ToInt64(_p016.To_BusinessLine);
                            internaltransfer.To_Business_Line = _p016.ToBusinessLineName != null ? _p016.ToBusinessLineName : "No Change";

                            internaltransfer.From_Product_Group_id = Convert.ToInt64(_p016.From_ProductGroup);
                            internaltransfer.From_Product_Group = _p016.FromProduct;

                            internaltransfer.To_Product_Group_Id = Convert.ToInt64(_p016.To_Product_Group);
                            internaltransfer.To_Product_Group = _p016.ToProduct != null ? _p016.ToProduct : "No Change";

                            internaltransfer.From_Department_id = Convert.ToInt64(_p016.From_Department);
                            internaltransfer.From_Department = _p016.FromDepartmentName;

                            internaltransfer.To_Department_Id = Convert.ToInt64(_p016.To_Department);
                            internaltransfer.To_Department = _p016.ToDepartmentName != null ? _p016.ToDepartmentName : "No Change";

                            internaltransfer.From_Position_id = _p016.From_Position;
                            internaltransfer.From_Position = _p016.FromPositionName;

                            internaltransfer.To_Position_Id = _p016.To_Position;
                            internaltransfer.To_Position = _p016.ToPositionName != "" ? _p016.ToPositionName : "No Change";

                            internaltransfer.From_Global_Grade_id = _p016.From_Global_Grade;
                            internaltransfer.From_Global_Grade = _p016.From_Global_Grade;

                            internaltransfer.To_Global_Grade_Id = _p016.To_Global_Grade;
                            internaltransfer.To_Global_Grade = _p016.To_Global_Grade != null ? _p016.To_Global_Grade : "No Change";

                            internaltransfer.From_Local_Grade = _p016.From_Local_Grade;

                            internaltransfer.To_Local_Grade_Id = _p016.To_Local_Grade;
                            internaltransfer.To_Local_Grade = _p016.To_Local_Grade != null ? _p016.To_Local_Grade : "No Change";

                            internaltransfer.From_Cost_Center_id = Convert.ToInt64(_p016.From_Cost_Center);
                            internaltransfer.From_Cost_Center = _p016.FromCCName;

                            internaltransfer.To_Cost_Center_Id = Convert.ToInt64(_p016.To_Cost_Center);
                            internaltransfer.To_Cost_Center = _p016.ToCCName != null ? _p016.ToCCName : "No Change";

                            internaltransfer.From_status = _p016.From_Status;
                            internaltransfer.To_status = _p016.To_Status;

                            internaltransfer.From_Notice_Period = _p016.From_Notice_Period;
                            internaltransfer.To_Notice_Period = _p016.To_Notice_Period;

                            internaltransfer.From_Location_id = Convert.ToInt64(_p016.From_Location);
                            internaltransfer.From_Location = _p016.FromLocationName;

                            internaltransfer.To_Location_Id = Convert.ToInt64(_p016.To_Location);
                            internaltransfer.To_Location = _p016.ToLocationName != null ? _p016.ToLocationName : "No Change";

                            internaltransfer.From_Basic_Salary = _p016.From_BasicSalary;
                            internaltransfer.To_Basic_Salary = _p016.To_BasicSalary;

                            internaltransfer.From_Annual_Housing = _p016.From_AnnualHousing;
                            internaltransfer.To_Annual_Housing = _p016.To_AnnualHousing;

                            internaltransfer.From_Car_Cost = _p016.From_CarCost;
                            internaltransfer.To_Car_Cost = _p016.To_CarCost;

                            internaltransfer.From_Transport = _p016.From_Transport;
                            internaltransfer.To_Transport = _p016.To_Transport;

                            internaltransfer.From_Travel_Allowance = _p016.From_TravelHardshipAllowance;
                            internaltransfer.To_Travel_Allowance = _p016.To_TravelHardshipAllowance;

                            internaltransfer.From_Mobile_Allowance = _p016.From_MobileAllowance;
                            internaltransfer.To_Mobile_Allowance = _p016.To_MobileAllowance;


                            #region common_attachments


                            if (internaltransfer._FileListPrint != null && internaltransfer._FileListPrint.Count > 0)
                            {
                                var fillistprint = internaltransfer._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }



                            #endregion

                            modelprint.InternalTransferModel = internaltransfer;

                            return View("Print_Page_P016", modelprint);

                            #endregion P016

                        }

                        //P017-Contract Modification(Preema)
                        else if (modelprint.wf_type == "P017")
                        {
                            #region P017

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];

                            ////Hide Entitlements
                            string canview = splitData[5];

                            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqid).FirstOrDefault();

                            var request_history = _entity.tb_Request_Hdr_History.Where(x => x.Request_ID == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();

                            modelprint.checkstatus = data.Status_ID;

                            if (data.Approver_ID != null)
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();

                                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();

                                var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();

                                tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);

                                if (temp != null)
                                {

                                    modelprint.level = Convert.ToInt32(temp.Sequence_NO);
                                    modelprint.my_process_code = temp.Status_ID;
                                    modelprint.my_role_code = role.Role_ID;

                                }

                            }

                            if (canview == "true")
                            {
                                var approver_status = _entity.tb_ApprovalLog.Where(x => x.RequestId == reqid && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();
                                modelprint.refresh_view = true;
                                if (request_history != null)
                                {
                                    modelprint.checkstatus = request_history.Status_ID;
                                    //data.Approver_ID == null && 
                                    if (request_history.Status_ID == "SUB" && data.Status_ID == "INT")
                                    {
                                        modelprint.checkstatus = "NEW";

                                    }
                                    else if (request_history.Status_ID == "INT" && request_history.Approval_No == "1" && approver_status.Status == "EDIT")
                                    {
                                        modelprint.checkstatus = "NEW";

                                    }
                                }
                            }
                            else
                            {
                                modelprint.refresh_view = false;
                                //if (request_history.Status_ID == "SUB")
                                //{
                                //    modelprint.checkstatus = "NEW";

                                //}
                            }

                            //if (request_history != null && data.Approver_ID == null)
                            //{
                            //    if (request_history.Status_ID != "INT" && request_history.Approval_No !="1")
                            //    {
                            //        modelprint.checkstatus = "NEW";
                            //    }
                            //}

                            ////Hide Entitlements

                            var _p017 = _entity.SelectAllContractModification_by_RequestId(reqid).FirstOrDefault();

                            ContractModificationModel contractmodification = new ContractModificationModel();

                            contractmodification.Id = _p017.Id;
                            contractmodification.RequestId = _p017.RequestId;
                            contractmodification.TimeStamp = Convert.ToDateTime(_p017.TimeStamp);

                            contractmodification.Contract_Type = _p017.Contract_Type.Trim();

                            contractmodification.Releasing_Manager_Id = _p017.Releasing_Manager;
                            contractmodification.Releasing_Manager = _p017.Releasing_Manager_Name;

                            if (_p017.Effective_Date != null)
                            {
                                var stringDate = _p017.Effective_Date.ToString();
                                var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                contractmodification.Effective_Date = xx;
                            }

                            contractmodification.From_Company_id = Convert.ToInt64(_p017.From_Company);
                            contractmodification.From_Company = _p017.FromCompanyName;

                            contractmodification.To_Company_Id = Convert.ToInt64(_p017.To_Company);
                            contractmodification.To_Company = _p017.ToCompanyName != null ? _p017.ToCompanyName : "No Change";

                            contractmodification.From_Business_Line_id = Convert.ToInt64(_p017.From_BusinessLine);
                            contractmodification.From_Business_Line = _p017.FromBusinessLineName;

                            contractmodification.To_Business_Line_Id = Convert.ToInt64(_p017.To_BusinessLine);
                            contractmodification.To_Business_Line = _p017.ToBusinessLineName != null ? _p017.ToBusinessLineName : "No Change";

                            contractmodification.From_Product_Group_id = Convert.ToInt64(_p017.From_ProductGroup);
                            contractmodification.From_Product_Group = _p017.FromProduct;

                            contractmodification.To_Product_Group_Id = Convert.ToInt64(_p017.To_Product_Group);
                            contractmodification.To_Product_Group = _p017.ToProduct != null ? _p017.ToProduct : "No Change";

                            contractmodification.From_Department_id = Convert.ToInt64(_p017.From_Department);
                            contractmodification.From_Department = _p017.FromDepartmentName;

                            contractmodification.To_Department_Id = Convert.ToInt64(_p017.To_Department);
                            contractmodification.To_Department = _p017.ToDepartmentName != null ? _p017.ToDepartmentName : "No Change";

                            contractmodification.From_Position_id = _p017.From_Position;
                            contractmodification.From_Position = _p017.FromPositionName;

                            contractmodification.To_Position_Id = _p017.To_Position;
                            contractmodification.To_Position = _p017.ToPositionName != "" ? _p017.ToPositionName : "No Change";

                            contractmodification.From_Global_Grade_id = _p017.From_Global_Grade;
                            contractmodification.From_Global_Grade = _p017.From_Global_Grade;

                            contractmodification.To_Global_Grade_Id = _p017.To_Global_Grade;
                            contractmodification.To_Global_Grade = _p017.To_Global_Grade != null ? _p017.To_Global_Grade : "No Change";

                            contractmodification.From_Local_Grade = _p017.From_Local_Grade;

                            contractmodification.To_Local_Grade_Id = _p017.To_Local_Grade;
                            contractmodification.To_Local_Grade = _p017.To_Local_Grade != null ? _p017.To_Local_Grade : "No Change";

                            contractmodification.From_Cost_Center_id = Convert.ToInt64(_p017.From_Cost_Center);
                            contractmodification.From_Cost_Center = _p017.FromCCName;

                            contractmodification.To_Cost_Center_Id = Convert.ToInt64(_p017.To_Cost_Center);
                            contractmodification.To_Cost_Center = _p017.ToCCName != null ? _p017.ToCCName : "No Change";

                            contractmodification.From_status = _p017.From_Status;
                            contractmodification.To_status = _p017.To_Status;

                            contractmodification.From_Notice_Period = _p017.From_Notice_Period;
                            contractmodification.To_Notice_Period = _p017.To_Notice_Period;

                            contractmodification.From_Location_id = Convert.ToInt64(_p017.From_Location);
                            contractmodification.From_Location = _p017.FromLocationName;

                            contractmodification.To_Location_Id = Convert.ToInt64(_p017.To_Location);
                            contractmodification.To_Location = _p017.ToLocationName != null ? _p017.ToLocationName : "No Change";

                            contractmodification.From_Basic_Salary = _p017.From_BasicSalary;
                            contractmodification.To_Basic_Salary = _p017.To_BasicSalary;

                            contractmodification.From_Annual_Housing = _p017.From_AnnualHousing;
                            contractmodification.To_Annual_Housing = _p017.To_AnnualHousing;

                            contractmodification.From_Car_Cost = _p017.From_CarCost;
                            contractmodification.To_Car_Cost = _p017.To_CarCost;

                            contractmodification.From_Transport = _p017.From_Transport;
                            contractmodification.To_Transport = _p017.To_Transport;

                            contractmodification.From_Travel_Allowance = _p017.From_TravelHardshipAllowance;
                            contractmodification.To_Travel_Allowance = _p017.To_TravelHardshipAllowance;

                            contractmodification.From_Mobile_Allowance = _p017.From_MobileAllowance;
                            contractmodification.To_Mobile_Allowance = _p017.To_MobileAllowance;

                            #region common_attachments


                            if (contractmodification._FileListPrint != null && contractmodification._FileListPrint.Count > 0)
                            {
                                var fillistprint = contractmodification._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }


                            #endregion
                            modelprint.ContractModificationModel = contractmodification;

                            return View("Print_Page_P017", modelprint);

                            #endregion P017

                        }

                        else if (modelprint.wf_type == "P025")    /*13-04-2020 NIMMI MOHAN*/
                        {
                            #region P025
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _p025 = _entity.tb_PP_EndofServiceClearance.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();

                            if (_p025 != null)
                            {
                                modelprint.reason_clearance = _p025.Reason_Clearance;
                                modelprint.termination_Date = Convert.ToDateTime(_p025.Termination_Date);
                                modelprint.eb_Toolbox_Returned = _p025.EB_Toolbox_Returned;
                                modelprint.eb_Workstation_Cleared = _p025.EB_Workstation_Cleared;
                                modelprint.eb_OfficialBusiness_Documents = _p025.EB_OfficialBusiness_Documents;
                                modelprint.eb_SiteProject_Clearance = _p025.EB_SiteProject_Clearance;
                                modelprint.eb_Uniform = _p025.EB_Uniform;
                                modelprint.eb_Safety_Equipment = _p025.EB_Safety_Equipment;
                                modelprint.eb_AllWorkflow_Approvals = _p025.EB_AllWorkflow_Approvals;
                                modelprint.eb_ISService_Deactivation_Date = Convert.ToDateTime(_p025.EB_ISService_Deactivation_Date);
                                modelprint.eb_Assigned_Delegate = _p025.EB_Assigned_Delegate;
                                modelprint.ad_HousingHousehold_cleared = _p025.AD_HousingHousehold_cleared;
                                modelprint.ad_Util_Water_cleared = _p025.AD_Util_Water_cleared;
                                modelprint.ad_CarGarageKey_Returned = _p025.AD_CarGarageKey_Returned;
                                modelprint.ad_Gatepass_Returned = _p025.AD_Gatepass_Returned;
                                modelprint.ad_Mobile_SimCard_Returned = _p025.AD_Mobile_SimCard_Returned;
                                modelprint.ad_CompanyID_Returned = _p025.AD_CompanyID_Returned;
                                modelprint.tr_Amount_SAR = Convert.ToDecimal(_p025.TR_Amount_SAR);
                                modelprint.tr_ExternalTraining_Cost = _p025.TR_ExternalTraining_Cost;
                                modelprint.is_Desktop_Returned = _p025.IS_Desktop_Returned;
                                modelprint.ft_Clearance_Obtained = _p025.FT_Clearance_Obtained;
                                modelprint.ft_eBank_Token = _p025.FT_eBank_Token;
                                modelprint.ae_Clearance_Obtained = _p025.AE_Clearance_Obtained;
                                modelprint.hr_CarLoan_Cleared = _p025.HR_CarLoan_Cleared;
                                modelprint.hr_SalaryAdvances_Settled = _p025.HR_SalaryAdvances_Settled;
                                modelprint.hr_CompanyStamp_Returned = _p025.HR_CompanyStamp_Returned;
                                modelprint.hr_MedicalInsurance_Returned = _p025.HR_MedicalInsurance_Returned;
                                modelprint.hr_Visa_Mastercard_Communicated = _p025.HR_Visa_Mastercard_Communicated;
                                modelprint.hr_Savingcurrent_communicated = _p025.HR_Savingcurrent_communicated;
                                modelprint.hr_Remarks = _p025.HR_Remarks;
                                modelprint.hr_Attachment_Filepath = _p025.HR_Attachment_Filepath;
                                modelprint.attachment_filepath = _p025.Attachment_Filepath;


                                //05-05-2020
                                modelprint.eb_toolbx_returned_date = _p025.EB_toolbx_returned_date;
                                modelprint.workstation_cleared_date = _p025.EB_workstation_cleared_date;
                                modelprint.official_business_doc_date = _p025.EB_official_business_doc_date;
                                modelprint.site_project_clearance_date = _p025.EB_site_project_clearance_date;
                                modelprint.uni_form_date = _p025.EB_uni_form_date;
                                modelprint.safety_equipment_date = _p025.EB_safety_equipment_date;
                                modelprint.workflow_approvals_date = _p025.EB_workflow_approvals_date;
                                modelprint.housing_household_date = _p025.AD_housing_household_date;
                                modelprint.car_garage_key_date = _p025.AD_car_garage_key_date;
                                modelprint.gatepass_sticker_date = _p025.AD_gatepass_sticker_date;
                                modelprint.Mobile_returned_date = _p025.AD_Mobile_returned_date;
                                modelprint.company_id_returned_date = _p025.AD_company_id_returned_date;
                                modelprint.utilities_water_etc_date = _p025.AD_utilities_water_etc_date;
                                modelprint.desktop_etc_cleared_date = _p025.IS_desktop_etc_cleared_date;
                                modelprint.clearance_obtained_fin_date = _p025.FT_clearance_obtained_fin_date;
                                modelprint.e_bank_token_date = _p025.FT_e_bank_token_date;
                                modelprint.clearance_obtained_ae_date = _p025.AE_clearance_obtained_ae_date;
                                modelprint.car_loan_cleared_date = _p025.HR_car_loan_cleared_date;
                                modelprint.salary_advance_settled_date = _p025.HR_salary_advance_settled_date;
                                modelprint.company_stamp_returned_date = _p025.HR_company_stamp_returned_date;
                                modelprint.medical_insurance_date = _p025.HR_medical_insurance_date;
                                modelprint.visa_master_commun_date = _p025.HR_visa_master_commun_date;
                                modelprint.sav_current_account_date = _p025.HR_sav_current_account_date;
                                modelprint.external_training_cost_date = _p025.external_training_cost_date;

                                if (_p025.Termination_Date != null)
                                {
                                    try
                                    {
                                        var stringDate = _p025.Termination_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.termination_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p025.Termination_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        modelprint.termination_date_string = xx;
                                    }
                                }

                                if (_p025.EB_ISService_Deactivation_Date != null)
                                {
                                    try
                                    {
                                        var stringdate = _p025.EB_ISService_Deactivation_Date.ToString();
                                        var xx = Convert.ToDateTime(stringdate).ToString("yyyy-MM-dd");
                                        modelprint.eb_ISService_Deactivation_Date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringdate = _p025.EB_ISService_Deactivation_Date.ToString();
                                        var xx = Convert.ToDateTime(stringdate).ToString("yyyy-MM-dd");
                                        modelprint.eb_ISService_Deactivation_Date_string = xx;
                                    }
                                }

                            }

                            return View("Print_Page_P025", modelprint);
                            #endregion P025
                        }

                        else if (modelprint.wf_type == "P015")  //-----Terrin on 05/04/2020
                        {
                            #region P015
                            var model1 = new EmployeeRequestModel();
                            string reqid = splitData[1];
                            model1.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            model1.local_id = requestprint.Employee_ID;
                            var _p015 = _entity.tb_PP_TrainingorRecruitmentPayment.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            model1.payment_mode = _p015.PaymentMode;
                            model1.blcontrollerid = _p015.blcontrollerid;
                            model1.traname = _p015.traname;
                            model1.chargecostcenter = _p015.chargecostcenter;
                            model1.chargeaccount = _p015.chargeaccount;
                            model1.rt_remarks = _p015.Remark;
                            if (_p015.PaymentMode == "C")
                            {
                                if (_p015.Cheque_Date != null)
                                {
                                    #region 
                                    try
                                    {
                                        var stringDate = _p015.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        model1.cheque_date_string = xx;
                                    }
                                    catch
                                    {
                                        var stringDate = _p015.Cheque_Date.ToString();
                                        var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                        model1.cheque_date_string = xx;
                                    }
                                    #endregion
                                }
                                model1.table_Id = _p015.Id;
                                // model1.request_id= _p015.RequestId;
                                model1.payment_mode = "Cheque";
                                model1.amount_sar = _p015.Amount_SAR;
                                model1.currenctType = _p015.currencytype;
                                //model1.Account_No = _p015.ac;
                                model1.purpose_text = _p015.Purpose_Text;
                                // model1.s = _p015.supplier;
                                model1.payable_to = _p015.Cheque_Payable;
                                model1.filedata = _p015.Attachment_Filepath;

                            }
                            else
                            {
                                model1.table_Id = _p015.Id;
                                // model1.request_id = _p015.RequestId;
                                model1.payment_mode = "Bank Transfer";
                                model1.amount_sar = _p015.Amount_SAR;
                                model1.currenctType = _p015.currencytype;
                                model1.from_bank = _p015.From_Bank;
                                model1.from_addreess = _p015.From_Address;
                                model1.from_account_no = _p015.From_AccountNo;
                                model1.to_beneficiary = _p015.To_Benificiary;
                                model1.to_bankname = _p015.To_BankName;
                                model1.to_address = _p015.To_Address;
                                model1.to_account_no = _p015.To_AccountNo;
                                model1.to_iban = _p015.To_IBAN;
                                model1.purpose_text = _p015.Purpose_Text;

                            }
                            return View("Print_Page_P015", model1);

                            #endregion P015
                        }

                        //P007-Vacation(Preema)
                        else if (modelprint.wf_type == "P007")
                        {
                            #region P007

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];

                            // string canview = splitData[5];

                            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqid).FirstOrDefault();

                            var request_history = _entity.tb_Request_Hdr_History.Where(x => x.Request_ID == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();

                            modelprint.checkstatus = data.Status_ID;

                            if (data.Approver_ID != null)
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();

                                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();

                                var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();

                                tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);

                                if (temp != null)
                                {
                                    modelprint.level = Convert.ToInt32(temp.Sequence_NO);
                                    modelprint.my_process_code = temp.Status_ID;
                                    modelprint.my_role_code = role.Role_ID;
                                }
                            }

                            //if (canview == "true")
                            //{
                            //    var approver_status = _entity.tb_ApprovalLog.Where(x => x.RequestId == reqid && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();
                            //    modelprint.refresh_view = true;
                            //    if (request_history != null)
                            //    {
                            //        modelprint.checkstatus = request_history.Status_ID;                               
                            //        if (request_history.Status_ID == "SUB" && data.Status_ID == "INT")
                            //        {
                            //            modelprint.checkstatus = "NEW";

                            //        }
                            //        else if (request_history.Status_ID == "INT" && request_history.Approval_No == "1" && approver_status.Status == "EDIT")
                            //        {
                            //            modelprint.checkstatus = "NEW";

                            //        }
                            //    }
                            //}
                            //else
                            //{
                            //    modelprint.refresh_view = false;                               
                            //}
                            #region RequestData
                            modelprint.wf_type = "P007";
                            long reqId = Convert.ToInt32(reqid);
                            var _p007 = _entity.tb_TA_Vacation.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
                            VacationModel vacation = new VacationModel();

                            vacation.place_to_visit = _p007.Place_Visit;
                            vacation.reason = _p007.Reasons;
                            vacation.remark_one = _p007.Remark;
                            vacation.is_complaince_approval_required = Convert.ToInt32(_p007.Is_Compliance_Approval);
                            if (vacation.is_complaince_approval_required == 1)
                            {
                                vacation.str_complaince_approval_required = "Yes";
                            }
                            else
                            {
                                vacation.str_complaince_approval_required = "No";
                            }

                            vacation.compliance_approval_date = _p007.Compliance_Approval_Date ?? CurrentTime;
                            vacation.last_day_of_work = _p007.Last_Day_Of_Work ?? CurrentTime;
                            vacation.return_to_duty = _p007.Return_To_Duty ?? CurrentTime;
                            vacation.workflow_delegated = Convert.ToInt32(_p007.IsDelegated);
                            if (vacation.workflow_delegated == 1)
                            {
                                vacation.str_workflow_delegated = "Yes";
                            }
                            else
                            {
                                vacation.str_workflow_delegated = "No";
                            }
                            vacation.justification_no_delegation = _p007.Just_No_Delegated;
                            vacation.address_during_absence = _p007.Address_During_Absence;
                            vacation.telephone = _p007.Telephone_No;
                            vacation.mode_of_travel = _p007.Travel_Mode;
                            vacation.abb_locations = (Location)_p007.Location_Id;
                            var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p007.Location_Id).FirstOrDefault();
                            if (location_name != null)
                            {
                                vacation.location_name = location_name.Location;
                            }
                            vacation.required_exit_visa = Convert.ToInt32(_p007.Is_Exit_ReEntry_Visa);
                            vacation.type_of_exit_visa = _p007.Type_Exit_ReEntry_Visa;

                            vacation.Visa_Duration = _p007.Visa_duration;
                            vacation.Visa_With = _p007.Visa_with;

                            vacation.travel_visa_charged_to = _p007.Visa_Charged_to;
                            vacation.required_foreign_visa = Convert.ToInt32(_p007.Is_Foreign_Visa);
                            if (vacation.required_foreign_visa == 1)
                            {
                                vacation.str_required_foreign_visa = "Yes";
                            }
                            else
                            {
                                vacation.str_required_foreign_visa = "No";
                            }

                            vacation.foreign_visa_countries = _p007.Foreign_Visa_Countries;
                            vacation.foreign_visa_quantity = _p007.Foreign_Visa_Quantity;
                            vacation.required_travel_insurance = Convert.ToInt32(_p007.Is_Travel_Insurance);
                            if (vacation.required_travel_insurance == 1)
                            {
                                vacation.str_required_travel_insurance = "Yes";
                            }
                            else
                            {
                                vacation.str_required_travel_insurance = "No";
                            }
                            vacation.travel_insurance_countries = _p007.Travel_Insurance_Countries;
                            vacation.travel_insurance_quantity = _p007.Travel_Insurance_Quantity;
                            vacation.required_rent_car = Convert.ToInt32(_p007.Is_RentCar);
                            if (vacation.required_rent_car == 1)
                            {
                                vacation.str_required_rent_car = "Yes";
                            }
                            else
                            {
                                vacation.str_required_rent_car = "No";
                            }
                            vacation.rent_car_charged_to = _p007.RentCar_Charged_to;
                            vacation.rent_car_project_no = _p007.RentCar_ProjectNo;
                            vacation.car_type = _p007.Car_Type;
                            vacation.rent_car_picked_up_at = _p007.Car_PickUp_at;
                            vacation.rent_car_pick_up_date = _p007.Car_PickUp_date ?? CurrentTime;
                            vacation.rent_car_pick_up_time = _p007.Car_PickUp_Time;

                            vacation.rent_car_return_date = _p007.Car_Return_date ?? CurrentTime;
                            vacation.rent_car_return_time = _p007.Car_Return_Time;
                            vacation.rent_car_payment_type = _p007.Car_Payment_Type;
                            vacation.number_of_rooms = Convert.ToInt32(_p007.Number_Of_Rooms);
                            vacation.type_of_ticket = Convert.ToString(_p007.Ticket_Type);

                            vacation.rent_car_remark = _p007.Car_Remark;
                            vacation.required_hotel_booking = Convert.ToInt32(_p007.Is_Hotel);
                            if (vacation.required_hotel_booking == 1)
                            {
                                vacation.str_required_hotel_booking = "Yes";
                            }
                            else
                            {
                                vacation.str_required_hotel_booking = "No";
                            }
                            vacation.hotel_booking_charged_to = _p007.Hotel_Charged_to;
                            vacation.hotel_booking_project_no = _p007.Hotel_ProjectNo;
                            vacation.hotel_name = _p007.Hotel_Name;
                            vacation.hotel_location = _p007.Hotel_Location;
                            vacation.room_preferences = _p007.Room_Preference;
                            vacation.type_of_room = _p007.Room_Type;
                            vacation.hotel_booking_payment_mode = _p007.Hotel_Payment_Type;
                            vacation.hotel_booking_check_in_date = _p007.Hote_Check_In_Date ?? CurrentTime;
                            vacation.hotel_check_in_time = _p007.Hotel_Check_In_Time;
                            vacation.hotel_booking_check_out_date = _p007.Hotel_Check_Out_Date ?? CurrentTime;
                            vacation.hotel_check_out_time = _p007.Hotel_Check_Out_Time;
                            vacation.hotel_booking_remark = _p007.Hotel_Remark;
                            vacation.departure_date = _p007.Departure_Date ?? CurrentTime;
                            vacation.departure_flight_number = _p007.Departure_Flight_No;
                            vacation.return_date = _p007.Return_Date ?? CurrentTime;
                            vacation.return_flight_number = _p007.Return_Flight_No;
                            vacation.travel_routing = _p007.Travel_Routing;
                            vacation.note = _p007.Note;
                            vacation.cash_advance = Convert.ToInt32(_p007.Cash_Advance);
                            vacation.amx_holder = Convert.ToInt32(_p007.Amex_Holder);
                            if (vacation.amx_holder == 1)
                            {
                                vacation.str_amx_holder = "Yes";
                            }
                            else
                            {
                                vacation.str_amx_holder = "No";
                            }
                            if (vacation.cash_advance == 1)
                            {
                                vacation.str_cash_advance = "Yes";
                            }
                            else
                            {
                                vacation.str_cash_advance = "No";
                            }
                            vacation.salary_advance = _p007.Salary_Advance;
                            vacation.bank_account = _p007.Bank_account;
                            vacation.ticket_cost = _p007.Ticket_Cost;
                            vacation.iban = _p007.IBAN;
                            vacation.hotel_cost = _p007.Hotel_Cost;
                            vacation.daily_allowance = _p007.Daily_allowance;
                            vacation.other_expenses = _p007.Other_Expenses;
                            vacation.travel_advance_remark = _p007.Advance_Remark;
                            vacation.travel_advance_total = _p007.Travel_Advance_Total;

                            vacation._dependentsInfo = new List<TA_DependentsInfo>();
                            var dependentInfo = _entity.tb_TA_Vacation_DependentsInfo.Where(x => x.TA_Id == _p007.Id && x.IsActive == true).ToList();
                            foreach (var item in dependentInfo)
                            {
                                TA_DependentsInfo one = new TA_DependentsInfo();
                                one.name = item.Name;
                                one.relation_ship = item.Relationship;
                                one.age = item.Age;
                                one.visa_type = item.Visa_Type;
                                one.ta_type = item.TA_Type;
                                one.remark = item.Remark;
                                vacation._dependentsInfo.Add(one);
                            }

                            vacation._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                            long requestid = Convert.ToInt32(reqId);
                            var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                            foreach (var item in travel)
                            {
                                TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                                one.ticket_number = item.Ticket_Number;
                                one.ticket_price = item.TicketPrice;
                                one.issue_date = item.IssueDate;
                                vacation._travelAgencyInfo.Add(one);
                            }

                            vacation.revalidation_charge = _p007.Revalidation_Charge;
                            vacation.over_all_ticket_status = _p007.Ticket_Status ?? 0;
                            vacation.total_ticket_price = _p007.Total_Ticket_Price;
                            if (vacation.over_all_ticket_status == 1)
                            {
                                vacation.str_over_all_ticket_status = "All Ticket Issued";
                            }
                            else
                            {
                                vacation.str_over_all_ticket_status = "With Pending Tickets";
                            }

                            vacation.employee_ticket_number = _p007.Ticket_Number_employee;
                            vacation.employee_date_of_issue = _p007.IssueDate_employee;
                            vacation.employee_ticket_price = _p007.TicketPrice_employee;


                            #region Number of Days Information                    

                            if (_p007.Ticket_Charged_To == "1")
                            {
                                vacation.ticket_charged_to = "Company";
                            }
                            else
                            {
                                vacation.ticket_charged_to = "Personal";
                            }
                            vacation.from_period = Convert.ToString(_p007.From_Period);
                            vacation.to_period = Convert.ToString(_p007.To_Period);
                            vacation.from_period_date = Convert.ToDateTime(_p007.From_Period);
                            vacation.to_period_date = Convert.ToDateTime(_p007.To_Period);
                            vacation.Vacation = Convert.ToInt32(_p007.Vacation);
                            vacation.Leave_WO_Pay = Convert.ToInt32(_p007.Leave_Pay);
                            vacation.Holidays = Convert.ToInt32(_p007.Holidays);
                            vacation.Friday = Convert.ToInt32(_p007.Friday);
                            vacation.Saturday = Convert.ToInt32(_p007.Saturday);
                            vacation.Total_No_of_Days = Convert.ToString(_p007.Total_No_of_Days);
                            #endregion

                            #region Employee Entitlements to be processed by SAS              

                            if (_p007.Visa_Amount_Claim == true)
                            {
                                vacation.Visa_Amount_Claim = "Yes";
                            }
                            else
                            {
                                vacation.Visa_Amount_Claim = "No";
                            }
                            if (_p007.Taxi_Fare_Claim == true)
                            {
                                vacation.Taxi_Fare_Claim = "Yes";
                            }
                            else
                            {
                                vacation.Taxi_Fare_Claim = "No";
                            }

                            vacation.HR_Remarks_Visa = Convert.ToString(_p007.Visa_Remarks);
                            vacation.HR_Remarks_Taxi = Convert.ToString(_p007.Taxi_Fare_Remarks);
                            #endregion

                            #endregion RequestData

                            #region common_attachments

                            if (vacation._FileListPrint != null && vacation._FileListPrint.Count > 0)
                            {
                                var fillistprint = vacation._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }

                            #endregion

                            modelprint.VacationModel = vacation;

                            return View("Print_Page_P007", modelprint);

                            #endregion P007
                        }

                        //P037-Dependents Only(Preema)
                        else if (modelprint.wf_type == "P037")
                        {
                            #region P037

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];

                            // string canview = splitData[5];

                            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqid).FirstOrDefault();

                            var request_history = _entity.tb_Request_Hdr_History.Where(x => x.Request_ID == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();

                            modelprint.checkstatus = data.Status_ID;

                            if (data.Approver_ID != null)
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();

                                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();

                                var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();

                                tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);

                                if (temp != null)
                                {
                                    modelprint.level = Convert.ToInt32(temp.Sequence_NO);
                                    modelprint.my_process_code = temp.Status_ID;
                                    modelprint.my_role_code = role.Role_ID;
                                }
                            }

                            //if (canview == "true")
                            //{
                            //    var approver_status = _entity.tb_ApprovalLog.Where(x => x.RequestId == reqid && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();
                            //    modelprint.refresh_view = true;
                            //    if (request_history != null)
                            //    {
                            //        modelprint.checkstatus = request_history.Status_ID;                               
                            //        if (request_history.Status_ID == "SUB" && data.Status_ID == "INT")
                            //        {
                            //            modelprint.checkstatus = "NEW";

                            //        }
                            //        else if (request_history.Status_ID == "INT" && request_history.Approval_No == "1" && approver_status.Status == "EDIT")
                            //        {
                            //            modelprint.checkstatus = "NEW";

                            //        }
                            //    }
                            //}
                            //else
                            //{
                            //    modelprint.refresh_view = false;                               
                            //}
                            #region RequestData
                            modelprint.wf_type = "P037";
                            long reqId = Convert.ToInt32(reqid);
                            var _p037 = _entity.tb_TA_DependentsOnly.Where(x => x.RequestId == reqId && x.IsActive == true).FirstOrDefault();
                            VacationModel vacation = new VacationModel();

                            //vacation.place_to_visit = _p037.Place_Visit;
                            //vacation.reason = _p037.Reasons;
                            //vacation.remark_one = _p037.Remark;
                            vacation.is_complaince_approval_required = Convert.ToInt32(_p037.Is_Compliance_Approval);
                            if (vacation.is_complaince_approval_required == 1)
                            {
                                vacation.str_complaince_approval_required = "Yes";
                            }
                            else
                            {
                                vacation.str_complaince_approval_required = "No";
                            }

                            vacation.compliance_approval_date = _p037.Compliance_Approval_Date ?? CurrentTime;
                            //vacation.last_day_of_work = _p037.Last_Day_Of_Work ?? CurrentTime;
                            //vacation.return_to_duty = _p037.Return_To_Duty ?? CurrentTime;
                            vacation.workflow_delegated = Convert.ToInt32(_p037.IsDelegated);
                            if (vacation.workflow_delegated == 1)
                            {
                                vacation.str_workflow_delegated = "Yes";
                            }
                            else
                            {
                                vacation.str_workflow_delegated = "No";
                            }
                            vacation.justification_no_delegation = _p037.Just_No_Delegated;
                            //vacation.address_during_absence = _p037.Address_During_Absence;
                            //vacation.telephone = _p037.Telephone_No;
                            vacation.mode_of_travel = _p037.Travel_Mode;
                            vacation.abb_locations = (Location)_p037.Location_Id;
                            var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p037.Location_Id).FirstOrDefault();
                            if (location_name != null)
                            {
                                vacation.location_name = location_name.Location;
                            }
                            vacation.required_exit_visa = Convert.ToInt32(_p037.Is_Exit_ReEntry_Visa);
                            vacation.type_of_exit_visa = _p037.Type_Exit_ReEntry_Visa;

                            vacation.Visa_Duration = _p037.Visa_duration;
                            vacation.Visa_With = _p037.Visa_with;

                            vacation.travel_visa_charged_to = _p037.Visa_Charged_to;
                            vacation.required_foreign_visa = Convert.ToInt32(_p037.Is_Foreign_Visa);
                            if (vacation.required_foreign_visa == 1)
                            {
                                vacation.str_required_foreign_visa = "Yes";
                            }
                            else
                            {
                                vacation.str_required_foreign_visa = "No";
                            }

                            vacation.foreign_visa_countries = _p037.Foreign_Visa_Countries;
                            vacation.foreign_visa_quantity = _p037.Foreign_Visa_Quantity;
                            vacation.required_travel_insurance = Convert.ToInt32(_p037.Is_Travel_Insurance);
                            if (vacation.required_travel_insurance == 1)
                            {
                                vacation.str_required_travel_insurance = "Yes";
                            }
                            else
                            {
                                vacation.str_required_travel_insurance = "No";
                            }
                            vacation.travel_insurance_countries = _p037.Travel_Insurance_Countries;
                            vacation.travel_insurance_quantity = _p037.Travel_Insurance_Quantity;
                            //vacation.required_rent_car = Convert.ToInt32(_p037.Is_RentCar);
                            //if (vacation.required_rent_car == 1)
                            //{
                            //    vacation.str_required_rent_car = "Yes";
                            //}
                            //else
                            //{
                            //    vacation.str_required_rent_car = "No";
                            //}
                            //vacation.rent_car_charged_to = _p037.RentCar_Charged_to;
                            //vacation.rent_car_project_no = _p037.RentCar_ProjectNo;
                            //vacation.car_type = _p037.Car_Type;
                            //vacation.rent_car_picked_up_at = _p037.Car_PickUp_at;
                            //vacation.rent_car_pick_up_date = _p037.Car_PickUp_date ?? CurrentTime;
                            //vacation.rent_car_pick_up_time = _p037.Car_PickUp_Time;

                            //vacation.rent_car_return_date = _p037.Car_Return_date ?? CurrentTime;
                            //vacation.rent_car_return_time = _p037.Car_Return_Time;
                            //vacation.rent_car_payment_type = _p037.Car_Payment_Type;
                            //vacation.number_of_rooms = Convert.ToInt32(_p037.Number_Of_Rooms);
                            vacation.type_of_ticket = Convert.ToString(_p037.Ticket_Type);

                            //vacation.rent_car_remark = _p037.Car_Remark;
                            //vacation.required_hotel_booking = Convert.ToInt32(_p037.Is_Hotel);
                            //if (vacation.required_hotel_booking == 1)
                            //{
                            //    vacation.str_required_hotel_booking = "Yes";
                            //}
                            //else
                            //{
                            //    vacation.str_required_hotel_booking = "No";
                            //}
                            //vacation.hotel_booking_charged_to = _p037.Hotel_Charged_to;
                            //vacation.hotel_booking_project_no = _p037.Hotel_ProjectNo;
                            //vacation.hotel_name = _p037.Hotel_Name;
                            //vacation.hotel_location = _p037.Hotel_Location;
                            //vacation.room_preferences = _p037.Room_Preference;
                            //vacation.type_of_room = _p037.Room_Type;
                            //vacation.hotel_booking_payment_mode = _p037.Hotel_Payment_Type;
                            //vacation.hotel_booking_check_in_date = _p037.Hote_Check_In_Date ?? CurrentTime;
                            //vacation.hotel_check_in_time = _p037.Hotel_Check_In_Time;
                            //vacation.hotel_booking_check_out_date = _p037.Hotel_Check_Out_Date ?? CurrentTime;
                            //vacation.hotel_check_out_time = _p037.Hotel_Check_Out_Time;
                            //vacation.hotel_booking_remark = _p037.Hotel_Remark;
                            vacation.departure_date = _p037.Departure_Date ?? CurrentTime;
                            vacation.departure_flight_number = _p037.Departure_Flight_No;
                            vacation.return_date = _p037.Return_Date ?? CurrentTime;
                            vacation.return_flight_number = _p037.Return_Flight_No;
                            vacation.travel_routing = _p037.Travel_Routing;
                            vacation.note = _p037.Note;
                            //vacation.cash_advance = Convert.ToInt32(_p037.Cash_Advance);
                            //vacation.amx_holder = Convert.ToInt32(_p037.Amex_Holder);
                            //if (vacation.amx_holder == 1)
                            //{
                            //    vacation.str_amx_holder = "Yes";
                            //}
                            //else
                            //{
                            //    vacation.str_amx_holder = "No";
                            //}
                            //if (vacation.cash_advance == 1)
                            //{
                            //    vacation.str_cash_advance = "Yes";
                            //}
                            //else
                            //{
                            //    vacation.str_cash_advance = "No";
                            //}
                            //vacation.salary_advance = _p037.Salary_Advance;
                            //vacation.bank_account = _p037.Bank_account;
                            //vacation.ticket_cost = _p037.Ticket_Cost;
                            //vacation.iban = _p037.IBAN;
                            //vacation.hotel_cost = _p037.Hotel_Cost;
                            //vacation.daily_allowance = _p037.Daily_allowance;
                            //vacation.other_expenses = _p037.Other_Expenses;
                            //vacation.travel_advance_remark = _p037.Advance_Remark;
                            //vacation.travel_advance_total = _p037.Travel_Advance_Total;

                            vacation._dependentsInfo = new List<TA_DependentsInfo>();
                            var dependentInfo = _entity.tb_TA_DependentsOnly_DependentsInfo.Where(x => x.TA_Id == _p037.Id && x.IsActive == true).ToList();
                            foreach (var item in dependentInfo)
                            {
                                TA_DependentsInfo one = new TA_DependentsInfo();
                                one.name = item.Name;
                                one.relation_ship = item.Relationship;
                                one.age = item.Age;
                                one.visa_type = item.Visa_Type;
                                one.ta_type = item.TA_Type;
                                one.remark = item.Remark;
                                vacation._dependentsInfo.Add(one);
                            }

                            vacation._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                            long requestid = Convert.ToInt32(reqId);
                            var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                            foreach (var item in travel)
                            {
                                TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                                one.ticket_number = item.Ticket_Number;
                                one.ticket_price = item.TicketPrice;
                                one.issue_date = item.IssueDate;
                                vacation._travelAgencyInfo.Add(one);
                            }

                            vacation.revalidation_charge = _p037.Revalidation_Charge;
                            vacation.over_all_ticket_status = _p037.Ticket_Status ?? 0;

                            if (vacation.over_all_ticket_status == 1)
                            {
                                vacation.str_over_all_ticket_status = "All Ticket Issued";
                            }
                            else
                            {
                                vacation.str_over_all_ticket_status = "With Pending Tickets";
                            }
                            vacation.total_ticket_price = _p037.Total_Ticket_Price;

                            vacation.employee_ticket_number = _p037.Ticket_Number_employee;
                            vacation.employee_date_of_issue = _p037.IssueDate_employee;
                            vacation.employee_ticket_price = _p037.TicketPrice_employee;


                            //#region Number of Days Information                    

                            //if (_p037.Ticket_Charged_To == "1")
                            //{
                            //    vacation.ticket_charged_to = "Company";
                            //}
                            //else
                            //{
                            //    vacation.ticket_charged_to = "Personal";
                            //}
                            //vacation.from_period = Convert.ToString(_p037.From_Period);
                            //vacation.to_period = Convert.ToString(_p037.To_Period);
                            //vacation.from_period_date = Convert.ToDateTime(_p037.From_Period);
                            //vacation.to_period_date = Convert.ToDateTime(_p037.To_Period);
                            //vacation.Vacation = Convert.ToInt32(_p037.Vacation);
                            //vacation.Leave_WO_Pay = Convert.ToInt32(_p037.Leave_Pay);
                            //vacation.Holidays = Convert.ToInt32(_p037.Holidays);
                            //vacation.Friday = Convert.ToInt32(_p037.Friday);
                            //vacation.Saturday = Convert.ToInt32(_p037.Saturday);
                            //vacation.Total_No_of_Days = Convert.ToString(_p037.Total_No_of_Days);
                            //#endregion

                            #region Employee Entitlements to be processed by SAS              

                            if (_p037.Visa_Amount_Claim == true)
                            {
                                vacation.Visa_Amount_Claim = "Yes";
                            }
                            else
                            {
                                vacation.Visa_Amount_Claim = "No";
                            }
                            if (_p037.Taxi_Fare_Claim == true)
                            {
                                vacation.Taxi_Fare_Claim = "Yes";
                            }
                            else
                            {
                                vacation.Taxi_Fare_Claim = "No";
                            }

                            vacation.HR_Remarks_Visa = Convert.ToString(_p037.Visa_Remarks);
                            vacation.HR_Remarks_Taxi = Convert.ToString(_p037.Taxi_Fare_Remarks);
                            #endregion

                            #endregion RequestData

                            #region common_attachments

                            if (vacation._FileListPrint != null && vacation._FileListPrint.Count > 0)
                            {
                                var fillistprint = vacation._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }

                            #endregion

                            modelprint.VacationModel = vacation;

                            return View("Print_Page_P037", modelprint);

                            #endregion P037
                        }

                        else if (modelprint.wf_type == "T006")  //-----Terrin on 30.06.2020
                        {
                            #region T006
                            TrainingFolderModel model_Tr = new TrainingFolderModel();
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _T006 = _entity.tb_TR_TrainingFolder.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_T006 != null)
                            {

                                model_Tr.RequestId = _T006.RequestId;
                                model_Tr.Date_training = Convert.ToDateTime(_T006.Date);
                                model_Tr.quantity = _T006.quantity;
                                var xxx = Convert.ToDateTime(_T006.Date.ToString()).ToString("yyyy-MM-dd");
                                model_Tr.Date_training_string = xxx;
                                model_Tr.Attachment_Filepath = _T006.Attachment_Filepath;



                            }

                            modelprint.TrainingFolderModel = model_Tr;
                            return View("Print_Page_T006", modelprint);

                            #endregion T006
                        }
                        else if (modelprint.wf_type == "T007")  //-----Terrin on 3.07.2020
                        {
                            #region T007
                            TrainingCertificateModel model_Tr = new TrainingCertificateModel();
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _T007 = _entity.tb_TR_Training_Certificate.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_T007 != null)
                            {

                                model_Tr.RequestId = _T007.RequestId;
                                model_Tr.Titlecourse = _T007.Titlecourse;
                                model_Tr.Course_period_from = Convert.ToDateTime(_T007.Course_period_from);
                                model_Tr.Course_period_to = Convert.ToDateTime(_T007.Course_period_to);
                                model_Tr.Location = _T007.Location;
                                model_Tr.Clientname = _T007.Clientname;
                                model_Tr.Noof_particants = _T007.Noof_particants;
                               // model_Tr.Noof_trainer = _T007.Noof_trainer;
                                model_Tr.nameofparticipants = _T007.Nameof_participants;
                                var xxx = Convert.ToDateTime(_T007.Course_period_from.ToString()).ToString("yyyy-MM-dd");
                                model_Tr.Course_period_from_string = xxx;
                                var yyy = Convert.ToDateTime(_T007.Course_period_to.ToString()).ToString("yyyy-MM-dd");
                                model_Tr.Course_period_to_string = yyy;

                                //var xxxx = Convert.ToDateTime(_T006.To_Date.ToString()).ToString("yyyy-MM-dd");
                                //model_T006.To_Date_string_date = xxxx;


                            }

                            modelprint.TrainingCertificateModel = model_Tr;
                            return View("Print_Page_T007", modelprint);

                            #endregion T007
                        }
                        else if (modelprint.wf_type == "P034")
                        {
                            #region P034

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];

                            // string canview = splitData[5];

                            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqid).FirstOrDefault();

                            var request_history = _entity.tb_Request_Hdr_History.Where(x => x.Request_ID == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();

                            modelprint.checkstatus = data.Status_ID;

                            if (data.Approver_ID != null)
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();

                                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();

                                var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();

                                tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);

                                if (temp != null)
                                {
                                    modelprint.level = Convert.ToInt32(temp.Sequence_NO);
                                    modelprint.my_process_code = temp.Status_ID;
                                    modelprint.my_role_code = role.Role_ID;
                                }
                            }


                            #region RequestData

                            long reid = Convert.ToInt32(reqid);
                            var _p034 = _entity.tb_TA_Business_International.Where(x => x.RequestId == reid && x.IsActive == true).FirstOrDefault();
                            BusinessInternational businessinternational = new BusinessInternational();
                            businessinternational.Place_Visit = _p034.Place_Visit;
                            businessinternational.Reasons = _p034.Reasons;
                            businessinternational.Remark = _p034.Remark;
                            if (businessinternational.Is_Compliance_Approval_Required == 1)
                            {
                                businessinternational.str_complaince_approval_required = "Yes";
                            }
                            else
                            {
                                businessinternational.str_complaince_approval_required = "No";
                            }

                            //businessinternational.Compliance_Approval_Date = _p034.Compliance_Approval_Date ?? CurrentTime;
                            if (_p034.Compliance_Approval_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Compliance_Approval_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.compliance_approval_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Compliance_Approval_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.compliance_approval_date_string = xx;
                                }
                            }
                            if (_p034.Last_Day_Of_Work != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Last_Day_Of_Work.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Last_Day_Of_Work_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Last_Day_Of_Work.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Last_Day_Of_Work_date_string = xx;
                                }
                            }
                            if (_p034.Return_To_Duty != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Return_To_Duty.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Return_To_Duty_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Return_To_Duty.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Return_To_Duty_date_string = xx;
                                }
                            }
                            businessinternational.Is_WorkFlow_delegated = Convert.ToInt32(_p034.IsDelegated);
                            if (businessinternational.Is_WorkFlow_delegated == 1)
                            {
                                businessinternational.str_workflow_delegated = "Yes";
                            }
                            else
                            {
                                businessinternational.str_workflow_delegated = "No";
                            }
                            businessinternational.Justification_Not_Delegated = _p034.Just_No_Delegated;
                            businessinternational.IsPossible_Video_Conference = Convert.ToInt32(_p034.IsVideo_Conference);
                            if (businessinternational.IsPossible_Video_Conference == 1)
                            {
                                businessinternational.str_is_video_conference_required = "Yes";
                            }
                            else
                            {
                                businessinternational.str_is_video_conference_required = "No";
                            }
                            businessinternational.Justification_No_Video_Conference = _p034.Just_No_Video;
                            businessinternational.Address_During_Absence = _p034.Address_During_Absence;
                            businessinternational.telephone = _p034.Telephone_No;
                            businessinternational.Mode_Of_Travel = _p034.Travel_Mode;
                            var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p034.Location_Id).FirstOrDefault();
                            businessinternational.location_name = location_name.Location;
                            businessinternational.Required_Ext_or_Reentry_Visa = Convert.ToInt32(_p034.Is_Exit_ReEntry_Visa);
                            businessinternational.Type_of_Required_Ext_or_Reentry_Visa = _p034.Type_Exit_ReEntry_Visa;
                            businessinternational.Visa_Charged_to = _p034.Visa_Charged_to;
                            businessinternational.Visa_duration = _p034.Visa_duration;
                            businessinternational.Visa_with = _p034.Visa_with;
                            businessinternational.Visa_Charged_to = _p034.Visa_Charged_to;
                            businessinternational.Required_Foreign_Visa = Convert.ToInt32(_p034.Is_Foreign_Visa);
                            if (businessinternational.Required_Foreign_Visa == 1)
                            {
                                businessinternational.str_required_foreign_visa = "Yes";
                            }
                            else
                            {
                                businessinternational.str_required_foreign_visa = "No";
                            }
                            businessinternational.Foreign_Visa_Countries = _p034.Foreign_Visa_Countries;
                            businessinternational.Foreign_Visa_Quantity = _p034.Foreign_Visa_Quantity;
                            businessinternational.Requied_Travel_Insurance = Convert.ToInt32(_p034.Is_Travel_Insurance);

                            if (businessinternational.Requied_Travel_Insurance == 1)
                            {
                                businessinternational.str_required_travel_insurance = "Yes";
                            }
                            else
                            {
                                businessinternational.str_required_travel_insurance = "No";
                            }
                            businessinternational.Travel_Insurance_Countries = _p034.Travel_Insurance_Countries;
                            businessinternational.Travel_Insurance_Quantity = _p034.Travel_Insurance_Quantity;
                            businessinternational.Required_RentCar = Convert.ToInt32(_p034.Is_RentCar);
                            if (businessinternational.Required_RentCar == 1)
                            {
                                businessinternational.str_required_rent_car = "Yes";
                            }
                            else
                            {
                                businessinternational.str_required_rent_car = "No";
                            }
                            businessinternational.RentCar_Charged_to = _p034.RentCar_Charged_to;
                            businessinternational.RentCar_ProjectNo = _p034.RentCar_ProjectNo;
                            businessinternational.Car_Type = _p034.Car_Type;
                            businessinternational.Car_PickUp_at = _p034.Car_PickUp_at;
                            if (_p034.Car_PickUp_date != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Car_PickUp_date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Car_PickUp_date_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Car_PickUp_date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Car_PickUp_date_date_string = xx;
                                }
                            }
                            if (_p034.Car_Return_date != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Car_Return_date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Car_Return_date_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Car_Return_date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Car_Return_date_date_string = xx;
                                }
                            }
                            businessinternational.Car_PickUp_Time = _p034.Car_PickUp_Time;
                            businessinternational.Car_Return_Time = _p034.Car_Return_Time;
                            businessinternational.Car_Payment_Type = _p034.Car_Payment_Type;
                            businessinternational.Car_Remark = _p034.Car_Remark;
                            businessinternational.Required_Hotel_Booking = Convert.ToInt32(_p034.Is_Hotel);
                            if (businessinternational.Required_Hotel_Booking == 1)
                            {
                                businessinternational.str_required_hotel_booking = "Yes";
                            }
                            else
                            {
                                businessinternational.str_required_hotel_booking = "No";
                            }
                            businessinternational.HotelBooking_Charged_to = _p034.Hotel_Charged_to;
                            businessinternational.Hotel_ProjectNo = _p034.Hotel_ProjectNo;
                            businessinternational.Hotel_Name = _p034.Hotel_Name;
                            businessinternational.hotel_location = _p034.Hotel_Location;
                            businessinternational.Room_Preference = _p034.Room_Preference;
                            businessinternational.Type_Of_rooms = _p034.Room_Type;
                            businessinternational.Number_Of_Rooms = _p034.Number_Of_Rooms.ToString();
                            businessinternational.HotelBooking_Payment_Type = _p034.Hotel_Payment_Type;
                            businessinternational.Hote_Checking_Date = _p034.Hote_Check_In_Date ?? CurrentTime;
                            if (_p034.Hote_Check_In_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Hote_Check_In_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Hote_Checking_Date_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Hote_Check_In_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Hote_Checking_Date_date_string = xx;
                                }
                            }
                            businessinternational.Hotel_Check_In_Time = _p034.Hotel_Check_In_Time;
                            if (_p034.Hotel_Check_Out_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Hotel_Check_Out_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Hotel_Check_Out_Date_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Hotel_Check_Out_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Hotel_Check_Out_Date_date_string = xx;
                                }
                            }
                            businessinternational.Hotel_Check_Out_Time = _p034.Hotel_Check_Out_Time;
                            businessinternational.Hotel_Remark = _p034.Hotel_Remark;
                            if (_p034.Departure_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Departure_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Departure_Date_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Departure_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Departure_Date_date_string = xx;
                                }
                            }
                            businessinternational.Departure_Flight_Number = _p034.Departure_Flight_No;
                            businessinternational.Return_Date = _p034.Return_Date ?? CurrentTime;
                            if (_p034.Return_Date != null)
                            {
                                try
                                {
                                    var stringDate = _p034.Return_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Return_Date_date_string = xx;
                                }
                                catch
                                {
                                    var stringDate = _p034.Return_Date.ToString();
                                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                                    businessinternational.Return_Date_date_string = xx;
                                }
                            }
                            businessinternational.Return_Flight_Number = _p034.Return_Flight_No;
                            businessinternational.Travel_Routing = _p034.Travel_Routing;
                            businessinternational.Note = _p034.Note;
                            businessinternational.type_of_ticket = _p034.Type_Of_Ticket;
                            businessinternational.Cash_Advance = Convert.ToInt32(_p034.Cash_Advance);
                            businessinternational.Amex_Holder = Convert.ToInt32(_p034.Amex_Holder);
                            if (businessinternational.Amex_Holder == 1)
                            {
                                businessinternational.str_amx_holder = "Yes";
                            }
                            else
                            {
                                businessinternational.str_amx_holder = "No";
                            }
                            if (businessinternational.Cash_Advance == 1)
                            {
                                businessinternational.str_cash_advance = "Yes";
                            }
                            else
                            {
                                businessinternational.str_cash_advance = "No";
                            }
                            businessinternational.Salary_Advance = _p034.Salary_Advance;
                            businessinternational.Bank_account = _p034.Bank_account;
                            businessinternational.Ticket_Cost = _p034.Ticket_Cost;
                            businessinternational.IBAN = _p034.IBAN;
                            businessinternational.Hotel_Cost = _p034.Hotel_Cost;
                            businessinternational.Daily_allowance = _p034.Daily_allowance;
                            businessinternational.Other_Expenses = _p034.Other_Expenses;
                            businessinternational.Advance_Remark = _p034.Advance_Remark;
                            businessinternational.Travel_Advance_Total = _p034.Travel_Advance_Total;
                            businessinternational._dependentsInfo = new List<TA_DependentsInfo>();
                            var dependentInfo = _entity.tb_TA_DependentsInfo.Where(x => x.TA_Id == _p034.Id && x.IsActive == true).ToList();
                            foreach (var item in dependentInfo)
                            {
                                TA_DependentsInfo one = new TA_DependentsInfo();
                                one.name = item.Name;
                                one.relation_ship = item.Relationship;
                                one.age = item.Age;
                                one.visa_type = item.Visa_Type;
                                one.ta_type = item.TA_Type;
                                one.remark = item.Remark;
                                businessinternational._dependentsInfo.Add(one);
                            }
                            businessinternational._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                            var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == _p034.RequestId && x.IsActive == true).ToList();
                            foreach (var item in travel)
                            {
                                TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                                one.ticket_number = item.Ticket_Number;
                                one.ticket_price = item.TicketPrice;
                                one.issue_date = item.IssueDate;
                                businessinternational._travelAgencyInfo.Add(one);
                            }
                            businessinternational.Revalidation_Charge = _p034.Revalidation_Charge;
                            businessinternational.Total_Ticket_Price = _p034.Total_Ticket_Price;
                            businessinternational.Ticket_Status = _p034.Ticket_Status ?? 0;
                            if (businessinternational.Ticket_Status == 1)
                            {
                                businessinternational.str_over_all_ticket_status = "All Ticket Issued";
                            }
                            else
                            {
                                businessinternational.str_over_all_ticket_status = "With Pending Tickets";
                            }
                            businessinternational.Business_Days = _p034.Business_Days ?? 0;
                            businessinternational.Friday = _p034.Friday ?? 0;
                            businessinternational.Saturday = _p034.Saturday ?? 0;
                            businessinternational.Total = _p034.Total ?? 0;




                            #endregion RequestData

                            #region common_attachments

                            if (businessinternational._FileListPrint != null && businessinternational._FileListPrint.Count > 0)
                            {
                                var fillistprint = businessinternational._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }

                            #endregion

                            modelprint.BusinessInternational = businessinternational;

                            return View("Print_Page_P034", modelprint);

                            #endregion P034
                        }

                        //T004-InHouse Training by George 06-07-2020
                        else if (modelprint.wf_type == "T004")
                        {
                            #region T004

                            InHouseTrainingModel model_HouseTrain = new InHouseTrainingModel();
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _T004 = _entity.tb_TR_InHouseTraining.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_T004 != null)
                            {
                                model_HouseTrain.RequestId = _T004.RequestId;
                                model_HouseTrain.Remarks = _T004.Remarks;
                            }

                            var CourseInfo = _T004.tb_TR_InHouse_Training_Details.ToList();
                            List<InHouseTrainingCourseModel> ListofCourses = new List<InHouseTrainingCourseModel>();

                            if (CourseInfo != null && CourseInfo.Count > 0)
                            {

                                foreach (var item in CourseInfo)
                                {
                                    InHouseTrainingCourseModel cou = new InHouseTrainingCourseModel();
                                    cou.TrainingId = item.TrainingId;
                                    cou.Code = item.Code;
                                    cou.Course_Name = item.Course_Name;
                                    cou.Type = item.Type;
                                    cou.From_Date = Convert.ToDateTime(item.From_Date);
                                    cou.To_Date = Convert.ToDateTime(item.To_Date);

                                    var stringFromDate = item.From_Date.ToString();
                                    var fdate = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                    cou.From_Date_string_date = fdate;

                                    var stringToDate = item.To_Date.ToString();
                                    var tdate = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                    cou.To_Date_string_date = tdate;
                                    ListofCourses.Add(cou);

                                }
                            }
                            modelprint._CourseList = ListofCourses;
                            modelprint.InhouseTraining = model_HouseTrain;
                            return View("Print_Page_T004", modelprint);

                            #endregion 
                        }
                        else if (modelprint.wf_type == "P045")  //P045 - Chitra 08.07.2020
                        {
                            #region P045

                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];

                            ////Hide Entitlements
                            string canview = splitData[5];

                            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqid).FirstOrDefault();

                            var request_history = _entity.tb_Request_Hdr_History.Where(x => x.Request_ID == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();

                            modelprint.checkstatus = data.Status_ID;

                            if (data.Approver_ID != null)
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == data.RoleId && x.IsActive == true).FirstOrDefault();

                                var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();

                                var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();

                                tb_WF_Template temp = _rpp.GetTemplateDetails(role.Id, data.tb_WFType, profile.Id, data.Approval_No);

                                if (temp != null)
                                {

                                    modelprint.level = Convert.ToInt32(temp.Sequence_NO);
                                    modelprint.my_process_code = temp.Status_ID;
                                    modelprint.my_role_code = role.Role_ID;

                                }

                            }

                            if (canview == "true")
                            {
                                var approver_status = _entity.tb_ApprovalLog.Where(x => x.RequestId == reqid && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();
                                modelprint.refresh_view = true;
                                if (request_history != null)
                                {
                                    modelprint.checkstatus = request_history.Status_ID;
                                    //data.Approver_ID == null && 
                                    if (request_history.Status_ID == "SUB" && data.Status_ID == "INT")
                                    {
                                        modelprint.checkstatus = "NEW";

                                    }
                                    else if (request_history.Status_ID == "INT" && request_history.Approval_No == "1" && approver_status.Status == "EDIT")
                                    {
                                        modelprint.checkstatus = "NEW";

                                    }
                                }
                            }
                            else
                            {
                                modelprint.refresh_view = false;
                            }

                            ////Hide Entitlements

                            var _p045 = _entity.tb_ER_HR_Related.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            ExpenseReportModel expenseReportModel = new ExpenseReportModel();

                            expenseReportModel.RequestId = reqid.ToString();
                            expenseReportModel.ChargeTo = _p045.ChargeTo;
                            expenseReportModel.PlacesVisited = _p045.PlacesVisited;
                            expenseReportModel.Region = _p045.Region;
                            expenseReportModel.PersonnelVisited = _p045.PersonnelVisited;
                            expenseReportModel.BusinessLine = _p045.BusinessLine;
                            expenseReportModel.TARequest = _p045.TARequest;
                            expenseReportModel.TARequestDate = _p045.TARequestDate;
                            expenseReportModel.LastDayOfWork = _p045.LastDayOfWork;
                            expenseReportModel.ReturnToDuty = _p045.ReturnToDuty;
                            expenseReportModel.ComplianceApproved = _p045.ComplianceApproved;
                            expenseReportModel.ComplianceApprovalDate = _p045.ComplianceApprovalDate;

                            expenseReportModel.ExpenseReportDetailList = new List<ExpenseReportDetailModel>();
                            var detailList = _entity.tb_ER_HR_Related_Detail.Where(x => x.ER_ParentId == _p045.Id && x.IsActive == true).OrderBy(x => x.SequenceNum).ToList();
                            foreach (var item in detailList)
                            {
                                ExpenseReportDetailModel detail = new ExpenseReportDetailModel();
                                detail.AccountTypeId = item.AccountTypeId;
                                detail.AccountTypeName = item.AccountTypeName;
                                detail.ERAccount = item.ERAccount;
                                detail.TicketNumbers = item.TicketNumbers;
                                detail.KM = item.KM;
                                detail.Allowance = item.Allowance;
                                detail.Description1 = item.Description1;
                                detail.Description2 = item.Description2;
                                detail.Currency = item.Currency;
                                detail.Amount = item.Amount;
                                detail.ExchangeRate = item.ExchangeRate;
                                detail.AmtLocal = item.AmtLocal;
                                detail.SequenceNum = item.SequenceNum;

                                expenseReportModel.ExpenseReportDetailList.Add(detail);
                            }

                            expenseReportModel.AmtTotal = _p045.AmtTotal;
                            expenseReportModel.LessAdvance = _p045.LessAdvance;
                            expenseReportModel.TicketsPaidByCo = _p045.TicketsPaidByCo;
                            expenseReportModel.NetToReceive = _p045.NetToReceive;

                            #region common_attachments

                            if (expenseReportModel._FileListPrint != null && expenseReportModel._FileListPrint.Count > 0)
                            {
                                var fillistprint = expenseReportModel._FileListPrint.Where(x => x.filebatch == 1).ToList();
                                if (fillistprint.Count > 0)
                                {
                                    foreach (var item in fillistprint)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                    }
                                }
                            }

                            #endregion

                            modelprint.ExpenseReport = expenseReportModel;

                            return View("Print_Page_P045", modelprint);

                            #endregion P045

                        }
                        //T001-External Training by George 13-07-2020
                        else if (modelprint.wf_type == "T001")
                        {
                            #region T001

                            ExternalTrainingModel model_ExtTrain = new ExternalTrainingModel();
                            string reqid = splitData[1];
                            modelprint.request_id = requestprint.tb_Application.Application_Code + "-" + splitData[1];
                            var _T001 = _entity.tb_TR_External_Training.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
                            if (_T001 != null)
                            {
                                model_ExtTrain.RequestId = _T001.RequestId;
                                model_ExtTrain.Justification = _T001.Justification;
                                model_ExtTrain.Years = _T001.Years;
                                model_ExtTrain.GrandTotal = _T001.GrandTotal;
                            }

                            var CourseInfo = _T001.tb_TR_External_Training_Detail.ToList();
                            List<ExternalTrainingDetailModel> ListofCourses = new List<ExternalTrainingDetailModel>();

                            if (CourseInfo != null && CourseInfo.Count > 0)
                            {

                                foreach (var item in CourseInfo)
                                {
                                    ExternalTrainingDetailModel cou = new ExternalTrainingDetailModel();
                                    cou.ExternTrainingId = item.ExternTrainingId;
                                    cou.Course_Name = item.Course_Name;
                                    cou.From_Date = Convert.ToDateTime(item.From_Date);
                                    cou.To_Date = Convert.ToDateTime(item.To_Date);
                                    cou.Training_Type = item.Training_Type;
                                    cou.Location = item.Location;
                                    cou.Cost = item.Cost;
                                    cou.NoofDays = item.NoofDays;

                                    var stringFromDate = item.From_Date.ToString();
                                    var fdate = Convert.ToDateTime(item.From_Date.ToString()).ToString("yyyy-MM-dd");
                                    cou.From_Date_string_date = fdate;

                                    var stringToDate = item.To_Date.ToString();
                                    var tdate = Convert.ToDateTime(item.To_Date.ToString()).ToString("yyyy-MM-dd");
                                    cou.To_Date_string_date = tdate;
                                    ListofCourses.Add(cou);

                                }
                            }
                            modelprint._TrainingDetails = ListofCourses;
                            modelprint.ExternalTraining = model_ExtTrain;
                            return View("Print_Page_T001", modelprint);

                            #endregion 
                        }
                        else
                        {
                            return View(modelprint);
                        }

                    }

                    else
                    {
                        return View("~/Views/Request/_pv_No_Pages.cshtml");
                    }
                }
                else
                {
                    WaitingRequestDetails model1 = new WaitingRequestDetails();
                    //model1.approver_id = request.Approver_ID;
                    //model1.ad_account = empData.ADAccount;
                    //model1.emp_name = empData.Emp_Name;
                    //model1.my_id = model.my_id;
                    return View("~/Views/Request/Print_NoPermission_View.cshtml", model1);
                }
            }
            else
            {
                WaitingRequestDetails model1 = new WaitingRequestDetails();
                //model1.approver_id = request.Approver_ID;
                //model1.ad_account = empData.ADAccount;
                //model1.emp_name = empData.Emp_Name;
                //model1.my_id = model.my_id;
                return View("~/Views/Request/Print_NoPermission_View.cshtml", model1);
            }

        }
        public ActionResult Print_Page_P055(WaitingRequestDetails model)
        {
            return View(model);
        }
        public ActionResult Print_Page_P056(WaitingRequestDetails model)
        {
            return View(model);
        }
        public ActionResult Print_Page_P050(WaitingRequestDetails model)
        {
            return View(model);
        }
        public ActionResult Print_Page_P051(WaitingRequestDetails model)
        {
            return View(model);
        }

        // 15/05/2020 Alena Sics
        public ActionResult Print_Page_P052(WaitingRequestDetails model)
        {
            return View(model);
        }
        public ActionResult Print_Page_P009(HRPaymentrequest model1)
        {
            return View(model1);
        }

        public ActionResult Print_Page_T004(WaitingRequestDetails model)
        {
            return View(model);
        }

        //George For T001 13-07-2020
        public ActionResult Print_Page_T001(WaitingRequestDetails model)
        {
            return View(model);
        }

        public ActionResult Print_Page_P010(HRPaymentrequest model1)
        {
            return View(model1);
        }
        public ActionResult Print_Page_P011(IntroductionCertificateModel model1)
        {
            return View(model1);
        }
        public ActionResult Print_Page_P012(LetterToRealEstateModel model1)
        {
            return View(model1);
        }
        public ActionResult Print_Page_P054(WaitingRequestDetails model)
        {
            return View(model);
        }
        public ActionResult Print_Page_P023(WaitingRequestDetails model)
        {
            return View(model);
        }
        public ActionResult Print_Page_P099(WaitingRequestDetails model)
        {
            return View(model);
        }
        //chitra:srishti on 05/06/2020
        public ActionResult Print_Page_P030(WaitingRequestDetails model)
        {
            return View(model);
        }
        //chitra:srishti on 18/06/2020
        public ActionResult Print_Page_P003(WaitingRequestDetails model)
        {
            return View(model);
        }
        public ActionResult Print_Page_A008(WaitingRequestDetails model) /* ---------------24/06/2020 ALENA SICS FOR A008------------------- */
        {
            return View(model);
        }

        public ActionResult Print_Page_A009(WaitingRequestDetails model) /* ---------------24/06/2020 ALENA SICS FOR A009------------------- */
        {
            return View(model);
        }
        //chitra:srishti on 25/06/2020
        public ActionResult Print_Page_SAS01(WaitingRequestDetails model)
        {
            return View(model);
        }
        //chitra:srishti on 08/07/2020
        public ActionResult Print_Page_SAS01APR(WaitingRequestDetails model)
        {
            return View(model);
        }
        //chitra:srishti on 08/07/2020
        public ActionResult Print_Page_P030APR(WaitingRequestDetails model)
        {
            return View(model);
        }
        //chitra:srishti on 08/07/2020
        public ActionResult Print_Page_P045(WaitingRequestDetails model)
        {
            return View(model);
        }
        public ActionResult Print_Page_P025(WaitingRequestDetails model)
        {
            return View(model);
        }
        //Terrin on 30/3/2020
        public ActionResult Print_Page_P060(Applicationfor_mobile model1)
        {
            return View(model1);
        }
        //Terrin
        public ActionResult Print_Page_P057(WaitingRequestDetails model)
        {
            return View(model);
        }
        //Terrin on 08/3/2020
        //Terrin on 08/3/2020
        public ActionResult Print_Page_P029(MedicalInsuranceApplication model1)
        {
            return View(model1);
        }

        public ActionResult Print_Page_P015(EmployeeRequestModel model1)
        {
            return View(model1);
        }
        //Terrin

        /*PRINT SECTION End here...*/

        //-------------------------------05-03-2020---------------------------------

        //Email Status(Preema)
        public string RequestStatus(string RequestId, string to_employee_name)
        {
            string msg = "Failed";
            bool status = false;
            string current = "";
            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == RequestId && x.IsActive == true).FirstOrDefault();
            try
            {
                var currentStatus = _entity.tb_Status.Where(x => x.Status_ID.Trim() == request.Status_ID && x.IsActive == true).FirstOrDefault();

                if (currentStatus != null)
                {
                    if (request.Approval_No == "1" && request.Status_ID == "INT")
                    {
                        //Basheer on 13-03-2020
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + to_employee_name + " (" + From_Role(request.RoleId.ToString()) + ")";
                        //current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "INT")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + to_employee_name + " (" + From_Role(request.RoleId.ToString()) + ")";
                        //current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "APP")
                    {
                        //Basheer on 28-05-2020
                        if (request.Approver_ID == null)
                        {
                            current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + to_employee_name;
                        }
                        //Basheer end 28-05-2020

                        else
                        {

                            //Basheer on 09-04-2020
                            var grouprole = _entity.tb_Role.Where(x => x.Id == request.RoleId && x.IsActive == true).FirstOrDefault().GroupRole;
                            if (grouprole == true)
                            {
                                current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                            }
                            else
                            {
                                current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " of " + to_employee_name + " (" + From_Role(request.RoleId.ToString()) + ")";
                            }
                            //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " of " + From_Role(request.RoleId.ToString());
                        }
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "PYD")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + to_employee_name + " (" + From_Role(request.RoleId.ToString()) + ")";
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "CNL")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + to_employee_name + " (" + From_Role(request.RoleId.ToString()) + ")";
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "REJ")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + to_employee_name + "(" + From_Role(request.RoleId.ToString()) + ")";
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "CLS")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + to_employee_name + " (" + From_Role(request.RoleId.ToString()) + ")";
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "HLD")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + to_employee_name + " (" + From_Role(request.RoleId.ToString()) + ")";
                        status = true;
                        msg = "Successful";
                    }
                    else if (request.Status_ID == "UPC")
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc + " by " + From_Role(request.RoleId.ToString());
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc + " by " + to_employee_name + " (" + From_Role(request.RoleId.ToString()) + ")";
                        status = true;
                        msg = "Successful";
                    }
                    else
                    {
                        //current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc;
                        current = request.tb_Application.Application_Code + "-" + request.Request_ID + " " + currentStatus.Status_Desc;
                        status = true;
                        msg = "Successful";
                    }


                }
                //if (currentStatus != null)
                //{
                // current = "Request Id " + request.tb_Application.Application_Code + "-" + request.Request_ID + ": " + currentStatus.Status_Desc;// 07-02-2020 Archana
                // status = true;
                // msg = "Successful";
                //}
            }
            catch (Exception ex)
            {

            }

            return current;
        }
        //Email Status(Preema)
        public string From_Role(string roleid)
        {
            if (roleid != string.Empty || roleid != null)
            {
                long id = Convert.ToInt64(roleid);
                var role = _entity.tb_Role.Where(x => x.Id == id && x.IsActive == true).FirstOrDefault();
                if (role != null)
                    return role.Role_Desc;
                else
                    return "";
            }
            else
            {
                return "";
            }
        }
        //A008/A009-Arrangement of Employee Drop and pick up
        public object CostcenterByCountry(string id)
        {
            bool status = false;
            string msg = "Failed";
            long Id = Convert.ToInt64(id);
            var cc = WF_Tool.DataLibrary.Data.DropdownData.GetAllCostCenterByEntry(id).ToList();
            if (cc.Count > 0 && cc != null)
            {
                status = true;
                msg = "Success";
            }
            return Json(new { status = status, msg = msg, list = cc }, JsonRequestBehavior.AllowGet);
        }
        //A007-Accommodation in Hotel/Compound(Preema)
        public object Submit_AO_Accommodation(WaitingRequestDetails model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.WF_ID, model.application_ids, model.emp_local_id, model.wf_template_id, model.creator_id);
            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data
                    msg = "Success";
                    var insert_ao_data = _entity.tb_AO_Accommodation.Create();
                    insert_ao_data.RequestId = data.Item2;
                    insert_ao_data.Accommodation_Type = Convert.ToString(model.accommodation_type);
                    insert_ao_data.Hotel_Name = Convert.ToString(model.hotel_name);
                    insert_ao_data.Hotel_Location = Convert.ToString(model.hotel_location);
                    insert_ao_data.Room_Type = Convert.ToString(model.room_type);
                    insert_ao_data.Room_Preference = Convert.ToString(model.room_preference);
                    insert_ao_data.No_of_Rooms = Convert.ToString(model.no_of_room);
                    insert_ao_data.Hotel_Address = Convert.ToString(model.hotel_address);
                    insert_ao_data.Contact_Person = Convert.ToString(model.contact_person);
                    insert_ao_data.Fax = Convert.ToString(model.fax);
                    insert_ao_data.Approximate_Date = Convert.ToDateTime(model.approaximate_date);
                    insert_ao_data.Approximate_Time = Convert.ToDateTime(model.approaximate_time);
                    insert_ao_data.Payment_Type = Convert.ToString(model.payment_mode);
                    insert_ao_data.From_Period = Convert.ToDateTime(model.from_period);
                    insert_ao_data.To_Period = Convert.ToDateTime(model.to_period);
                    insert_ao_data.Remarks = Convert.ToString(model.remarks);
                    insert_ao_data.IsActive = true;
                    insert_ao_data.Timestamp = CurrentTime;
                    string[] Guest_Name = model.guest_name;


                    _entity.tb_AO_Accommodation.Add(insert_ao_data);
                    status = _entity.SaveChanges() > 0;



                    if (Guest_Name.Length > 0)
                    {
                        for (int i = 0; i < Guest_Name.Length; i++)
                        {
                            if (Guest_Name[i] != "")
                            {
                                var insert_ao_guest_data = _entity.tb_AO_Accommodation_Guest_Details.Create();
                                insert_ao_guest_data.RequestId = data.Item2;
                                insert_ao_guest_data.Accommodation_Id = insert_ao_data.Accommodation_Id;
                                insert_ao_guest_data.Guest_Name = Guest_Name[i];
                                _entity.tb_AO_Accommodation_Guest_Details.Add(insert_ao_guest_data);
                                status = _entity.SaveChanges() > 0;

                                string request_id = insert_ao_guest_data.RequestId;
                                string record = Guest_Name[i];
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Accommodation_Guest_Details", request_id, "INITIATOR");

                            }
                        }
                    }


                    #region Keep AuditLog_A007
                    if (status)
                    {
                        string request_id = insert_ao_data.RequestId;
                        string record = model.accommodation_type + " || " + model.hotel_name + " || " + model.hotel_location + " || " + model.hotel_address + " || " + model.contact_person + " || " + model.hotel_address + " || " + model.room_type + " || " + model.room_preference + " || " + model.no_of_room + " || " + model.contact_person + " || " + model.fax + " || " + model.approaximate_date + " || " + model.approaximate_time + " || " + model.payment_mode + " || " + model.from_period + " || " + model.to_period + " || " + model.remarks + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Accommodation", request_id, "INITIATOR");

                    }

                    #endregion Keep AuditLog_A007

                    #region attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var fillist = model._FileList.Where(x => x.filebatch == 1).ToList();
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                    #endregion

                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }
        //A007-Accommodation in Hotel/Compound(Preema)
        public object Submit_AO_Accommodation_Edit_After_Save(WaitingRequestDetails model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            try
            {
                if (data != null)
                {
                    #region Store Request Data
                    msg = "Success";
                    var edit_ao_data = _entity.tb_AO_Accommodation.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    string request_id = edit_ao_data.RequestId;
                    if (edit_ao_data != null)
                    {
                        #region
                        edit_ao_data.RequestId = request_id;
                        edit_ao_data.Accommodation_Type = Convert.ToString(model.accommodation_type);
                        edit_ao_data.Hotel_Name = Convert.ToString(model.hotel_name);
                        edit_ao_data.Hotel_Location = Convert.ToString(model.hotel_location);
                        edit_ao_data.Room_Type = Convert.ToString(model.room_type);
                        edit_ao_data.Room_Preference = Convert.ToString(model.room_preference);
                        edit_ao_data.No_of_Rooms = Convert.ToString(model.no_of_room);
                        edit_ao_data.Hotel_Address = Convert.ToString(model.hotel_address);
                        edit_ao_data.Contact_Person = Convert.ToString(model.contact_person);
                        edit_ao_data.Fax = Convert.ToString(model.fax);
                        edit_ao_data.Approximate_Date = Convert.ToDateTime(model.approaximate_date);
                        edit_ao_data.Approximate_Time = Convert.ToDateTime(model.approaximate_time);
                        edit_ao_data.Payment_Type = Convert.ToString(model.payment_mode);
                        edit_ao_data.From_Period = Convert.ToDateTime(model.from_period);
                        edit_ao_data.To_Period = Convert.ToDateTime(model.to_period);
                        edit_ao_data.Remarks = Convert.ToString(model.remarks);
                        edit_ao_data.IsActive = true;
                        edit_ao_data.Timestamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;


                        string[] Guest_Name = model.guest_name;

                        if (Guest_Name.Length > 0)
                        {
                            for (int i = 0; i < Guest_Name.Length; i++)
                            {
                                if (Guest_Name[i] != "")
                                {
                                    var insert_ao_guest_data = _entity.tb_AO_Accommodation_Guest_Details.Create();
                                    insert_ao_guest_data.RequestId = request_id;
                                    insert_ao_guest_data.Accommodation_Id = edit_ao_data.Accommodation_Id;
                                    insert_ao_guest_data.Guest_Name = Guest_Name[i];
                                    status1 = _entity.SaveChanges() > 0;

                                    if (status1 == true)
                                    {
                                        string record = Guest_Name[i];
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Accommodation_Guest_Details", request_id, "INITIATOR");
                                    }
                                }
                            }
                        }

                        #region Keep AuditLog_A007

                        if (status == true)
                        {
                            request_id = edit_ao_data.RequestId;
                            string record = model.accommodation_type + " || " + model.hotel_name + " || " + model.hotel_location + " || " + model.hotel_address + " || " + model.contact_person + " || " + model.hotel_address + " || " + model.room_type + " || " + model.room_preference + " || " + model.no_of_room + " || " + model.contact_person + " || " + model.fax + " || " + model.approaximate_date + " || " + model.approaximate_time + " || " + model.payment_mode + " || " + model.from_period + " || " + model.to_period + " || " + model.remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Accommodation", request_id, "INITIATOR");

                            #endregion Keep AuditLog_A007

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                        #endregion

                    }

                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //A007-Accommodation in Hotel/Compound(Preema)
        public object Edit_AO_Accommodation(WaitingRequestDetails model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_ao_data = _entity.tb_AO_Accommodation.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_ao_data != null)
            {
                #region

                insert_ao_data.RequestId = rqid;
                insert_ao_data.Accommodation_Type = Convert.ToString(model.accommodation_type);
                insert_ao_data.Hotel_Name = Convert.ToString(model.hotel_name);
                insert_ao_data.Hotel_Location = Convert.ToString(model.hotel_location);
                insert_ao_data.Room_Type = Convert.ToString(model.room_type);
                insert_ao_data.Room_Preference = Convert.ToString(model.room_preference);
                insert_ao_data.No_of_Rooms = Convert.ToString(model.no_of_room);
                insert_ao_data.Hotel_Address = Convert.ToString(model.hotel_address);
                insert_ao_data.Contact_Person = Convert.ToString(model.contact_person);
                insert_ao_data.Fax = Convert.ToString(model.fax);
                insert_ao_data.Approximate_Date = Convert.ToDateTime(model.approaximate_date);
                insert_ao_data.Approximate_Time = Convert.ToDateTime(model.approaximate_time);
                insert_ao_data.Payment_Type = Convert.ToString(model.payment_mode);
                insert_ao_data.From_Period = Convert.ToDateTime(model.from_period);
                insert_ao_data.To_Period = Convert.ToDateTime(model.to_period);
                insert_ao_data.Remarks = Convert.ToString(model.remarks);
                insert_ao_data.IsActive = true;
                insert_ao_data.Timestamp = CurrentTime;
                string[] Guest_Name = model.guest_name;
                status = _entity.SaveChanges() > 0;

                if (Guest_Name.Length > 0)
                {
                    for (int i = 0; i < Guest_Name.Length; i++)
                    {
                        if (Guest_Name[i] != "")
                        {
                            var insert_ao_guest_data = _entity.tb_AO_Accommodation_Guest_Details.Create();
                            insert_ao_guest_data.RequestId = rqid;
                            insert_ao_guest_data.Accommodation_Id = insert_ao_data.Accommodation_Id;
                            insert_ao_guest_data.Guest_Name = Guest_Name[i];
                            status1 = _entity.SaveChanges() > 0;
                            if (status1 == true)
                            {
                                string record = Guest_Name[i];
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Accommodation_Guest_Details", insert_ao_guest_data.RequestId, "INITIATOR");
                            }

                        }
                    }
                }

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var fillist = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var fillist = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                #endregion


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_ao_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_A007
                            string request_id = insert_ao_data.RequestId;
                            string record = model.accommodation_type + " || " + model.guest_name + " || " + model.hotel_name + " || " + model.hotel_location + " || " + model.hotel_address + " || " + model.contact_person + " || " + model.hotel_address + " || " + model.room_type + " || " + model.room_preference + " || " + model.no_of_room + " || " + model.contact_person + " || " + model.fax + " || " + model.approaximate_date + " || " + model.approaximate_time + " || " + model.payment_mode + " || " + model.from_period + " || " + model.to_period + " || " + model.remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_HousingAllowance", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_A007
                        }
                        else
                        {

                            #region Log for SaveChanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion

                            #region Keep AuditLog_A007 for initiator after backtoinitiator

                            string request_id = insert_ao_data.RequestId;
                            string record = model.accommodation_type + " || " + model.hotel_name + " || " + model.hotel_location + " || " + model.hotel_address + " || " + model.contact_person + " || " + model.hotel_address + " || " + model.room_type + " || " + model.room_preference + " || " + model.no_of_room + " || " + model.contact_person + " || " + model.fax + " || " + model.approaximate_date + " || " + model.approaximate_time + " || " + model.payment_mode + " || " + model.from_period + " || " + model.to_period + " || " + model.remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Accommodation", request_id, "INITIATOR");

                            #endregion Keep AuditLog_A007



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //A009-Arrangement of Employee Drop ALENA 02/04/2020
        public object Submit_AO_EmployeeDrop(EmployeeDropModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data
                    msg = "Success";
                    var insert_ao_data = _entity.tb_AO_Employee_Drop.Create();
                    insert_ao_data.RequestId = data.Item2;
                    insert_ao_data.Cost_Center = Convert.ToInt64(model.cost_center);
                    insert_ao_data.Employee_Name = Convert.ToString(model.employee_name);
                    insert_ao_data.Drop_at = Convert.ToString(model.drop_at);
                    insert_ao_data.Drop_Date = Convert.ToDateTime(model.date);
                    insert_ao_data.Drop_Time = Convert.ToDateTime(model.time);
                    insert_ao_data.Remarks = Convert.ToString(model.remarks);
                    insert_ao_data.IsActive = true;
                    insert_ao_data.Timestamp = CurrentTime;
                    _entity.tb_AO_Employee_Drop.Add(insert_ao_data);
                    status = _entity.SaveChanges() > 0;
                    #region attachments
                    //Basheer on 26-02-2020 to to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {

                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //Basheer code end here
                    #endregion

                    #region Keep AuditLog_A009
                    if (status)
                    {
                        string request_id = insert_ao_data.RequestId;
                        string record = model.cost_center + " || " + model.employee_name + " || " + model.drop_at + " || " + model.date + " || " + model.time + " || " + model.remarks + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Drop", request_id, "INITIATOR");

                    }

                    #endregion Keep AuditLog_A009

                    //var insert_ao_admin_data = _entity.tb_AO_Administration_Drop.Create();
                    //insert_ao_admin_data.RequestId = data.Item2;
                    //insert_ao_admin_data.Quantity = Convert.ToInt32(model.quantity);
                    //insert_ao_admin_data.Driver_Name = Convert.ToString(model.driver_name);
                    //insert_ao_admin_data.Mobile_No = Convert.ToString(model.mobile_no);
                    //insert_ao_admin_data.Emp_Id = Convert.ToString(model.emp_id);
                    //insert_ao_admin_data.Car_Model = Convert.ToString(model.car_model);                  
                    //insert_ao_admin_data.IsActive = true;
                    //insert_ao_admin_data.Timestamp = CurrentTime;
                    //_entity.tb_AO_Administration_Drop.Add(insert_ao_admin_data);
                    //status = _entity.SaveChanges() > 0;

                    //#region Keep AuditLog_A009
                    //if (status)
                    //{
                    //    string request_id = insert_ao_admin_data.RequestId;
                    //    string record = model.quantity + " || " + model.driver_name + " || " + model.mobile_no + " || " + model.emp_id + " || " + model.car_model +" || " + CurrentTime;
                    //    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Administration_Drop", request_id, "INITIATOR");

                    //}



                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }
        //A009-Arrangement of Employee Drop ALENA 02/04/2020
        public object Submit_AO_EmployeeDrop_Edit_After_Save(EmployeeDropModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            try
            {
                if (data != null)
                {
                    #region Store Request Data
                    msg = "Success";
                    var edit_ao_data = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    string request_id = edit_ao_data.RequestId;
                    if (edit_ao_data != null)
                    {
                        #region
                        edit_ao_data.RequestId = request_id;
                        edit_ao_data.Cost_Center = Convert.ToInt64(model.cost_center);
                        edit_ao_data.Employee_Name = Convert.ToString(model.employee_name);
                        edit_ao_data.Drop_at = Convert.ToString(model.drop_at);
                        edit_ao_data.Drop_Date = Convert.ToDateTime(model.date);
                        edit_ao_data.Drop_Time = Convert.ToDateTime(model.time);
                        edit_ao_data.Remarks = Convert.ToString(model.remarks);
                        edit_ao_data.IsActive = true;
                        edit_ao_data.Timestamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_A009
                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }


                        }
                        #endregion attachment edit
                        if (status == true)
                        {
                            request_id = edit_ao_data.RequestId;
                            string record = model.cost_center + " || " + model.employee_name + " || " + model.drop_at + " || " + model.date + " || " + model.time + " || " + model.remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Accommodation", request_id, "INITIATOR");

                            #endregion Keep AuditLog_A009

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }
                        #endregion

                    }

                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        // 02/07/2020 ALENA SICS A009
        public object Edit_AO_EmployeeDrop(WaitingRequestDetails model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');

            //  string rqid = split[1];
            // string rqid = split[0];
            if (split[0] == model.request_id)
            {
                string rqid = split[0];
                var insert_ao_data = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
                if (insert_ao_data != null)
                {
                    #region
                    #region
                    insert_ao_data.Cost_Center = Convert.ToInt32(model.cost_center);
                    insert_ao_data.Employee_Name = model.employee_name;
                    insert_ao_data.Drop_at = Convert.ToString(model.drop_at);
                    insert_ao_data.Drop_Date = Convert.ToDateTime(model.date);
                    insert_ao_data.Drop_Time = Convert.ToDateTime(model.time);
                    insert_ao_data.Remarks = model.remarks;
                    // administration save
                    insert_ao_data.quantity = Convert.ToInt32(model.quantity);
                    insert_ao_data.driver_mobile = model.Mobile_No;
                    insert_ao_data.driver_emp_id = model.Employee_id;
                    insert_ao_data.driver_name = model.drivername;
                    insert_ao_data.car_model = model.carmodel;
                    //end administration
                    status = _entity.SaveChanges() > 0;
                    #endregion
                    if (status == true)
                    {
                        msg = "Request Edit Successfully";
                        var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_ao_data.RequestId && x.IsActive == true).FirstOrDefault();
                        var application = req.tb_Application;
                        if (req != null)
                        {
                            if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                                var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                                var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                                #region Keep AuditLog_A009
                                string request_id = insert_ao_data.RequestId;
                                string record = model.cost_center + " || " + model.date.ToString() + " || " + model.emp_name + " || " + model.time + " || " + model.pickup_at + " || " + model.remarks + "||" + CurrentTime; //nimmi 07/02/2020
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Drop", request_id, role.Role_Desc);
                                #endregion Keep AuditLog_A009
                            }
                            else
                            {
                                #region Log for SaveChanges
                                //Basheer on 06-02-2020 to save log for savechanges
                                string remark = "Request was Edited by";
                                // 02/07/2020 ALENA SICS COMMEMTED BELOW CODE------
                                //string[] split1 = model.request_id.Split('-');
                                //string rqid1 = split[1]; //END-------------------
                                //Basheer on 26-03-2020 for checking request
                                if (req.Creater_ID == model.emp_local_id)
                                {
                                    // 02/07/2020 ALENA SICS COMMEMTED BELOW CODE------
                                    //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", ""); //END--------
                                }
                                else
                                {
                                    // 02/07/2020 ALENA SICS COMMEMTED BELOW CODE------
                                    //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", ""); //END------
                                }

                                #endregion

                                #region Keep AuditLog_p055 for initiator after backtoinitiator
                                string request_id = insert_ao_data.RequestId;
                                string record = model.cost_center + " || " + model.date.ToString() + " || " + model.emp_name + " || " + model.time + " || " + model.drop_at + " || " + model.remarks + "||" + CurrentTime;
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Drop", request_id, "INITIATOR");
                                #endregion Keep AuditLog_A009
                            }
                        }
                    }
                    #endregion
                }
            }

            if (split[0] == "AO")
            {
                string rqid11 = split[1];
                ///   var reqeusthrdid = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid11).FirstOrDefault();
                ///   if (model.request_id == reqeusthrdid.Request_ID)
                ///   {
                //     string rqid1 = split[1];
                var insert_ao_data = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == rqid11 && x.IsActive == true).FirstOrDefault();
                ///  var insert_ao_data = _entity.tb_AO_Employee_Drop.Where(x => x.RequestId == reqeusthrdid.Request_ID && x.IsActive == true).FirstOrDefault();

                if (insert_ao_data != null)
                {
                    #region
                    #region
                    insert_ao_data.Cost_Center = Convert.ToInt32(model.cost_center);
                    insert_ao_data.Employee_Name = model.employee_name;
                    insert_ao_data.Drop_at = Convert.ToString(model.drop_at);
                    insert_ao_data.Drop_Date = Convert.ToDateTime(model.date);
                    insert_ao_data.Drop_Time = Convert.ToDateTime(model.time);
                    insert_ao_data.Remarks = model.remarks;
                    // administration save
                    insert_ao_data.quantity = Convert.ToInt32(model.quantity);
                    insert_ao_data.driver_mobile = model.Mobile_No;
                    insert_ao_data.driver_emp_id = model.Employee_id;
                    insert_ao_data.driver_name = model.drivername;
                    insert_ao_data.car_model = model.carmodel;
                    //end administration
                    status = _entity.SaveChanges() > 0;
                    #endregion
                    if (status == true)
                    {
                        msg = "Request Edit Successfully";
                        var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_ao_data.RequestId && x.IsActive == true).FirstOrDefault();
                        var application = req.tb_Application;
                        if (req != null)
                        {
                            if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                                var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                                var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                                #region Keep AuditLog_A009
                                string request_id = insert_ao_data.RequestId;
                                string record = model.cost_center + " || " + model.date.ToString() + " || " + model.emp_name + " || " + model.time + " || " + model.pickup_at + " || " + model.remarks + "||" + CurrentTime; //nimmi 07/02/2020
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Drop", request_id, role.Role_Desc);
                                #endregion Keep AuditLog_A009
                            }
                            else
                            {
                                #region Log for SaveChanges
                                //Basheer on 06-02-2020 to save log for savechanges
                                string remark = "Request was Edited by";
                                // 02/07/2020 ALENA SICS COMMEMTED BELOW CODE------
                                //string[] split1 = model.request_id.Split('-');
                                //string rqid1 = split[1]; //END-------------------
                                //Basheer on 26-03-2020 for checking request
                                if (req.Creater_ID == model.emp_local_id)
                                {
                                    // 02/07/2020 ALENA SICS COMMEMTED BELOW CODE------
                                    //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", ""); //END--------
                                }
                                else
                                {
                                    // 02/07/2020 ALENA SICS COMMEMTED BELOW CODE------
                                    //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", ""); //END------
                                }

                                #endregion

                                #region Keep AuditLog_p055 for initiator after backtoinitiator
                                string request_id = insert_ao_data.RequestId;
                                string record = model.cost_center + " || " + model.date.ToString() + " || " + model.emp_name + " || " + model.time + " || " + model.drop_at + " || " + model.remarks + "||" + CurrentTime;
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Drop", request_id, "INITIATOR");
                                #endregion Keep AuditLog_A009
                            }
                        }
                    }
                    #endregion
                }
            }
            //}
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        // 23/06/2020 ALENA SICS AO_EmployeePickUp
        public object Submit_AO_EmployeePickUp(EmployeePickupModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_ao_pickup = _entity.tb_AO_Employee_Pickup.Create();
                insert_ao_pickup.RequestId = data.Item2;
                insert_ao_pickup.Employee_Name = model.employee_name;
                insert_ao_pickup.Cost_Center = model.cost_center;
                insert_ao_pickup.Pick_up = model.pickup_at;
                insert_ao_pickup.Pickup_Date = Convert.ToDateTime(model.date);
                insert_ao_pickup.Pickup_Time = Convert.ToDateTime(model.time);
                insert_ao_pickup.Remarks = model.remarks;
                insert_ao_pickup.IsActive = true;
                insert_ao_pickup.Timestamp = CurrentTime;
                _entity.tb_AO_Employee_Pickup.Add(insert_ao_pickup);
                status = _entity.SaveChanges() > 0;
                #endregion
                #region attachments
                //Basheer on 26-02-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {

                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion
                #region Keep AuditLog_A008
                if (status)
                {
                    string request_id = insert_ao_pickup.RequestId;
                    string record = model.cost_center + " || " + model.employee_name + " || " + model.pickup_at + " || " + model.date + " || " + model.time + " || " + model.remarks + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Pickup", request_id, "INITIATOR");

                }

                #endregion Keep AuditLog_A008
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        // 23/06/2020 ALENA SICS AO_EmployeePickUp
        public object Submit_AO_EmployeePickUp_Edit_After_Save(EmployeePickupModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_ao_pickup = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                string request_id = edit_ao_pickup.RequestId;
                if (edit_ao_pickup != null)
                {
                    #region
                    edit_ao_pickup.RequestId = request_id;
                    edit_ao_pickup.Cost_Center = Convert.ToInt64(model.cost_center);
                    edit_ao_pickup.Employee_Name = Convert.ToString(model.employee_name);
                    edit_ao_pickup.Pick_up = Convert.ToString(model.pickup_at);
                    edit_ao_pickup.Pickup_Date = Convert.ToDateTime(model.date);
                    edit_ao_pickup.Pickup_Time = Convert.ToDateTime(model.time);
                    edit_ao_pickup.Remarks = Convert.ToString(model.remarks);
                    edit_ao_pickup.IsActive = true;
                    edit_ao_pickup.Timestamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;


                    #region Keep AuditLog_A008
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }
                    #endregion attachment edit
                    if (status == true)
                    {
                        request_id = edit_ao_pickup.RequestId;
                        string record = model.cost_center + " || " + model.employee_name + " || " + model.pickup_at + " || " + model.date + " || " + model.time + " || " + model.remarks + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Pickup", request_id, "INITIATOR");

                        #endregion Keep AuditLog_A008

                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                    #endregion

                }

                #endregion
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        // 23/06/2020 ALENA SICS AO_EmployeePickUp
        public object Edit_AO_EmployeePickUp(WaitingRequestDetails model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');

            //  string rqid = split[1];
            // string rqid = split[0];
            if (split[0] == model.request_id)
            {
                string rqid = split[0];
                var insert_ao_data = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
                #region
                if (insert_ao_data != null)
                {
                    #region
                    insert_ao_data.Cost_Center = Convert.ToInt32(model.cost_center);
                    insert_ao_data.Employee_Name = model.employee_name;
                    insert_ao_data.Pick_up = Convert.ToString(model.pickup_at);
                    insert_ao_data.Pickup_Date = Convert.ToDateTime(model.date);
                    insert_ao_data.Pickup_Time = Convert.ToDateTime(model.time);
                    insert_ao_data.Remarks = model.remarks;
                    // administration save
                    insert_ao_data.quantity = model.quantity;
                    //   insert_ao_data.Pickup_Id = Convert.ToInt32(insert_ao_data.Pickup_Id);
                    insert_ao_data.driver_mobile = model.Mobile_No;
                    insert_ao_data.driver_emp_id = model.Employee_id;
                    //string s = model.drivername;
                    //var driverid = _entity.tb_Drivers.Where(x => x.Employee_id == model.Employee_id).FirstOrDefault();
                    //insert_ao_data.Driver_Id = driverid.Id;
                    insert_ao_data.driver_name = model.drivername;
                    insert_ao_data.car_model = model.carmodel;
                    //end administration
                    status = _entity.SaveChanges() > 0;

                    #endregion

                    if (status == true)
                    {
                        msg = "Request Edit Successfully";
                        var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_ao_data.RequestId && x.IsActive == true).FirstOrDefault();
                        var application = req.tb_Application;
                        if (req != null)
                        {
                            if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                                var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                                var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                                #region Keep AuditLog_A008
                                string request_id = insert_ao_data.RequestId;
                                string record = model.cost_center + " || " + model.date.ToString() + " || " + model.emp_name + " || " + model.time + " || " + model.pickup_at + " || " + model.remarks + "||" + CurrentTime; //nimmi 07/02/2020
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Pickup", request_id, role.Role_Desc);
                                #endregion Keep AuditLog_A008
                            }
                            else
                            {

                                #region Log for SaveChanges
                                //Basheer on 06-02-2020 to save log for savechanges
                                string remark = "Request was Edited by";
                                // 02/07/2020 ALENA SICS COMMENTED BELOW LINE----------
                                //string[] split1 = model.request_id.Split('-');
                                //string rqid1 = split[1]; END--------------------------
                                //Basheer on 26-03-2020 for checking request
                                if (req.Creater_ID == model.emp_local_id)
                                {
                                    // 02/07/2020 ALENA SICS COMMENTED BELOW LINE----------
                                    //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                }
                                else
                                {
                                    // 02/07/2020 ALENA SICS COMMENTED BELOW LINE----------
                                    //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                }

                                #endregion

                                #region Keep AuditLog_p055 for initiator after backtoinitiator
                                string request_id = insert_ao_data.RequestId;
                                string record = model.cost_center + " || " + model.date.ToString() + " || " + model.emp_name + " || " + model.time + " || " + model.pickup_at + " || " + model.remarks + "||" + CurrentTime; //nimmi 07/02/2020
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Pickup", request_id, "INITIATOR");
                                #endregion Keep AuditLog_A008
                            }
                        }
                    }
                }
                #endregion
            }
            if (split[0] == "AO")
            {
                string rqid11 = split[1];
                var insert_ao_data = _entity.tb_AO_Employee_Pickup.Where(x => x.RequestId == rqid11 && x.IsActive == true).FirstOrDefault();
                #region
                if (insert_ao_data != null)
                {
                    #region
                    insert_ao_data.Cost_Center = Convert.ToInt32(model.cost_center);
                    insert_ao_data.Employee_Name = model.employee_name;
                    insert_ao_data.Pick_up = Convert.ToString(model.pickup_at);
                    insert_ao_data.Pickup_Date = Convert.ToDateTime(model.date);
                    insert_ao_data.Pickup_Time = Convert.ToDateTime(model.time);
                    insert_ao_data.Remarks = model.remarks;
                    // administration save
                    insert_ao_data.quantity = model.quantity;
                    //   insert_ao_data.Pickup_Id = Convert.ToInt32(insert_ao_data.Pickup_Id);
                    insert_ao_data.driver_mobile = model.Mobile_No;
                    insert_ao_data.driver_emp_id = model.Employee_id;
                    //string s = model.drivername;
                    //var driverid = _entity.tb_Drivers.Where(x => x.Employee_id == model.Employee_id).FirstOrDefault();
                    //insert_ao_data.Driver_Id = driverid.Id;
                    insert_ao_data.driver_name = model.drivername;
                    insert_ao_data.car_model = model.carmodel;
                    //end administration
                    status = _entity.SaveChanges() > 0;

                    #endregion

                    if (status == true)
                    {
                        msg = "Request Edit Successfully";
                        var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_ao_data.RequestId && x.IsActive == true).FirstOrDefault();
                        var application = req.tb_Application;
                        if (req != null)
                        {
                            if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                                var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                                var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                                #region Keep AuditLog_A008
                                string request_id = insert_ao_data.RequestId;
                                string record = model.cost_center + " || " + model.date.ToString() + " || " + model.emp_name + " || " + model.time + " || " + model.pickup_at + " || " + model.remarks + "||" + CurrentTime; //nimmi 07/02/2020
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Pickup", request_id, role.Role_Desc);
                                #endregion Keep AuditLog_A008
                            }
                            else
                            {

                                #region Log for SaveChanges
                                //Basheer on 06-02-2020 to save log for savechanges
                                string remark = "Request was Edited by";
                                // 02/07/2020 ALENA SICS COMMENTED BELOW LINE----------
                                //string[] split1 = model.request_id.Split('-');
                                //string rqid1 = split[1]; END--------------------------
                                //Basheer on 26-03-2020 for checking request
                                if (req.Creater_ID == model.emp_local_id)
                                {
                                    // 02/07/2020 ALENA SICS COMMENTED BELOW LINE----------
                                    //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                }
                                else
                                {
                                    // 02/07/2020 ALENA SICS COMMENTED BELOW LINE----------
                                    //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                }

                                #endregion

                                #region Keep AuditLog_p055 for initiator after backtoinitiator
                                string request_id = insert_ao_data.RequestId;
                                string record = model.cost_center + " || " + model.date.ToString() + " || " + model.emp_name + " || " + model.time + " || " + model.pickup_at + " || " + model.remarks + "||" + CurrentTime; //nimmi 07/02/2020
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Employee_Pickup", request_id, "INITIATOR");
                                #endregion Keep AuditLog_A008
                            }
                        }
                    }
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //P049-Other Personnel Services(Preema)
        public object Submit_PP_OtherPersonnelServices(OtherPersonnelServicesModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_Other_Personnel_Services.Create();
                insert_pp_data.RequestId = data.Item2;

                insert_pp_data.Request_Details = model.request_details;
                insert_pp_data.IsActive = true;
                insert_pp_data.Timestamp = CurrentTime;
                _entity.tb_PP_Other_Personnel_Services.Add(insert_pp_data);
                status = _entity.SaveChanges() > 0;

                #endregion
                #region Keep AuditLog_p049
                if (status)
                {
                    string request_id = insert_pp_data.RequestId;
                    string record = model.request_details + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Other_Personnel_Services", request_id, "INITIATOR");
                }
                #endregion Keep AuditLog_p049


                #region attachments
                // to store attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                #endregion

            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        //P049-Other Personnel Services(Preema)
        public object Submit_PP_OtherPersonnelServices_Edit_After_Save(OtherPersonnelServicesModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_Other_Personnel_Services.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    edit_pp_data.Request_Details = model.request_details;
                    edit_pp_data.IsActive = true;
                    edit_pp_data.Timestamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p049
                    if (status)
                    {
                        string request_id = edit_pp_data.RequestId;
                        string record = model.request_details + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Other_Personnel_Services", request_id, "INITIATOR");
                    }

                    #endregion Keep AuditLog_p049

                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                    }

                    #endregion attachment edit

                    if (status == true) // to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //P049-Other Personnel Services(Preema)
        public object Edit_PP_OtherPersonnelServices(OtherPersonnelServicesModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_Other_Personnel_Services.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                insert_pp_data.RequestId = rqid;
                insert_pp_data.Request_Details = Convert.ToString(model.request_details.Trim());
                insert_pp_data.document_price = model.document_price;
                insert_pp_data.IsActive = true;
                insert_pp_data.Timestamp = CurrentTime;
                status = _entity.SaveChanges() > 0;

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p049
                            string request_id = insert_pp_data.RequestId;
                            string record = model.request_details + " || " + model.document_price + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Other_Personnel_Services", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p049
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges                           
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion

                            #region Keep AuditLog_p049 for initiator after backtoinitiator

                            string request_id = insert_pp_data.RequestId;
                            string record = model.request_details + " || " + model.document_price + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Other_Personnel_Services", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p049

                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //P061-ESAP Contribution
        public ActionResult GetPayrollCode(long CompanyId)
        {
            var data = _entity.tb_Company.Where(x => x.Company_Id == CompanyId && x.IsActive == true).FirstOrDefault();
            // var toEmp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.eforwardPerson && x.IsActive == true).FirstOrDefault();


            return Json(data.Payroll_code, JsonRequestBehavior.AllowGet);
        }
    
        // 29/06/2020 ALENA SICS FOR A008
        public JsonResult GetDriverName(long Id)
        {
            WaitingRequestDetails model = new WaitingRequestDetails();
            var data = _entity.tb_Drivers.Where(x => x.Id == Id).FirstOrDefault();
            if (data != null)
            {
                model.drivername = data.Driver_Name;
                model.Employee_id = data.Employee_id;
                model.Mobile_No = data.Mobile_No;
            }
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        //P061-ESAP Contribution(Preema)
        public object Submit_PP_ESAP_Contribution(EmployeeRequestModel model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data

                    if (model.ESAP_ContributionModel != null)
                    {

                        msg = "Success";
                        var ESAP = model.ESAP_ContributionModel;

                        var insert_pp_data = _entity.tb_PP_ESAP_Contribution.Create();
                        insert_pp_data.RequestId = data.Item2;
                        insert_pp_data.IsActive = true;
                        insert_pp_data.TimeStamp = DateTime.Now;
                        insert_pp_data.For_the_Period_of = ESAP.For_the_Period_of;
                        insert_pp_data.Remarks = ESAP.Remarks;
                        insert_pp_data.Grand_Total = Convert.ToDecimal(ESAP.Grand_Total);
                        insert_pp_data.Note = ESAP.Note;
                        _entity.tb_PP_ESAP_Contribution.Add(insert_pp_data);
                        status = _entity.SaveChanges() > 0;

                        if (ESAP.strCompany.Length > 0)
                        {
                            for (int i = 0; i < ESAP.strCompany.Length; i++)
                            {
                                if (ESAP.strCompany[i] != "" && ESAP.strCompany[i] != "0")
                                {
                                    var insert_pp_company_data = _entity.tb_PP_ESAP_Company.Create();
                                    insert_pp_company_data.RequestId = data.Item2;
                                    insert_pp_company_data.TimeStamp = DateTime.Now;

                                    insert_pp_company_data.Company_Id = Convert.ToInt64(ESAP.strCompany[i]);
                                    insert_pp_company_data.Total_Amount_in_USD = Convert.ToDecimal(ESAP.strTotal[i]);
                                    insert_pp_company_data.esap_id = Convert.ToInt64(insert_pp_data.Id);

                                    _entity.tb_PP_ESAP_Company.Add(insert_pp_company_data);
                                    status1 = _entity.SaveChanges() > 0;

                                    string request_id = insert_pp_data.RequestId;
                                    string record = insert_pp_company_data.Company_Id + " || " + insert_pp_company_data.Total_Amount_in_USD + " || " + insert_pp_company_data.esap_id + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_ESAP_Company", request_id, "INITIATOR");

                                }
                            }
                        }

                        #region attachments
                        //to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                        #endregion
                        #region attachments
                        // to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }

                        #endregion

                        #region Keep AuditLog_P061
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId;
                            string record = insert_pp_data.For_the_Period_of + " || " + insert_pp_data.Remarks + " || " + insert_pp_data.Grand_Total + " || " + insert_pp_data.Note + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_ESAP_Contribution", request_id, "INITIATOR");

                        }

                        #endregion Keep AuditLog_P061

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }
        //P061-ESAP Contribution(Preema)
        public object Submit_PP_ESAP_Contribution_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            try
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                if (data != null)
                {
                    #region Store Request Data                    
                    var edit_pp_data = _entity.tb_PP_ESAP_Contribution.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    if (edit_pp_data != null)
                    {
                        msg = "Success";
                        var ESAP = model.ESAP_ContributionModel;
                        edit_pp_data.RequestId = data.Request_ID;
                        edit_pp_data.For_the_Period_of = ESAP.For_the_Period_of;
                        edit_pp_data.Remarks = ESAP.Remarks;
                        edit_pp_data.Grand_Total = ESAP.Grand_Total;
                        edit_pp_data.Note = ESAP.Note;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;

                        var company_data = _entity.tb_PP_ESAP_Company.Where(x => x.RequestId == data.Request_ID).FirstOrDefault();
                        if (company_data.RequestId != "")
                        {
                            //delete tb_PP_ESAP_Company table
                            _entity.tb_PP_ESAP_Company.Where(x => x.RequestId == data.Request_ID).ToList().ForEach(x => _entity.tb_PP_ESAP_Company.Remove(x));
                            _entity.SaveChanges();
                        }

                        string[] Company_Id = ESAP.strCompany;

                        if (Company_Id.Length > 0)
                        {
                            for (int i = 0; i < Company_Id.Length; i++)
                            {
                                if (Company_Id[i] != "" && Company_Id[i] != "0")
                                {
                                    var insert_pp_company_data = _entity.tb_PP_ESAP_Company.Create();
                                    insert_pp_company_data.RequestId = data.Request_ID;
                                    insert_pp_company_data.TimeStamp = DateTime.Now;
                                    insert_pp_company_data.Company_Id = Convert.ToInt64(Company_Id[i]);
                                    insert_pp_company_data.Total_Amount_in_USD = Convert.ToDecimal(ESAP.strTotal[i]);
                                    insert_pp_company_data.esap_id = Convert.ToInt64(edit_pp_data.Id);
                                    _entity.tb_PP_ESAP_Company.Add(insert_pp_company_data);
                                    status1 = _entity.SaveChanges() > 0;

                                    if (status1 == true)
                                    {
                                        string request_id = edit_pp_data.RequestId;
                                        string record = insert_pp_company_data.Company_Id + " || " + insert_pp_company_data.Total_Amount_in_USD + " || " + insert_pp_company_data.esap_id + " || " + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_ESAP_Company", request_id, "INITIATOR");
                                    }
                                }
                            }
                        }


                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }
                        }

                        #endregion attachment edit

                        #region Keep AuditLog_P061

                        if (status == true)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.For_the_Period_of + " || " + edit_pp_data.Remarks + " || " + edit_pp_data.Grand_Total + " || " + edit_pp_data.Note + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_ESAP_Contribution", request_id, "INITIATOR");

                            #endregion Keep AuditLog_P061

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                    }
                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //P061-ESAP Contribution(Preema)
        public object Edit_PP_ESAP_Contribution(EmployeeRequestModel model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_pp_data = _entity.tb_PP_ESAP_Contribution.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {
                #region

                var ESAP = model.ESAP_ContributionModel;
                edit_pp_data.RequestId = rqid;
                edit_pp_data.For_the_Period_of = ESAP.For_the_Period_of;
                edit_pp_data.Remarks = ESAP.Remarks;
                edit_pp_data.Grand_Total = ESAP.Grand_Total;
                edit_pp_data.Note = ESAP.Note;
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;

                var company_data = _entity.tb_PP_ESAP_Company.Where(x => x.RequestId == rqid).FirstOrDefault();
                if (company_data.RequestId != "")
                {
                    //delete tb_PP_ESAP_Company table
                    _entity.tb_PP_ESAP_Company.Where(x => x.RequestId == rqid).ToList().ForEach(x => _entity.tb_PP_ESAP_Company.Remove(x));
                    _entity.SaveChanges();
                }

                string[] Company_Id = ESAP.strCompany;

                if (Company_Id.Length > 0)
                {
                    for (int i = 0; i < Company_Id.Length; i++)
                    {
                        if (Company_Id[i] != "" && Company_Id[i] != "0")
                        {
                            var insert_pp_company_data = _entity.tb_PP_ESAP_Company.Create();
                            insert_pp_company_data.RequestId = edit_pp_data.RequestId;
                            insert_pp_company_data.TimeStamp = DateTime.Now;
                            insert_pp_company_data.Company_Id = Convert.ToInt64(Company_Id[i]);
                            insert_pp_company_data.Total_Amount_in_USD = Convert.ToDecimal(ESAP.strTotal[i]);
                            insert_pp_company_data.esap_id = Convert.ToInt64(edit_pp_data.Id);
                            _entity.tb_PP_ESAP_Company.Add(insert_pp_company_data);
                            status1 = _entity.SaveChanges() > 0;

                            if (status1 == true)
                            {
                                string request_id = edit_pp_data.RequestId;
                                string record = insert_pp_company_data.Company_Id + " || " + insert_pp_company_data.Total_Amount_in_USD + " || " + insert_pp_company_data.esap_id + " || " + CurrentTime;
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_ESAP_Company", request_id, "INITIATOR");
                            }
                        }
                    }
                }

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                #endregion

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                            #region Keep AuditLog_p061

                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.For_the_Period_of + " || " + edit_pp_data.Remarks + " || " + edit_pp_data.Grand_Total + " || " + edit_pp_data.Note + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_ESAP_Contribution", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p061
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //string remark = "Request was Edited by";
                            ////to save log for savechanges
                            //string[] split1 = model.request_id.Split('-');

                            //var req_id = split1[1];
                            //var emp_local_id = model.emp_local_id;
                            //string id = req_id + "~" + emp_local_id + "~" + model.wf_id;

                            //Tuple<bool, string, string, string> result = _rpp.SubmitRequest(id, req);
                            //string rqid1 = split[1];

                            //if (req.Creater_ID == model.emp_local_id)
                            //{
                            //    bool senMail = _ApprovalLogRepository.Send_Edit_Login(req.Request_ID, result.Item2, "", req.Employee_ID, req.Creater_ID, 0.ToString(), remark, req, result.Item3, result.Item4);
                            //}
                            //else
                            //{
                            //    bool senMail = _ApprovalLogRepository.Send_Edit_Login(req.Request_ID, result.Item2, "", req.Employee_ID, model.emp_local_id, 0.ToString(), remark, req, result.Item3, result.Item4);
                            //}

                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion

                            #region Keep AuditLog_p061 for initiator after backtoinitiator

                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.For_the_Period_of + " || " + edit_pp_data.Remarks + " || " + edit_pp_data.Grand_Total + " || " + edit_pp_data.Note + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_ESAP_Contribution", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p061

                        }
                    }
                }

                //  }


            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //P062-Retirement Contribution(Preema)
        public object Submit_PP_RetirementContribution(EmployeeRequestModel model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data

                    if (model.RetirementContributionModel != null)
                    {

                        msg = "Success";
                        var Retirement = model.RetirementContributionModel;

                        var insert_pp_data = _entity.tb_PP_Retirement_Contribution.Create();
                        insert_pp_data.RequestId = data.Item2;
                        insert_pp_data.IsActive = true;
                        insert_pp_data.TimeStamp = DateTime.Now;
                        insert_pp_data.For_the_Period_of = Retirement.For_the_Period_of;
                        insert_pp_data.Remarks = Retirement.Remarks.Trim();
                        insert_pp_data.Grand_Total = Retirement.Grand_Total;
                        insert_pp_data.Bank_Details = Retirement.Bank_Details.Trim();
                        _entity.tb_PP_Retirement_Contribution.Add(insert_pp_data);
                        status = _entity.SaveChanges() > 0;

                        if (Retirement.strCompany.Length > 0)
                        {
                            for (int i = 0; i < Retirement.strCompany.Length; i++)
                            {
                                if (Retirement.strCompany[i] != "" && Retirement.strCompany[i] != "0")
                                {
                                    var insert_pp_company_data = _entity.tb_PP_Retirement_Contribution_Company.Create();
                                    insert_pp_company_data.RequestId = data.Item2;
                                    insert_pp_company_data.TimeStamp = DateTime.Now;

                                    insert_pp_company_data.Company_Id = Convert.ToInt64(Retirement.strCompany[i]);
                                    insert_pp_company_data.Total_Amount_in_USD = Convert.ToDecimal(Retirement.strTotal[i]);
                                    insert_pp_company_data.Retirement_Id = Convert.ToInt64(insert_pp_data.Id);

                                    _entity.tb_PP_Retirement_Contribution_Company.Add(insert_pp_company_data);
                                    status1 = _entity.SaveChanges() > 0;

                                    string request_id = insert_pp_data.RequestId;
                                    string record = insert_pp_company_data.Company_Id + " || " + insert_pp_company_data.Total_Amount_in_USD + " || " + insert_pp_company_data.Retirement_Id + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Retirement_Contribution_Company", request_id, "INITIATOR");

                                }
                            }
                        }

                        #region attachments
                        //to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                        #endregion
                        #region attachments
                        // to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }

                        #endregion

                        #region Keep AuditLog_P062
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId;
                            string record = insert_pp_data.For_the_Period_of + " || " + insert_pp_data.Remarks + " || " + insert_pp_data.Grand_Total + " || " + insert_pp_data.Bank_Details + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Retirement_Contribution", request_id, "INITIATOR");

                        }

                        #endregion Keep AuditLog_P062

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //P062-Retirement Contribution(Preema)
        public object Submit_PP_RetirementContribution_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            try
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                if (data != null)
                {
                    #region Store Request Data                    
                    var edit_pp_data = _entity.tb_PP_Retirement_Contribution.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    if (edit_pp_data != null)
                    {
                        msg = "Success";
                        var Retirement = model.RetirementContributionModel;
                        edit_pp_data.RequestId = data.Request_ID;
                        edit_pp_data.For_the_Period_of = Retirement.For_the_Period_of;
                        edit_pp_data.Remarks = Retirement.Remarks.Trim();
                        edit_pp_data.Grand_Total = Retirement.Grand_Total;
                        edit_pp_data.Bank_Details = Retirement.Bank_Details.Trim();
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;

                        var company_data = _entity.tb_PP_Retirement_Contribution_Company.Where(x => x.RequestId == data.Request_ID).FirstOrDefault();
                        if (company_data.RequestId != "")
                        {
                            //delete tb_PP_Retirement_Contribution_Company table
                            _entity.tb_PP_Retirement_Contribution_Company.Where(x => x.RequestId == data.Request_ID).ToList().ForEach(x => _entity.tb_PP_Retirement_Contribution_Company.Remove(x));
                            _entity.SaveChanges();
                        }
                        string[] Company_Id = Retirement.strCompany;

                        if (Company_Id.Length > 0)
                        {
                            for (int i = 0; i < Company_Id.Length; i++)
                            {
                                if (Company_Id[i] != "" && Company_Id[i] != "0")
                                {

                                    var insert_pp_company_data = _entity.tb_PP_Retirement_Contribution_Company.Create();
                                    insert_pp_company_data.RequestId = data.Request_ID;
                                    insert_pp_company_data.TimeStamp = DateTime.Now;
                                    insert_pp_company_data.Company_Id = Convert.ToInt64(Company_Id[i]);
                                    insert_pp_company_data.Total_Amount_in_USD = Convert.ToDecimal(Retirement.strTotal[i]);
                                    insert_pp_company_data.Retirement_Id = Convert.ToInt64(edit_pp_data.Id);
                                    _entity.tb_PP_Retirement_Contribution_Company.Add(insert_pp_company_data);
                                    status1 = _entity.SaveChanges() > 0;
                                    if (status1 == true)
                                    {
                                        string request_id = edit_pp_data.RequestId;
                                        string record = insert_pp_company_data.Company_Id + " || " + insert_pp_company_data.Total_Amount_in_USD + " || " + insert_pp_company_data.Retirement_Id + " || " + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Retirement_Contribution_Company", request_id, "INITIATOR");
                                    }
                                }
                            }
                        }


                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }
                        }

                        #endregion attachment edit

                        #region Keep AuditLog_P061

                        if (status == true)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.For_the_Period_of + " || " + edit_pp_data.Remarks + " || " + edit_pp_data.Grand_Total + " || " + edit_pp_data.Bank_Details + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Retirement_Contribution", request_id, "INITIATOR");

                            #endregion Keep AuditLog_P061

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                    }
                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);

        }

        //P062-Retirement Contribution(Preema)
        public object Edit_PP_RetirementContribution(EmployeeRequestModel model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_pp_data = _entity.tb_PP_Retirement_Contribution.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {

                #region

                var Retirement = model.RetirementContributionModel;
                edit_pp_data.RequestId = rqid;
                edit_pp_data.For_the_Period_of = Retirement.For_the_Period_of.Trim();
                edit_pp_data.Remarks = Retirement.Remarks.Trim();
                edit_pp_data.Grand_Total = Retirement.Grand_Total;
                edit_pp_data.Bank_Details = Retirement.Bank_Details.Trim();
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;

                var company_data = _entity.tb_PP_Retirement_Contribution_Company.Where(x => x.RequestId == rqid).FirstOrDefault();
                if (company_data.RequestId != "")
                {
                    //delete tb_PP_Retirement_Contribution_Company table
                    _entity.tb_PP_Retirement_Contribution_Company.Where(x => x.RequestId == rqid).ToList().ForEach(x => _entity.tb_PP_Retirement_Contribution_Company.Remove(x));
                    _entity.SaveChanges();
                }
                string[] Company_Id = Retirement.strCompany;

                if (Company_Id.Length > 0)
                {
                    for (int i = 0; i < Company_Id.Length; i++)
                    {
                        if (Company_Id[i] != "" && Company_Id[i] != "0")
                        {

                            var insert_pp_company_data = _entity.tb_PP_Retirement_Contribution_Company.Create();
                            insert_pp_company_data.RequestId = edit_pp_data.RequestId;
                            insert_pp_company_data.TimeStamp = DateTime.Now;
                            insert_pp_company_data.Company_Id = Convert.ToInt64(Company_Id[i]);
                            insert_pp_company_data.Total_Amount_in_USD = Convert.ToDecimal(Retirement.strTotal[i]);
                            insert_pp_company_data.Retirement_Id = Convert.ToInt64(edit_pp_data.Id);
                            _entity.tb_PP_Retirement_Contribution_Company.Add(insert_pp_company_data);
                            status1 = _entity.SaveChanges() > 0;
                            if (status1 == true)
                            {
                                string request_id = edit_pp_data.RequestId;
                                string record = insert_pp_company_data.Company_Id + " || " + insert_pp_company_data.Total_Amount_in_USD + " || " + insert_pp_company_data.Retirement_Id + " || " + CurrentTime;
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Retirement_Contribution_Company", request_id, "INITIATOR");
                            }
                        }
                    }
                }

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                #endregion

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                            #region Keep AuditLog_p062

                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.For_the_Period_of + " || " + edit_pp_data.Remarks + " || " + edit_pp_data.Grand_Total + " || " + edit_pp_data.Bank_Details + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_ESAP_Contribution", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p062
                        }
                        else
                        {

                            #region Log for SaveChanges

                            //to save log for savechanges
                            //string remark = "Request was Edited by";
                            //string[] split1 = model.request_id.Split('-');

                            //var req_id = split1[1];
                            //var emp_local_id = model.emp_local_id;
                            //string id = req_id + "~" + emp_local_id + "~" + model.wf_id;

                            //Tuple<bool, string, string, string> result = _rpp.SubmitRequest(id, req);
                            //string rqid1 = split[1];

                            //if (req.Creater_ID == model.emp_local_id)
                            //{
                            //    bool senMail = _ApprovalLogRepository.Send_Edit_Login(req.Request_ID, result.Item2, "", req.Employee_ID, req.Creater_ID, 0.ToString(), remark, req, result.Item3, result.Item4);
                            //}
                            //else
                            //{
                            //    bool senMail = _ApprovalLogRepository.Send_Edit_Login(req.Request_ID, result.Item2, "", req.Employee_ID, model.emp_local_id, 0.ToString(), remark, req, result.Item3, result.Item4);
                            //}

                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion

                            #region Keep AuditLog_p062 for initiator after backtoinitiator

                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.For_the_Period_of + " || " + edit_pp_data.Remarks + " || " + edit_pp_data.Grand_Total + " || " + edit_pp_data.Bank_Details + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Retirement_Contribution", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p062

                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //P053-GOSI Payment(Preema)
        public object Submit_PP_GOSI_Payment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_GOSI_Payment.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_GOSI_Payment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p053
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_GOSI_Payment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p053

                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.To_IBAN = model.to_iban;
                    _entity.tb_PP_GOSI_Payment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region attachments

                    //to store attachments

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }

                    //code end here
                    #endregion
                    #region Keep AuditLog_p053
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_GOSI_Payment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p053

                }
                #region attachments

                //to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }
                //code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        //P053-GOSI Payment(Preema)
        public object Submit_PP_GOSI_Payment_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_GOSI_Payment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Paymnet mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p053
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + model.to_iban + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_GOSI_Payment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p053
                        #endregion Cash
                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;

                        #region Keep AuditLog_p053

                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + model.to_iban + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_GOSI_Payment", request_id, "INITIATOR");
                        }

                        #endregion Keep AuditLog_p053

                        #endregion Bank
                    }

                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                    }
                    #endregion attachment edit
                    //code end here
                    if (status == true) //to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //P053-GOSI Payment(Preema)
        public object Edit_PP_GOSI_Payment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_GOSI_Payment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.Cheque_Date = null;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    insert_pp_data.To_IBAN = model.to_iban;
                    status = _entity.SaveChanges() > 0;
                }


                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }

                #endregion attachment edit

                #endregion


                if (status == true)
                {
                    msg = "Request Edit Successfully";

                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();

                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p053
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + model.to_iban + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_GOSI_Payment", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p053
                        }
                        else
                        {

                            #region Log for SaveChanges

                            //to save log for savechanges
                            //string remark = "Request was Edited by";

                            //string[] split1 = model.request_id.Split('-');

                            //var req_id = split1[1];
                            //var emp_local_id = model.emp_local_id;
                            //string id = req_id + "~" + emp_local_id + "~" + model.wf_id;

                            //Tuple<bool, string, string, string> result = _rpp.SubmitRequest(id, req);
                            //string rqid1 = split[1];

                            //if (req.Creater_ID == model.emp_local_id)
                            //{
                            //    bool senMail = _ApprovalLogRepository.Send_Edit_Login(req.Request_ID, result.Item2, "", req.Employee_ID, req.Creater_ID, 0.ToString(), remark, req, result.Item3, result.Item4);
                            //}
                            //else
                            //{
                            //    bool senMail = _ApprovalLogRepository.Send_Edit_Login(req.Request_ID, result.Item2, "", req.Employee_ID, model.emp_local_id, 0.ToString(), remark, req, result.Item3, result.Item4);
                            //}
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion

                            #region Keep AuditLog_p053 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + model.to_iban + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_GOSI_Payment", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p053



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        /*P012  Letter To RealEstate By Nimmi Mohan on 25-03-2020*/
        public object Submit_PP_Letter_To_RealEstate(LetterToRealEstateModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.WF_ID, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_Letter_To_RealEstate.Create();
                insert_pp_data.RequestId = data.Item2;

                insert_pp_data.LocalEmplyee_ID = model.LocalEmplyee_ID;
                insert_pp_data.Iqama_Number = model.Iqama_Number;
                insert_pp_data.Certificate_with_Salary = model.Certificate_with_Salary;
                insert_pp_data.Chamber_Of_Commerce_Stamp = model.Chamber_Of_Commerce_Stamp;
                insert_pp_data.Ministry_Of_Foreign_Affairs = model.Ministry_Of_Foreign_Affairs;
                insert_pp_data.Location_Id = model.Location_Id;
                var locationcode = _entity.tb_Location.Where(x => x.Location_Id == model.Location_Id).FirstOrDefault().Location_Code;
                insert_pp_data.Location_Code = locationcode;
                insert_pp_data.Iqama_Identification = model.Iqama_Identification;
                insert_pp_data.Attachment_Filepath = model.Attachment_Filepath;
                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                _entity.tb_PP_Letter_To_RealEstate.Add(insert_pp_data);
                status = _entity.SaveChanges() > 0;

                #region Keep AuditLog_p012
                if (status)
                {

                    string request_id = insert_pp_data.RequestId;
                    string record = model.LocalEmplyee_ID + " || " + model.Iqama_Number + " || " + model.Certificate_with_Salary + " || " + model.Chamber_Of_Commerce_Stamp + " || " + model.Ministry_Of_Foreign_Affairs + " || " + model.Location_Code + " || " + model.Iqama_Identification + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Introduction_Certificate", request_id, "INITIATOR");

                }
                #endregion Keep AuditLog_p012

                #region Common Attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }
                #endregion
            }
            #endregion
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }  //P012 Nimmi Mohan 19-03-2020
        public object Submit_PP_Letter_To_RealEstate_Edit_After_Save(LetterToRealEstateModel model) //P012 Nimmi Mohan 19-03-2020
        {
            bool status = false;
            string msg = "failed";
            string rqid = model.request_id;
            var edit_pp_data = _entity.tb_PP_Letter_To_RealEstate.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {
                #region
                edit_pp_data.LocalEmplyee_ID = model.LocalEmplyee_ID;
                edit_pp_data.Iqama_Number = model.Iqama_Number;
                edit_pp_data.Certificate_with_Salary = model.Certificate_with_Salary;
                edit_pp_data.Chamber_Of_Commerce_Stamp = model.Chamber_Of_Commerce_Stamp;
                edit_pp_data.Ministry_Of_Foreign_Affairs = model.Ministry_Of_Foreign_Affairs;
                edit_pp_data.Location_Id = model.Location_Id;
                var locationcode = _entity.tb_Location.Where(x => x.Location_Id == model.Location_Id).FirstOrDefault().Location_Code; //14-03-2020 Nimmi Mohan
                edit_pp_data.Location_Code = locationcode;
                edit_pp_data.Iqama_Identification = model.Iqama_Identification;
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;
                #endregion

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == edit_pp_data.RequestId && x.IsActive == true && x.filebatch == 2).ToList();
                        if (editattachment != null)
                        {
                            foreach (var item in editattachment)
                            {
                                item.IsActive = false;
                                status = _entity.SaveChanges() > 0;
                            }
                        }
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = edit_pp_data.RequestId;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == edit_pp_data.RequestId && x.IsActive == true && x.filebatch == 1).ToList();
                        if (editattachment != null)
                        {
                            foreach (var item in editattachment)
                            {
                                item.IsActive = false;
                                status = _entity.SaveChanges() > 0;
                            }
                        }
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = edit_pp_data.RequestId;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }

                #endregion attachment edit

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    #region Keep AuditLog_p012
                    string request_id = edit_pp_data.RequestId;
                    string record = model.LocalEmplyee_ID + " || " + model.Iqama_Number + " || " + model.Certificate_with_Salary + " || " + model.Chamber_Of_Commerce_Stamp + " || " + model.Ministry_Of_Foreign_Affairs + " || " + model.Location_Code + " || " + model.Iqama_Identification + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Letter_To_RealEstate", request_id, "INITIATOR");
                    #endregion Keep AuditLog_p012
                    string remark = "Request was Edited by";
                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID.ToString(), "", "", "", "", "");

                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_BackToInitiator_PP_Letter_To_RealEstate(LetterToRealEstateModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];

            var insert_pp_data = _entity.tb_PP_Letter_To_RealEstate.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                insert_pp_data.LocalEmplyee_ID = model.LocalEmplyee_ID;
                insert_pp_data.Iqama_Number = model.Iqama_Number;
                insert_pp_data.Certificate_with_Salary = model.Certificate_with_Salary;
                insert_pp_data.Chamber_Of_Commerce_Stamp = model.Chamber_Of_Commerce_Stamp;
                insert_pp_data.Ministry_Of_Foreign_Affairs = model.Ministry_Of_Foreign_Affairs;
                //insert_pp_data.Location_Code = model.Location_Code; //Nimmi 20-03-2020
                insert_pp_data.Location_Id = model.Location_Id;  //Nimmi 20-03-2020
                var locationcode = _entity.tb_Location.Where(x => x.Location_Id == model.Location_Id).FirstOrDefault().Location_Code;//Nimmi 20-03-2020
                insert_pp_data.Location_Code = locationcode;//Nimmi 20-03-2020
                insert_pp_data.Iqama_Identification = model.Iqama_Identification;
                //insert_pp_data.Attachment_Filepath = model.Attachment_Filepath;

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";

                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    #region Keep AuditLog_p012
                    string request_id = insert_pp_data.RequestId;
                    string record = model.LocalEmplyee_ID + " || " + model.Iqama_Number + " || " + model.Certificate_with_Salary + " || " + model.Chamber_Of_Commerce_Stamp + " || " + model.Ministry_Of_Foreign_Affairs + " || " + model.Location_Code + " || " + model.Iqama_Identification + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Letter_To_RealEstate", request_id, "INITIATOR");
                    #endregion Keep AuditLog_p012

                    string remark = "Request was Edited by";

                    //#region Log for SaveChanges
                    //_rpp.InsertApproveLog("EDIT", rqid, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                    //#endregion Keep AuditLog_p012

                    #region Log for SaveChanges    


                    if (req.Creater_ID == model.emp_local_id)
                    {
                        _rpp.InsertApproveLog("EDIT", rqid, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                    }
                    else
                    {
                        _rpp.InsertApproveLog("EDIT", rqid, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                    }


                    #endregion   // Nimmi on 21-04-2020


                    //............................End




                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }  //P012 Nimmi Mohan 23-03-2020
        //Terrin on 31/3/2020 -----P060---
        public object Edit_BackToInitiator_PP_Mobile_Allowance(Applicationfor_mobile model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];

            var insert_pp_data = _entity.tb_PP_Mobile_Allowance.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                insert_pp_data.Allowancepergrp = model.Allowance_per_group;
                insert_pp_data.Remarks = model.Remarks;
                insert_pp_data.Justification = model.Justification;
                insert_pp_data.Allowance_Date = model.Allowance_Date;
                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;

                #endregion
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    // ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    // sibi.... 1111 Edit
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);


                            //End Edit
                            #region Keep AuditLog_p060
                            string request_id = insert_pp_data.RequestId;
                            string record = model.Allowance_per_group + " || " + model.Remarks + " || " + model.Justification + " || " + model.Allowance_Date + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Mobile_Allowance", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p060
                        }
                        else
                        {


                            // string remark = "Request was Edited by";
                            // _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, req.Creater_ID.ToString(), "", "", "", "", "");

                            /////////////Test Start..........................
                            ///

                            #region Log for SaveChanges

                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            // _rpp.InsertApproveLog("EDIT", rqid, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");

                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion

                            #region Keep AuditLog_p060 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.Allowance_per_group + " || " + model.Remarks + " || " + model.Justification + " || " + model.Allowance_Date + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Mobile_Allowance", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p060


                            //............................End

                        }

                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //Terrin on 9/4/2020 -----P029---
        public object Edit_BackToInitiator_PP_Medical_Allowance(MedicalInsuranceApplication model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];

            var insert_ao_data = _entity.tb_PP_Medical_Insurance.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_ao_data != null)
            {
                #region

                insert_ao_data.RequestId = rqid;
                insert_ao_data.App_Type = Convert.ToString(model.App_Type);
                insert_ao_data.Add_details = Convert.ToString(model.Add_details);
                insert_ao_data.Effective = Convert.ToDateTime(model.Effective);
                insert_ao_data.Date_Employee = Convert.ToDateTime(model.Date_Employee);
                insert_ao_data.Iqama_no = Convert.ToString(model.Iqama_no);
                insert_ao_data.Remarks = Convert.ToString(model.MedIns_Remarks);
                insert_ao_data.Attachment_File = model.Attachment_Filepath;
                insert_ao_data.IsActive = true;
                insert_ao_data.Timestamp = CurrentTime;
                status = _entity.SaveChanges() > 0;

                if (status && model._Insurance_dependence != null && model._Insurance_dependence.Count > 0)
                {

                    _entity.tb_PP_Medical_Insurance_Dependent.RemoveRange(_entity.tb_PP_Medical_Insurance_Dependent.Where(x => x.RequestId == rqid));

                    if (model._Insurance_dependence.Count > 0)
                    {
                        foreach (var item in model._Insurance_dependence)
                        {
                            var insert_pp_Insdependent_data = _entity.tb_PP_Medical_Insurance_Dependent.Create();
                            insert_pp_Insdependent_data.RequestId = rqid;
                            insert_pp_Insdependent_data.MedIns_Id = insert_ao_data.MedIns_Id;
                            insert_pp_Insdependent_data.Name = item.Name;
                            insert_pp_Insdependent_data.Date_of_birth = item.Date_of_birth;
                            insert_pp_Insdependent_data.Sex = item.Sex;
                            insert_pp_Insdependent_data.Relation = item.Relation;
                            insert_pp_Insdependent_data.Depend_class = item.Depend_class;
                            //insert_ao_guest_data.IsActive = true;
                            //insert_ao_guest_data.TimeStamp = CurrentTime;
                            if (insert_pp_Insdependent_data.Name != null)
                            {
                                _entity.tb_PP_Medical_Insurance_Dependent.Add(insert_pp_Insdependent_data);
                                status1 = _entity.SaveChanges() > 0;
                            }

                            //    if (status1 == true)
                            //{
                            //    string record = Guest_Name[i];
                            //    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_AO_Accommodation_Guest_Details", insert_ao_guest_data.RequestId, "INITIATOR");
                            //}

                        }
                    }
                }

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                #endregion


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_ao_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_P029
                            string request_id = insert_ao_data.RequestId;
                            string record = model.App_Type + " || " + model.Add_details + " || " + model.Effective + " || " + model.Date_Employee + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Medical_Insurance", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_P029
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            // _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");

                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }


                            #endregion

                            #region Keep AuditLog_P029 for initiator after backtoinitiator

                            string request_id = insert_ao_data.RequestId;
                            string record = model.App_Type + " || " + model.Add_details + " || " + model.Effective + " || " + model.Date_Employee + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Medical_Insurance", request_id, "INITIATOR");

                            #endregion Keep AuditLog_P029



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        /*P054 No Submission Timesheet By Nimmi Mohan on 31-03-2020*/

        /*P054 No Submission Timesheet By Nimmi Mohan on 31-03-2020*/
        public object Submit_PP_NoSubmissionTimesheet(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Create();
                insert_pp_data.RequestId = data.Item2;
                if (model.payment_mode == "C")// Payment mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p054
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NoSubmissionOf_Timesheet_Payment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p054

                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;

                    #region Bank_attachments
                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }
                    #endregion

                    #region Keep AuditLog_p054
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NoSubmissionOf_Timesheet_Payment", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p054

                }
                #region Common_attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }   //24-03-2020 Nimmi Mohan
        public object Submit_PP_NoSubmissionTimesheet_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    if (model.payment_mode == "C")// Payment mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p054
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.payable_to + " || " + " || " + model.remark + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NoSubmissionOf_Timesheet_Payment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p054
                        #endregion Cash
                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.To_IBAN = model.to_iban;
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #region Keep AuditLog_p054
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.to_account_no + " || " + model.purpose_text + " || " + " || " + model.to_iban + " || " + " || " + model.remark + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NoSubmissionOf_Timesheet_Payment", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p054
                        #endregion Bank
                    }

                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit

                    if (status == true) // to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        } //24-03-2020 Nimmi Mohan
        public object Edit_PP_NoSubmissionTimesheet(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_NoSubmissionOf_Timesheet_Payment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Payment mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.Cheque_Date = null;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }


                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                #endregion


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) // to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p054
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NoSubmissionOf_Timesheet_Payment", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p054
                        }
                        else
                        {

                            //#region Log for SaveChanges
                            ////to save log for savechanges
                            //string remark = "Request was Edited by";
                            //string[] split1 = model.request_id.Split('-');
                            //string rqid1 = split[1];
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            //#endregion

                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion     //21-04-2020  Nimmi Mohan






                            #region Keep AuditLog_p054 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_NoSubmissionOf_Timesheet_Payment", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p054



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }  //24-03-2020 Nimmi Mohan
        public PartialViewResult GetBankdetailsForPPrequestP054(string id)    //24-03-2020 Nimmi Mohan
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_NoSubmissionTimesheet_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP054(string id) //24-03-2020 Nimmi Mohan
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_NoSubmisionTimesheet_Cheque.cshtml", model);
        }
        //07-05-2020 Nimmi
        public object Submit_PP_CarLoanRequest(EmployeeRequestModel model)
        {

            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_Carloan_Request.Create();
                insert_pp_data.RequestId = data.Item2;
                insert_pp_data.Reason = model.reason;
                insert_pp_data.Employee_Grade = Convert.ToInt32(model.employee_grade);
                insert_pp_data.Joining_Date = Convert.ToDateTime(model.joining_date);

                /*Commented By Nimmi on 02-05-2020*/
                //insert_pp_data.Att_Quotation_Filepath = model.att_quotation_filepath;
                //insert_pp_data.Car_Cost_Reimbursement = Convert.ToDecimal(model.car_cost_reimbursement);
                //insert_pp_data.First_Loan = model.first_loan;
                //insert_pp_data.Subsequent_Loan = model.subsequent_loan;
                //insert_pp_data.Car_Quotation_Amount = Convert.ToDecimal(model.car_quotation_amount);
                //insert_pp_data.Maximum_Entitlement = Convert.ToDecimal(model.maximum_entitlement);
                //insert_pp_data.Monthly_Installment = Convert.ToDecimal(model.monthly_installment);
                //insert_pp_data.Effective_Date = Convert.ToDateTime(model.effective_date);
                //insert_pp_data.Attachment_Filepath = model.attachment_filepath;

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                _entity.tb_PP_Carloan_Request.Add(insert_pp_data);
                status = _entity.SaveChanges() > 0;


                #region Keep AuditLog_p023
                if (status)
                {
                    string request_id = insert_pp_data.RequestId;
                    string record = model.reason + " || " + model.employee_grade + " || " + model.car_cost_reimbursement + " || " + model.first_loan + " || " + model.subsequent_loan + " || " + model.car_quotation_amount + " || " + model.maximum_entitlement + " || " + model.monthly_installment + " || " + model.joining_date + " || " + (model.effective_date.Year == 0001 ? null : model.effective_date.ToString()) + " || " + CurrentTime; //11/02/2020 Nimmi
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Carloan_Request", request_id, "INITIATOR");
                }
                #endregion Keep AuditLog_p023

                #region Common_attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                #endregion 


                #endregion
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }     //P023 By Nimmi Mohan 0n 24-03-2020
        public object Submit_PP_CarLoanRequest_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_Carloan_Request.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {


                    edit_pp_data.Reason = model.reason;
                    edit_pp_data.Employee_Grade = Convert.ToInt32(model.employee_grade);
                    edit_pp_data.Joining_Date = Convert.ToDateTime(model.joining_date);

                    /*Commented By Nimmi on 02-05-2020*/

                    //edit_pp_data.Att_Quotation_Filepath = model.att_quotation_filepath;
                    //edit_pp_data.Car_Cost_Reimbursement = Convert.ToDecimal(model.car_cost_reimbursement);
                    //edit_pp_data.First_Loan = model.first_loan;
                    //edit_pp_data.Subsequent_Loan = model.subsequent_loan;
                    //edit_pp_data.Car_Quotation_Amount = Convert.ToDecimal(model.car_quotation_amount);
                    //edit_pp_data.Maximum_Entitlement = Convert.ToDecimal(model.maximum_entitlement);
                    //edit_pp_data.Monthly_Installment = Convert.ToDecimal(model.monthly_installment);
                    //edit_pp_data.Effective_Date = Convert.ToDateTime(model.effective_date);
                    //edit_pp_data.Attachment_Filepath = model.attachment_filepath;

                    edit_pp_data.IsActive = true;
                    edit_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;



                    #region Keep AuditLog_p023
                    if (status)
                    {
                        string request_id = edit_pp_data.RequestId;
                        string record = model.reason + " || " + model.employee_grade + " || " + model.car_cost_reimbursement + " || " + model.first_loan + " || " + model.subsequent_loan + " || " + model.car_quotation_amount + " || " + model.maximum_entitlement + " || " + model.monthly_installment + " || " + model.joining_date + " || " + (model.effective_date.Year == 0001 ? null : model.effective_date.ToString()) + " || " + CurrentTime; //11/02/2020 Nimmi
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Carloan_Request", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p023

                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit

                    if (status == true) // to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }  //P023 By Nimmi Mohan 0n 24-03-2020
        public object Edit_PP_CarloanRequest(EmployeeRequestModel model)  //02-05-2020 Nimmi
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_Carloan_Request.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();

            if (insert_pp_data != null)
            {
                var cardata = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.IsActive == true).FirstOrDefault();
                model.status_id = cardata.Status_ID;
                model.request_id = cardata.Request_ID;
                if (cardata.Status_ID == "BKI" && insert_pp_data.Car_Cost_Reimbursement == null)
                {

                    insert_pp_data.Reason = model.reason;
                    insert_pp_data.Employee_Grade = Convert.ToInt32(model.employee_grade);
                    insert_pp_data.Joining_Date = Convert.ToDateTime(model.joining_date);
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;



                }

                else if (cardata.Status_ID == "BKI" && insert_pp_data.Car_Cost_Reimbursement != null)
                {
                    insert_pp_data.Reason = model.reason;
                    insert_pp_data.Employee_Grade = Convert.ToInt32(model.employee_grade);
                    insert_pp_data.Joining_Date = Convert.ToDateTime(model.joining_date);
                    insert_pp_data.Car_Cost_Reimbursement = Convert.ToDecimal(model.car_cost_reimbursement);
                    insert_pp_data.First_Loan = model.first_loan;
                    insert_pp_data.Subsequent_Loan = model.subsequent_loan;
                    insert_pp_data.Car_Quotation_Amount = Convert.ToDecimal(model.car_quotation_amount);
                    insert_pp_data.Maximum_Entitlement = Convert.ToDecimal(model.maximum_entitlement);
                    insert_pp_data.Monthly_Installment = Convert.ToDecimal(model.monthly_installment);
                    insert_pp_data.Effective_Date = Convert.ToDateTime(model.effective_date);
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }

                else if (cardata.Status_ID == "NEW" && insert_pp_data.Car_Cost_Reimbursement == null)
                {

                    insert_pp_data.Reason = model.reason;
                    insert_pp_data.Employee_Grade = Convert.ToInt32(model.employee_grade);
                    insert_pp_data.Joining_Date = Convert.ToDateTime(model.joining_date);
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;



                }

                else if (cardata.Status_ID == "NEW" && insert_pp_data.Car_Cost_Reimbursement != null)
                {
                    insert_pp_data.Reason = model.reason;
                    insert_pp_data.Employee_Grade = Convert.ToInt32(model.employee_grade);
                    insert_pp_data.Joining_Date = Convert.ToDateTime(model.joining_date);
                    insert_pp_data.Car_Cost_Reimbursement = Convert.ToDecimal(model.car_cost_reimbursement);
                    insert_pp_data.First_Loan = model.first_loan;
                    insert_pp_data.Subsequent_Loan = model.subsequent_loan;
                    insert_pp_data.Car_Quotation_Amount = Convert.ToDecimal(model.car_quotation_amount);
                    insert_pp_data.Maximum_Entitlement = Convert.ToDecimal(model.maximum_entitlement);
                    insert_pp_data.Monthly_Installment = Convert.ToDecimal(model.monthly_installment);
                    insert_pp_data.Effective_Date = Convert.ToDateTime(model.effective_date);
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }




                else if (cardata.Status_ID == "INT")
                {
                    insert_pp_data.Reason = model.reason;
                    insert_pp_data.Employee_Grade = Convert.ToInt32(model.employee_grade);
                    insert_pp_data.Joining_Date = Convert.ToDateTime(model.joining_date);
                    insert_pp_data.Car_Cost_Reimbursement = Convert.ToDecimal(model.car_cost_reimbursement);
                    insert_pp_data.First_Loan = model.first_loan;
                    insert_pp_data.Subsequent_Loan = model.subsequent_loan;
                    insert_pp_data.Car_Quotation_Amount = Convert.ToDecimal(model.car_quotation_amount);
                    insert_pp_data.Maximum_Entitlement = Convert.ToDecimal(model.maximum_entitlement);
                    insert_pp_data.Monthly_Installment = Convert.ToDecimal(model.monthly_installment);
                    insert_pp_data.Effective_Date = Convert.ToDateTime(model.effective_date);
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }

                else
                {
                    insert_pp_data.Reason = model.reason;
                    insert_pp_data.Employee_Grade = Convert.ToInt32(model.employee_grade);
                    insert_pp_data.Joining_Date = Convert.ToDateTime(model.joining_date);
                    insert_pp_data.Car_Cost_Reimbursement = Convert.ToDecimal(model.car_cost_reimbursement);
                    insert_pp_data.First_Loan = model.first_loan;
                    insert_pp_data.Subsequent_Loan = model.subsequent_loan;
                    insert_pp_data.Car_Quotation_Amount = Convert.ToDecimal(model.car_quotation_amount);
                    insert_pp_data.Maximum_Entitlement = Convert.ToDecimal(model.maximum_entitlement);
                    insert_pp_data.Monthly_Installment = Convert.ToDecimal(model.monthly_installment);
                    insert_pp_data.Effective_Date = Convert.ToDateTime(model.effective_date);
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }



                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p023
                            string request_id = insert_pp_data.RequestId;
                            string record = model.reason + " || " + model.employee_grade + " || " + model.car_cost_reimbursement + " || " + model.first_loan + " || " + model.subsequent_loan + " || " + model.car_quotation_amount + " || " + model.maximum_entitlement + " || " + model.monthly_installment + " || " + model.joining_date + " || " + (model.effective_date.Year == 0001 ? null : model.effective_date.ToString()) + " || " + CurrentTime;  //11/02/2020 Nimmi
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Carloan_Request", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p023
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion

                            #region Keep AuditLog_p023 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.reason + " || " + model.employee_grade + " || " + model.car_cost_reimbursement + " || " + model.first_loan + " || " + model.subsequent_loan + " || " + model.car_quotation_amount + " || " + model.maximum_entitlement + " || " + model.monthly_installment + " || " + model.joining_date + " || " + (model.effective_date.Year == 0001 ? null : model.effective_date.ToString()) + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Carloan_Request", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p023



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        /*P099 CARLOAN PAYMENT ON 31-03-2020 BY Nimmi Mohan*/
        //Last updated on 07-05-2020
        public object Submit_PP_CarLoanPayment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_CarLoanPayment.Create();
                insert_pp_data.RequestId = data.Item2;
                insert_pp_data.Remark = model.remark;  //Nimmi 04-05-2020
                insert_pp_data.IsActive = true; //Nimmi 04-05-2020
                insert_pp_data.TimeStamp = CurrentTime; //Nimmi 04-05-2020
                if (model.payment_mode == "C")// Payment mode is Cheque
                {
                    insert_pp_data.PaymentMode = "C";
                    insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Account_No = model.cheque_account_no;  //Nimmi 04-05-2020
                    insert_pp_data.supplier = model.supplier_to; //Nimmi 04-05-2020
                    insert_pp_data.Currency = model.currenctType; //Nimmi 04-05-2020

                    insert_pp_data.Carloan_Request_No = model.carloanrequest_number;
                    _entity.tb_PP_CarLoanPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p099
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.carloanrequest_number + " || " + model.cheque_date + " || "
                            + model.amount_sar + " || " + model.cheque_account_no + " || " + model.purpose_text + " || " + model.supplier_to +
                            " || " + model.payable_to + " || " + model.remark + " || " + model.currenctType + " || " + CurrentTime; //nimmi 11/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_CarLoanPayment", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p099

                }
                else
                {
                    insert_pp_data.PaymentMode = "B";
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;//Basheer on 26-02-2020
                    //insert_pp_data.Bank_Attachment = model.bank_attachment; //Basheer on 28-02-2020
                    //insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;//Nimmi 04-05-2020
                    //insert_pp_data.Attachment_Filepath = model.attachment_filepath;

                    insert_pp_data.To_IBAN = model.to_iban; //Nimmi 04-05-2020
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar); //Nimmi 04-05-2020
                    insert_pp_data.Currency = model.currenctType; //Nimmi 04-05-2020
                    insert_pp_data.Carloan_Request_No = model.carloanrequest_number;
                    _entity.tb_PP_CarLoanPayment.Add(insert_pp_data);
                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_p099
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId;
                        string record = model.payment_mode + " || " + model.carloanrequest_number + " || " + model.amount_sar + " || " + model.from_bank + " || " +
                            model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname +
                            " || " + model.to_address + " || " + model.remark + " || " + model.to_account_no + " || " + model.to_iban + " || " + CurrentTime; //nimmi 11/02/2020
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_CarLoanPayment", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p099

                }
                #region attachments
                //Basheer on 26-02-2020 to to store attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList(); //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 
                #endregion 
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_CarLoanPayment_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_CarLoanPayment.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {

                    /*04-05-2020*/


                    if (model.payment_mode == "C")// Payment mode is Cheque
                    {
                        #region Cash
                        edit_pp_data.PaymentMode = "C";
                        edit_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Purpose_Text = model.purpose_text;
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        edit_pp_data.Cheque_Payable = model.payable_to;
                        edit_pp_data.Carloan_Request_No = model.carloanrequest_number;
                        edit_pp_data.supplier = model.supplier_to; /*04-05-2020*/
                        edit_pp_data.Account_No = model.cheque_account_no; /*04-05-2020*/
                        edit_pp_data.Remark = model.remark;/*04-05-2020*/
                        edit_pp_data.Currency = model.currenctType; /*04-05-2020*/
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Cash


                        #region Keep AuditLog_p099
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.carloanrequest_number + " || " + model.cheque_date + " || " + model.amount_sar + " || " + model.cheque_account_no + " || " + model.purpose_text + " || " + model.supplier_to + " || " + model.payable_to + " || " + model.remark + " || " + model.currenctType + " || " + CurrentTime; //nimmi 04/05/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_CarLoanPayment", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p099

                    }
                    else
                    {
                        #region Bank
                        edit_pp_data.PaymentMode = "B";
                        edit_pp_data.Cheque_Date = null;
                        edit_pp_data.From_Bank = model.from_bank;
                        edit_pp_data.From_Address = model.from_addreess;
                        edit_pp_data.From_AccountNo = model.from_account_no;
                        edit_pp_data.To_Benificiary = model.to_beneficiary;
                        edit_pp_data.To_BankName = model.to_bankname;
                        edit_pp_data.To_Address = model.to_address;
                        edit_pp_data.To_AccountNo = model.to_account_no;
                        edit_pp_data.Purpose_Text = model.purpose_text;/*04-05-2020*/
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                        //edit_pp_data.Bank_Attachment = model.bank_attachment;
                        //edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                        edit_pp_data.Remark = model.remark;
                        edit_pp_data.Carloan_Request_No = model.carloanrequest_number;
                        //edit_pp_data.Attachment_Filepath = model.attachment_filepath;

                        edit_pp_data.To_IBAN = model.to_iban; /*04-05-2020*/
                        edit_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar); /*04-05-2020*/
                        edit_pp_data.Currency = model.currenctType; /*04-05-2020*/
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;
                        #endregion Bank

                        #region Keep AuditLog_p099
                        if (status)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.carloanrequest_number + " || " + model.amount_sar + " || " + model.from_bank + " || " + model.from_addreess + " || " + model.from_account_no + " || " + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + " || " + model.remark + " || " + model.to_account_no + " || " + model.to_iban + " || " + CurrentTime; //nimmi 04/05/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_CarLoanPayment", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p099
                    }
                    //Basheer on 28-02-2020
                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {

                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }




                    #endregion attachment edit
                    //Basheer code end here
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_CarLoanPayment(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_CarLoanPayment.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                #region
                if (model.payment_mode == "C")// Paymnet mode is Cheque
                {
                    if (model.cheque_date.Year != 1)
                        insert_pp_data.Cheque_Date = Convert.ToDateTime(model.cheque_date);
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Cheque_Payable = model.payable_to;
                    insert_pp_data.Carloan_Request_No = model.carloanrequest_number;
                    insert_pp_data.Account_No = model.cheque_account_no;
                    insert_pp_data.supplier = model.supplier_to;
                    insert_pp_data.Currency = model.currenctType;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }
                else
                {
                    insert_pp_data.From_Bank = model.from_bank;
                    insert_pp_data.Cheque_Date = null;
                    insert_pp_data.From_Address = model.from_addreess;
                    insert_pp_data.From_AccountNo = model.from_account_no;
                    insert_pp_data.To_Benificiary = model.to_beneficiary;
                    insert_pp_data.To_BankName = model.to_bankname;
                    insert_pp_data.To_Address = model.to_address;
                    insert_pp_data.To_AccountNo = model.to_account_no;
                    insert_pp_data.Amount_SAR = Convert.ToDecimal(model.amount_sar);
                    insert_pp_data.To_IBAN = model.to_iban;
                    insert_pp_data.Purpose_Text = model.purpose_text;
                    insert_pp_data.Currency = model.currenctType;
                    insert_pp_data.Remark = model.remark;
                    insert_pp_data.Carloan_Request_No = model.carloanrequest_number;
                    insert_pp_data.IsActive = true;
                    insert_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;
                }

                //Basheer on 28-02-2020
                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit
                //Basheer code end here
                #endregion


                //if (status == true)
                //{
                //    msg = "Request Edit Successfully";
                //    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                //    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                //    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                //    var application = req.tb_Application;
                //    if (req != null)
                //    {
                //        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                //        {
                //            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                //            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                //            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                //            #region Keep AuditLog_p099
                //            string request_id = insert_pp_data.RequestId;
                //            string record = model.payment_mode + " || " + model.carloanrequest_number + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + CurrentTime; //nimmi 07/02/2020
                //            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_CarLoanPayment", request_id, role.Role_Desc);
                //            #endregion Keep AuditLog_p099
                //        }
                //        else
                //        {

                //            #region Log for SaveChanges
                //            //Basheer on 06-02-2020 to save log for savechanges
                //            string remark = "Request was Edited by";
                //            string[] split1 = model.request_id.Split('-');
                //            string rqid1 = split[1];
                //            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                //            #endregion

                //            #region Keep AuditLog_p099 for initiator after backtoinitiator
                //            string request_id = insert_pp_data.RequestId;
                //            string record = model.payment_mode + " || " + model.carloanrequest_number + " || " + (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " + model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " + model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " + model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " + model.payable_to + " || " + CurrentTime; //nimmi 07/02/2020
                //            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_CarLoanPayment", request_id, "INITIATOR");
                //            #endregion Keep AuditLog_p099



                //        }
                //    }
                //}

                //21-04-2020 Nimmi
                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    ////var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.Approver_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    //var application = _entity.tb_Application.Where(x => x.Application_Code == req.Application_ID && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //Basheer on 04-02-2020 to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p099
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.carloanrequest_number + " || " +
                                (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " +
                                model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " +
                                model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " +
                                model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " +
                                model.payable_to + " || " + model.cheque_account_no + " || " + model.supplier_to + " || " + model.currenctType + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_CarLoanPayment", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p099
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //Basheer on 06-02-2020 to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //Basheer on 26-03-2020 for checking request
                            //_rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion


                            #region Keep AuditLog_p099 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.payment_mode + " || " + model.carloanrequest_number + " || " +
                               (model.cheque_date.Year == 0001 ? null : model.cheque_date.ToString()) + " || " +
                               model.amount_sar + " || " + model.purpose_text + " || " + model.from_bank + " || " +
                               model.from_addreess + "||" + model.from_account_no + "||" + model.to_beneficiary + " || " +
                               model.to_bankname + " || " + model.to_address + "||" + model.to_account_no + " || " + model.remark + " || " +
                               model.payable_to + " || " + model.cheque_account_no + " || " + model.supplier_to + " || " + model.currenctType + " || " + model.to_iban + " || " + CurrentTime; //nimmi 07/02/2020
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_CarLoanPayment", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p099




                        }
                    }
                }



            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public PartialViewResult GetBankdetailsForPPrequestP099(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_CarLoanPayment_BankTransfer.cshtml", model);
        }
        public PartialViewResult GetChequedetailsForPPrequestP099(string id)
        {
            RequestModel model = new RequestModel();
            model.employeeid = id;
            return PartialView("~/Views/Request/_pv_CarLoanPayment_Cheque.cshtml", model);
        }

        //P024-Bank Loan Request(Preema)
        public object Submit_PP_Bank_Loan_Request(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data

                    if (model.BankLoanRequestModel != null)
                    {

                        msg = "Success";
                        var Bank = model.BankLoanRequestModel;

                        var insert_pp_data = _entity.tb_PP_Bank_Loan_Request.Create();
                        insert_pp_data.RequestId = data.Item2;
                        insert_pp_data.IsActive = true;
                        insert_pp_data.TimeStamp = DateTime.Now;

                        insert_pp_data.Bank_Name = Bank.Bank_Name.Trim();
                        insert_pp_data.Account_No = Bank.Account_No.Trim();
                        insert_pp_data.Loan_Amount = Bank.Loan_Amount;
                        insert_pp_data.Purpose = Bank.Purpose.Trim();

                        insert_pp_data.Nationality = Bank.Nationality.Trim();
                        insert_pp_data.Saudi_Id = Bank.Saudi_Id.Trim();
                        insert_pp_data.Date_of_Hire = Convert.ToDateTime(Bank.Date_of_Hire);
                        //insert_pp_data.End_of_Service_Benefit = Bank.End_of_Service_Benefit.Trim();
                        //insert_pp_data.As_of_Date = Bank.As_of_Date;

                        _entity.tb_PP_Bank_Loan_Request.Add(insert_pp_data);
                        status = _entity.SaveChanges() > 0;


                        #region attachments
                        //to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                        #endregion

                        #region attachments
                        // to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }

                        #endregion

                        #region Keep AuditLog_P024
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId;
                            string record = insert_pp_data.Bank_Name + " || " + insert_pp_data.Account_No + " || " + insert_pp_data.Loan_Amount + " || " + insert_pp_data.Purpose + " || " + insert_pp_data.Nationality + " || " + insert_pp_data.Saudi_Id + " || " + insert_pp_data.Date_of_Hire + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Bank_Loan_Request", request_id, "INITIATOR");

                        }

                        #endregion Keep AuditLog_P024

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //P024-Bank Loan Request(Preema)
        public object Submit_PP_Bank_Loan_Request_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            try
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                if (data != null)
                {
                    #region Store Request Data                    
                    var edit_pp_data = _entity.tb_PP_Bank_Loan_Request.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    if (edit_pp_data != null)
                    {
                        msg = "Success";
                        var Bank = model.BankLoanRequestModel;

                        edit_pp_data.RequestId = data.Request_ID;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = DateTime.Now;

                        edit_pp_data.Bank_Name = Bank.Bank_Name.Trim();
                        edit_pp_data.Account_No = Bank.Account_No.Trim();
                        edit_pp_data.Loan_Amount = Bank.Loan_Amount;
                        edit_pp_data.Purpose = Bank.Purpose.Trim();

                        edit_pp_data.Nationality = Bank.Nationality.Trim();
                        edit_pp_data.Saudi_Id = Bank.Saudi_Id.Trim();
                        edit_pp_data.Date_of_Hire = Convert.ToDateTime(Bank.Date_of_Hire);
                        //edit_pp_data.End_of_Service_Benefit = Bank.End_of_Service_Benefit.Trim();
                        //edit_pp_data.As_of_Date = Bank.As_of_Date;
                        status = _entity.SaveChanges() > 0;


                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }
                        }

                        #endregion attachment edit

                        #region Keep AuditLog_P024

                        if (status == true)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.Bank_Name + " || " + edit_pp_data.Account_No + " || " + edit_pp_data.Loan_Amount + " || " + edit_pp_data.Purpose + " || " + edit_pp_data.Nationality + " || " + edit_pp_data.Saudi_Id + " || " + edit_pp_data.Date_of_Hire + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Bank_Loan_Request", request_id, "INITIATOR");

                            #endregion Keep AuditLog_P061

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                    }
                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);

        }

        //P024-Bank Loan Request(Preema)
        public object Edit_PP_Bank_Loan_Request(EmployeeRequestModel model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_pp_data = _entity.tb_PP_Bank_Loan_Request.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {

                #region

                var Bank = model.BankLoanRequestModel;
                edit_pp_data.RequestId = rqid;
                edit_pp_data.Bank_Name = Bank.Bank_Name.Trim();
                edit_pp_data.Account_No = Bank.Account_No.Trim();
                edit_pp_data.Loan_Amount = Bank.Loan_Amount;
                edit_pp_data.Purpose = Bank.Purpose.Trim();

                edit_pp_data.Nationality = Bank.Nationality.Trim();
                edit_pp_data.Saudi_Id = Bank.Saudi_Id.Trim();
                edit_pp_data.Date_of_Hire = Convert.ToDateTime(Bank.Date_of_Hire);
                if (Bank.End_of_Service_Benefit != null && Bank.End_of_Service_Benefit != "")
                {
                    edit_pp_data.End_of_Service_Benefit = Bank.End_of_Service_Benefit;
                }
                if (Bank.As_of_Date != "" && Bank.As_of_Date != null)
                {
                    edit_pp_data.As_of_Date = Convert.ToDateTime(Bank.As_of_Date);
                }
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;

                #endregion

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                            #region Keep AuditLog_p024

                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.Bank_Name + " || " + edit_pp_data.Account_No + " || " + edit_pp_data.Loan_Amount + " || " + edit_pp_data.Purpose + " || " + edit_pp_data.Nationality + " || " + edit_pp_data.Saudi_Id + " || " + edit_pp_data.Date_of_Hire + " || " + " || " + edit_pp_data.End_of_Service_Benefit + " || " + edit_pp_data.As_of_Date + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Bank_Loan_Request", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p024
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            //string remark = "Request was Edited by";
                            //string[] split1 = model.request_id.Split('-');

                            //var req_id = split1[1];
                            //var emp_local_id = model.emp_local_id;
                            //string id = req_id + "~" + emp_local_id + "~" + model.wf_id;

                            //Tuple<bool, string, string, string> result = _rpp.SubmitRequest(id, req);
                            //string rqid1 = split[1];

                            //if (req.Creater_ID == model.emp_local_id)
                            //{
                            //    bool senMail = _ApprovalLogRepository.Send_Edit_Login(req.Request_ID, result.Item2, "", req.Employee_ID, req.Creater_ID, 0.ToString(), remark, req, result.Item3, result.Item4);
                            //}
                            //else
                            //{
                            //    bool senMail = _ApprovalLogRepository.Send_Edit_Login(req.Request_ID, result.Item2, "", req.Employee_ID, model.emp_local_id, 0.ToString(), remark, req, result.Item3, result.Item4);
                            //}

                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion

                            #region Keep AuditLog_p024 for initiator after backtoinitiator

                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.Bank_Name + " || " + edit_pp_data.Account_No + " || " + edit_pp_data.Loan_Amount + " || " + edit_pp_data.Purpose + " || " + edit_pp_data.Nationality + " || " + edit_pp_data.Saudi_Id + " || " + edit_pp_data.Date_of_Hire + " || " + " || " + edit_pp_data.End_of_Service_Benefit + " || " + edit_pp_data.As_of_Date + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Bank_Loan_Request", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p024

                        }
                    }
                }


            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //P016-Internal Transfer(Preema)
        public object LoadBusinessLineByBusiness(string id)
        {
            bool status = false;
            string msg = "Failed";
            long Id = Convert.ToInt64(id);
            var bus_line = WF_Tool.DataLibrary.Data.DropdownData.GetAllBusinessLineInCountry(Id).ToList();
            if (bus_line.Count > 0 && bus_line != null)
            {
                status = true;
                msg = "Success";
            }
            return Json(new { status = status, msg = msg, list = bus_line }, JsonRequestBehavior.AllowGet);
        }

        //P003-Ticket Refund(chitra) on 23.06.2020
        public object GetTaNoDetails(string employeeid)
        {
            bool status = false;
            string msg = "Failed";

            var ta_no = WF_Tool.DataLibrary.Data.DropdownData.GetTANumber(employeeid).ToList();
            if (ta_no.Count > 0 && ta_no != null)
            {
                status = true;

            }
            return Json(new { status = status, list = ta_no }, JsonRequestBehavior.AllowGet);
        }

        //P052-EOSB calculation(chitra) on 30.06.2020
        public object GetEndofserviceDetails(string employeeid)
        {
            bool status = false;
            string msg = "Failed";

            var endofService_rqstno = WF_Tool.DataLibrary.Data.DropdownData.GetP025Request(employeeid).ToList();
            if (endofService_rqstno.Count > 0 && endofService_rqstno != null)
            {
                status = true;

            }
            return Json(new { status = status, list = endofService_rqstno }, JsonRequestBehavior.AllowGet);
        }

        //P016-Internal Transfer(Preema)
        public object GetEmployee_Details(string empId)
        {
            string manager = "";
            var employee_details = _entity.SelectAllEmployees_by_EmpId(empId).FirstOrDefault();
            var ReleasingManager = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == employee_details.Line_Manager && x.IsActive == true).FirstOrDefault();
            if (ReleasingManager != null)
            {
                manager = ReleasingManager.Emp_Name;
            }
            return Json(new { list = employee_details, Status = manager }, JsonRequestBehavior.AllowGet);
        }
        //P016-Internal Transfer(Preema)
        public object LoadReceivingManagers(string id)
        {
            bool status = false;
            string msg = "Failed";
            var ReceivingManager = _entity.SelectTopRankEmployees_by_EmpId(id).ToList();
            if (ReceivingManager.Count > 0)
            {
                status = true;
                msg = "Success";
            }
            return Json(new { status = status, msg = msg, list = ReceivingManager }, JsonRequestBehavior.AllowGet);
        }

        //P017-Contract Modification(Preema)
        public object LoadLineManagers()
        {
            bool status = false;
            string msg = "Failed";
            var LineManagers = _entity.SelectAllLineManagers().ToList();
            if (LineManagers.Count > 0)
            {
                status = true;
                msg = "Success";
            }
            return Json(new { status = status, msg = msg, list = LineManagers }, JsonRequestBehavior.AllowGet);
        }

        public object LocationByCountry(string id)
        {
            bool status = false;
            string msg = "Failed";
            long Id = Convert.ToInt64(id);
            var location = WF_Tool.DataLibrary.Data.DropdownData.GetAllLocationInCountry(Id).ToList();
            if (location.Count > 0 && location != null)
            {
                status = true;
                msg = "Success";
            }
            return Json(new { status = status, msg = msg, list = location }, JsonRequestBehavior.AllowGet);
        }

        //P016-Internal Transfer(Preema)
        public object Submit_PP_Internal_Transfer(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data

                    if (model.InternalTransferModel != null)
                    {

                        msg = "Success";
                        var InternalTransfer = model.InternalTransferModel;

                        var insert_pp_data = _entity.tb_PP_Internal_Transfer.Create();
                        insert_pp_data.RequestId = data.Item2;
                        insert_pp_data.IsActive = true;
                        insert_pp_data.TimeStamp = DateTime.Now;

                        insert_pp_data.Employee_Id = InternalTransfer.Employee_Id;

                        insert_pp_data.Transfer_Type = InternalTransfer.Transfer_Type.Trim();
                        insert_pp_data.Receiving_Manager = InternalTransfer.Receiving_Manager_Id;
                        insert_pp_data.Releasing_Manager = InternalTransfer.Releasing_Manager_Id;
                        insert_pp_data.Transfer_From = InternalTransfer.Transfer_From.Trim();
                        insert_pp_data.Transfer_To = InternalTransfer.Transfer_To.Trim();
                        insert_pp_data.Effective_Date = Convert.ToDateTime(InternalTransfer.Effective_Date);

                        insert_pp_data.From_Company = InternalTransfer.From_Company_id;
                        if (InternalTransfer.To_Company_Id != 0)
                        {
                            insert_pp_data.To_Company = InternalTransfer.To_Company_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Company = InternalTransfer.From_Company_id;
                        }

                        insert_pp_data.From_BusinessLine = InternalTransfer.From_Business_Line_id;

                        if (InternalTransfer.To_Business_Line_Id != 0)
                        {
                            insert_pp_data.To_BusinessLine = InternalTransfer.To_Business_Line_Id;
                        }
                        else
                        {
                            insert_pp_data.To_BusinessLine = InternalTransfer.From_Business_Line_id;
                        }


                        insert_pp_data.From_ProductGroup = InternalTransfer.From_Product_Group_id;

                        if (InternalTransfer.To_Product_Group_Id != 0)
                        {
                            insert_pp_data.To_Product_Group = InternalTransfer.To_Product_Group_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Product_Group = InternalTransfer.From_Product_Group_id;
                        }

                        insert_pp_data.From_Department = InternalTransfer.From_Department_id;

                        if (InternalTransfer.To_Department_Id != 0)
                        {
                            insert_pp_data.To_Department = InternalTransfer.To_Department_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Department = InternalTransfer.From_Department_id;
                        }


                        insert_pp_data.From_Position = InternalTransfer.From_Position_id;

                        if (InternalTransfer.To_Position_Id != "0")
                        {
                            insert_pp_data.To_Position = InternalTransfer.To_Position_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Position = InternalTransfer.From_Position_id;
                        }

                        insert_pp_data.From_Global_Grade = InternalTransfer.From_Global_Grade_id;

                        if (InternalTransfer.To_Global_Grade_Id != null)
                        {
                            insert_pp_data.To_Global_Grade = InternalTransfer.To_Global_Grade_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Global_Grade = InternalTransfer.From_Global_Grade_id;
                        }

                        insert_pp_data.From_Local_Grade = InternalTransfer.From_Local_Grade_Id;

                        if (InternalTransfer.To_Local_Grade_Id != null)
                        {
                            insert_pp_data.To_Local_Grade = InternalTransfer.To_Local_Grade_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Local_Grade = InternalTransfer.From_Local_Grade_Id;
                        }

                        insert_pp_data.From_Cost_Center = InternalTransfer.From_Cost_Center_id;

                        if (InternalTransfer.To_Cost_Center_Id != 0)
                        {
                            insert_pp_data.To_Cost_Center = InternalTransfer.To_Cost_Center_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Cost_Center = InternalTransfer.From_Cost_Center_id;
                        }

                        insert_pp_data.From_Status = InternalTransfer.From_status;

                        if (InternalTransfer.To_status != "No Change")
                        {
                            insert_pp_data.To_Status = InternalTransfer.To_status;
                        }
                        else
                        {
                            insert_pp_data.To_Status = InternalTransfer.From_status;
                        }

                        insert_pp_data.From_Notice_Period = InternalTransfer.From_Notice_Period;
                        if (InternalTransfer.To_Notice_Period != null)
                        {
                            insert_pp_data.To_Notice_Period = InternalTransfer.To_Notice_Period;
                        }
                        else
                        {
                            insert_pp_data.To_Notice_Period = InternalTransfer.From_Notice_Period;
                        }

                        insert_pp_data.From_Location = InternalTransfer.From_Location_id;

                        if (InternalTransfer.To_Location_Id != 0)
                        {
                            insert_pp_data.To_Location = InternalTransfer.To_Location_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Location = InternalTransfer.From_Location_id;
                        }

                        insert_pp_data.From_BasicSalary = InternalTransfer.From_Basic_Salary;

                        if (InternalTransfer.To_Basic_Salary != null)
                        {
                            insert_pp_data.To_BasicSalary = InternalTransfer.To_Basic_Salary;
                        }
                        else
                        {
                            insert_pp_data.To_BasicSalary = InternalTransfer.From_Basic_Salary;
                        }

                        insert_pp_data.From_AnnualHousing = InternalTransfer.From_Annual_Housing;

                        if (InternalTransfer.To_Annual_Housing != null)
                        {
                            insert_pp_data.To_AnnualHousing = InternalTransfer.To_Annual_Housing;
                        }
                        else
                        {
                            insert_pp_data.To_AnnualHousing = InternalTransfer.From_Annual_Housing;
                        }

                        insert_pp_data.From_CarCost = InternalTransfer.From_Car_Cost;

                        if (InternalTransfer.To_Car_Cost != null)
                        {
                            insert_pp_data.To_CarCost = InternalTransfer.To_Car_Cost;
                        }
                        else
                        {
                            insert_pp_data.To_CarCost = InternalTransfer.From_Car_Cost;
                        }

                        insert_pp_data.From_Transport = InternalTransfer.From_Transport;

                        if (InternalTransfer.To_Transport != null)
                        {
                            insert_pp_data.To_Transport = InternalTransfer.To_Transport;
                        }
                        else
                        {
                            insert_pp_data.To_Transport = InternalTransfer.From_Transport;
                        }

                        insert_pp_data.From_TravelHardshipAllowance = InternalTransfer.From_Travel_Allowance;

                        if (InternalTransfer.To_Travel_Allowance != null)
                        {
                            insert_pp_data.To_TravelHardshipAllowance = InternalTransfer.To_Travel_Allowance;
                        }
                        else
                        {
                            insert_pp_data.To_TravelHardshipAllowance = InternalTransfer.From_Travel_Allowance;
                        }

                        insert_pp_data.From_MobileAllowance = InternalTransfer.From_Mobile_Allowance;

                        if (InternalTransfer.To_Mobile_Allowance != null)
                        {
                            insert_pp_data.To_MobileAllowance = InternalTransfer.To_Mobile_Allowance;
                        }
                        else
                        {
                            insert_pp_data.To_MobileAllowance = InternalTransfer.From_Mobile_Allowance;
                        }

                        _entity.tb_PP_Internal_Transfer.Add(insert_pp_data);

                        status = _entity.SaveChanges() > 0;

                        #region attachments
                        //to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                        #endregion

                        #region attachments
                        // to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }

                        #endregion

                        #region Keep AuditLog_P016

                        if (status)
                        {

                            string request_id = insert_pp_data.RequestId;

                            string record = insert_pp_data.Transfer_Type + " || " + insert_pp_data.Receiving_Manager + " || " + insert_pp_data.Releasing_Manager + " || " +
                            insert_pp_data.Transfer_From + " || " + insert_pp_data.Transfer_To + " || " + insert_pp_data.Effective_Date + " || " + insert_pp_data.From_Company + " || " +
                            insert_pp_data.To_Company + " || " + insert_pp_data.From_BusinessLine + " || " + insert_pp_data.To_BusinessLine + " || " + insert_pp_data.From_ProductGroup + " || " +
                            insert_pp_data.To_Product_Group + " || " + insert_pp_data.From_Department + " || " + insert_pp_data.To_Department + " || " + insert_pp_data.From_Position + " || " +
                            insert_pp_data.To_Position + " || " + insert_pp_data.From_Global_Grade + " || " + insert_pp_data.To_Global_Grade + " || " +
                            insert_pp_data.From_Local_Grade + " || " + insert_pp_data.To_Local_Grade + " || " +
                            insert_pp_data.From_Cost_Center + " || " +
                            insert_pp_data.To_Cost_Center + " || " + insert_pp_data.From_Status + " || " + insert_pp_data.To_Status + " || " + insert_pp_data.From_Notice_Period + " || " +
                            insert_pp_data.To_Notice_Period + " || " + insert_pp_data.From_Location + " || " + insert_pp_data.To_Location + " || " + insert_pp_data.From_BasicSalary + " || " +
                            insert_pp_data.To_BasicSalary + " || " + insert_pp_data.From_AnnualHousing + " || " + insert_pp_data.To_AnnualHousing + " || " + insert_pp_data.From_CarCost + " || " +
                            insert_pp_data.To_CarCost + " || " + insert_pp_data.From_Transport + " || " + insert_pp_data.To_Transport + " || " + insert_pp_data.From_TravelHardshipAllowance + " || " +
                            insert_pp_data.To_TravelHardshipAllowance + " || " + insert_pp_data.From_MobileAllowance + " || " + insert_pp_data.To_MobileAllowance + " || " + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Internal_Transfer", request_id, "INITIATOR");

                        }

                        #endregion Keep AuditLog_P016

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //P016-Internal Transfer(Preema)
        public object Submit_PP_Internal_Transfer_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            try
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                if (data != null)
                {
                    #region Store Request Data                    
                    var edit_pp_data = _entity.tb_PP_Internal_Transfer.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    if (edit_pp_data != null)
                    {
                        msg = "Success";
                        var InternalTransfer = model.InternalTransferModel;

                        edit_pp_data.RequestId = data.Request_ID;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = DateTime.Now;

                        edit_pp_data.Employee_Id = InternalTransfer.Employee_Id;
                        edit_pp_data.Transfer_Type = InternalTransfer.Transfer_Type.Trim();
                        edit_pp_data.Receiving_Manager = InternalTransfer.Receiving_Manager_Id;
                        edit_pp_data.Releasing_Manager = InternalTransfer.Releasing_Manager_Id;
                        edit_pp_data.Transfer_From = InternalTransfer.Transfer_From.Trim();
                        edit_pp_data.Transfer_To = InternalTransfer.Transfer_To.Trim();
                        edit_pp_data.Effective_Date = Convert.ToDateTime(InternalTransfer.Effective_Date);

                        edit_pp_data.From_Company = InternalTransfer.From_Company_id;
                        if (InternalTransfer.To_Company_Id != 0)
                        {
                            edit_pp_data.To_Company = InternalTransfer.To_Company_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Company = InternalTransfer.From_Company_id;
                        }

                        edit_pp_data.From_BusinessLine = InternalTransfer.From_Business_Line_id;

                        if (InternalTransfer.To_Business_Line_Id != 0)
                        {
                            edit_pp_data.To_BusinessLine = InternalTransfer.To_Business_Line_Id;
                        }
                        else
                        {
                            edit_pp_data.To_BusinessLine = InternalTransfer.From_Business_Line_id;
                        }


                        edit_pp_data.From_ProductGroup = InternalTransfer.From_Product_Group_id;

                        if (InternalTransfer.To_Product_Group_Id != 0)
                        {
                            edit_pp_data.To_Product_Group = InternalTransfer.To_Product_Group_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Product_Group = InternalTransfer.From_Product_Group_id;
                        }

                        edit_pp_data.From_Department = InternalTransfer.From_Department_id;

                        if (InternalTransfer.To_Department_Id != 0)
                        {
                            edit_pp_data.To_Department = InternalTransfer.To_Department_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Department = InternalTransfer.From_Department_id;
                        }


                        edit_pp_data.From_Position = InternalTransfer.From_Position_id;

                        if (InternalTransfer.To_Position_Id != "0")
                        {
                            edit_pp_data.To_Position = InternalTransfer.To_Position_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Position = InternalTransfer.From_Position_id;
                        }

                        edit_pp_data.From_Global_Grade = InternalTransfer.From_Global_Grade_id;

                        if (InternalTransfer.To_Global_Grade_Id != null)
                        {
                            edit_pp_data.To_Global_Grade = InternalTransfer.To_Global_Grade_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Global_Grade = InternalTransfer.From_Global_Grade_id;
                        }
                        edit_pp_data.From_Local_Grade = InternalTransfer.From_Local_Grade_Id;

                        if (InternalTransfer.To_Local_Grade_Id != null)
                        {
                            edit_pp_data.To_Local_Grade = InternalTransfer.To_Local_Grade_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Local_Grade = InternalTransfer.From_Local_Grade_Id;
                        }
                        edit_pp_data.From_Cost_Center = InternalTransfer.From_Cost_Center_id;

                        if (InternalTransfer.To_Cost_Center_Id != 0)
                        {
                            edit_pp_data.To_Cost_Center = InternalTransfer.To_Cost_Center_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Cost_Center = InternalTransfer.From_Cost_Center_id;
                        }

                        edit_pp_data.From_Status = InternalTransfer.From_status;

                        if (InternalTransfer.To_status != "No Change")
                        {
                            edit_pp_data.To_Status = InternalTransfer.To_status;
                        }
                        else
                        {
                            edit_pp_data.To_Status = InternalTransfer.From_status;
                        }

                        edit_pp_data.From_Notice_Period = InternalTransfer.From_Notice_Period;
                        if (InternalTransfer.To_Notice_Period != null)
                        {
                            edit_pp_data.To_Notice_Period = InternalTransfer.To_Notice_Period;
                        }
                        else
                        {
                            edit_pp_data.To_Notice_Period = InternalTransfer.From_Notice_Period;
                        }

                        edit_pp_data.From_Location = InternalTransfer.From_Location_id;

                        if (InternalTransfer.To_Location_Id != 0)
                        {
                            edit_pp_data.To_Location = InternalTransfer.To_Location_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Location = InternalTransfer.From_Location_id;
                        }

                        edit_pp_data.From_BasicSalary = InternalTransfer.From_Basic_Salary;

                        if (InternalTransfer.To_Basic_Salary != null)
                        {
                            edit_pp_data.To_BasicSalary = InternalTransfer.To_Basic_Salary;
                        }
                        else
                        {
                            edit_pp_data.To_BasicSalary = InternalTransfer.From_Basic_Salary;
                        }

                        edit_pp_data.From_AnnualHousing = InternalTransfer.From_Annual_Housing;

                        if (InternalTransfer.To_Annual_Housing != null)
                        {
                            edit_pp_data.To_AnnualHousing = InternalTransfer.To_Annual_Housing;
                        }
                        else
                        {
                            edit_pp_data.To_AnnualHousing = InternalTransfer.From_Annual_Housing;
                        }

                        edit_pp_data.From_CarCost = InternalTransfer.From_Car_Cost;

                        if (InternalTransfer.To_Car_Cost != null)
                        {
                            edit_pp_data.To_CarCost = InternalTransfer.To_Car_Cost;
                        }
                        else
                        {
                            edit_pp_data.To_CarCost = InternalTransfer.From_Car_Cost;
                        }

                        edit_pp_data.From_Transport = InternalTransfer.From_Transport;

                        if (InternalTransfer.To_Transport != null)
                        {
                            edit_pp_data.To_Transport = InternalTransfer.To_Transport;
                        }
                        else
                        {
                            edit_pp_data.To_Transport = InternalTransfer.From_Transport;
                        }

                        edit_pp_data.From_TravelHardshipAllowance = InternalTransfer.From_Travel_Allowance;

                        if (InternalTransfer.To_Travel_Allowance != null)
                        {
                            edit_pp_data.To_TravelHardshipAllowance = InternalTransfer.To_Travel_Allowance;
                        }
                        else
                        {
                            edit_pp_data.To_TravelHardshipAllowance = InternalTransfer.From_Travel_Allowance;
                        }

                        edit_pp_data.From_MobileAllowance = InternalTransfer.From_Mobile_Allowance;

                        if (InternalTransfer.To_Mobile_Allowance != null)
                        {
                            edit_pp_data.To_MobileAllowance = InternalTransfer.To_Mobile_Allowance;
                        }
                        else
                        {
                            edit_pp_data.To_MobileAllowance = InternalTransfer.From_Mobile_Allowance;
                        }

                        status = _entity.SaveChanges() > 0;

                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }
                        }

                        #endregion attachment edit

                        #region Keep AuditLog_P016

                        if (status == true)
                        {
                            string request_id = edit_pp_data.RequestId;

                            string record = edit_pp_data.Transfer_Type + " || " + edit_pp_data.Receiving_Manager + " || " + edit_pp_data.Releasing_Manager + " || " +
                             edit_pp_data.Transfer_From + " || " + edit_pp_data.Transfer_To + " || " + edit_pp_data.Effective_Date + " || " + edit_pp_data.From_Company + " || " +
                             edit_pp_data.To_Company + " || " + edit_pp_data.From_BusinessLine + " || " + edit_pp_data.To_BusinessLine + " || " + edit_pp_data.From_ProductGroup + " || " +
                             edit_pp_data.To_Product_Group + " || " + edit_pp_data.From_Department + " || " + edit_pp_data.To_Department + " || " + edit_pp_data.From_Position + " || " +
                             edit_pp_data.To_Position + " || " + edit_pp_data.From_Global_Grade + " || " + edit_pp_data.To_Global_Grade + " || " +
                             edit_pp_data.From_Local_Grade + " || " + edit_pp_data.To_Local_Grade + " || " +
                             edit_pp_data.From_Cost_Center + " || " +
                             edit_pp_data.To_Cost_Center + " || " + edit_pp_data.From_Status + " || " + edit_pp_data.To_Status + " || " + edit_pp_data.From_Notice_Period + " || " +
                             edit_pp_data.To_Notice_Period + " || " + edit_pp_data.From_Location + " || " + edit_pp_data.To_Location + " || " + edit_pp_data.From_BasicSalary + " || " +
                             edit_pp_data.To_BasicSalary + " || " + edit_pp_data.From_AnnualHousing + " || " + edit_pp_data.To_AnnualHousing + " || " + edit_pp_data.From_CarCost + " || " +
                             edit_pp_data.To_CarCost + " || " + edit_pp_data.From_Transport + " || " + edit_pp_data.To_Transport + " || " + edit_pp_data.From_TravelHardshipAllowance + " || " +
                             edit_pp_data.To_TravelHardshipAllowance + " || " + edit_pp_data.From_MobileAllowance + " || " + edit_pp_data.To_MobileAllowance + " || " + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Internal_Transfer", request_id, "INITIATOR");

                            #endregion Keep AuditLog_P016

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                    }
                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);

        }

        //P016-Internal Transfer(Preema)
        public object Edit_PP_Internal_Transfer_Request(EmployeeRequestModel model)
        {
            bool status = false;
            bool status1 = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_pp_data = _entity.tb_PP_Internal_Transfer.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {

                #region

                var InternalTransfer = model.InternalTransferModel;
                edit_pp_data.RequestId = rqid;
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = DateTime.Now;

                //edit_pp_data.Employee_Id = InternalTransfer.Employee_Id;
                edit_pp_data.Transfer_Type = InternalTransfer.Transfer_Type.Trim();
                edit_pp_data.Receiving_Manager = InternalTransfer.Receiving_Manager_Id;
                edit_pp_data.Releasing_Manager = InternalTransfer.Releasing_Manager_Id;
                edit_pp_data.Transfer_From = InternalTransfer.Transfer_From.Trim();
                edit_pp_data.Transfer_To = InternalTransfer.Transfer_To.Trim();
                edit_pp_data.Effective_Date = Convert.ToDateTime(InternalTransfer.Effective_Date);

                edit_pp_data.From_Company = InternalTransfer.From_Company_id;
                if (InternalTransfer.To_Company_Id != 0)
                {
                    edit_pp_data.To_Company = InternalTransfer.To_Company_Id;
                }
                else
                {
                    edit_pp_data.To_Company = InternalTransfer.From_Company_id;
                }

                edit_pp_data.From_BusinessLine = InternalTransfer.From_Business_Line_id;

                if (InternalTransfer.To_Business_Line_Id != 0)
                {
                    edit_pp_data.To_BusinessLine = InternalTransfer.To_Business_Line_Id;
                }
                else
                {
                    edit_pp_data.To_BusinessLine = InternalTransfer.From_Business_Line_id;
                }


                edit_pp_data.From_ProductGroup = InternalTransfer.From_Product_Group_id;

                if (InternalTransfer.To_Product_Group_Id != 0)
                {
                    edit_pp_data.To_Product_Group = InternalTransfer.To_Product_Group_Id;
                }
                else
                {
                    edit_pp_data.To_Product_Group = InternalTransfer.From_Product_Group_id;
                }

                edit_pp_data.From_Department = InternalTransfer.From_Department_id;

                if (InternalTransfer.To_Department_Id != 0)
                {
                    edit_pp_data.To_Department = InternalTransfer.To_Department_Id;
                }
                else
                {
                    edit_pp_data.To_Department = InternalTransfer.From_Department_id;
                }


                edit_pp_data.From_Position = InternalTransfer.From_Position_id;

                if (InternalTransfer.To_Position_Id != "0")
                {
                    edit_pp_data.To_Position = InternalTransfer.To_Position_Id;
                }
                else
                {
                    edit_pp_data.To_Position = InternalTransfer.From_Position_id;
                }

                edit_pp_data.From_Global_Grade = InternalTransfer.From_Global_Grade_id;

                if (InternalTransfer.To_Global_Grade_Id != null)
                {
                    edit_pp_data.To_Global_Grade = InternalTransfer.To_Global_Grade_Id;
                }
                else
                {
                    edit_pp_data.To_Global_Grade = InternalTransfer.From_Global_Grade_id;
                }

                edit_pp_data.From_Local_Grade = InternalTransfer.From_Local_Grade;

                if (InternalTransfer.To_Local_Grade_Id != null)
                {
                    edit_pp_data.To_Local_Grade = InternalTransfer.To_Local_Grade_Id;
                }
                else
                {
                    edit_pp_data.To_Local_Grade = InternalTransfer.From_Local_Grade_Id;
                }

                edit_pp_data.From_Cost_Center = InternalTransfer.From_Cost_Center_id;

                if (InternalTransfer.To_Cost_Center_Id != 0)
                {
                    edit_pp_data.To_Cost_Center = InternalTransfer.To_Cost_Center_Id;
                }
                else
                {
                    edit_pp_data.To_Cost_Center = InternalTransfer.From_Cost_Center_id;
                }

                edit_pp_data.From_Status = InternalTransfer.From_status;

                if (InternalTransfer.To_status != "No Change")
                {
                    edit_pp_data.To_Status = InternalTransfer.To_status;
                }
                else
                {
                    edit_pp_data.To_Status = InternalTransfer.From_status;
                }

                edit_pp_data.From_Notice_Period = InternalTransfer.From_Notice_Period;
                if (InternalTransfer.To_Notice_Period != null)
                {
                    edit_pp_data.To_Notice_Period = InternalTransfer.To_Notice_Period;
                }
                else
                {
                    edit_pp_data.To_Notice_Period = InternalTransfer.From_Notice_Period;
                }

                edit_pp_data.From_Location = InternalTransfer.From_Location_id;

                if (InternalTransfer.To_Location_Id != 0)
                {
                    edit_pp_data.To_Location = InternalTransfer.To_Location_Id;
                }
                else
                {
                    edit_pp_data.To_Location = InternalTransfer.From_Location_id;
                }

                edit_pp_data.From_BasicSalary = InternalTransfer.From_Basic_Salary;

                if (InternalTransfer.To_Basic_Salary != null)
                {
                    edit_pp_data.To_BasicSalary = InternalTransfer.To_Basic_Salary;
                }
                else
                {
                    edit_pp_data.To_BasicSalary = InternalTransfer.From_Basic_Salary;
                }

                edit_pp_data.From_AnnualHousing = InternalTransfer.From_Annual_Housing;

                if (InternalTransfer.To_Annual_Housing != null)
                {
                    edit_pp_data.To_AnnualHousing = InternalTransfer.To_Annual_Housing;
                }
                else
                {
                    edit_pp_data.To_AnnualHousing = InternalTransfer.From_Annual_Housing;
                }

                edit_pp_data.From_CarCost = InternalTransfer.From_Car_Cost;

                if (InternalTransfer.To_Car_Cost != null)
                {
                    edit_pp_data.To_CarCost = InternalTransfer.To_Car_Cost;
                }
                else
                {
                    edit_pp_data.To_CarCost = InternalTransfer.From_Car_Cost;
                }

                edit_pp_data.From_Transport = InternalTransfer.From_Transport;

                if (InternalTransfer.To_Transport != null)
                {
                    edit_pp_data.To_Transport = InternalTransfer.To_Transport;
                }
                else
                {
                    edit_pp_data.To_Transport = InternalTransfer.From_Transport;
                }

                edit_pp_data.From_TravelHardshipAllowance = InternalTransfer.From_Travel_Allowance;

                if (InternalTransfer.To_Travel_Allowance != null)
                {
                    edit_pp_data.To_TravelHardshipAllowance = InternalTransfer.To_Travel_Allowance;
                }
                else
                {
                    edit_pp_data.To_TravelHardshipAllowance = InternalTransfer.From_Travel_Allowance;
                }

                edit_pp_data.From_MobileAllowance = InternalTransfer.From_Mobile_Allowance;

                if (InternalTransfer.To_Mobile_Allowance != null)
                {
                    edit_pp_data.To_MobileAllowance = InternalTransfer.To_Mobile_Allowance;
                }
                else
                {
                    edit_pp_data.To_MobileAllowance = InternalTransfer.From_Mobile_Allowance;
                }

                status = _entity.SaveChanges() > 0;

                #endregion

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                            #region Keep AuditLog_p016

                            string request_id = edit_pp_data.RequestId;

                            string record = edit_pp_data.Transfer_Type + " || " + edit_pp_data.Receiving_Manager + " || " + edit_pp_data.Releasing_Manager + " || " +
                              edit_pp_data.Transfer_From + " || " + edit_pp_data.Transfer_To + " || " + edit_pp_data.Effective_Date + " || " + edit_pp_data.From_Company + " || " +
                              edit_pp_data.To_Company + " || " + edit_pp_data.From_BusinessLine + " || " + edit_pp_data.To_BusinessLine + " || " + edit_pp_data.From_ProductGroup + " || " +
                              edit_pp_data.To_Product_Group + " || " + edit_pp_data.From_Department + " || " + edit_pp_data.To_Department + " || " + edit_pp_data.From_Position + " || " +
                              edit_pp_data.To_Position + " || " + edit_pp_data.From_Global_Grade + " || " + edit_pp_data.To_Global_Grade + " || " +
                              edit_pp_data.From_Local_Grade + " || " + edit_pp_data.To_Local_Grade + " || " +
                              edit_pp_data.From_Cost_Center + " || " +
                              edit_pp_data.To_Cost_Center + " || " + edit_pp_data.From_Status + " || " + edit_pp_data.To_Status + " || " + edit_pp_data.From_Notice_Period + " || " +
                              edit_pp_data.To_Notice_Period + " || " + edit_pp_data.From_Location + " || " + edit_pp_data.To_Location + " || " + edit_pp_data.From_BasicSalary + " || " +
                              edit_pp_data.To_BasicSalary + " || " + edit_pp_data.From_AnnualHousing + " || " + edit_pp_data.To_AnnualHousing + " || " + edit_pp_data.From_CarCost + " || " +
                              edit_pp_data.To_CarCost + " || " + edit_pp_data.From_Transport + " || " + edit_pp_data.To_Transport + " || " + edit_pp_data.From_TravelHardshipAllowance + " || " +
                              edit_pp_data.To_TravelHardshipAllowance + " || " + edit_pp_data.From_MobileAllowance + " || " + edit_pp_data.To_MobileAllowance + " || " + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Internal_Transfer", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p016
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges                            

                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion

                            #region Keep AuditLog_p016 for initiator after backtoinitiator

                            string request_id = edit_pp_data.RequestId;

                            string record = edit_pp_data.Transfer_Type + " || " + edit_pp_data.Receiving_Manager + " || " + edit_pp_data.Releasing_Manager + " || " +
                              edit_pp_data.Transfer_From + " || " + edit_pp_data.Transfer_To + " || " + edit_pp_data.Effective_Date + " || " + edit_pp_data.From_Company + " || " +
                              edit_pp_data.To_Company + " || " + edit_pp_data.From_BusinessLine + " || " + edit_pp_data.To_BusinessLine + " || " + edit_pp_data.From_ProductGroup + " || " +
                              edit_pp_data.To_Product_Group + " || " + edit_pp_data.From_Department + " || " + edit_pp_data.To_Department + " || " + edit_pp_data.From_Position + " || " +
                              edit_pp_data.To_Position + " || " + edit_pp_data.From_Global_Grade + " || " + edit_pp_data.To_Global_Grade + " || " +
                              edit_pp_data.From_Local_Grade + " || " + edit_pp_data.To_Local_Grade + " || " +
                              edit_pp_data.From_Cost_Center + " || " +
                              edit_pp_data.To_Cost_Center + " || " + edit_pp_data.From_Status + " || " + edit_pp_data.To_Status + " || " + edit_pp_data.From_Notice_Period + " || " +
                              edit_pp_data.To_Notice_Period + " || " + edit_pp_data.From_Location + " || " + edit_pp_data.To_Location + " || " + edit_pp_data.From_BasicSalary + " || " +
                              edit_pp_data.To_BasicSalary + " || " + edit_pp_data.From_AnnualHousing + " || " + edit_pp_data.To_AnnualHousing + " || " + edit_pp_data.From_CarCost + " || " +
                              edit_pp_data.To_CarCost + " || " + edit_pp_data.From_Transport + " || " + edit_pp_data.To_Transport + " || " + edit_pp_data.From_TravelHardshipAllowance + " || " +
                              edit_pp_data.To_TravelHardshipAllowance + " || " + edit_pp_data.From_MobileAllowance + " || " + edit_pp_data.To_MobileAllowance + " || " + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Internal_Transfer", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p016

                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //P016-Internal Transfer(Preema)  
        public void UpdateRequestHistory(string WFID, string ButtonCode, string reqId, string sequence_no)
        {
            bool status = false;



            var data_history = _entity.tb_Request_Hdr_History.Where(x => x.Request_ID == reqId && x.IsActive == true).FirstOrDefault();
            if (data_history != null)
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqId && x.IsActive == true).FirstOrDefault();
                // var approver_log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();
                var RequestHistory = _entity.tb_Request_Hdr_History.Where(x => x.Request_ID == reqId && x.IsActive == true).FirstOrDefault();

                //var emp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == data.Employee_ID && x.IsActive == true).FirstOrDefault();
                ////var profile = _entity.tb_Emp_Profile.Where(x => x.Id == emp.Profile_ID && x.IsActive == true).FirstOrDefault();
                //long pid = Convert.ToInt64(emp.Profile_ID);
                //var template = _entity.tb_WF_Template.Where(x => x.WF_ID == data.WF_ID && x.Profile_ID == pid && x.Role_ID == data.RoleId && x.IsActive == true).FirstOrDefault();


                RequestHistory.Request_ID = data.Request_ID;
                RequestHistory.Approver_ID = data.Approver_ID;
                RequestHistory.OrgApprover_ID = data.OrgApprover_ID;
                RequestHistory.Status_ID = data.Status_ID;

                if (ButtonCode == "APR" || ButtonCode == "ESC" || ButtonCode == "RRT")
                {
                    // RequestHistory.Approval_No = Convert.ToString(template.Sequence_NO);
                    if (data.Escalaton_NO != null && data.Escalaton_NO != 0)
                    {
                        RequestHistory.Approval_No = Convert.ToString(data.Escalaton_NO);
                    }
                    else
                    {
                        RequestHistory.Approval_No = data.Approval_No;
                    }

                }
                else
                {
                    RequestHistory.Approval_No = data.Approval_No;
                }

                RequestHistory.RoleId = Convert.ToString(data.RoleId);
                status = _entity.SaveChanges() > 0;
            }
            else
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqId && x.IsActive == true).FirstOrDefault();
                //var approver_log = _entity.tb_ApprovalLog.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).OrderByDescending(x => x.Id).FirstOrDefault();              
                var RequestHistory = _entity.tb_Request_Hdr_History.Create();
                RequestHistory.Request_ID = data.Request_ID;
                RequestHistory.WF_ID = data.WF_ID;
                RequestHistory.Approver_ID = data.Approver_ID;
                RequestHistory.OrgApprover_ID = data.OrgApprover_ID;
                RequestHistory.Status_ID = ButtonCode;
                RequestHistory.Approval_No = data.Approval_No;
                RequestHistory.RoleId = Convert.ToString(data.RoleId);
                RequestHistory.IsActive = true;
                _entity.tb_Request_Hdr_History.Add(RequestHistory);
                status = _entity.SaveChanges() > 0;
            }


        }

        public void UpdateEmployeeDetails(string request_id, string WF_Type)
        {
            #region  Update tb_WF_Employee 
            bool status = false;
            if (WF_Type == "P016")
            {
                var Internal_Transfer = _entity.tb_PP_Internal_Transfer.Where(x => x.RequestId == request_id && x.IsActive == true).FirstOrDefault();
                var editEmp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == Internal_Transfer.Employee_Id && x.IsActive == true).FirstOrDefault();

                if (editEmp != null)
                {
                    if (Internal_Transfer.To_Cost_Center != null && Internal_Transfer.To_Cost_Center != 0)
                    {
                        editEmp.CC_Id = Internal_Transfer.To_Cost_Center;
                    }
                    if (Internal_Transfer.To_Global_Grade != null && Internal_Transfer.To_Global_Grade != "")
                    {
                        editEmp.Global_Group = Internal_Transfer.To_Global_Grade;
                    }
                    if (Internal_Transfer.To_Local_Grade != null && Internal_Transfer.To_Local_Grade != "")
                    {
                        editEmp.Local_Group = Internal_Transfer.To_Local_Grade;
                    }
                    if (Internal_Transfer.To_Department != null && Internal_Transfer.To_Department != 0)
                    {
                        editEmp.Department_Id = Internal_Transfer.To_Department;
                    }
                    if (Internal_Transfer.To_Product_Group != null && Internal_Transfer.To_Product_Group != 0)
                    {
                        editEmp.Productgroup_Id = Internal_Transfer.To_Product_Group;
                    }
                    if (Internal_Transfer.To_BusinessLine != null && Internal_Transfer.To_BusinessLine != 0)
                    {
                        editEmp.Businessline_Id = Internal_Transfer.To_BusinessLine;
                    }
                    if (Internal_Transfer.To_Location != null && Internal_Transfer.To_Location != 0)
                    {
                        editEmp.Location_Id = Internal_Transfer.To_Location;
                    }
                    if (Internal_Transfer.To_Position != null && Internal_Transfer.To_Position != "")
                    {
                        editEmp.PositionClass_ID = Internal_Transfer.To_Position;
                    }
                    if (Internal_Transfer.To_Company != null && Internal_Transfer.To_Company != 0)
                    {
                        editEmp.Company_Id = Internal_Transfer.To_Company;
                    }
                    if (Internal_Transfer.Receiving_Manager != null && Internal_Transfer.Receiving_Manager != "")
                    {
                        editEmp.Line_Manager = Internal_Transfer.Receiving_Manager;
                    }

                    editEmp.IsActive = true;
                    editEmp.TimeStamp = CurrentTime;

                    status = _entity.SaveChanges() > 0;
                }
            }
            if (WF_Type == "P017")
            {
                var Contract_Modification = _entity.tb_PP_Contract_Modification.Where(x => x.RequestId == request_id && x.IsActive == true).FirstOrDefault();
                var editEmp = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == Contract_Modification.Employee_Id && x.IsActive == true).FirstOrDefault();

                if (editEmp != null)
                {
                    if (Contract_Modification.To_Cost_Center != null && Contract_Modification.To_Cost_Center != 0)
                    {
                        editEmp.CC_Id = Contract_Modification.To_Cost_Center;
                    }
                    if (Contract_Modification.To_Global_Grade != null && Contract_Modification.To_Global_Grade != "")
                    {
                        editEmp.Global_Group = Contract_Modification.To_Global_Grade;
                    }
                    if (Contract_Modification.To_Local_Grade != null && Contract_Modification.To_Local_Grade != "")
                    {
                        editEmp.Local_Group = Contract_Modification.To_Local_Grade;
                    }
                    if (Contract_Modification.To_Department != null && Contract_Modification.To_Department != 0)
                    {
                        editEmp.Department_Id = Contract_Modification.To_Department;
                    }
                    if (Contract_Modification.To_Product_Group != null && Contract_Modification.To_Product_Group != 0)
                    {
                        editEmp.Productgroup_Id = Contract_Modification.To_Product_Group;
                    }
                    if (Contract_Modification.To_BusinessLine != null && Contract_Modification.To_BusinessLine != 0)
                    {
                        editEmp.Businessline_Id = Contract_Modification.To_BusinessLine;
                    }
                    if (Contract_Modification.To_Location != null && Contract_Modification.To_Location != 0)
                    {
                        editEmp.Location_Id = Contract_Modification.To_Location;
                    }
                    if (Contract_Modification.To_Position != null && Contract_Modification.To_Position != "")
                    {
                        editEmp.PositionClass_ID = Contract_Modification.To_Position;
                    }
                    if (Contract_Modification.To_Company != null && Contract_Modification.To_Company != 0)
                    {
                        editEmp.Company_Id = Contract_Modification.To_Company;
                    }
                    if (Contract_Modification.Releasing_Manager != null && Contract_Modification.Releasing_Manager != "")
                    {
                        editEmp.Line_Manager = Contract_Modification.Releasing_Manager;
                    }

                    editEmp.IsActive = true;
                    editEmp.TimeStamp = CurrentTime;

                    status = _entity.SaveChanges() > 0;
                }
            }

            #endregion
            //P016-Internal Transfer(Preema)
        }

        //-------------------------------------------------P003 Refund Of AirTicket  by Chitra Srishti On 23.06.2020--------------//
        public void UpdateRequestDetails(string request_id, string WF_Type, string EmployeeID)
        {
            #region  Update tb_Request_Hdr
            bool status = false;
            if (WF_Type == "P003")
            {
                var editrequest = _entity.tb_Request_Hdr.Where(x => x.Request_ID == request_id && x.IsActive == true && x.Employee_ID == EmployeeID).FirstOrDefault();
                if (editrequest.WF_LookUp != null)
                {
                    if (editrequest.WF_LookUp == "P003")
                    {
                        editrequest.WF_LookUp = "P003";
                    }
                    else
                    {

                        editrequest.WF_LookUp = editrequest.WF_LookUp + '~' + "P003";
                    }


                }
                else
                {
                    editrequest.WF_LookUp = "P003";

                }
                status = _entity.SaveChanges() > 0;
            }



            #endregion

        }     
        public void UpdateRefundAirticket(string request_id, string TARequestNo, string TicketNo)
        {
            #region  Update tb_PP_Refund_Air_Ticket
            bool status = false;
            var editrefund = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == request_id && x.TA_Request_No == TARequestNo && x.Ticket_No == TicketNo && x.IsActive == true).FirstOrDefault();
            if (editrefund.Status_ID == "NEW")
            {
                editrefund.Status_ID = "CLS";

            }

            status = _entity.SaveChanges() > 0;



            #endregion

        }
        //-------------------------------------------------P052 EOSB Calculation Payment module  by Chitra Srishti On 30.06.2020--------------//
        public void UpdateEndofServiceDetails(string request_id, string WF_Type, string EmployeeID)
        {
            #region  Update tb_Request_Hdr
            bool status = false;
            if (WF_Type == "P052")
            {
                var editrequest = _entity.tb_Request_Hdr.Where(x => x.Request_ID == request_id && x.IsActive == true && x.Employee_ID == EmployeeID).FirstOrDefault();
                if (editrequest.WF_LookUp != null)
                {
                    if (editrequest.WF_LookUp == "P052")
                    {
                        editrequest.WF_LookUp = "P052";
                    }
                    else
                    {

                        editrequest.WF_LookUp = editrequest.WF_LookUp + '~' + "P052";
                    }


                }
                else
                {
                    editrequest.WF_LookUp = "P052";

                }
                status = _entity.SaveChanges() > 0;
            }



            #endregion

        }
        //-----------------------------------------------P025 EndofServiceClearance on 07-05-2020 By Nimmi Mohan---------------------
        public object Submit_PP_EndofServiceClearance(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_PP_EndofServiceClearance.Create();
                insert_pp_data.RequestId = data.Item2;

                insert_pp_data.Reason_Clearance = model.reason_clearance;
                insert_pp_data.Termination_Date = Convert.ToDateTime(model.termination_Date);
                //insert_pp_data.EB_Toolbox_Returned = model.eb_Toolbox_Returned;
                //insert_pp_data.EB_Workstation_Cleared = model.eb_Workstation_Cleared;
                //insert_pp_data.EB_OfficialBusiness_Documents = model.eb_OfficialBusiness_Documents;
                //insert_pp_data.EB_SiteProject_Clearance = model.eb_SiteProject_Clearance;
                //insert_pp_data.EB_Uniform = model.eb_Uniform;
                //insert_pp_data.EB_Safety_Equipment = model.eb_Safety_Equipment;
                //insert_pp_data.EB_AllWorkflow_Approvals = model.eb_AllWorkflow_Approvals;
                //insert_pp_data.EB_ISService_Deactivation_Date = Convert.ToDateTime(model.eb_ISService_Deactivation_Date);
                //insert_pp_data.EB_Assigned_Delegate = model.eb_Assigned_Delegate;
                //insert_pp_data.AD_HousingHousehold_cleared = model.ad_HousingHousehold_cleared;
                //insert_pp_data.AD_Util_Water_cleared = model.ad_Util_Water_cleared;
                //insert_pp_data.AD_CarGarageKey_Returned = model.ad_CarGarageKey_Returned;
                //insert_pp_data.AD_Gatepass_Returned = model.ad_Gatepass_Returned;
                //insert_pp_data.AD_Mobile_SimCard_Returned = model.ad_Mobile_SimCard_Returned;
                //insert_pp_data.AD_CompanyID_Returned = model.ad_CompanyID_Returned;
                //insert_pp_data.TR_Amount_SAR = Convert.ToDecimal(model.tr_Amount_SAR);
                //insert_pp_data.TR_ExternalTraining_Cost = model.tr_ExternalTraining_Cost;
                //insert_pp_data.IS_Desktop_Returned = model.is_Desktop_Returned;
                //insert_pp_data.FT_Clearance_Obtained = model.ft_Clearance_Obtained;
                //insert_pp_data.FT_eBank_Token = model.ft_eBank_Token;
                //insert_pp_data.AE_Clearance_Obtained = model.ae_Clearance_Obtained;
                //insert_pp_data.HR_CarLoan_Cleared = model.hr_CarLoan_Cleared;
                //insert_pp_data.HR_SalaryAdvances_Settled = model.hr_SalaryAdvances_Settled;
                //insert_pp_data.HR_CompanyStamp_Returned = model.hr_CompanyStamp_Returned;
                //insert_pp_data.HR_MedicalInsurance_Returned = model.hr_MedicalInsurance_Returned;
                //insert_pp_data.HR_Visa_Mastercard_Communicated = model.hr_Visa_Mastercard_Communicated;
                //insert_pp_data.HR_Savingcurrent_communicated = model.hr_Savingcurrent_communicated;
                //insert_pp_data.HR_Remarks = model.hr_Remarks;
                ////05-05-2020
                //insert_pp_data.EB_toolbx_returned_date = model.eb_toolbx_returned_date;
                //insert_pp_data.EB_workstation_cleared_date = model.workstation_cleared_date;
                //insert_pp_data.EB_official_business_doc_date = model.official_business_doc_date;
                //insert_pp_data.EB_site_project_clearance_date = model.site_project_clearance_date;
                //insert_pp_data.EB_uni_form_date = model.uni_form_date;
                //insert_pp_data.EB_safety_equipment_date = model.safety_equipment_date;
                //insert_pp_data.EB_workflow_approvals_date = model.workflow_approvals_date;
                //insert_pp_data.AD_housing_household_date = model.housing_household_date;
                //insert_pp_data.AD_car_garage_key_date = model.car_garage_key_date;
                //insert_pp_data.AD_gatepass_sticker_date = model.gatepass_sticker_date;
                //insert_pp_data.AD_Mobile_returned_date = model.Mobile_returned_date;
                //insert_pp_data.AD_company_id_returned_date = model.company_id_returned_date;
                //insert_pp_data.AD_utilities_water_etc_date = model.utilities_water_etc_date;
                //insert_pp_data.IS_desktop_etc_cleared_date = model.desktop_etc_cleared_date;
                //insert_pp_data.FT_clearance_obtained_fin_date = model.clearance_obtained_fin_date;
                //insert_pp_data.FT_e_bank_token_date = model.e_bank_token_date;
                //insert_pp_data.AE_clearance_obtained_ae_date = model.clearance_obtained_ae_date;
                //insert_pp_data.HR_car_loan_cleared_date = model.car_loan_cleared_date;
                //insert_pp_data.HR_salary_advance_settled_date = model.salary_advance_settled_date;
                //insert_pp_data.HR_company_stamp_returned_date = model.company_stamp_returned_date;
                //insert_pp_data.HR_medical_insurance_date = model.medical_insurance_date;
                //insert_pp_data.HR_visa_master_commun_date = model.visa_master_commun_date;
                //insert_pp_data.HR_sav_current_account_date = model.sav_current_account_date;
                //insert_pp_data.external_training_cost_date = model.external_training_cost_date;


                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                _entity.tb_PP_EndofServiceClearance.Add(insert_pp_data);
                status = _entity.SaveChanges() > 0;

                #region hr_attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 4).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion



                #region Keep AuditLog_p025
                if (status)
                {
                    string request_id = insert_pp_data.RequestId;
                    string record = model.reason_clearance + " || " + model.termination_Date + " || " +
                                    model.eb_Toolbox_Returned + " || " + model.eb_Workstation_Cleared + " || " + model.eb_toolbx_returned_date + " || " + model.eb_OfficialBusiness_Documents + " || " + model.eb_SiteProject_Clearance + " || " + model.eb_Uniform + " || " + model.eb_Safety_Equipment + " || " + model.eb_AllWorkflow_Approvals + " || " + model.eb_ISService_Deactivation_Date + " || " + model.eb_Assigned_Delegate + " || " +
                                    model.ad_HousingHousehold_cleared + " || " + model.ad_Util_Water_cleared + " || " + model.ad_CarGarageKey_Returned + " || " + model.ad_Gatepass_Returned + " || " + model.ad_Mobile_SimCard_Returned + " || " + model.ad_CompanyID_Returned + " || " +
                                    model.tr_Amount_SAR + " || " + model.tr_ExternalTraining_Cost + " || " + model.is_Desktop_Returned + " || " + model.ft_Clearance_Obtained + " || " + model.ft_eBank_Token + " || " +
                                    model.ae_Clearance_Obtained + " || " + model.hr_CarLoan_Cleared + " || " + model.hr_SalaryAdvances_Settled + " || " + model.hr_CompanyStamp_Returned + " || " + model.hr_MedicalInsurance_Returned + " || " + model.hr_Visa_Mastercard_Communicated + " || " + model.hr_Savingcurrent_communicated + " || " +
                                    model.hr_Remarks + " || " + model.eb_toolbx_returned_date + " || " + model.workstation_cleared_date + " || " + model.official_business_doc_date + " || " + model.site_project_clearance_date + " || " +
                                    model.uni_form_date + " || " + model.safety_equipment_date + " || " + model.workflow_approvals_date + " || " +
                                    model.housing_household_date + " || " + model.car_garage_key_date + " || " + model.gatepass_sticker_date + " || " + model.Mobile_returned_date + " || " +
                                    model.company_id_returned_date + " || " + model.utilities_water_etc_date + " || " + model.desktop_etc_cleared_date + " || " + model.clearance_obtained_fin_date + " || " +
                                    model.e_bank_token_date + " || " + model.clearance_obtained_ae_date + " || " + model.salary_advance_settled_date + " || " +
                                    model.company_stamp_returned_date + " || " + model.medical_insurance_date + " || " + model.visa_master_commun_date + " || " +
                                    model.sav_current_account_date + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EndofServiceClearance", request_id, "INITIATOR");
                }
                #endregion Keep AuditLog_p025
            }
            #endregion

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_PP_EndofServiceClearance_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_PP_EndofServiceClearance.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    edit_pp_data.Reason_Clearance = model.reason_clearance;
                    edit_pp_data.Termination_Date = Convert.ToDateTime(model.termination_Date);
                    //edit_pp_data.EB_Toolbox_Returned = model.eb_Toolbox_Returned;
                    //edit_pp_data.EB_Workstation_Cleared = model.eb_Workstation_Cleared;
                    //edit_pp_data.EB_OfficialBusiness_Documents = model.eb_OfficialBusiness_Documents;
                    //edit_pp_data.EB_SiteProject_Clearance = model.eb_SiteProject_Clearance;
                    //edit_pp_data.EB_Uniform = model.eb_Uniform;
                    //edit_pp_data.EB_Safety_Equipment = model.eb_Safety_Equipment;
                    //edit_pp_data.EB_AllWorkflow_Approvals = model.eb_AllWorkflow_Approvals;
                    //edit_pp_data.EB_ISService_Deactivation_Date = Convert.ToDateTime(model.eb_ISService_Deactivation_Date);
                    //edit_pp_data.EB_Assigned_Delegate = model.eb_Assigned_Delegate;
                    //edit_pp_data.AD_HousingHousehold_cleared = model.ad_HousingHousehold_cleared;
                    //edit_pp_data.AD_Util_Water_cleared = model.ad_Util_Water_cleared;
                    //edit_pp_data.AD_CarGarageKey_Returned = model.ad_CarGarageKey_Returned;
                    //edit_pp_data.AD_Gatepass_Returned = model.ad_Gatepass_Returned;
                    //edit_pp_data.AD_Mobile_SimCard_Returned = model.ad_Mobile_SimCard_Returned;
                    //edit_pp_data.AD_CompanyID_Returned = model.ad_CompanyID_Returned;
                    //edit_pp_data.TR_Amount_SAR = Convert.ToDecimal(model.tr_Amount_SAR);
                    //edit_pp_data.TR_ExternalTraining_Cost = model.tr_ExternalTraining_Cost;
                    //edit_pp_data.IS_Desktop_Returned = model.is_Desktop_Returned;
                    //edit_pp_data.FT_Clearance_Obtained = model.ft_Clearance_Obtained;
                    //edit_pp_data.FT_eBank_Token = model.ft_eBank_Token;
                    //edit_pp_data.AE_Clearance_Obtained = model.ae_Clearance_Obtained;
                    //edit_pp_data.HR_CarLoan_Cleared = model.hr_CarLoan_Cleared;
                    //edit_pp_data.HR_SalaryAdvances_Settled = model.hr_SalaryAdvances_Settled;
                    //edit_pp_data.HR_CompanyStamp_Returned = model.hr_CompanyStamp_Returned;
                    //edit_pp_data.HR_MedicalInsurance_Returned = model.hr_MedicalInsurance_Returned;
                    //edit_pp_data.HR_Visa_Mastercard_Communicated = model.hr_Visa_Mastercard_Communicated;
                    //edit_pp_data.HR_Savingcurrent_communicated = model.hr_Savingcurrent_communicated;
                    //edit_pp_data.HR_Remarks = model.hr_Remarks;
                    //edit_pp_data.HR_Attachment_Filepath = model.hr_Attachment_Filepath;


                    ////05-05-2020
                    //edit_pp_data.EB_toolbx_returned_date = model.eb_toolbx_returned_date;
                    //edit_pp_data.EB_workstation_cleared_date = model.workstation_cleared_date;
                    //edit_pp_data.EB_official_business_doc_date = model.official_business_doc_date;
                    //edit_pp_data.EB_site_project_clearance_date = model.site_project_clearance_date;
                    //edit_pp_data.EB_uni_form_date = model.uni_form_date;
                    //edit_pp_data.EB_safety_equipment_date = model.safety_equipment_date;
                    //edit_pp_data.EB_workflow_approvals_date = model.workflow_approvals_date;
                    //edit_pp_data.AD_housing_household_date = model.housing_household_date;
                    //edit_pp_data.AD_car_garage_key_date = model.car_garage_key_date;
                    //edit_pp_data.AD_gatepass_sticker_date = model.gatepass_sticker_date;
                    //edit_pp_data.AD_Mobile_returned_date = model.Mobile_returned_date;
                    //edit_pp_data.AD_company_id_returned_date = model.company_id_returned_date;
                    //edit_pp_data.AD_utilities_water_etc_date = model.utilities_water_etc_date;
                    //edit_pp_data.IS_desktop_etc_cleared_date = model.desktop_etc_cleared_date;
                    //edit_pp_data.FT_clearance_obtained_fin_date = model.clearance_obtained_fin_date;
                    //edit_pp_data.FT_e_bank_token_date = model.e_bank_token_date;
                    //edit_pp_data.AE_clearance_obtained_ae_date = model.clearance_obtained_ae_date;
                    //edit_pp_data.HR_car_loan_cleared_date = model.car_loan_cleared_date;
                    //edit_pp_data.HR_salary_advance_settled_date = model.salary_advance_settled_date;
                    //edit_pp_data.HR_company_stamp_returned_date = model.company_stamp_returned_date;
                    //edit_pp_data.HR_medical_insurance_date = model.medical_insurance_date;
                    //edit_pp_data.HR_visa_master_commun_date = model.visa_master_commun_date;
                    //edit_pp_data.HR_sav_current_account_date = model.sav_current_account_date;
                    //edit_pp_data.external_training_cost_date = model.external_training_cost_date;


                    edit_pp_data.IsActive = true;
                    edit_pp_data.TimeStamp = CurrentTime;

                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_p025
                    if (status)
                    {
                        string request_id = edit_pp_data.RequestId;
                        string record = model.reason_clearance + " || " + model.termination_Date + " || " +
                                    model.eb_Toolbox_Returned + " || " + model.eb_Workstation_Cleared + " || " + model.eb_toolbx_returned_date + " || " + model.eb_OfficialBusiness_Documents + " || " + model.eb_SiteProject_Clearance + " || " + model.eb_Uniform + " || " + model.eb_Safety_Equipment + " || " + model.eb_AllWorkflow_Approvals + " || " + model.eb_ISService_Deactivation_Date + " || " + model.eb_Assigned_Delegate + " || " +
                                    model.ad_HousingHousehold_cleared + " || " + model.ad_Util_Water_cleared + " || " + model.ad_CarGarageKey_Returned + " || " + model.ad_Gatepass_Returned + " || " + model.ad_Mobile_SimCard_Returned + " || " + model.ad_CompanyID_Returned + " || " +
                                    model.tr_Amount_SAR + " || " + model.tr_ExternalTraining_Cost + " || " + model.is_Desktop_Returned + " || " + model.ft_Clearance_Obtained + " || " + model.ft_eBank_Token + " || " +
                                    model.ae_Clearance_Obtained + " || " + model.hr_CarLoan_Cleared + " || " + model.hr_SalaryAdvances_Settled + " || " + model.hr_CompanyStamp_Returned + " || " + model.hr_MedicalInsurance_Returned + " || " + model.hr_Visa_Mastercard_Communicated + " || " + model.hr_Savingcurrent_communicated + " || " +
                                    model.hr_Remarks + " || " + model.eb_toolbx_returned_date + " || " + model.workstation_cleared_date + " || " + model.official_business_doc_date + " || " + model.site_project_clearance_date + " || " +
                                    model.uni_form_date + " || " + model.safety_equipment_date + " || " + model.workflow_approvals_date + " || " +
                                    model.housing_household_date + " || " + model.car_garage_key_date + " || " + model.gatepass_sticker_date + " || " + model.Mobile_returned_date + " || " +
                                    model.company_id_returned_date + " || " + model.utilities_water_etc_date + " || " + model.desktop_etc_cleared_date + " || " + model.clearance_obtained_fin_date + " || " +
                                    model.e_bank_token_date + " || " + model.clearance_obtained_ae_date + " || " + model.salary_advance_settled_date + " || " +
                                    model.company_stamp_returned_date + " || " + model.medical_insurance_date + " || " + model.visa_master_commun_date + " || " +
                                    model.sav_current_account_date + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EndofServiceClearance", request_id, "INITIATOR");

                    }
                    #endregion Keep AuditLog_p025

                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 4).ToList().Count > 0)
                        {
                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 4).ToList();
                            if (editattachment != null)
                            {
                                foreach (var item in editattachment)
                                {
                                    item.IsActive = false;
                                    status = _entity.SaveChanges() > 0;
                                }
                            }
                            var result = model._FileList.Where(x => x.filebatch == 4).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Request_ID;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        //if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        //{
                        //    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                        //    if (editattachment != null)
                        //    {
                        //        foreach (var item in editattachment)
                        //        {
                        //            item.IsActive = false;
                        //            status = _entity.SaveChanges() > 0;
                        //        }
                        //    }
                        //    var fillist = model._FileList.Where(x => x.filebatch == 1).ToList();
                        //    foreach (var item in fillist)
                        //    {
                        //        var datas = _entity.tb_ReqestAttachments.Create();
                        //        datas.Request_id = data.Request_ID;
                        //        datas.fil_path = item.filepath;
                        //        datas.fil_name = item.filename;
                        //        datas.filebatch = item.filebatch;
                        //        datas.IsActive = true;
                        //        datas.TimeStamp = CurrentTime;
                        //        _entity.tb_ReqestAttachments.Add(datas);
                        //        _entity.SaveChanges();
                        //    }
                        //    msg = status ? " Success!" : "Failed!";
                        //}


                    }




                    #endregion attachment edit

                    if (status == true) // to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion 
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_EndofServiceClearance(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var insert_pp_data = _entity.tb_PP_EndofServiceClearance.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (insert_pp_data != null)
            {
                insert_pp_data.Reason_Clearance = model.reason_clearance;
                insert_pp_data.Termination_Date = Convert.ToDateTime(model.termination_Date);
                if (model.eb_Toolbox_Returned != null)
                    insert_pp_data.EB_Toolbox_Returned = model.eb_Toolbox_Returned;
                if (model.eb_Workstation_Cleared != null)
                    insert_pp_data.EB_Workstation_Cleared = model.eb_Workstation_Cleared;
                if (model.eb_OfficialBusiness_Documents != null)
                    insert_pp_data.EB_OfficialBusiness_Documents = model.eb_OfficialBusiness_Documents;
                if (model.eb_SiteProject_Clearance != null)
                    insert_pp_data.EB_SiteProject_Clearance = model.eb_SiteProject_Clearance;
                if (model.eb_Uniform != null)
                    insert_pp_data.EB_Uniform = model.eb_Uniform;
                if (model.eb_Safety_Equipment != null)
                    insert_pp_data.EB_Safety_Equipment = model.eb_Safety_Equipment;
                if (model.eb_AllWorkflow_Approvals != null)
                {
                    insert_pp_data.EB_AllWorkflow_Approvals = model.eb_AllWorkflow_Approvals;

                    insert_pp_data.EB_ISService_Deactivation_Date = Convert.ToDateTime(model.eb_ISService_Deactivation_Date);
                }
                if (model.eb_Assigned_Delegate != null)
                    insert_pp_data.EB_Assigned_Delegate = model.eb_Assigned_Delegate;
                if (model.ad_HousingHousehold_cleared != null)
                    insert_pp_data.AD_HousingHousehold_cleared = model.ad_HousingHousehold_cleared;
                if (model.ad_Util_Water_cleared != null)
                    insert_pp_data.AD_Util_Water_cleared = model.ad_Util_Water_cleared;
                if (model.ad_CarGarageKey_Returned != null)
                    insert_pp_data.AD_CarGarageKey_Returned = model.ad_CarGarageKey_Returned;
                if (model.ad_Gatepass_Returned != null)
                    insert_pp_data.AD_Gatepass_Returned = model.ad_Gatepass_Returned;
                if (model.ad_Mobile_SimCard_Returned != null)
                    insert_pp_data.AD_Mobile_SimCard_Returned = model.ad_Mobile_SimCard_Returned;
                if (model.ad_CompanyID_Returned != null)
                    insert_pp_data.AD_CompanyID_Returned = model.ad_CompanyID_Returned;
                if (model.tr_Amount_SAR != 0)
                {
                    insert_pp_data.TR_Amount_SAR = Convert.ToDecimal(model.tr_Amount_SAR);
                    insert_pp_data.TR_ExternalTraining_Cost = model.tr_ExternalTraining_Cost;
                    insert_pp_data.external_training_cost_date = model.external_training_cost_date;
                }
                if (model.is_Desktop_Returned != null)
                    insert_pp_data.IS_Desktop_Returned = model.is_Desktop_Returned;
                if (model.ft_Clearance_Obtained != null)
                    insert_pp_data.FT_Clearance_Obtained = model.ft_Clearance_Obtained;
                if (model.ft_eBank_Token != null)
                    insert_pp_data.FT_eBank_Token = model.ft_eBank_Token;
                if (model.ae_Clearance_Obtained != null)
                    insert_pp_data.AE_Clearance_Obtained = model.ae_Clearance_Obtained;
                if (model.hr_CarLoan_Cleared != null)
                    insert_pp_data.HR_CarLoan_Cleared = model.hr_CarLoan_Cleared;
                if (model.hr_SalaryAdvances_Settled != null)
                    insert_pp_data.HR_SalaryAdvances_Settled = model.hr_SalaryAdvances_Settled;
                if (model.hr_CompanyStamp_Returned != null)
                    insert_pp_data.HR_CompanyStamp_Returned = model.hr_CompanyStamp_Returned;
                if (model.hr_MedicalInsurance_Returned != null)
                    insert_pp_data.HR_MedicalInsurance_Returned = model.hr_MedicalInsurance_Returned;
                if (model.hr_Visa_Mastercard_Communicated != null)
                    insert_pp_data.HR_Visa_Mastercard_Communicated = model.hr_Visa_Mastercard_Communicated;
                if (model.hr_Savingcurrent_communicated != null)
                    insert_pp_data.HR_Savingcurrent_communicated = model.hr_Savingcurrent_communicated;
                insert_pp_data.HR_Remarks = model.hr_Remarks;
                //insert_pp_data.HR_Attachment_Filepath = model.hr_Attachment_Filepath;  /*Nimmi 24-04-2020*/
                //insert_pp_data.Attachment_Filepath = model.attachment_filepath;

                //05-05-2020
                if (model.eb_toolbx_returned_date != null)
                    insert_pp_data.EB_toolbx_returned_date = model.eb_toolbx_returned_date;
                if (model.workstation_cleared_date != null)
                    insert_pp_data.EB_workstation_cleared_date = model.workstation_cleared_date;
                if (model.official_business_doc_date != null)
                    insert_pp_data.EB_official_business_doc_date = model.official_business_doc_date;
                if (model.site_project_clearance_date != null)
                    insert_pp_data.EB_site_project_clearance_date = model.site_project_clearance_date;
                if (model.uni_form_date != null)
                    insert_pp_data.EB_uni_form_date = model.uni_form_date;
                if (model.safety_equipment_date != null)
                    insert_pp_data.EB_safety_equipment_date = model.safety_equipment_date;
                if (model.workflow_approvals_date != null)
                    insert_pp_data.EB_workflow_approvals_date = model.workflow_approvals_date;
                if (model.housing_household_date != null)
                    insert_pp_data.AD_housing_household_date = model.housing_household_date;
                if (model.car_garage_key_date != null)
                    insert_pp_data.AD_car_garage_key_date = model.car_garage_key_date;
                if (model.gatepass_sticker_date != null)
                    insert_pp_data.AD_gatepass_sticker_date = model.gatepass_sticker_date;
                if (model.Mobile_returned_date != null)
                    insert_pp_data.AD_Mobile_returned_date = model.Mobile_returned_date;
                if (model.company_id_returned_date != null)
                    insert_pp_data.AD_company_id_returned_date = model.company_id_returned_date;
                if (model.utilities_water_etc_date != null)
                    insert_pp_data.AD_utilities_water_etc_date = model.utilities_water_etc_date;
                if (model.desktop_etc_cleared_date != null)
                    insert_pp_data.IS_desktop_etc_cleared_date = model.desktop_etc_cleared_date;
                if (model.clearance_obtained_fin_date != null)
                    insert_pp_data.FT_clearance_obtained_fin_date = model.clearance_obtained_fin_date;
                if (model.e_bank_token_date != null)
                    insert_pp_data.FT_e_bank_token_date = model.e_bank_token_date;
                if (model.clearance_obtained_ae_date != null)
                    insert_pp_data.AE_clearance_obtained_ae_date = model.clearance_obtained_ae_date;
                if (model.car_loan_cleared_date != null)
                    insert_pp_data.HR_car_loan_cleared_date = model.car_loan_cleared_date;
                if (model.salary_advance_settled_date != null)
                    insert_pp_data.HR_salary_advance_settled_date = model.salary_advance_settled_date;
                if (model.company_stamp_returned_date != null)
                    insert_pp_data.HR_company_stamp_returned_date = model.company_stamp_returned_date;
                if (model.medical_insurance_date != null)
                    insert_pp_data.HR_medical_insurance_date = model.medical_insurance_date;
                if (model.visa_master_commun_date != null)
                    insert_pp_data.HR_visa_master_commun_date = model.visa_master_commun_date;
                if (model.sav_current_account_date != null)
                    insert_pp_data.HR_sav_current_account_date = model.sav_current_account_date;

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                status = _entity.SaveChanges() > 0;

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 4).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 4).ToList();
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    //if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    //{
                    //    var fillist = model._FileList.Where(x => x.filebatch == 1).ToList();
                    //    foreach (var item in fillist)
                    //    {
                    //        var datas = _entity.tb_ReqestAttachments.Create();
                    //        datas.Request_id = rqid;
                    //        datas.fil_path = item.filepath;
                    //        datas.fil_name = item.filename;
                    //        datas.filebatch = item.filebatch;
                    //        datas.IsActive = true;
                    //        datas.TimeStamp = CurrentTime;
                    //        _entity.tb_ReqestAttachments.Add(datas);
                    //        _entity.SaveChanges();
                    //    }
                    //    msg = status ? " Success!" : "Failed!";
                    //}


                }
                #endregion attachment edit


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == insert_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) // to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_p025
                            string request_id = insert_pp_data.RequestId;
                            string record = model.reason_clearance + " || " + model.termination_Date + " || " +
                                    model.eb_Toolbox_Returned + " || " + model.eb_Workstation_Cleared + " || " + model.eb_toolbx_returned_date + " || " + model.eb_OfficialBusiness_Documents + " || " + model.eb_SiteProject_Clearance + " || " + model.eb_Uniform + " || " + model.eb_Safety_Equipment + " || " + model.eb_AllWorkflow_Approvals + " || " + model.eb_ISService_Deactivation_Date + " || " + model.eb_Assigned_Delegate + " || " +
                                    model.ad_HousingHousehold_cleared + " || " + model.ad_Util_Water_cleared + " || " + model.ad_CarGarageKey_Returned + " || " + model.ad_Gatepass_Returned + " || " + model.ad_Mobile_SimCard_Returned + " || " + model.ad_CompanyID_Returned + " || " +
                                    model.tr_Amount_SAR + " || " + model.tr_ExternalTraining_Cost + " || " + model.is_Desktop_Returned + " || " + model.ft_Clearance_Obtained + " || " + model.ft_eBank_Token + " || " +
                                    model.ae_Clearance_Obtained + " || " + model.hr_CarLoan_Cleared + " || " + model.hr_SalaryAdvances_Settled + " || " + model.hr_CompanyStamp_Returned + " || " + model.hr_MedicalInsurance_Returned + " || " + model.hr_Visa_Mastercard_Communicated + " || " + model.hr_Savingcurrent_communicated + " || " +
                                    model.hr_Remarks + " || " + model.eb_toolbx_returned_date + " || " + model.workstation_cleared_date + " || " + model.official_business_doc_date + " || " + model.site_project_clearance_date + " || " +
                                    model.uni_form_date + " || " + model.safety_equipment_date + " || " + model.workflow_approvals_date + " || " +
                                    model.housing_household_date + " || " + model.car_garage_key_date + " || " + model.gatepass_sticker_date + " || " + model.Mobile_returned_date + " || " +
                                    model.company_id_returned_date + " || " + model.utilities_water_etc_date + " || " + model.desktop_etc_cleared_date + " || " + model.clearance_obtained_fin_date + " || " +
                                    model.e_bank_token_date + " || " + model.clearance_obtained_ae_date + " || " + model.salary_advance_settled_date + " || " +
                                    model.company_stamp_returned_date + " || " + model.medical_insurance_date + " || " + model.visa_master_commun_date + " || " +
                                    model.sav_current_account_date + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EndofServiceClearance", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_p025
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            //for checking request
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }

                            #endregion

                            #region Keep AuditLog_p025 for initiator after backtoinitiator
                            string request_id = insert_pp_data.RequestId;
                            string record = model.reason_clearance + " || " + model.termination_Date + " || " +
                                     model.eb_Toolbox_Returned + " || " + model.eb_Workstation_Cleared + " || " + model.eb_toolbx_returned_date + " || " + model.eb_OfficialBusiness_Documents + " || " + model.eb_SiteProject_Clearance + " || " + model.eb_Uniform + " || " + model.eb_Safety_Equipment + " || " + model.eb_AllWorkflow_Approvals + " || " + model.eb_ISService_Deactivation_Date + " || " + model.eb_Assigned_Delegate + " || " +
                                     model.ad_HousingHousehold_cleared + " || " + model.ad_Util_Water_cleared + " || " + model.ad_CarGarageKey_Returned + " || " + model.ad_Gatepass_Returned + " || " + model.ad_Mobile_SimCard_Returned + " || " + model.ad_CompanyID_Returned + " || " +
                                     model.tr_Amount_SAR + " || " + model.tr_ExternalTraining_Cost + " || " + model.is_Desktop_Returned + " || " + model.ft_Clearance_Obtained + " || " + model.ft_eBank_Token + " || " +
                                     model.ae_Clearance_Obtained + " || " + model.hr_CarLoan_Cleared + " || " + model.hr_SalaryAdvances_Settled + " || " + model.hr_CompanyStamp_Returned + " || " + model.hr_MedicalInsurance_Returned + " || " + model.hr_Visa_Mastercard_Communicated + " || " + model.hr_Savingcurrent_communicated + " || " +
                                     model.hr_Remarks + " || " + model.eb_toolbx_returned_date + " || " + model.workstation_cleared_date + " || " + model.official_business_doc_date + " || " + model.site_project_clearance_date + " || " +
                                     model.uni_form_date + " || " + model.safety_equipment_date + " || " + model.workflow_approvals_date + " || " +
                                     model.housing_household_date + " || " + model.car_garage_key_date + " || " + model.gatepass_sticker_date + " || " + model.Mobile_returned_date + " || " +
                                     model.company_id_returned_date + " || " + model.utilities_water_etc_date + " || " + model.desktop_etc_cleared_date + " || " + model.clearance_obtained_fin_date + " || " +
                                     model.e_bank_token_date + " || " + model.clearance_obtained_ae_date + " || " + model.salary_advance_settled_date + " || " +
                                     model.company_stamp_returned_date + " || " + model.medical_insurance_date + " || " + model.visa_master_commun_date + " || " +
                                     model.sav_current_account_date + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_EndofServiceClearance", request_id, "INITIATOR");
                            #endregion Keep AuditLog_p025



                        }
                    }
                }


            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //Terrin  T006 on 30-6-2020
        public object Submit_TR_TrainingFolder(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data

                    if (model.TrainingFolderModel != null)
                    {

                        msg = "Success";
                        var Training = model.TrainingFolderModel;
                        var insert_pp_data = _entity.tb_TR_TrainingFolder.Create();
                        insert_pp_data.RequestId = data.Item2;
                        insert_pp_data.IsActive = true;
                        insert_pp_data.TimeStamp = DateTime.Now;

                        insert_pp_data.Date = Training.Date_training;
                        insert_pp_data.quantity = Training.quantity;

                        _entity.tb_TR_TrainingFolder.Add(insert_pp_data);
                        status = _entity.SaveChanges() > 0;
                        insert_pp_data.IsActive = true;
                        insert_pp_data.TimeStamp = CurrentTime;

                        #region attachments

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                        #endregion

                        #region Keep AuditLog_T006
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId;
                            string record = insert_pp_data.Date + " || " + insert_pp_data.quantity + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_TrainingFolder", request_id, "INITIATOR");


                        }

                        #endregion Keep AuditLog_T006

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }


        //Terrin T006 on 30-6-2020
        public object Submit_TR_TrainingFolder_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_TR_TrainingFolder.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    var Training = model.TrainingFolderModel;

                    edit_pp_data.Date = Training.Date_training;
                    edit_pp_data.quantity = Training.quantity;
                    edit_pp_data.Attachment_Filepath = model.attachment_filepath;
                    edit_pp_data.IsActive = true;
                    edit_pp_data.TimeStamp = CurrentTime;
                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_p009

                    if (status)
                    {
                        string request_id = edit_pp_data.RequestId;
                        string record = edit_pp_data.Date + " || " + edit_pp_data.quantity + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_TrainingFolder", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p009
                }

            }
            //Basheer on 16-03-2020
            #region attachment edit

            if (status && model._FileList != null && model._FileList.Count > 0)
            {
                if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = data.Request_ID;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";

                }
                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = data.Request_ID;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }


            }
            #endregion attachment edit
            //Basheer code end here
            if (status == true) //Basheer on 06-02-2020 to save log for savechanges
            {
                string remark = "Request was Edited by";
                _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
            }

            #endregion

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }



        public object Edit_TR_TrainingFolder(EmployeeRequestModel model) //Terrin on 30/6/2020 T006
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_pp_data = _entity.tb_TR_TrainingFolder.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {

                #region

                var Training = model.TrainingFolderModel;
                edit_pp_data.RequestId = rqid;
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = CurrentTime;

                edit_pp_data.Date = Training.Date_training;
                edit_pp_data.quantity = Training.quantity;

                status = _entity.SaveChanges() > 0;

                #endregion

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit



                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_SAS01
                            string request_id = edit_pp_data.RequestId;

                            string record = request_id + " || " + edit_pp_data.Date + "||" + edit_pp_data.quantity + "||" + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_TrainingFolder", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_P003
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }


                            #endregion

                            #region Keep AuditLog_T006 for initiator after backtoinitiator

                            string request_id = edit_pp_data.RequestId;
                            string record = request_id + " || " + edit_pp_data.Date + "||" + edit_pp_data.quantity + "||" + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_TrainingFolder", request_id, "INITIATOR");
                            #endregion Keep AuditLog_T006



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }


        // Terrin T007 on 3-7-2020
        public object Submit_TR_TrainingCertificate(WaitingRequestDetails model)
        {
            bool status = false;
            string msg = "failed";
            string name_participates = "";
            Tuple<bool, string> data = _rpp.InsertRequest(model.WF_ID, model.application_ids, model.emp_local_id, model.wf_template_id, model.creator_id);
            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data
                    msg = "Success";

                    var Trainingcert = model.TrainingCertificateModel;
                    var insert_tr_data = _entity.tb_TR_Training_Certificate.Create();
                    insert_tr_data.RequestId = data.Item2;
                    insert_tr_data.Titlecourse = Trainingcert.Titlecourse;
                    insert_tr_data.Course_period_from = Trainingcert.Course_period_from;
                    insert_tr_data.Course_period_to = Trainingcert.Course_period_to;
                    insert_tr_data.Location = Trainingcert.Location;
                    insert_tr_data.Clientname = Trainingcert.Clientname;
                    insert_tr_data.Noof_particants = Trainingcert.Noof_particants;
                    //insert_tr_data.Noof_trainer = Trainingcert.Noof_trainer;
                    insert_tr_data.IsActive = true;
                    insert_tr_data.TimeStamp = CurrentTime;
                    string[] nameArray = Trainingcert.Nameof_participants;

                    if (nameArray.Length > 0)
                    {
                        for (int i = 0; i < nameArray.Length; i++)
                        {
                            if (nameArray[i] != "")
                            {

                                name_participates = name_participates + nameArray[i] + "~";
                            }
                        }
                    }
                    insert_tr_data.Nameof_participants = name_participates.Remove(name_participates.Length - 1);
                    _entity.tb_TR_Training_Certificate.Add(insert_tr_data);
                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_A007
                    if (status)
                    {
                        string request_id = insert_tr_data.RequestId;
                        string record = insert_tr_data.Titlecourse + " || " + insert_tr_data.Course_period_from + " || " + insert_tr_data.Course_period_to + " || " + insert_tr_data.Location + " || " + insert_tr_data.Clientname + " || " + insert_tr_data.Noof_particants + " || "  + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_Training_Certificate", request_id, "INITIATOR");

                    }

                    #endregion Keep AuditLog_A007

                    #region attachments

                    if (status && model != null && model._FileListPrint.Count > 0)
                    {
                        var fillist = model._FileListPrint.Where(x => x.filebatch == 1).ToList();
                        if (fillist.Count > 0)
                        {
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = data.Item2;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                    #endregion

                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }




        public object Submit_TR_TrainingCertificate_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string name_participates = "";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            if (data != null)
            {
                #region Store Request Data
                msg = "Success";
                var edit_pp_data = _entity.tb_TR_Training_Certificate.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                if (edit_pp_data != null)
                {
                    var Trainingcert = model.TrainingCertificateModel;

                    edit_pp_data.Titlecourse = Trainingcert.Titlecourse;
                    edit_pp_data.Course_period_from = Trainingcert.Course_period_from;
                    edit_pp_data.Course_period_to = Trainingcert.Course_period_to;
                    edit_pp_data.Location = Trainingcert.Location;
                    edit_pp_data.Clientname = Trainingcert.Clientname;
                    edit_pp_data.Noof_particants = Trainingcert.Noof_particants;
                    //edit_pp_data.Noof_trainer = Trainingcert.Noof_trainer;
                    edit_pp_data.IsActive = true;
                    edit_pp_data.TimeStamp = CurrentTime;
                    string[] nameArray = Trainingcert.Nameof_participants;

                    if (nameArray.Length > 0)
                    {
                        for (int i = 0; i < nameArray.Length; i++)
                        {
                            if (nameArray[i] != "")
                            {
                                // var insert_ao_guest_data = _entity.tb_AO_Accommodation_Guest_Details.Create();

                                name_participates = name_participates + nameArray[i] + "~";
                                // partictiates_details = name_participates + "~";
                            }
                        }
                    }
                    // name_participates = name_participates;
                    edit_pp_data.Nameof_participants = name_participates.Remove(name_participates.Length - 1);

                    status = _entity.SaveChanges() > 0;

                    #region Keep AuditLog_p009

                    if (status)
                    {
                        string request_id = edit_pp_data.RequestId;
                        string record = edit_pp_data.Titlecourse + " || " + edit_pp_data.Course_period_from + " || " + edit_pp_data.Course_period_to + " || " + edit_pp_data.Location + " || " + edit_pp_data.Noof_particants + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_Training_Certificate", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p009
                }

            }
            //Basheer on 16-03-2020
            #region attachment edit

            if (status && model._FileListPrint != null && model._FileListPrint.Count > 0)
            {
                if (model._FileListPrint.Where(x => x.filebatch == 2).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileListPrint.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = data.Request_ID;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";

                }
                if (model._FileListPrint.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileListPrint.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = data.Request_ID;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }


            }
            #endregion attachment edit
            //Basheer code end here
            if (status == true) //Basheer on 06-02-2020 to save log for savechanges
            {
                string remark = "Request was Edited by";
                _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
            }

            #endregion

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }



        public object Edit_TR_TrainingCertificate(EmployeeRequestModel model) //Terrin on 30/6/2020 T006
        {
            bool status = false;
            string msg = "failed";
            string name_participates = "";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_pp_data = _entity.tb_TR_Training_Certificate.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {

                #region

                var Trainingcert = model.TrainingCertificateModel;

                edit_pp_data.Titlecourse = Trainingcert.Titlecourse;
                edit_pp_data.Course_period_from = Trainingcert.Course_period_from;
                edit_pp_data.Course_period_to = Trainingcert.Course_period_to;
                edit_pp_data.Location = Trainingcert.Location;
                edit_pp_data.Clientname = Trainingcert.Clientname;
                edit_pp_data.Noof_particants = Trainingcert.Noof_particants;
                //edit_pp_data.Noof_trainer = Trainingcert.Noof_trainer;
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = CurrentTime;
                string[] nameArray = Trainingcert.Nameof_participants;

                if (nameArray.Length > 0)
                {
                    for (int i = 0; i < nameArray.Length; i++)
                    {
                        if (nameArray[i] != "")
                        {
                            // var insert_ao_guest_data = _entity.tb_AO_Accommodation_Guest_Details.Create();

                            name_participates = name_participates + nameArray[i] + "~";
                            // partictiates_details = name_participates + "~";
                        }
                    }
                }
                // name_participates = name_participates;
                edit_pp_data.Nameof_participants = name_participates.Remove(name_participates.Length - 1);

                status = _entity.SaveChanges() > 0;

                #endregion

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit



                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_SAS01
                            string request_id = edit_pp_data.RequestId;

                            string record = edit_pp_data.Titlecourse + " || " + edit_pp_data.Course_period_from + " || " + edit_pp_data.Course_period_to + " || " + edit_pp_data.Location + " || " + edit_pp_data.Clientname + " || " + edit_pp_data.Noof_particants +  " || " + CurrentTime;


                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_Training_Certificate", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_P003
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }


                            #endregion

                            #region Keep AuditLog_T006 for initiator after backtoinitiator

                            string request_id = edit_pp_data.RequestId;
                            string record = edit_pp_data.Titlecourse + " || " + edit_pp_data.Course_period_from + " || " + edit_pp_data.Course_period_to + " || " + edit_pp_data.Location + " || " + edit_pp_data.Clientname + " || " + edit_pp_data.Noof_particants + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_Training_Certificate", request_id, "INITIATOR");
                            #endregion Keep AuditLog_T006



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //P017-Contract Modification(Preema)
        public object Submit_PP_Contract_Modification(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data

                    if (model.ContractModificationModel != null)
                    {

                        msg = "Success";
                        var ContractModification = model.ContractModificationModel;

                        var insert_pp_data = _entity.tb_PP_Contract_Modification.Create();
                        insert_pp_data.RequestId = data.Item2;
                        insert_pp_data.IsActive = true;
                        insert_pp_data.TimeStamp = DateTime.Now;

                        insert_pp_data.Employee_Id = ContractModification.Employee_Id;

                        insert_pp_data.Contract_Type = ContractModification.Contract_Type.Trim();
                        insert_pp_data.Releasing_Manager = ContractModification.Releasing_Manager_Id;
                        insert_pp_data.Effective_Date = Convert.ToDateTime(ContractModification.Effective_Date);

                        insert_pp_data.From_Company = ContractModification.From_Company_id;
                        if (ContractModification.To_Company_Id != 0)
                        {
                            insert_pp_data.To_Company = ContractModification.To_Company_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Company = ContractModification.From_Company_id;
                        }

                        insert_pp_data.From_BusinessLine = ContractModification.From_Business_Line_id;

                        if (ContractModification.To_Business_Line_Id != 0)
                        {
                            insert_pp_data.To_BusinessLine = ContractModification.To_Business_Line_Id;
                        }
                        else
                        {
                            insert_pp_data.To_BusinessLine = ContractModification.From_Business_Line_id;
                        }


                        insert_pp_data.From_ProductGroup = ContractModification.From_Product_Group_id;

                        if (ContractModification.To_Product_Group_Id != 0)
                        {
                            insert_pp_data.To_Product_Group = ContractModification.To_Product_Group_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Product_Group = ContractModification.From_Product_Group_id;
                        }

                        insert_pp_data.From_Department = ContractModification.From_Department_id;

                        if (ContractModification.To_Department_Id != 0)
                        {
                            insert_pp_data.To_Department = ContractModification.To_Department_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Department = ContractModification.From_Department_id;
                        }


                        insert_pp_data.From_Position = ContractModification.From_Position_id;

                        if (ContractModification.To_Position_Id != "0")
                        {
                            insert_pp_data.To_Position = ContractModification.To_Position_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Position = ContractModification.From_Position_id;
                        }

                        insert_pp_data.From_Global_Grade = ContractModification.From_Global_Grade_id;

                        if (ContractModification.To_Global_Grade_Id != null)
                        {
                            insert_pp_data.To_Global_Grade = ContractModification.To_Global_Grade_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Global_Grade = ContractModification.From_Global_Grade_id;
                        }


                        insert_pp_data.From_Local_Grade = ContractModification.From_Local_Grade_Id;

                        if (ContractModification.To_Local_Grade_Id != null)
                        {
                            insert_pp_data.To_Local_Grade = ContractModification.To_Local_Grade_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Local_Grade = ContractModification.From_Local_Grade_Id;
                        }


                        insert_pp_data.From_Cost_Center = ContractModification.From_Cost_Center_id;

                        if (ContractModification.To_Cost_Center_Id != 0)
                        {
                            insert_pp_data.To_Cost_Center = ContractModification.To_Cost_Center_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Cost_Center = ContractModification.From_Cost_Center_id;
                        }

                        insert_pp_data.From_Status = ContractModification.From_status;

                        if (ContractModification.To_status != "No Change")
                        {
                            insert_pp_data.To_Status = ContractModification.To_status;
                        }
                        else
                        {
                            insert_pp_data.To_Status = ContractModification.From_status;
                        }

                        insert_pp_data.From_Notice_Period = ContractModification.From_Notice_Period;
                        if (ContractModification.To_Notice_Period != null)
                        {
                            insert_pp_data.To_Notice_Period = ContractModification.To_Notice_Period;
                        }
                        else
                        {
                            insert_pp_data.To_Notice_Period = ContractModification.From_Notice_Period;
                        }

                        insert_pp_data.From_Location = ContractModification.From_Location_id;

                        if (ContractModification.To_Location_Id != 0)
                        {
                            insert_pp_data.To_Location = ContractModification.To_Location_Id;
                        }
                        else
                        {
                            insert_pp_data.To_Location = ContractModification.From_Location_id;
                        }

                        insert_pp_data.From_BasicSalary = ContractModification.From_Basic_Salary;

                        if (ContractModification.To_Basic_Salary != null)
                        {
                            insert_pp_data.To_BasicSalary = ContractModification.To_Basic_Salary;
                        }
                        else
                        {
                            insert_pp_data.To_BasicSalary = ContractModification.From_Basic_Salary;
                        }

                        insert_pp_data.From_AnnualHousing = ContractModification.From_Annual_Housing;

                        if (ContractModification.To_Annual_Housing != null)
                        {
                            insert_pp_data.To_AnnualHousing = ContractModification.To_Annual_Housing;
                        }
                        else
                        {
                            insert_pp_data.To_AnnualHousing = ContractModification.From_Annual_Housing;
                        }

                        insert_pp_data.From_CarCost = ContractModification.From_Car_Cost;

                        if (ContractModification.To_Car_Cost != null)
                        {
                            insert_pp_data.To_CarCost = ContractModification.To_Car_Cost;
                        }
                        else
                        {
                            insert_pp_data.To_CarCost = ContractModification.From_Car_Cost;
                        }

                        insert_pp_data.From_Transport = ContractModification.From_Transport;

                        if (ContractModification.To_Transport != null)
                        {
                            insert_pp_data.To_Transport = ContractModification.To_Transport;
                        }
                        else
                        {
                            insert_pp_data.To_Transport = ContractModification.From_Transport;
                        }

                        insert_pp_data.From_TravelHardshipAllowance = ContractModification.From_Travel_Allowance;

                        if (ContractModification.To_Travel_Allowance != null)
                        {
                            insert_pp_data.To_TravelHardshipAllowance = ContractModification.To_Travel_Allowance;
                        }
                        else
                        {
                            insert_pp_data.To_TravelHardshipAllowance = ContractModification.From_Travel_Allowance;
                        }

                        insert_pp_data.From_MobileAllowance = ContractModification.From_Mobile_Allowance;

                        if (ContractModification.To_Mobile_Allowance != null)
                        {
                            insert_pp_data.To_MobileAllowance = ContractModification.To_Mobile_Allowance;
                        }
                        else
                        {
                            insert_pp_data.To_MobileAllowance = ContractModification.From_Mobile_Allowance;
                        }

                        _entity.tb_PP_Contract_Modification.Add(insert_pp_data);

                        status = _entity.SaveChanges() > 0;

                        #region attachments
                        //to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                        #endregion
                        #region attachments
                        // to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }

                        #endregion

                        #region Keep AuditLog_P017

                        if (status)
                        {

                            string request_id = insert_pp_data.RequestId;

                            string record = insert_pp_data.Contract_Type + " || " + insert_pp_data.Releasing_Manager + " || " +
                            insert_pp_data.Effective_Date + " || " + insert_pp_data.From_Company + " || " +
                            insert_pp_data.To_Company + " || " + insert_pp_data.From_BusinessLine + " || " + insert_pp_data.To_BusinessLine + " || " + insert_pp_data.From_ProductGroup + " || " +
                            insert_pp_data.To_Product_Group + " || " + insert_pp_data.From_Department + " || " + insert_pp_data.To_Department + " || " + insert_pp_data.From_Position + " || " +
                            insert_pp_data.To_Position + " || " + insert_pp_data.From_Global_Grade + " || " + insert_pp_data.To_Global_Grade + " || " + insert_pp_data.From_Local_Grade + " || " +
                            insert_pp_data.To_Local_Grade + " || " + insert_pp_data.From_Cost_Center + " || " +
                            insert_pp_data.To_Cost_Center + " || " + insert_pp_data.From_Status + " || " + insert_pp_data.To_Status + " || " + insert_pp_data.From_Notice_Period + " || " +
                            insert_pp_data.To_Notice_Period + " || " + insert_pp_data.From_Location + " || " + insert_pp_data.To_Location + " || " + insert_pp_data.From_BasicSalary + " || " +
                            insert_pp_data.To_BasicSalary + " || " + insert_pp_data.From_AnnualHousing + " || " + insert_pp_data.To_AnnualHousing + " || " + insert_pp_data.From_CarCost + " || " +
                            insert_pp_data.To_CarCost + " || " + insert_pp_data.From_Transport + " || " + insert_pp_data.To_Transport + " || " + insert_pp_data.From_TravelHardshipAllowance + " || " +
                            insert_pp_data.To_TravelHardshipAllowance + " || " + insert_pp_data.From_MobileAllowance + " || " + insert_pp_data.To_MobileAllowance + " || " + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Contract_Modification", request_id, "INITIATOR");

                        }

                        #endregion Keep AuditLog_P017

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //P017-Contract Modification(Preema)
        public object Submit_PP_Contract_Modification_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            try
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                if (data != null)
                {
                    #region Store Request Data                    
                    var edit_pp_data = _entity.tb_PP_Contract_Modification.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    if (edit_pp_data != null)
                    {
                        msg = "Success";
                        var ContractModification = model.ContractModificationModel;

                        edit_pp_data.RequestId = data.Request_ID;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = DateTime.Now;

                        edit_pp_data.Employee_Id = ContractModification.Employee_Id;
                        edit_pp_data.Contract_Type = ContractModification.Contract_Type.Trim();
                        edit_pp_data.Releasing_Manager = ContractModification.Releasing_Manager_Id;
                        edit_pp_data.Effective_Date = Convert.ToDateTime(ContractModification.Effective_Date);

                        edit_pp_data.From_Company = ContractModification.From_Company_id;
                        if (ContractModification.To_Company_Id != 0)
                        {
                            edit_pp_data.To_Company = ContractModification.To_Company_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Company = ContractModification.From_Company_id;
                        }

                        edit_pp_data.From_BusinessLine = ContractModification.From_Business_Line_id;

                        if (ContractModification.To_Business_Line_Id != 0)
                        {
                            edit_pp_data.To_BusinessLine = ContractModification.To_Business_Line_Id;
                        }
                        else
                        {
                            edit_pp_data.To_BusinessLine = ContractModification.From_Business_Line_id;
                        }


                        edit_pp_data.From_ProductGroup = ContractModification.From_Product_Group_id;

                        if (ContractModification.To_Product_Group_Id != 0)
                        {
                            edit_pp_data.To_Product_Group = ContractModification.To_Product_Group_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Product_Group = ContractModification.From_Product_Group_id;
                        }

                        edit_pp_data.From_Department = ContractModification.From_Department_id;

                        if (ContractModification.To_Department_Id != 0)
                        {
                            edit_pp_data.To_Department = ContractModification.To_Department_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Department = ContractModification.From_Department_id;
                        }


                        edit_pp_data.From_Position = ContractModification.From_Position_id;

                        if (ContractModification.To_Position_Id != "0")
                        {
                            edit_pp_data.To_Position = ContractModification.To_Position_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Position = ContractModification.From_Position_id;
                        }

                        edit_pp_data.From_Global_Grade = ContractModification.From_Global_Grade_id;

                        if (ContractModification.To_Global_Grade_Id != null)
                        {
                            edit_pp_data.To_Global_Grade = ContractModification.To_Global_Grade_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Global_Grade = ContractModification.From_Global_Grade_id;
                        }

                        edit_pp_data.From_Local_Grade = ContractModification.From_Local_Grade_Id;

                        if (ContractModification.To_Local_Grade_Id != null)
                        {
                            edit_pp_data.To_Local_Grade = ContractModification.To_Local_Grade_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Local_Grade = ContractModification.From_Local_Grade_Id;
                        }

                        edit_pp_data.From_Cost_Center = ContractModification.From_Cost_Center_id;

                        if (ContractModification.To_Cost_Center_Id != 0)
                        {
                            edit_pp_data.To_Cost_Center = ContractModification.To_Cost_Center_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Cost_Center = ContractModification.From_Cost_Center_id;
                        }

                        edit_pp_data.From_Status = ContractModification.From_status;

                        if (ContractModification.To_status != "No Change")
                        {
                            edit_pp_data.To_Status = ContractModification.To_status;
                        }
                        else
                        {
                            edit_pp_data.To_Status = ContractModification.From_status;
                        }

                        edit_pp_data.From_Notice_Period = ContractModification.From_Notice_Period;
                        if (ContractModification.To_Notice_Period != null)
                        {
                            edit_pp_data.To_Notice_Period = ContractModification.To_Notice_Period;
                        }
                        else
                        {
                            edit_pp_data.To_Notice_Period = ContractModification.From_Notice_Period;
                        }

                        edit_pp_data.From_Location = ContractModification.From_Location_id;

                        if (ContractModification.To_Location_Id != 0)
                        {
                            edit_pp_data.To_Location = ContractModification.To_Location_Id;
                        }
                        else
                        {
                            edit_pp_data.To_Location = ContractModification.From_Location_id;
                        }

                        edit_pp_data.From_BasicSalary = ContractModification.From_Basic_Salary;

                        if (ContractModification.To_Basic_Salary != null)
                        {
                            edit_pp_data.To_BasicSalary = ContractModification.To_Basic_Salary;
                        }
                        else
                        {
                            edit_pp_data.To_BasicSalary = ContractModification.From_Basic_Salary;
                        }

                        edit_pp_data.From_AnnualHousing = ContractModification.From_Annual_Housing;

                        if (ContractModification.To_Annual_Housing != null)
                        {
                            edit_pp_data.To_AnnualHousing = ContractModification.To_Annual_Housing;
                        }
                        else
                        {
                            edit_pp_data.To_AnnualHousing = ContractModification.From_Annual_Housing;
                        }

                        edit_pp_data.From_CarCost = ContractModification.From_Car_Cost;

                        if (ContractModification.To_Car_Cost != null)
                        {
                            edit_pp_data.To_CarCost = ContractModification.To_Car_Cost;
                        }
                        else
                        {
                            edit_pp_data.To_CarCost = ContractModification.From_Car_Cost;
                        }

                        edit_pp_data.From_Transport = ContractModification.From_Transport;

                        if (ContractModification.To_Transport != null)
                        {
                            edit_pp_data.To_Transport = ContractModification.To_Transport;
                        }
                        else
                        {
                            edit_pp_data.To_Transport = ContractModification.From_Transport;
                        }

                        edit_pp_data.From_TravelHardshipAllowance = ContractModification.From_Travel_Allowance;

                        if (ContractModification.To_Travel_Allowance != null)
                        {
                            edit_pp_data.To_TravelHardshipAllowance = ContractModification.To_Travel_Allowance;
                        }
                        else
                        {
                            edit_pp_data.To_TravelHardshipAllowance = ContractModification.From_Travel_Allowance;
                        }

                        edit_pp_data.From_MobileAllowance = ContractModification.From_Mobile_Allowance;

                        if (ContractModification.To_Mobile_Allowance != null)
                        {
                            edit_pp_data.To_MobileAllowance = ContractModification.To_Mobile_Allowance;
                        }
                        else
                        {
                            edit_pp_data.To_MobileAllowance = ContractModification.From_Mobile_Allowance;
                        }

                        status = _entity.SaveChanges() > 0;

                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }

                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }

                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }
                        }

                        #endregion attachment edit

                        #region Keep AuditLog_P017

                        if (status == true)
                        {
                            string request_id = edit_pp_data.RequestId;

                            string record = edit_pp_data.Contract_Type + " || " + edit_pp_data.Releasing_Manager + " || " +
                            edit_pp_data.Effective_Date + " || " + edit_pp_data.From_Company + " || " +
                            edit_pp_data.To_Company + " || " + edit_pp_data.From_BusinessLine + " || " + edit_pp_data.To_BusinessLine + " || " + edit_pp_data.From_ProductGroup + " || " +
                            edit_pp_data.To_Product_Group + " || " + edit_pp_data.From_Department + " || " + edit_pp_data.To_Department + " || " + edit_pp_data.From_Position + " || " +
                            edit_pp_data.To_Position + " || " + edit_pp_data.From_Global_Grade + " || " + edit_pp_data.To_Global_Grade + " || " +
                            edit_pp_data.From_Local_Grade + " || " + edit_pp_data.To_Local_Grade + " || " + edit_pp_data.From_Cost_Center + " || " +
                            edit_pp_data.To_Cost_Center + " || " + edit_pp_data.From_Status + " || " + edit_pp_data.To_Status + " || " + edit_pp_data.From_Notice_Period + " || " +
                            edit_pp_data.To_Notice_Period + " || " + edit_pp_data.From_Location + " || " + edit_pp_data.To_Location + " || " + edit_pp_data.From_BasicSalary + " || " +
                            edit_pp_data.To_BasicSalary + " || " + edit_pp_data.From_AnnualHousing + " || " + edit_pp_data.To_AnnualHousing + " || " + edit_pp_data.From_CarCost + " || " +
                            edit_pp_data.To_CarCost + " || " + edit_pp_data.From_Transport + " || " + edit_pp_data.To_Transport + " || " + edit_pp_data.From_TravelHardshipAllowance + " || " +
                            edit_pp_data.To_TravelHardshipAllowance + " || " + edit_pp_data.From_MobileAllowance + " || " + edit_pp_data.To_MobileAllowance + " || " + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Contract_Modification", request_id, "INITIATOR");

                            #endregion Keep AuditLog_P017

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                    }
                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);

        }

        //P017-Contract Modification(Preema)
        public object Edit_PP_Contract_Modification_Request(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_pp_data = _entity.tb_PP_Contract_Modification.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {

                #region

                var ContractModification = model.ContractModificationModel;
                edit_pp_data.RequestId = rqid;
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = DateTime.Now;

                //edit_pp_data.Employee_Id = ContractModification.Employee_Id;
                edit_pp_data.Contract_Type = ContractModification.Contract_Type.Trim();
                edit_pp_data.Releasing_Manager = ContractModification.Releasing_Manager_Id;
                edit_pp_data.Effective_Date = Convert.ToDateTime(ContractModification.Effective_Date);

                edit_pp_data.From_Company = ContractModification.From_Company_id;
                if (ContractModification.To_Company_Id != 0)
                {
                    edit_pp_data.To_Company = ContractModification.To_Company_Id;
                }
                else
                {
                    edit_pp_data.To_Company = ContractModification.From_Company_id;
                }

                edit_pp_data.From_BusinessLine = ContractModification.From_Business_Line_id;

                if (ContractModification.To_Business_Line_Id != 0)
                {
                    edit_pp_data.To_BusinessLine = ContractModification.To_Business_Line_Id;
                }
                else
                {
                    edit_pp_data.To_BusinessLine = ContractModification.From_Business_Line_id;
                }


                edit_pp_data.From_ProductGroup = ContractModification.From_Product_Group_id;

                if (ContractModification.To_Product_Group_Id != 0)
                {
                    edit_pp_data.To_Product_Group = ContractModification.To_Product_Group_Id;
                }
                else
                {
                    edit_pp_data.To_Product_Group = ContractModification.From_Product_Group_id;
                }

                edit_pp_data.From_Department = ContractModification.From_Department_id;

                if (ContractModification.To_Department_Id != 0)
                {
                    edit_pp_data.To_Department = ContractModification.To_Department_Id;
                }
                else
                {
                    edit_pp_data.To_Department = ContractModification.From_Department_id;
                }


                edit_pp_data.From_Position = ContractModification.From_Position_id;

                if (ContractModification.To_Position_Id != "0")
                {
                    edit_pp_data.To_Position = ContractModification.To_Position_Id;
                }
                else
                {
                    edit_pp_data.To_Position = ContractModification.From_Position_id;
                }

                edit_pp_data.From_Global_Grade = ContractModification.From_Global_Grade_id;

                if (ContractModification.To_Global_Grade_Id != null)
                {
                    edit_pp_data.To_Global_Grade = ContractModification.To_Global_Grade_Id;
                }
                else
                {
                    edit_pp_data.To_Global_Grade = ContractModification.From_Global_Grade_id;
                }

                edit_pp_data.From_Local_Grade = ContractModification.From_Local_Grade;

                if (ContractModification.To_Local_Grade_Id != null)
                {
                    edit_pp_data.To_Local_Grade = ContractModification.To_Local_Grade_Id;
                }
                else
                {
                    edit_pp_data.To_Local_Grade = ContractModification.From_Local_Grade_Id;
                }

                edit_pp_data.From_Cost_Center = ContractModification.From_Cost_Center_id;

                if (ContractModification.To_Cost_Center_Id != 0)
                {
                    edit_pp_data.To_Cost_Center = ContractModification.To_Cost_Center_Id;
                }
                else
                {
                    edit_pp_data.To_Cost_Center = ContractModification.From_Cost_Center_id;
                }

                edit_pp_data.From_Status = ContractModification.From_status;

                if (ContractModification.To_status != "No Change")
                {
                    edit_pp_data.To_Status = ContractModification.To_status;
                }
                else
                {
                    edit_pp_data.To_Status = ContractModification.From_status;
                }

                edit_pp_data.From_Notice_Period = ContractModification.From_Notice_Period;
                if (ContractModification.To_Notice_Period != null)
                {
                    edit_pp_data.To_Notice_Period = ContractModification.To_Notice_Period;
                }
                else
                {
                    edit_pp_data.To_Notice_Period = ContractModification.From_Notice_Period;
                }

                edit_pp_data.From_Location = ContractModification.From_Location_id;

                if (ContractModification.To_Location_Id != 0)
                {
                    edit_pp_data.To_Location = ContractModification.To_Location_Id;
                }
                else
                {
                    edit_pp_data.To_Location = ContractModification.From_Location_id;
                }

                edit_pp_data.From_BasicSalary = ContractModification.From_Basic_Salary;

                if (ContractModification.To_Basic_Salary != null)
                {
                    edit_pp_data.To_BasicSalary = ContractModification.To_Basic_Salary;
                }
                else
                {
                    edit_pp_data.To_BasicSalary = ContractModification.From_Basic_Salary;
                }

                edit_pp_data.From_AnnualHousing = ContractModification.From_Annual_Housing;

                if (ContractModification.To_Annual_Housing != null)
                {
                    edit_pp_data.To_AnnualHousing = ContractModification.To_Annual_Housing;
                }
                else
                {
                    edit_pp_data.To_AnnualHousing = ContractModification.From_Annual_Housing;
                }

                edit_pp_data.From_CarCost = ContractModification.From_Car_Cost;

                if (ContractModification.To_Car_Cost != null)
                {
                    edit_pp_data.To_CarCost = ContractModification.To_Car_Cost;
                }
                else
                {
                    edit_pp_data.To_CarCost = ContractModification.From_Car_Cost;
                }

                edit_pp_data.From_Transport = ContractModification.From_Transport;

                if (ContractModification.To_Transport != null)
                {
                    edit_pp_data.To_Transport = ContractModification.To_Transport;
                }
                else
                {
                    edit_pp_data.To_Transport = ContractModification.From_Transport;
                }

                edit_pp_data.From_TravelHardshipAllowance = ContractModification.From_Travel_Allowance;

                if (ContractModification.To_Travel_Allowance != null)
                {
                    edit_pp_data.To_TravelHardshipAllowance = ContractModification.To_Travel_Allowance;
                }
                else
                {
                    edit_pp_data.To_TravelHardshipAllowance = ContractModification.From_Travel_Allowance;
                }

                edit_pp_data.From_MobileAllowance = ContractModification.From_Mobile_Allowance;

                if (ContractModification.To_Mobile_Allowance != null)
                {
                    edit_pp_data.To_MobileAllowance = ContractModification.To_Mobile_Allowance;
                }
                else
                {
                    edit_pp_data.To_MobileAllowance = ContractModification.From_Mobile_Allowance;
                }

                status = _entity.SaveChanges() > 0;

                #endregion

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {

                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {

                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                            #region Keep AuditLog_p017

                            string request_id = edit_pp_data.RequestId;

                            string record = edit_pp_data.Contract_Type + " || " + edit_pp_data.Releasing_Manager + " || " +
                              edit_pp_data.Effective_Date + " || " + edit_pp_data.From_Company + " || " +
                              edit_pp_data.To_Company + " || " + edit_pp_data.From_BusinessLine + " || " + edit_pp_data.To_BusinessLine + " || " + edit_pp_data.From_ProductGroup + " || " +
                              edit_pp_data.To_Product_Group + " || " + edit_pp_data.From_Department + " || " + edit_pp_data.To_Department + " || " + edit_pp_data.From_Position + " || " +
                              edit_pp_data.To_Position + " || " + edit_pp_data.From_Global_Grade + " || " + edit_pp_data.To_Global_Grade + " || " +
                              edit_pp_data.From_Local_Grade + " || " + edit_pp_data.To_Local_Grade + " || " + edit_pp_data.From_Cost_Center + " || " +
                              edit_pp_data.To_Cost_Center + " || " + edit_pp_data.From_Status + " || " + edit_pp_data.To_Status + " || " + edit_pp_data.From_Notice_Period + " || " +
                              edit_pp_data.To_Notice_Period + " || " + edit_pp_data.From_Location + " || " + edit_pp_data.To_Location + " || " + edit_pp_data.From_BasicSalary + " || " +
                              edit_pp_data.To_BasicSalary + " || " + edit_pp_data.From_AnnualHousing + " || " + edit_pp_data.To_AnnualHousing + " || " + edit_pp_data.From_CarCost + " || " +
                              edit_pp_data.To_CarCost + " || " + edit_pp_data.From_Transport + " || " + edit_pp_data.To_Transport + " || " + edit_pp_data.From_TravelHardshipAllowance + " || " +
                              edit_pp_data.To_TravelHardshipAllowance + " || " + edit_pp_data.From_MobileAllowance + " || " + edit_pp_data.To_MobileAllowance + " || " + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Contract_Modification", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p017
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges                            

                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }
                            #endregion

                            #region Keep AuditLog_p017 for initiator after backtoinitiator

                            string request_id = edit_pp_data.RequestId;

                            string record = edit_pp_data.Contract_Type + " || " + edit_pp_data.Releasing_Manager + " || " +
                              edit_pp_data.Effective_Date + " || " + edit_pp_data.From_Company + " || " +
                              edit_pp_data.To_Company + " || " + edit_pp_data.From_BusinessLine + " || " + edit_pp_data.To_BusinessLine + " || " + edit_pp_data.From_ProductGroup + " || " +
                              edit_pp_data.To_Product_Group + " || " + edit_pp_data.From_Department + " || " + edit_pp_data.To_Department + " || " + edit_pp_data.From_Position + " || " +
                              edit_pp_data.To_Position + " || " + edit_pp_data.From_Global_Grade + " || " + edit_pp_data.To_Global_Grade + " || " +
                              edit_pp_data.From_Local_Grade + " || " + edit_pp_data.To_Local_Grade + " || " + edit_pp_data.From_Cost_Center + " || " +
                              edit_pp_data.To_Cost_Center + " || " + edit_pp_data.From_Status + " || " + edit_pp_data.To_Status + " || " + edit_pp_data.From_Notice_Period + " || " +
                              edit_pp_data.To_Notice_Period + " || " + edit_pp_data.From_Location + " || " + edit_pp_data.To_Location + " || " + edit_pp_data.From_BasicSalary + " || " +
                              edit_pp_data.To_BasicSalary + " || " + edit_pp_data.From_AnnualHousing + " || " + edit_pp_data.To_AnnualHousing + " || " + edit_pp_data.From_CarCost + " || " +
                              edit_pp_data.To_CarCost + " || " + edit_pp_data.From_Transport + " || " + edit_pp_data.To_Transport + " || " + edit_pp_data.From_TravelHardshipAllowance + " || " +
                              edit_pp_data.To_TravelHardshipAllowance + " || " + edit_pp_data.From_MobileAllowance + " || " + edit_pp_data.To_MobileAllowance + " || " + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Contract_Modification", request_id, "INITIATOR");

                            #endregion Keep AuditLog_p017

                        }
                    }
                }

            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //-----------------------------------------------P030  EducationalAssistance on 29-05-2020 By Chitra V:srishti----------strt
        public object Submit_PP_EducationalAssistance(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data
                    if (model.EducationalAssistanceModel != null)
                    {

                        //To Fill record in master table//
                        var edu = model.EducationalAssistanceModel;
                        var insert_ea_data = _entity.tb_PP_Educational_Assistance.Create();
                        insert_ea_data.RequestId = data.Item2;
                        insert_ea_data.Emp_GroupId = edu.Employee_Group;
                        insert_ea_data.Remarks = edu.Remarks;
                        insert_ea_data.Grand_Total = edu.Grand_Total;
                        insert_ea_data.Total_Entitlement = edu.Total_Entitlement;
                        insert_ea_data.Amount_Approved = edu.Amount_Approved;
                        insert_ea_data.Amount_Paid = edu.Amount_Paid;
                        insert_ea_data.Paid_Payroll = edu.Paid_Payroll;
                        insert_ea_data.IsActive = true;
                        insert_ea_data.TimeStamp = CurrentTime;
                        _entity.tb_PP_Educational_Assistance.Add(insert_ea_data);
                        status = _entity.SaveChanges() > 0;
                        //To Fill record in details table//
                        if (model._Educationassistance != null && model._Educationassistance.Count > 0)
                        {
                            var childinfolist = model._Educationassistance.Where(x => x.Child_Name != null && x.Birth_Date != DateTime.MinValue && x.Exchange_Rate != 0 && x.From_Date != DateTime.MinValue && x.To_Date != DateTime.MinValue && x.Location_Id != 0).ToList();

                            if (childinfolist.Count > 0)
                            {
                                var insert_ea_details_data = _entity.tb_PP_Educational_Assistance_Details.Create();
                                foreach (var item in childinfolist)
                                {

                                    insert_ea_details_data.RequestId = data.Item2;
                                    insert_ea_details_data.Edu_Id = insert_ea_data.Id;
                                    insert_ea_details_data.Child_Name = item.Child_Name;
                                    insert_ea_details_data.Birth_Date = item.Birth_Date;
                                    insert_ea_details_data.School_Fees = item.School_Fees;
                                    insert_ea_details_data.Transport_Fees = item.Transport_Fees;
                                    insert_ea_details_data.Others = item.Others;
                                    insert_ea_details_data.Location_Id = item.Location_Id;
                                    insert_ea_details_data.Foreign_Currency = item.Foreign_Currency;
                                    insert_ea_details_data.Exchange_Rate = item.Exchange_Rate;
                                    insert_ea_details_data.IsActive = true;
                                    insert_ea_details_data.TimeStamp = CurrentTime;
                                    insert_ea_details_data.From_Date = item.From_Date;
                                    insert_ea_details_data.To_Date = item.To_Date;
                                    _entity.tb_PP_Educational_Assistance_Details.Add(insert_ea_details_data);
                                    status = _entity.SaveChanges() > 0;




                                    string request_id = insert_ea_data.RequestId;
                                    string record = request_id + "||" + insert_ea_data.Id + "||" + insert_ea_details_data.Location_Id + "||" + insert_ea_details_data.Child_Name + "||" + Convert.ToDateTime(insert_ea_details_data.Birth_Date) + "||" + insert_ea_details_data.School_Fees + "||" + insert_ea_details_data.Transport_Fees + "||" + insert_ea_details_data.Others + "||" + insert_ea_details_data.Foreign_Currency + "||" + insert_ea_details_data.Exchange_Rate + "||" + Convert.ToDateTime(insert_ea_details_data.From_Date) + "||" + Convert.ToDateTime(insert_ea_details_data.To_Date);
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Educational_Assistance_Details", request_id, "INITIATOR");
                                }
                            }

                            msg = status ? "Success!" : "Please Enter the Full details in the Row!";
                            //Save details in auditLog Table


                        }

                        #region Keep AuditLog_P030
                        if (status)
                        {
                            string request_id = insert_ea_data.RequestId;
                            string record = request_id + "||" + insert_ea_data.Emp_GroupId + " || " + insert_ea_data.Grand_Total + " || " + insert_ea_data.Total_Entitlement + "||" + insert_ea_data.Amount_Paid + " || " + insert_ea_data.Amount_Approved + " || " + insert_ea_data.Paid_Payroll + " || " + insert_ea_data.Remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Educational_Assistance", request_id, "INITIATOR");

                        }

                        #endregion Keep AuditLog_P030
                    }
                }

                #region attachments

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }


                #endregion

            }
            #endregion




            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }
        public object Submit_PP_EducationalAssistance_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            //  bool status1 = false;
            string msg = "";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
            try
            {
                if (data != null)
                {
                    #region Store Request Data

                    var edit_pp_data = _entity.tb_PP_Educational_Assistance.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    string request_id = edit_pp_data.RequestId;
                    if (edit_pp_data != null)
                    {
                        #region
                        var editedu = model.EducationalAssistanceModel;
                        edit_pp_data.RequestId = request_id;
                        edit_pp_data.Emp_GroupId = editedu.Employee_Group;
                        edit_pp_data.Remarks = editedu.Remarks;
                        edit_pp_data.Grand_Total = editedu.Grand_Total;
                        edit_pp_data.Total_Entitlement = editedu.Total_Entitlement;
                        edit_pp_data.Amount_Approved = editedu.Amount_Approved;
                        edit_pp_data.Amount_Paid = editedu.Amount_Paid;
                        edit_pp_data.Paid_Payroll = editedu.Paid_Payroll;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        //status = _entity.SaveChanges() > 0;

                        if (model._Educationassistance != null && model._Educationassistance.Count > 0)
                        {
                            _entity.tb_PP_Educational_Assistance_Details.RemoveRange(_entity.tb_PP_Educational_Assistance_Details.Where(x => x.RequestId == request_id));
                            if (model._Educationassistance.Count > 0)
                            {
                                var childinfolist = model._Educationassistance.Where(x => x.Child_Name != null && x.Birth_Date != DateTime.MinValue && x.Exchange_Rate != 0 && x.From_Date != DateTime.MinValue && x.To_Date != DateTime.MinValue && x.Location_Id != 0).ToList();

                                if (childinfolist.Count > 0)
                                {
                                    var edit_pp_AssDetails_data = _entity.tb_PP_Educational_Assistance_Details.Create();
                                    foreach (var item in childinfolist)
                                    {

                                        edit_pp_AssDetails_data.RequestId = request_id;
                                        edit_pp_AssDetails_data.Edu_Id = edit_pp_data.Id;
                                        edit_pp_AssDetails_data.Child_Name = item.Child_Name;
                                        edit_pp_AssDetails_data.Birth_Date = Convert.ToDateTime(item.Birth_Date);
                                        edit_pp_AssDetails_data.School_Fees = item.School_Fees;
                                        edit_pp_AssDetails_data.Transport_Fees = item.Transport_Fees;
                                        edit_pp_AssDetails_data.Others = item.Others;
                                        edit_pp_AssDetails_data.Location_Id = item.Location_Id;
                                        edit_pp_AssDetails_data.Foreign_Currency = item.Foreign_Currency;
                                        edit_pp_AssDetails_data.Exchange_Rate = item.Exchange_Rate;
                                        edit_pp_AssDetails_data.From_Date = Convert.ToDateTime(item.From_Date);
                                        edit_pp_AssDetails_data.To_Date = Convert.ToDateTime(item.To_Date);
                                        edit_pp_AssDetails_data.IsActive = true;
                                        edit_pp_AssDetails_data.TimeStamp = CurrentTime;
                                        _entity.tb_PP_Educational_Assistance_Details.Add(edit_pp_AssDetails_data);
                                        status = _entity.SaveChanges() > 0;


                                        string rqid = edit_pp_data.RequestId;
                                        string record = rqid + "||" + edit_pp_data.Id + "||" + edit_pp_AssDetails_data.Location_Id + "||" + edit_pp_AssDetails_data.Child_Name + "||" + Convert.ToDateTime(edit_pp_AssDetails_data.Birth_Date) + "||" + edit_pp_AssDetails_data.School_Fees + "||" + edit_pp_AssDetails_data.Transport_Fees + "||" + edit_pp_AssDetails_data.Others + "||" + edit_pp_AssDetails_data.Foreign_Currency + "||" + edit_pp_AssDetails_data.Exchange_Rate + "||" + Convert.ToDateTime(edit_pp_AssDetails_data.From_Date) + "||" + Convert.ToDateTime(edit_pp_AssDetails_data.To_Date);
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Educational_Assistance_Details", rqid, "INITIATOR");
                                    }
                                }
                            }
                        }
                        status = _entity.SaveChanges() > 0;
                        status = true;
                        msg = status ? " Success!" : "Failed";

                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }


                        }




                        #endregion attachment edit


                        #region Keep AuditLog_P030

                        if (status == true)
                        {
                            request_id = edit_pp_data.RequestId;
                            string record = editedu.Employee_Group + " || " + editedu.Grand_Total + " || " + editedu.Total_Entitlement + "||" + editedu.Amount_Paid + " || " + editedu.Amount_Approved + " || " + editedu.Paid_Payroll + " || " + editedu.Remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Educational_Assistance", request_id, "INITIATOR");
                            #endregion Keep AuditLog_P061

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");

                            // }

                            //  }
                            // }

                            #endregion


                        }
                    }
                }

                #endregion
            }
            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_PP_Educational_Assistance(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];

            var edit_ea1_data = _entity.tb_PP_Educational_Assistance.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_ea1_data != null)
            {
                #region
                var editedu1 = model.EducationalAssistanceModel;
                edit_ea1_data.RequestId = rqid;
                edit_ea1_data.Emp_GroupId = editedu1.Employee_Group;
                edit_ea1_data.Attachment_File = editedu1.Attachment_Filepath;
                edit_ea1_data.Remarks = editedu1.Remarks;
                // edit_ea1_data.Attachment_File = editedu1.Attachment_Filepath;
                edit_ea1_data.Grand_Total = editedu1.Grand_Total;
                edit_ea1_data.Total_Entitlement = editedu1.Total_Entitlement;
                edit_ea1_data.Amount_Approved = editedu1.Amount_Approved;
                edit_ea1_data.Amount_Paid = editedu1.Amount_Paid;
                edit_ea1_data.Paid_Payroll = editedu1.Paid_Payroll;
                edit_ea1_data.IsActive = true;
                edit_ea1_data.TimeStamp = CurrentTime;


                if (model._Educationassistance != null && model._Educationassistance.Count > 0)
                {

                    _entity.tb_PP_Educational_Assistance_Details.RemoveRange(_entity.tb_PP_Educational_Assistance_Details.Where(x => x.RequestId == rqid));
                    if (model._Educationassistance.Count > 0)
                    {
                        var childinfolist = model._Educationassistance.Where(x => x.Child_Name != null && x.Birth_Date != DateTime.MinValue && x.Exchange_Rate != 0 && x.From_Date != DateTime.MinValue && x.To_Date != DateTime.MinValue && x.Location_Id != 0).ToList();
                        if (childinfolist.Count > 0)
                        {
                            var edit_pp_AssDetails_data1 = _entity.tb_PP_Educational_Assistance_Details.Create();
                            foreach (var item in childinfolist)
                            {

                                edit_pp_AssDetails_data1.RequestId = rqid;
                                edit_pp_AssDetails_data1.Edu_Id = edit_ea1_data.Id;
                                edit_pp_AssDetails_data1.Child_Name = item.Child_Name;
                                edit_pp_AssDetails_data1.Birth_Date = Convert.ToDateTime(item.Birth_Date);
                                edit_pp_AssDetails_data1.School_Fees = item.School_Fees;
                                edit_pp_AssDetails_data1.Transport_Fees = item.Transport_Fees;
                                edit_pp_AssDetails_data1.Others = item.Others;
                                edit_pp_AssDetails_data1.Location_Id = item.Location_Id;
                                edit_pp_AssDetails_data1.Foreign_Currency = item.Foreign_Currency;
                                edit_pp_AssDetails_data1.Exchange_Rate = item.Exchange_Rate;
                                edit_pp_AssDetails_data1.From_Date = Convert.ToDateTime(item.From_Date);
                                edit_pp_AssDetails_data1.To_Date = Convert.ToDateTime(item.To_Date);
                                edit_pp_AssDetails_data1.IsActive = true;
                                edit_pp_AssDetails_data1.TimeStamp = CurrentTime;


                                _entity.tb_PP_Educational_Assistance_Details.Add(edit_pp_AssDetails_data1);
                                status = _entity.SaveChanges() > 0;
                                string rqid1 = edit_pp_AssDetails_data1.RequestId;
                                string record = rqid1 + "||" + edit_ea1_data.Id + "||" + edit_pp_AssDetails_data1.Location_Id + "||" + edit_pp_AssDetails_data1.Child_Name + "||" + Convert.ToDateTime(edit_pp_AssDetails_data1.Birth_Date) + "||" + edit_pp_AssDetails_data1.School_Fees + "||" + edit_pp_AssDetails_data1.Transport_Fees + "||" + edit_pp_AssDetails_data1.Others + "||" + edit_pp_AssDetails_data1.Foreign_Currency + "||" + edit_pp_AssDetails_data1.Exchange_Rate + "||" + Convert.ToDateTime(edit_pp_AssDetails_data1.From_Date) + "||" + Convert.ToDateTime(edit_pp_AssDetails_data1.To_Date);
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Educational_Assistance_Details", rqid1, "INITIATOR");
                            }
                        }
                    }
                }
                status = _entity.SaveChanges() > 0;
                status = true;
                msg = status ? " Success!" : "Failed!";


                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                #endregion


                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_ea1_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_P030
                            string request_id = edit_ea1_data.RequestId;
                            string record = request_id + "||" + editedu1.Employee_Group + " || " + editedu1.Grand_Total + " || " + editedu1.Total_Entitlement + "||" + editedu1.Amount_Paid + " || " + editedu1.Amount_Approved + " || " + editedu1.Paid_Payroll + " || " + editedu1.Remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Educational_Assistance", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_P030
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            // _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");

                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }


                            #endregion

                            #region Keep AuditLog_P030 for initiator after backtoinitiator

                            string request_id = edit_ea1_data.RequestId;
                            string record = request_id + "||" + editedu1.Employee_Group + " || " + editedu1.Grand_Total + " || " + editedu1.Total_Entitlement + "||" + editedu1.Amount_Paid + " || " + editedu1.Amount_Approved + " || " + editedu1.Paid_Payroll + " || " + editedu1.Remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Educational_Assistance", request_id, "INITIATOR");
                            #endregion Keep AuditLog_P030

                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //-----------------------------------------------P030 EducationalAssistance on 29-05-2020 By Chitra V----------end
        //-----------------------------------------------P003 TicketRefund Airticket on 16.06.2020 By Chitra V----------end

        public object Submit_PP_Ticket_Refund(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            long requestid = Convert.ToInt32(model.TicketRefundModel.TA_Request_No);
            var checktickets = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.Ticket_Number == model.TicketRefundModel.TicketNumber && x.IsActive == true).FirstOrDefault();
            if (checktickets != null)
            {
                #region SaveRequestdata
                var refund = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.TA_Request_No == model.TicketRefundModel.TA_Request_No && x.Ticket_No == model.TicketRefundModel.TicketNumber && x.Status_ID == "CLS" && x.IsActive == true).FirstOrDefault();
                if (refund != null)
                {
                    var lookup = _entity.tb_Request_Hdr.Where(x => x.WF_LookUp.Contains("P003") && x.Request_ID == refund.TA_Request_No && x.Employee_ID == model.emp_local_id && x.Status_ID == "CLS" && x.IsActive == true).ToList();

                    if (lookup != null)
                    {

                        msg = "Refund is already applied.";


                    }
                    else
                    {
                        Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

                        try
                        {
                            if (data.Item1 == true)
                            {
                                #region Store Request Data

                                if (model.TicketRefundModel != null)
                                {

                                    msg = "Success";
                                    var Ticket = model.TicketRefundModel;
                                    var insert_pp_data = _entity.tb_PP_Refund_Air_Ticket.Create();
                                    insert_pp_data.RequestId = data.Item2;
                                    insert_pp_data.IsActive = true;
                                    insert_pp_data.TimeStamp = DateTime.Now;

                                    insert_pp_data.TA_Request_No = Ticket.TA_Request_No;
                                    insert_pp_data.Ticket_No = Ticket.TicketNumber;
                                    insert_pp_data.Ticket_Routing = Ticket.TicketRouting;
                                    insert_pp_data.Request_Details = Ticket.RequestDetails;
                                    insert_pp_data.Status_ID = "NEW";
                                    _entity.tb_PP_Refund_Air_Ticket.Add(insert_pp_data);
                                    status = _entity.SaveChanges() > 0;


                                    #region attachments

                                    if (status && model._FileList != null && model._FileList.Count > 0)
                                    {
                                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                        if (fillist.Count > 0)
                                        {
                                            foreach (var item in fillist)
                                            {
                                                var datas = _entity.tb_ReqestAttachments.Create();
                                                datas.Request_id = data.Item2;
                                                datas.fil_path = item.filepath;
                                                datas.fil_name = item.filename;
                                                datas.filebatch = item.filebatch;
                                                datas.IsActive = true;
                                                datas.TimeStamp = CurrentTime;
                                                _entity.tb_ReqestAttachments.Add(datas);
                                                _entity.SaveChanges();
                                            }
                                        }
                                        msg = status ? " Success!" : "Failed!";
                                    }


                                    #endregion

                                    #region Keep AuditLog_P003
                                    if (status)
                                    {
                                        string request_id = insert_pp_data.RequestId;
                                        string record = request_id + " || " + insert_pp_data.TA_Request_No + " || " + insert_pp_data.Ticket_No + " || " + insert_pp_data.Ticket_Routing + " || " + insert_pp_data.Request_Details + "||" + insert_pp_data.Status_ID + "||" + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Refund_Air_Ticket", request_id, "INITIATOR");

                                    }

                                    #endregion Keep AuditLog_P003

                                }
                                #endregion
                            }
                        }

                        catch (DbEntityValidationException ex)
                        {
                            foreach (var entityValidationErrors in ex.EntityValidationErrors)
                            {
                                foreach (var validationError in entityValidationErrors.ValidationErrors)
                                {
                                    Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                                }
                            }
                        }
                        return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

                    try
                    {
                        if (data.Item1 == true)
                        {
                            #region Store Request Data

                            if (model.TicketRefundModel != null)
                            {

                                msg = "Success";
                                var Ticket = model.TicketRefundModel;
                                var insert_pp_data = _entity.tb_PP_Refund_Air_Ticket.Create();
                                insert_pp_data.RequestId = data.Item2;
                                insert_pp_data.IsActive = true;
                                insert_pp_data.TimeStamp = DateTime.Now;

                                insert_pp_data.TA_Request_No = Ticket.TA_Request_No;
                                insert_pp_data.Ticket_No = Ticket.TicketNumber;
                                insert_pp_data.Ticket_Routing = Ticket.TicketRouting;
                                insert_pp_data.Request_Details = Ticket.RequestDetails;
                                insert_pp_data.Status_ID = "NEW";
                                _entity.tb_PP_Refund_Air_Ticket.Add(insert_pp_data);
                                status = _entity.SaveChanges() > 0;


                                #region attachments

                                if (status && model._FileList != null && model._FileList.Count > 0)
                                {
                                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                    if (fillist.Count > 0)
                                    {
                                        foreach (var item in fillist)
                                        {
                                            var datas = _entity.tb_ReqestAttachments.Create();
                                            datas.Request_id = data.Item2;
                                            datas.fil_path = item.filepath;
                                            datas.fil_name = item.filename;
                                            datas.filebatch = item.filebatch;
                                            datas.IsActive = true;
                                            datas.TimeStamp = CurrentTime;
                                            _entity.tb_ReqestAttachments.Add(datas);
                                            _entity.SaveChanges();
                                        }
                                    }
                                    msg = status ? " Success!" : "Failed!";
                                }


                                #endregion

                                #region Keep AuditLog_P003
                                if (status)
                                {
                                    string request_id = insert_pp_data.RequestId;
                                    string record = request_id + " || " + insert_pp_data.TA_Request_No + " || " + insert_pp_data.Ticket_No + " || " + insert_pp_data.Ticket_Routing + " || " + insert_pp_data.Request_Details + "||" + insert_pp_data.Status_ID + "||" + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Refund_Air_Ticket", request_id, "INITIATOR");

                                }

                                #endregion Keep AuditLog_P003

                            }
                            #endregion
                        }
                    }

                    catch (DbEntityValidationException ex)
                    {
                        foreach (var entityValidationErrors in ex.EntityValidationErrors)
                        {
                            foreach (var validationError in entityValidationErrors.ValidationErrors)
                            {
                                Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                            }
                        }
                    }
                    return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
                }
                #endregion
            }
            else
            {


                msg = "No Such tickets available for this selected TA request number.";


            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }


        public object Submit_PP_Ticket_Refund_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            long requestid = Convert.ToInt32(model.TicketRefundModel.TA_Request_No);
            var checktickets = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.Ticket_Number == model.TicketRefundModel.TicketNumber && x.IsActive == true).FirstOrDefault();
            if (checktickets != null)
            {
                #region SaveRequest data
                var refund = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.TA_Request_No == model.TicketRefundModel.TA_Request_No && x.Ticket_No == model.TicketRefundModel.TicketNumber && x.Status_ID == "CLS" && x.IsActive == true).FirstOrDefault();
                if (refund != null)
                {
                    var lookup = _entity.tb_Request_Hdr.Where(x => x.WF_LookUp.Contains("P003") && x.Request_ID == refund.TA_Request_No && x.Employee_ID == model.emp_local_id && x.Status_ID == "CLS" && x.IsActive == true).ToList();

                    if (lookup != null)
                    {

                        msg = "Refund is already applied.";


                    }
                    else
                    {
                        try
                        {
                            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                            if (data != null)
                            {
                                #region Store Request Data                    
                                var edit_pp_data = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                                if (edit_pp_data != null)
                                {
                                    msg = "Success";
                                    var Ticket = model.TicketRefundModel;

                                    edit_pp_data.RequestId = data.Request_ID;
                                    edit_pp_data.IsActive = true;
                                    edit_pp_data.TimeStamp = DateTime.Now;
                                    edit_pp_data.TA_Request_No = Ticket.TA_Request_No;
                                    edit_pp_data.Ticket_No = Ticket.TicketNumber;
                                    edit_pp_data.Ticket_Routing = Ticket.TicketRouting;
                                    edit_pp_data.Request_Details = Ticket.RequestDetails;
                                    edit_pp_data.Status_ID = "NEW";
                                    status = _entity.SaveChanges() > 0;



                                    #region attachment edit

                                    if (status && model._FileList != null && model._FileList.Count > 0)
                                    {
                                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                                        {
                                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                            if (editattachment != null)
                                            {
                                                foreach (var item in editattachment)
                                                {
                                                    item.IsActive = false;
                                                    status = _entity.SaveChanges() > 0;
                                                }
                                            }
                                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                            foreach (var item in fillist)
                                            {
                                                var datas = _entity.tb_ReqestAttachments.Create();
                                                datas.Request_id = data.Request_ID;
                                                datas.fil_path = item.filepath;
                                                datas.fil_name = item.filename;
                                                datas.filebatch = item.filebatch;
                                                datas.IsActive = true;
                                                datas.TimeStamp = CurrentTime;
                                                _entity.tb_ReqestAttachments.Add(datas);
                                                _entity.SaveChanges();
                                            }
                                            msg = status ? " Success!" : "Failed!";

                                        }
                                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                                        {
                                            var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                            if (editattachment != null)
                                            {
                                                foreach (var item in editattachment)
                                                {
                                                    item.IsActive = false;
                                                    status = _entity.SaveChanges() > 0;
                                                }
                                            }
                                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                            foreach (var item in fillist)
                                            {
                                                var datas = _entity.tb_ReqestAttachments.Create();
                                                datas.Request_id = data.Request_ID;
                                                datas.fil_path = item.filepath;
                                                datas.fil_name = item.filename;
                                                datas.filebatch = item.filebatch;
                                                datas.IsActive = true;
                                                datas.TimeStamp = CurrentTime;
                                                _entity.tb_ReqestAttachments.Add(datas);
                                                _entity.SaveChanges();
                                            }
                                            msg = status ? " Success!" : "Failed!";
                                        }


                                    }




                                    #endregion attachment edit


                                    #region Keep AuditLog_P003

                                    if (status == true)
                                    {
                                        string request_id = edit_pp_data.RequestId;
                                        string record = request_id + " || " + edit_pp_data.TA_Request_No + " || " + edit_pp_data.Ticket_No + " || " + edit_pp_data.Ticket_Routing + " || " + edit_pp_data.Request_Details + " || " + edit_pp_data.Status_ID + "||" + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Refund_Air_Ticket", request_id, "INITIATOR");

                                        #endregion Keep AuditLog_P003

                                        string remark = "Request was Edited by";
                                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                                    }

                                }
                                #endregion
                            }

                        }

                        catch (DbEntityValidationException ex)
                        {
                            foreach (var entityValidationErrors in ex.EntityValidationErrors)
                            {
                                foreach (var validationError in entityValidationErrors.ValidationErrors)
                                {
                                    Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                                }
                            }
                        }

                        return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {

                    try
                    {
                        var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                        if (data != null)
                        {
                            #region Store Request Data                    
                            var edit_pp_data = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                            if (edit_pp_data != null)
                            {
                                msg = "Success";
                                var Ticket = model.TicketRefundModel;

                                edit_pp_data.RequestId = data.Request_ID;
                                edit_pp_data.IsActive = true;
                                edit_pp_data.TimeStamp = DateTime.Now;
                                edit_pp_data.TA_Request_No = Ticket.TA_Request_No;
                                edit_pp_data.Ticket_No = Ticket.TicketNumber;
                                edit_pp_data.Ticket_Routing = Ticket.TicketRouting;
                                edit_pp_data.Request_Details = Ticket.RequestDetails;
                                edit_pp_data.Status_ID = "NEW";
                                status = _entity.SaveChanges() > 0;


                                #region attachment edit

                                if (status && model._FileList != null && model._FileList.Count > 0)
                                {
                                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                                    {
                                        var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                        if (editattachment != null)
                                        {
                                            foreach (var item in editattachment)
                                            {
                                                item.IsActive = false;
                                                status = _entity.SaveChanges() > 0;
                                            }
                                        }
                                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                        foreach (var item in fillist)
                                        {
                                            var datas = _entity.tb_ReqestAttachments.Create();
                                            datas.Request_id = data.Request_ID;
                                            datas.fil_path = item.filepath;
                                            datas.fil_name = item.filename;
                                            datas.filebatch = item.filebatch;
                                            datas.IsActive = true;
                                            datas.TimeStamp = CurrentTime;
                                            _entity.tb_ReqestAttachments.Add(datas);
                                            _entity.SaveChanges();
                                        }
                                        msg = status ? " Success!" : "Failed!";

                                    }
                                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                                    {
                                        var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                        if (editattachment != null)
                                        {
                                            foreach (var item in editattachment)
                                            {
                                                item.IsActive = false;
                                                status = _entity.SaveChanges() > 0;
                                            }
                                        }
                                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                        foreach (var item in fillist)
                                        {
                                            var datas = _entity.tb_ReqestAttachments.Create();
                                            datas.Request_id = data.Request_ID;
                                            datas.fil_path = item.filepath;
                                            datas.fil_name = item.filename;
                                            datas.filebatch = item.filebatch;
                                            datas.IsActive = true;
                                            datas.TimeStamp = CurrentTime;
                                            _entity.tb_ReqestAttachments.Add(datas);
                                            _entity.SaveChanges();
                                        }
                                        msg = status ? " Success!" : "Failed!";
                                    }


                                }




                                #endregion attachment edit



                                #region Keep AuditLog_P003

                                if (status == true)
                                {
                                    string request_id = edit_pp_data.RequestId;
                                    string record = request_id + " || " + edit_pp_data.TA_Request_No + " || " + edit_pp_data.Ticket_No + " || " + edit_pp_data.Ticket_Routing + " || " + edit_pp_data.Request_Details + " || " + edit_pp_data.Status_ID + "||" + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Refund_Air_Ticket", request_id, "INITIATOR");

                                    #endregion Keep AuditLog_P003

                                    string remark = "Request was Edited by";
                                    _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                                }

                            }
                            #endregion
                        }

                    }

                    catch (DbEntityValidationException ex)
                    {
                        foreach (var entityValidationErrors in ex.EntityValidationErrors)
                        {
                            foreach (var validationError in entityValidationErrors.ValidationErrors)
                            {
                                Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                            }
                        }
                    }

                    return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);

                }
                #endregion
            }
            else

            {

                msg = "No Such tickets available for this selected TA request number.";


            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);


        }
        public object Edit_PP_Ticket_Refund(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            long requestid = Convert.ToInt32(model.TicketRefundModel.TA_Request_No);
            var checktickets = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.Ticket_Number == model.TicketRefundModel.TicketNumber && x.IsActive == true).FirstOrDefault();
            if (checktickets != null)
            {

                #region SaveRequest data
                var refund = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.TA_Request_No == model.TicketRefundModel.TA_Request_No && x.Ticket_No == model.TicketRefundModel.TicketNumber && x.Status_ID == "CLS" && x.IsActive == true).FirstOrDefault();
                if (refund != null)
                {
                    var lookup = _entity.tb_Request_Hdr.Where(x => x.WF_LookUp.Contains("P003") && x.Request_ID == refund.TA_Request_No && x.Employee_ID == model.emp_local_id && x.Status_ID == "CLS" && x.IsActive == true).ToList();

                    if (lookup != null)
                    {

                        msg = "Refund is already applied.";


                    }
                    else
                    {
                        string[] split = model.request_id.Split('-');
                        string rqid = split[1];
                        var edit_pp_data = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
                        if (edit_pp_data != null)
                        {

                            #region

                            var Ticket = model.TicketRefundModel;
                            edit_pp_data.RequestId = rqid;
                            edit_pp_data.TA_Request_No = Ticket.TA_Request_No;
                            edit_pp_data.Ticket_No = Ticket.TicketNumber;
                            edit_pp_data.Ticket_Routing = Ticket.TicketRouting;
                            edit_pp_data.Request_Details = Ticket.RequestDetails.Trim();
                            edit_pp_data.Status_ID = "NEW";
                            edit_pp_data.IsActive = true;
                            edit_pp_data.TimeStamp = CurrentTime;
                            status = _entity.SaveChanges() > 0;

                            #endregion

                            #region attachment edit

                            if (status && model._FileList != null && model._FileList.Count > 0)
                            {
                                if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                                {
                                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                    foreach (var item in fillist)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.Request_id = rqid;
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                        _entity.tb_ReqestAttachments.Add(datas);
                                        _entity.SaveChanges();
                                    }
                                    msg = status ? " Success!" : "Failed!";

                                }
                                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                                {
                                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                    foreach (var item in fillist)
                                    {
                                        var datas = _entity.tb_ReqestAttachments.Create();
                                        datas.Request_id = rqid;
                                        datas.fil_path = item.filepath;
                                        datas.fil_name = item.filename;
                                        datas.filebatch = item.filebatch;
                                        datas.IsActive = true;
                                        datas.TimeStamp = CurrentTime;
                                        _entity.tb_ReqestAttachments.Add(datas);
                                        _entity.SaveChanges();
                                    }
                                    msg = status ? " Success!" : "Failed!";
                                }


                            }
                            #endregion attachment edit



                            if (status == true)
                            {
                                msg = "Request Edit Successfully";
                                var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                                var application = req.tb_Application;
                                if (req != null)
                                {
                                    if (req.RoleId != null) //to avoid backtoinitator edit loging
                                    {
                                        var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                                        var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                                        var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                                        #region Keep AuditLog_P003
                                        string request_id = edit_pp_data.RequestId;
                                        string record = request_id + " || " + edit_pp_data.TA_Request_No + " || " + edit_pp_data.Ticket_No + " || " + edit_pp_data.Ticket_Routing + " || " + edit_pp_data.Request_Details + " || " + edit_pp_data.Status_ID + "||" + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Refund_Air_Ticket", request_id, role.Role_Desc);
                                        #endregion Keep AuditLog_P003
                                    }
                                    else
                                    {

                                        #region Log for SaveChanges
                                        //to save log for savechanges
                                        string remark = "Request was Edited by";
                                        string[] split1 = model.request_id.Split('-');
                                        string rqid1 = split[1];
                                        if (req.Creater_ID == model.emp_local_id)
                                        {
                                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                        }
                                        else
                                        {
                                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                        }


                                        #endregion

                                        #region Keep AuditLog_P003 for initiator after backtoinitiator

                                        string request_id = edit_pp_data.RequestId;
                                        string record = request_id + " || " + edit_pp_data.TA_Request_No + " || " + edit_pp_data.Ticket_No + " || " + edit_pp_data.Ticket_Routing + " || " + edit_pp_data.Request_Details + " || " + edit_pp_data.Status_ID + "||" + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Refund_Air_Ticket", request_id, "INITIATOR");
                                        #endregion Keep AuditLog_P030



                                    }
                                }
                            }
                        }
                        return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
                    }


                }
                else
                {

                    string[] split = model.request_id.Split('-');
                    string rqid = split[1];
                    var edit_pp_data = _entity.tb_PP_Refund_Air_Ticket.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
                    if (edit_pp_data != null)
                    {

                        #region

                        var Ticket = model.TicketRefundModel;
                        edit_pp_data.RequestId = rqid;
                        edit_pp_data.TA_Request_No = Ticket.TA_Request_No;
                        edit_pp_data.Ticket_No = Ticket.TicketNumber;
                        edit_pp_data.Ticket_Routing = Ticket.TicketRouting;
                        edit_pp_data.Request_Details = Ticket.RequestDetails.Trim();
                        edit_pp_data.Status_ID = "NEW";
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = CurrentTime;
                        status = _entity.SaveChanges() > 0;

                        #endregion


                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = rqid;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = rqid;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }


                        }
                        #endregion attachment edit


                        if (status == true)
                        {
                            msg = "Request Edit Successfully";
                            var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                            var application = req.tb_Application;
                            if (req != null)
                            {
                                if (req.RoleId != null) //to avoid backtoinitator edit loging
                                {
                                    var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                                    var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                                    var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                                    #region Keep AuditLog_P003
                                    string request_id = edit_pp_data.RequestId;
                                    string record = request_id + " || " + edit_pp_data.TA_Request_No + " || " + edit_pp_data.Ticket_No + " || " + edit_pp_data.Ticket_Routing + " || " + edit_pp_data.Request_Details + " || " + edit_pp_data.Status_ID + "||" + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Refund_Air_Ticket", request_id, role.Role_Desc);
                                    #endregion Keep AuditLog_P003
                                }
                                else
                                {

                                    #region Log for SaveChanges
                                    //to save log for savechanges
                                    string remark = "Request was Edited by";
                                    string[] split1 = model.request_id.Split('-');
                                    string rqid1 = split[1];
                                    if (req.Creater_ID == model.emp_local_id)
                                    {
                                        _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                    }
                                    else
                                    {
                                        _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                    }


                                    #endregion

                                    #region Keep AuditLog_P003 for initiator after backtoinitiator

                                    string request_id = edit_pp_data.RequestId;
                                    string record = request_id + " || " + edit_pp_data.TA_Request_No + " || " + edit_pp_data.Ticket_No + " || " + edit_pp_data.Ticket_Routing + " || " + edit_pp_data.Request_Details + " || " + edit_pp_data.Status_ID + "||" + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_PP_Refund_Air_Ticket", request_id, "INITIATOR");
                                    #endregion Keep AuditLog_P003



                                }
                            }
                        }



                    }

                    return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
                }

                #endregion
            }
            else

            {

                msg = "No Such tickets available for this selected TA request number.";


            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //-----------------------------------------------P003 TicketRefund Airticket on 23.06.2020 By Chitra V---------end
        //-----------------------------------------------SAS01 Bank Guarantee Application on 25.06.2020 By Chitra Srishti ---------end
        public object Submit_SAS_Bank_Guarantee(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data

                    if (model.BankGuaranteeModel != null)
                    {

                        msg = "Success";
                        var Guarantee = model.BankGuaranteeModel;
                        var insert_pp_data = _entity.tb_SAS_Bank_Guarantee_Application.Create();
                        insert_pp_data.RequestId = data.Item2;
                        insert_pp_data.IsActive = true;
                        insert_pp_data.TimeStamp = DateTime.Now;

                        insert_pp_data.Company_Id = Guarantee.Company_Id;
                        insert_pp_data.Guarantee_Type = Guarantee.Guarantee_Type;
                        insert_pp_data.Benf_Name = Guarantee.BenfName;
                        insert_pp_data.Benf_Address1 = Guarantee.BenfAdress1;
                        insert_pp_data.Benf_Address2 = Guarantee.BenfAdress2;
                        insert_pp_data.Benf_Telephone_No = Guarantee.BenfTelephone;
                        insert_pp_data.Benf_Fax_No = Guarantee.BenfFax;
                        insert_pp_data.Currency = Guarantee.Currency;
                        insert_pp_data.Value = Guarantee.CurrencyValue;
                        insert_pp_data.Amount_Words = Guarantee.Amount;
                        insert_pp_data.Contract_Percent = Guarantee.ContractPercent;
                        insert_pp_data.Total_Contract = Guarantee.ContractTotal;
                        insert_pp_data.From_Date = Guarantee.From_Date;
                        insert_pp_data.To_Date = Guarantee.To_Date;
                        insert_pp_data.Description = Guarantee.Description;
                        insert_pp_data.Cust_PO_No = Guarantee.CustPONo;
                        insert_pp_data.ABB_Quotation_No = Guarantee.ABBQutnNo;
                        insert_pp_data.WBS_No = Guarantee.WBSNo;
                        insert_pp_data.BL_Id = Guarantee.BL_Id;
                        insert_pp_data.PG_Id = Guarantee.PG_Id;
                        insert_pp_data.Cost_Center = Guarantee.CostCenter;
                        insert_pp_data.Bank_Branch = Guarantee.Branch;
                        insert_pp_data.Collector_Name = Guarantee.CollectorName;
                        insert_pp_data.Remarks = Guarantee.Remarks;
                        insert_pp_data.Guarantee_No = Guarantee.GuaranteeNo;
                        insert_pp_data.Bank_Name = Guarantee.Bank;
                        insert_pp_data.Account_Remarks = Guarantee.AccountRemarks;
                        insert_pp_data.Comments = Guarantee.Comments;
                        _entity.tb_SAS_Bank_Guarantee_Application.Add(insert_pp_data);
                        status = _entity.SaveChanges() > 0;


                        #region attachments

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                        #endregion

                        #region Keep AuditLog_SAS01
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId;
                            string record = request_id + " || "
                           + insert_pp_data.Company_Id + "||"
                           + insert_pp_data.Guarantee_Type + "||"
                            + insert_pp_data.Benf_Name + "||"
                            + insert_pp_data.Benf_Address1 + "||"
                            + insert_pp_data.Benf_Address2 + "||"
                            + insert_pp_data.Benf_Telephone_No + "||"
                             + insert_pp_data.Benf_Fax_No + "||"
                            + insert_pp_data.Currency + "||"
                            + insert_pp_data.Value + "||"
                            + insert_pp_data.Amount_Words + "||"
                            + insert_pp_data.Contract_Percent + "||"
                            + insert_pp_data.Total_Contract + "||"
                            + insert_pp_data.From_Date + "||"
                            + insert_pp_data.To_Date + "||"
                             + insert_pp_data.Description + "||"
                            + insert_pp_data.Cust_PO_No + "||"
                             + insert_pp_data.ABB_Quotation_No + "||"
                             + insert_pp_data.WBS_No + "||"
                            + insert_pp_data.BL_Id + "||"
                             + insert_pp_data.PG_Id + "||"
                             + insert_pp_data.Cost_Center + "||"
                             + insert_pp_data.Bank_Branch + "||"
                             + insert_pp_data.Collector_Name + "||"
                             + insert_pp_data.Remarks + "||"
                             + insert_pp_data.Guarantee_No + "||"
                             + insert_pp_data.Bank_Name + "||"
                             + insert_pp_data.Account_Remarks + "||"
                             + insert_pp_data.Comments + "||" + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_SAS_Bank_Guarantee_Application", request_id, "INITIATOR");

                        }

                        #endregion Keep AuditLog_P003

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_SAS_Bank_Guarantee_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            try
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                if (data != null)
                {
                    #region Store Request Data                    
                    var edit_pp_data = _entity.tb_SAS_Bank_Guarantee_Application.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    if (edit_pp_data != null)
                    {
                        msg = "Success";
                        var Guarantee = model.BankGuaranteeModel;

                        edit_pp_data.RequestId = data.Request_ID;
                        edit_pp_data.IsActive = true;
                        edit_pp_data.TimeStamp = DateTime.Now;


                        edit_pp_data.Company_Id = Guarantee.Company_Id;
                        edit_pp_data.Guarantee_Type = Guarantee.Guarantee_Type;
                        edit_pp_data.Benf_Name = Guarantee.BenfName;
                        edit_pp_data.Benf_Address1 = Guarantee.BenfAdress1;
                        edit_pp_data.Benf_Address2 = Guarantee.BenfAdress2;
                        edit_pp_data.Benf_Telephone_No = Guarantee.BenfTelephone;
                        edit_pp_data.Benf_Fax_No = Guarantee.BenfFax;
                        edit_pp_data.Currency = Guarantee.Currency;
                        edit_pp_data.Value = Guarantee.CurrencyValue;
                        edit_pp_data.Amount_Words = Guarantee.Amount;
                        edit_pp_data.Contract_Percent = Guarantee.ContractPercent;
                        edit_pp_data.Total_Contract = Guarantee.ContractTotal;
                        edit_pp_data.From_Date = Guarantee.From_Date;
                        edit_pp_data.To_Date = Guarantee.To_Date;
                        edit_pp_data.Description = Guarantee.Description;
                        edit_pp_data.Cust_PO_No = Guarantee.CustPONo;
                        edit_pp_data.ABB_Quotation_No = Guarantee.ABBQutnNo;
                        edit_pp_data.WBS_No = Guarantee.WBSNo;
                        edit_pp_data.BL_Id = Guarantee.BL_Id;
                        edit_pp_data.PG_Id = Guarantee.PG_Id;
                        edit_pp_data.Cost_Center = Guarantee.CostCenter;
                        edit_pp_data.Bank_Branch = Guarantee.Branch;
                        edit_pp_data.Collector_Name = Guarantee.CollectorName;
                        edit_pp_data.Remarks = Guarantee.Remarks;
                        edit_pp_data.Guarantee_No = Guarantee.GuaranteeNo;
                        edit_pp_data.Bank_Name = Guarantee.Bank;
                        edit_pp_data.Account_Remarks = Guarantee.AccountRemarks;
                        edit_pp_data.Comments = Guarantee.Comments;
                        status = _entity.SaveChanges() > 0;



                        #region attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }


                        }




                        #endregion attachment edit


                        #region Keep AuditLog_SAS01

                        if (status == true)
                        {
                            string request_id = edit_pp_data.RequestId;
                            string record = request_id + " || "
                           + edit_pp_data.Company_Id + "||"
                           + edit_pp_data.Guarantee_Type + "||"
                            + edit_pp_data.Benf_Name + "||"
                            + edit_pp_data.Benf_Address1 + "||"
                            + edit_pp_data.Benf_Address2 + "||"
                            + edit_pp_data.Benf_Telephone_No + "||"
                             + edit_pp_data.Benf_Fax_No + "||"
                            + edit_pp_data.Currency + "||"
                            + edit_pp_data.Value + "||"
                            + edit_pp_data.Amount_Words + "||"
                            + edit_pp_data.Contract_Percent + "||"
                            + edit_pp_data.Total_Contract + "||"
                            + edit_pp_data.From_Date + "||"
                            + edit_pp_data.To_Date + "||"
                             + edit_pp_data.Description + "||"
                            + edit_pp_data.Cust_PO_No + "||"
                             + edit_pp_data.ABB_Quotation_No + "||"
                             + edit_pp_data.WBS_No + "||"
                            + edit_pp_data.BL_Id + "||"
                             + edit_pp_data.PG_Id + "||"
                             + edit_pp_data.Cost_Center + "||"
                             + edit_pp_data.Bank_Branch + "||"
                             + edit_pp_data.Collector_Name + "||"
                             + edit_pp_data.Remarks + "||"
                             + edit_pp_data.Guarantee_No + "||"
                             + edit_pp_data.Bank_Name + "||"
                             + edit_pp_data.Account_Remarks + "||"
                             + edit_pp_data.Comments + "||" + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_SAS_Bank_Guarantee_Application", request_id, "INITIATOR");

                            #endregion Keep AuditLog_SAS01

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                    }
                    #endregion
                }

            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);


        }
        public object Edit_SAS_Bank_Guarantee(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_pp_data = _entity.tb_SAS_Bank_Guarantee_Application.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_pp_data != null)
            {

                #region

                var Guarantee = model.BankGuaranteeModel;
                edit_pp_data.RequestId = rqid;
                edit_pp_data.IsActive = true;
                edit_pp_data.TimeStamp = CurrentTime;

                edit_pp_data.Company_Id = Guarantee.Company_Id;
                edit_pp_data.Guarantee_Type = Guarantee.Guarantee_Type;
                edit_pp_data.Benf_Name = Guarantee.BenfName;
                edit_pp_data.Benf_Address1 = Guarantee.BenfAdress1;
                edit_pp_data.Benf_Address2 = Guarantee.BenfAdress2;
                edit_pp_data.Benf_Telephone_No = Guarantee.BenfTelephone;
                edit_pp_data.Benf_Fax_No = Guarantee.BenfFax;
                edit_pp_data.Currency = Guarantee.Currency;
                edit_pp_data.Value = Guarantee.CurrencyValue;
                edit_pp_data.Amount_Words = Guarantee.Amount;
                edit_pp_data.Contract_Percent = Guarantee.ContractPercent;
                edit_pp_data.Total_Contract = Guarantee.ContractTotal;
                edit_pp_data.From_Date = Guarantee.From_Date;
                edit_pp_data.To_Date = Guarantee.To_Date;
                edit_pp_data.Description = Guarantee.Description;
                edit_pp_data.Cust_PO_No = Guarantee.CustPONo;
                edit_pp_data.ABB_Quotation_No = Guarantee.ABBQutnNo;
                edit_pp_data.WBS_No = Guarantee.WBSNo;
                edit_pp_data.BL_Id = Guarantee.BL_Id;
                edit_pp_data.PG_Id = Guarantee.PG_Id;
                edit_pp_data.Cost_Center = Guarantee.CostCenter;
                edit_pp_data.Bank_Branch = Guarantee.Branch;
                edit_pp_data.Collector_Name = Guarantee.CollectorName;
                edit_pp_data.Remarks = Guarantee.Remarks;
                edit_pp_data.Guarantee_No = Guarantee.GuaranteeNo;
                edit_pp_data.Bank_Name = Guarantee.Bank;
                edit_pp_data.Account_Remarks = Guarantee.AccountRemarks;
                edit_pp_data.Comments = Guarantee.Comments;
                status = _entity.SaveChanges() > 0;

                #endregion

                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit



                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_pp_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                            #region Keep AuditLog_SAS01
                            string request_id = edit_pp_data.RequestId;

                            string record = request_id + " || "
                           + edit_pp_data.Company_Id + "||"
                           + edit_pp_data.Guarantee_Type + "||"
                            + edit_pp_data.Benf_Name + "||"
                            + edit_pp_data.Benf_Address1 + "||"
                            + edit_pp_data.Benf_Address2 + "||"
                            + edit_pp_data.Benf_Telephone_No + "||"
                             + edit_pp_data.Benf_Fax_No + "||"
                            + edit_pp_data.Currency + "||"
                            + edit_pp_data.Value + "||"
                            + edit_pp_data.Amount_Words + "||"
                            + edit_pp_data.Contract_Percent + "||"
                            + edit_pp_data.Total_Contract + "||"
                            + edit_pp_data.From_Date + "||"
                            + edit_pp_data.To_Date + "||"
                             + edit_pp_data.Description + "||"
                            + edit_pp_data.Cust_PO_No + "||"
                             + edit_pp_data.ABB_Quotation_No + "||"
                             + edit_pp_data.WBS_No + "||"
                            + edit_pp_data.BL_Id + "||"
                             + edit_pp_data.PG_Id + "||"
                             + edit_pp_data.Cost_Center + "||"
                             + edit_pp_data.Bank_Branch + "||"
                             + edit_pp_data.Collector_Name + "||"
                             + edit_pp_data.Remarks + "||"
                             + edit_pp_data.Guarantee_No + "||"
                             + edit_pp_data.Bank_Name + "||"
                             + edit_pp_data.Account_Remarks + "||"
                             + edit_pp_data.Comments + "||" + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_SAS_Bank_Guarantee_Application", request_id, role.Role_Desc);
                            #endregion Keep AuditLog_P003
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }


                            #endregion

                            #region Keep AuditLog_SAS01 for initiator after backtoinitiator

                            string request_id = edit_pp_data.RequestId;
                            string record = request_id + " || "
                                               + edit_pp_data.Company_Id + "||"
                                               + edit_pp_data.Guarantee_Type + "||"
                                                + edit_pp_data.Benf_Name + "||"
                                                + edit_pp_data.Benf_Address1 + "||"
                                                + edit_pp_data.Benf_Address2 + "||"
                                                + edit_pp_data.Benf_Telephone_No + "||"
                                                 + edit_pp_data.Benf_Fax_No + "||"
                                                + edit_pp_data.Currency + "||"
                                                + edit_pp_data.Value + "||"
                                                + edit_pp_data.Amount_Words + "||"
                                                + edit_pp_data.Contract_Percent + "||"
                                                + edit_pp_data.Total_Contract + "||"
                                                + edit_pp_data.From_Date + "||"
                                                + edit_pp_data.To_Date + "||"
                                                 + edit_pp_data.Description + "||"
                                                + edit_pp_data.Cust_PO_No + "||"
                                                 + edit_pp_data.ABB_Quotation_No + "||"
                                                 + edit_pp_data.WBS_No + "||"
                                                + edit_pp_data.BL_Id + "||"
                                                 + edit_pp_data.PG_Id + "||"
                                                 + edit_pp_data.Cost_Center + "||"
                                                 + edit_pp_data.Bank_Branch + "||"
                                                 + edit_pp_data.Collector_Name + "||"
                                                 + edit_pp_data.Remarks + "||"
                                                 + edit_pp_data.Guarantee_No + "||"
                                                 + edit_pp_data.Bank_Name + "||"
                                                 + edit_pp_data.Account_Remarks + "||"
                                                 + edit_pp_data.Comments + "||" + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_SAS_Bank_Guarantee_Application", request_id, "INITIATOR");
                            #endregion Keep AuditLog_SAS01



                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        //-----------------------------------------------SAS01 Bank Guarantee Application on 25.06.2020 By Chitra Srishti --------end
        //--------------------------------------------P045 ER HR Related on 08.07.2020 by Chitra V ----------------strt 
        //P045 - Afsal 14/06/2020
        public object Submit_ER_HR_Related(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    #region Store Request Data

                    if (model.ExpenseReportModel != null)
                    {
                        msg = "Success";
                        string AuditData = "";

                        ExpenseReportModel ExpenseReportModel = model.ExpenseReportModel;

                        tb_ER_HR_Related er_data = _entity.tb_ER_HR_Related.Create();
                        er_data.RequestId = data.Item2;
                        er_data.ChargeTo = ExpenseReportModel.ChargeTo;
                        er_data.PlacesVisited = ExpenseReportModel.PlacesVisited;
                        er_data.Region = ExpenseReportModel.Region;
                        er_data.PersonnelVisited = ExpenseReportModel.PersonnelVisited;
                        er_data.BusinessLine = ExpenseReportModel.BusinessLine;
                        er_data.TARequest = ExpenseReportModel.TARequest;
                        er_data.TARequestDate = ExpenseReportModel.TARequestDate;
                        er_data.LastDayOfWork = ExpenseReportModel.LastDayOfWork;
                        er_data.ReturnToDuty = ExpenseReportModel.ReturnToDuty;
                        er_data.ComplianceApproved = ExpenseReportModel.ComplianceApproved;
                        er_data.ComplianceApprovalDate = ExpenseReportModel.ComplianceApprovalDate;
                        er_data.AmtTotal = ExpenseReportModel.AmtTotal;
                        er_data.LessAdvance = ExpenseReportModel.LessAdvance;
                        er_data.TicketsPaidByCo = ExpenseReportModel.TicketsPaidByCo;
                        er_data.NetToReceive = ExpenseReportModel.NetToReceive;
                        er_data.FilePath = ExpenseReportModel.FilePath;
                        er_data.IsActive = true;
                        er_data.TimeStamp = DateTime.Now;

                        _entity.tb_ER_HR_Related.Add(er_data);
                        status = _entity.SaveChanges() > 0;

                        if (model.ExpenseReportModel.ExpenseReportDetailList != null)
                        {
                            int detailCount = 0;
                            foreach (ExpenseReportDetailModel erDetail in model.ExpenseReportModel.ExpenseReportDetailList)
                            {
                                tb_ER_HR_Related_Detail er_detail_data = _entity.tb_ER_HR_Related_Detail.Create();
                                er_detail_data.RequestId = data.Item2;
                                er_detail_data.ER_ParentId = er_data.Id;
                                er_detail_data.AccountTypeId = erDetail.AccountTypeId;
                                er_detail_data.AccountTypeName = erDetail.AccountTypeName;
                                er_detail_data.TicketNumbers = erDetail.TicketNumbers;
                                er_detail_data.ERAccount = erDetail.ERAccount;
                                er_detail_data.KM = erDetail.KM;
                                er_detail_data.Allowance = erDetail.Allowance;
                                er_detail_data.Description1 = erDetail.Description1;
                                er_detail_data.Description2 = erDetail.Description2;
                                er_detail_data.Currency = erDetail.Currency;
                                er_detail_data.Amount = erDetail.Amount;
                                er_detail_data.ExchangeRate = erDetail.ExchangeRate;
                                er_detail_data.AmtLocal = erDetail.AmtLocal;
                                er_detail_data.SequenceNum = ++detailCount;
                                er_detail_data.IsActive = true;

                                _entity.tb_ER_HR_Related_Detail.Add(er_detail_data);

                                //code for setup entry in auditlog
                                AuditData = AuditData + " || " + er_detail_data.RequestId + " || " + er_detail_data.ER_ParentId + " || " + er_detail_data.AccountTypeId + " || " + er_detail_data.AccountTypeName
                                    + " || " + er_detail_data.TicketNumbers + " || " + er_detail_data.KM + " || " + er_detail_data.Allowance + " || " + er_detail_data.Description1 + " || " + er_detail_data.Description2 + " || " + er_detail_data.Currency
                                    + " || " + er_detail_data.Amount + " || " + er_detail_data.ExchangeRate + " || " + er_detail_data.AmtLocal + " || " + er_detail_data.SequenceNum;
                            }
                            status = _entity.SaveChanges() > 0;
                        }

                        #region attachments
                        //to store attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            if (fillist.Count > 0)
                            {
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Item2;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                            }
                            msg = status ? " Success!" : "Failed!";
                        }
                        #endregion

                        #region Keep AuditLog_P045

                        if (status)
                        {

                            string request_id = er_data.RequestId;

                            string record = er_data.RequestType + " || " + er_data.ChargeTo + " || " + er_data.PlacesVisited + " || " +
                            er_data.Region + " || " + er_data.PersonnelVisited + " || " + er_data.BusinessLine + " || " + er_data.TARequest + " || " +
                            er_data.TARequestDate + " || " + er_data.LastDayOfWork + " || " + er_data.ReturnToDuty + " || " + er_data.ComplianceApproved + " || " +
                            er_data.ComplianceApprovalDate + " || " + er_data.FilePath + AuditData + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_ER_HR_Related", request_id, "INITIATOR");

                        }

                        #endregion Keep AuditLog_P045

                        if (status)
                        {
                            tb_WF_Employee employee = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id).SingleOrDefault();

                            //check if external employee
                            if (employee.EmployeeType_ID == "3")
                            {
                                tb_Vendor vendor = _entity.tb_Vendor.Where(x => x.Vendor_id == employee.Vendor_Id).SingleOrDefault();

                                var insert_process_data = _entity.tb_ProcessHdr.Create();
                                insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                                insert_process_data.RoleId = "VENDOR~" + vendor.Vendor_Code;
                                insert_process_data.WF_id = Int32.Parse(model.wf_id);
                                insert_process_data.IsCompleted = true;
                                insert_process_data.IsActive = true;
                                insert_process_data.distribution_flag = true;
                                insert_process_data.TimeStamp = CurrentTime;
                                _entity.tb_ProcessHdr.Add(insert_process_data);
                                status = _entity.SaveChanges() > 0;
                            }
                        }

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //P045 - Afsal 15/06/2020
        public object Submit_ER_HR_Related_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            try
            {
                var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();
                if (data != null)
                {
                    #region Store Request Data
                    var edit_er_data = _entity.tb_ER_HR_Related.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    if (edit_er_data != null)
                    {
                        msg = "Success";
                        string AuditData = "";

                        ExpenseReportModel ExpenseReportModel = model.ExpenseReportModel;

                        edit_er_data.RequestId = data.Request_ID;
                        edit_er_data.ChargeTo = ExpenseReportModel.ChargeTo;
                        edit_er_data.PlacesVisited = ExpenseReportModel.PlacesVisited;
                        edit_er_data.Region = ExpenseReportModel.Region;
                        edit_er_data.PersonnelVisited = ExpenseReportModel.PersonnelVisited;
                        edit_er_data.BusinessLine = ExpenseReportModel.BusinessLine;
                        edit_er_data.TARequest = ExpenseReportModel.TARequest;
                        edit_er_data.TARequestDate = ExpenseReportModel.TARequestDate;
                        edit_er_data.LastDayOfWork = ExpenseReportModel.LastDayOfWork;
                        edit_er_data.ReturnToDuty = ExpenseReportModel.ReturnToDuty;
                        edit_er_data.ComplianceApproved = ExpenseReportModel.ComplianceApproved;
                        edit_er_data.ComplianceApprovalDate = ExpenseReportModel.ComplianceApprovalDate;
                        edit_er_data.AmtTotal = ExpenseReportModel.AmtTotal;
                        edit_er_data.LessAdvance = ExpenseReportModel.LessAdvance;
                        edit_er_data.TicketsPaidByCo = ExpenseReportModel.TicketsPaidByCo;
                        edit_er_data.NetToReceive = ExpenseReportModel.NetToReceive;
                        edit_er_data.FilePath = ExpenseReportModel.FilePath;
                        edit_er_data.IsActive = true;
                        edit_er_data.TimeStamp = DateTime.Now;

                        status = _entity.SaveChanges() > 0;

                        //remove existing entries from details table
                        _entity.tb_ER_HR_Related_Detail.Where(x => x.RequestId == data.Request_ID).ToList()
                            .ForEach(x => x.IsActive = false);
                        status = _entity.SaveChanges() > 0;

                        if (model.ExpenseReportModel.ExpenseReportDetailList != null)
                        {
                            int detailCount = 0;
                            foreach (ExpenseReportDetailModel erDetail in model.ExpenseReportModel.ExpenseReportDetailList)
                            {
                                tb_ER_HR_Related_Detail er_detail_data = _entity.tb_ER_HR_Related_Detail.Create();
                                er_detail_data.RequestId = data.Request_ID;
                                er_detail_data.ER_ParentId = edit_er_data.Id;
                                er_detail_data.AccountTypeId = erDetail.AccountTypeId;
                                er_detail_data.AccountTypeName = erDetail.AccountTypeName;
                                er_detail_data.ERAccount = erDetail.ERAccount;
                                er_detail_data.TicketNumbers = erDetail.TicketNumbers;
                                er_detail_data.KM = erDetail.KM;
                                er_detail_data.Allowance = erDetail.Allowance;
                                er_detail_data.Description1 = erDetail.Description1;
                                er_detail_data.Description2 = erDetail.Description2;
                                er_detail_data.Currency = erDetail.Currency;
                                er_detail_data.Amount = erDetail.Amount;
                                er_detail_data.ExchangeRate = erDetail.ExchangeRate;
                                er_detail_data.AmtLocal = erDetail.AmtLocal;
                                er_detail_data.SequenceNum = ++detailCount;
                                er_detail_data.IsActive = true;

                                _entity.tb_ER_HR_Related_Detail.Add(er_detail_data);

                                AuditData = AuditData + " || " + er_detail_data.RequestId + " || " + er_detail_data.ER_ParentId + " || " + er_detail_data.AccountTypeId + " || " + er_detail_data.AccountTypeName
                                   + " || " + er_detail_data.TicketNumbers + " || " + er_detail_data.KM + " || " + er_detail_data.Allowance + " || " + er_detail_data.Description1 + " || " + er_detail_data.Description2 + " || " + er_detail_data.Currency
                                   + " || " + er_detail_data.Amount + " || " + er_detail_data.ExchangeRate + " || " + er_detail_data.AmtLocal + " || " + er_detail_data.SequenceNum;
                            }
                            status = _entity.SaveChanges() > 0;
                        }

                        #region edit attachments
                        //to edit attachments
                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }
                        }
                        #endregion

                        #region Keep AuditLog_P045

                        if (status)
                        {

                            string request_id = edit_er_data.RequestId;

                            string record = edit_er_data.RequestType + " || " + edit_er_data.ChargeTo + " || " + edit_er_data.PlacesVisited + " || " +
                            edit_er_data.Region + " || " + edit_er_data.PersonnelVisited + " || " + edit_er_data.BusinessLine + " || " + edit_er_data.TARequest + " || " +
                            edit_er_data.TARequestDate + " || " + edit_er_data.LastDayOfWork + " || " + edit_er_data.ReturnToDuty + " || " + edit_er_data.ComplianceApproved + " || " +
                            edit_er_data.ComplianceApprovalDate + " || " + edit_er_data.FilePath + " || " + AuditData + "||" + CurrentTime;

                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_ER_HR_Related", request_id, "INITIATOR");

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                        }

                        #endregion Keep AuditLog_P045

                    }
                    #endregion
                }
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //P045 - Afsal 16/06/2020
        public object Edit_ER_HR_Related(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";

            string[] split = model.request_id.Split('-');
            string rqid = split[1];

            try
            {
                #region Store Request Data
                var edit_er_data = _entity.tb_ER_HR_Related.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
                if (edit_er_data != null)
                {
                    msg = "Success";
                    string AuditData = "";

                    ExpenseReportModel ExpenseReportModel = model.ExpenseReportModel;

                    edit_er_data.RequestId = rqid;
                    edit_er_data.ChargeTo = ExpenseReportModel.ChargeTo;
                    edit_er_data.PlacesVisited = ExpenseReportModel.PlacesVisited;
                    edit_er_data.Region = ExpenseReportModel.Region;
                    edit_er_data.PersonnelVisited = ExpenseReportModel.PersonnelVisited;
                    edit_er_data.BusinessLine = ExpenseReportModel.BusinessLine;
                    edit_er_data.TARequest = ExpenseReportModel.TARequest;
                    edit_er_data.TARequestDate = ExpenseReportModel.TARequestDate;
                    edit_er_data.LastDayOfWork = ExpenseReportModel.LastDayOfWork;
                    edit_er_data.ReturnToDuty = ExpenseReportModel.ReturnToDuty;
                    edit_er_data.ComplianceApproved = ExpenseReportModel.ComplianceApproved;
                    edit_er_data.ComplianceApprovalDate = ExpenseReportModel.ComplianceApprovalDate;
                    edit_er_data.AmtTotal = ExpenseReportModel.AmtTotal;
                    edit_er_data.LessAdvance = ExpenseReportModel.LessAdvance;
                    edit_er_data.TicketsPaidByCo = ExpenseReportModel.TicketsPaidByCo;
                    edit_er_data.NetToReceive = ExpenseReportModel.NetToReceive;
                    edit_er_data.FilePath = ExpenseReportModel.FilePath;
                    edit_er_data.IsActive = true;
                    edit_er_data.TimeStamp = DateTime.Now;

                    status = _entity.SaveChanges() > 0;

                    //remove existing entries from details table
                    _entity.tb_ER_HR_Related_Detail.Where(x => x.RequestId == rqid).ToList()
                        .ForEach(x => x.IsActive = false);
                    status = _entity.SaveChanges() > 0;

                    if (model.ExpenseReportModel.ExpenseReportDetailList != null)
                    {
                        int detailCount = 0;
                        foreach (ExpenseReportDetailModel erDetail in model.ExpenseReportModel.ExpenseReportDetailList)
                        {
                            tb_ER_HR_Related_Detail er_detail_data = _entity.tb_ER_HR_Related_Detail.Create();
                            er_detail_data.RequestId = rqid;
                            er_detail_data.ER_ParentId = edit_er_data.Id;
                            er_detail_data.AccountTypeId = erDetail.AccountTypeId;
                            er_detail_data.AccountTypeName = erDetail.AccountTypeName;
                            er_detail_data.ERAccount = erDetail.ERAccount;
                            er_detail_data.TicketNumbers = erDetail.TicketNumbers;
                            er_detail_data.KM = erDetail.KM;
                            er_detail_data.Allowance = erDetail.Allowance;
                            er_detail_data.Description1 = erDetail.Description1;
                            er_detail_data.Description2 = erDetail.Description2;
                            er_detail_data.Currency = erDetail.Currency;
                            er_detail_data.Amount = erDetail.Amount;
                            er_detail_data.ExchangeRate = erDetail.ExchangeRate;
                            er_detail_data.AmtLocal = erDetail.AmtLocal;
                            er_detail_data.SequenceNum = ++detailCount;
                            er_detail_data.IsActive = true;

                            _entity.tb_ER_HR_Related_Detail.Add(er_detail_data);

                            AuditData = AuditData + " || " + er_detail_data.RequestId + " || " + er_detail_data.ER_ParentId + " || " + er_detail_data.AccountTypeId + " || " + er_detail_data.AccountTypeName
                               + " || " + er_detail_data.TicketNumbers + " || " + er_detail_data.KM + " || " + er_detail_data.Allowance + " || " + er_detail_data.Description1 + " || " + er_detail_data.Description2 + " || " + er_detail_data.Currency
                               + " || " + er_detail_data.Amount + " || " + er_detail_data.ExchangeRate + " || " + er_detail_data.AmtLocal + " || " + er_detail_data.SequenceNum;
                        }
                        status = _entity.SaveChanges() > 0;
                    }

                    #region attachment edit

                    if (status && model._FileList != null && model._FileList.Count > 0)
                    {
                        if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = rqid;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";

                        }
                        if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                        {
                            var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                            var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                            foreach (var item in fillist)
                            {
                                var datas = _entity.tb_ReqestAttachments.Create();
                                datas.Request_id = rqid;
                                datas.fil_path = item.filepath;
                                datas.fil_name = item.filename;
                                datas.filebatch = item.filebatch;
                                datas.IsActive = true;
                                datas.TimeStamp = CurrentTime;
                                _entity.tb_ReqestAttachments.Add(datas);
                                _entity.SaveChanges();
                            }
                            msg = status ? " Success!" : "Failed!";
                        }


                    }
                    #endregion attachment edit

                    #region Keep AuditLog_P045

                    if (status)
                    {
                        msg = "Request Edit Successfully";
                        var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_er_data.RequestId && x.IsActive == true).FirstOrDefault();
                        var application = req.tb_Application;

                        if (req != null)
                        {
                            if (req.RoleId != null)
                            {
                                var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                                var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                                var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                                #region Keep AuditLog_p045

                                string request_id = edit_er_data.RequestId;

                                string record = edit_er_data.RequestType + " || " + edit_er_data.ChargeTo + " || " + edit_er_data.PlacesVisited + " || " +
                                edit_er_data.Region + " || " + edit_er_data.PersonnelVisited + " || " + edit_er_data.BusinessLine + " || " + edit_er_data.TARequest + " || " +
                                edit_er_data.TARequestDate + " || " + edit_er_data.LastDayOfWork + " || " + edit_er_data.ReturnToDuty + " || " + edit_er_data.ComplianceApproved + " || " +
                                edit_er_data.ComplianceApprovalDate + " || " + edit_er_data.FilePath + " || " + AuditData + "||" + CurrentTime;

                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_ER_HR_Related", request_id, "INITIATOR");

                                #endregion Keep AuditLog_p008
                            }
                            else
                            {
                                #region Log for SaveChanges
                                //to save log for savechanges                            

                                string remark = "Request was Edited by";
                                string[] split1 = model.request_id.Split('-');
                                string rqid1 = split[1];
                                if (req.Creater_ID == model.emp_local_id)
                                {
                                    _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                                }
                                else
                                {
                                    _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                                }

                                #region Keep AuditLog_p045

                                string request_id = edit_er_data.RequestId;

                                string record = edit_er_data.RequestType + " || " + edit_er_data.ChargeTo + " || " + edit_er_data.PlacesVisited + " || " +
                                edit_er_data.Region + " || " + edit_er_data.PersonnelVisited + " || " + edit_er_data.BusinessLine + " || " + edit_er_data.TARequest + " || " +
                                edit_er_data.TARequestDate + " || " + edit_er_data.LastDayOfWork + " || " + edit_er_data.ReturnToDuty + " || " + edit_er_data.ComplianceApproved + " || " +
                                edit_er_data.ComplianceApprovalDate + " || " + edit_er_data.FilePath + " || " + AuditData + "||" + CurrentTime;

                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_ER_HR_Related", request_id, "INITIATOR");

                                #endregion Keep AuditLog_p045

                                #endregion
                            }
                        }
                    }

                    #endregion Keep AuditLog_P045

                }
                #endregion
            }

            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //--------------------------------------------P045 ER HR Related on 08.07.2020 by Chitra V ----------------end 

        public PartialViewResult EditBusinessInternational(string id)
        {
            RequestModel model = new RequestModel();
            long reqid = Convert.ToInt32(id);
            var _p034 = _entity.tb_TA_Business_International.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
            BusinessInternational businessinternational = new BusinessInternational();
            businessinternational.Place_Visit = _p034.Place_Visit;
            businessinternational.Reasons = _p034.Reasons;
            businessinternational.Remark = _p034.Remark;
            businessinternational.Is_Compliance_Approval_Required = Convert.ToInt32(_p034.Is_Compliance_Approval);
            //businessinternational.Compliance_Approval_Date = _p034.Compliance_Approval_Date ?? CurrentTime;
            if (_p034.Compliance_Approval_Date != null)
            {
                try
                {
                    var stringDate = _p034.Compliance_Approval_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.compliance_approval_date_string = xx;
                }
                catch
                {
                    var stringDate = _p034.Compliance_Approval_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.compliance_approval_date_string = xx;
                }
            }
            if (_p034.Last_Day_Of_Work != null)
            {
                try
                {
                    var stringDate = _p034.Last_Day_Of_Work.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Last_Day_Of_Work_date_string = _p034.Last_Day_Of_Work.ToString();
                }
                catch
                {
                    var stringDate = _p034.Last_Day_Of_Work.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Last_Day_Of_Work_date_string = _p034.Last_Day_Of_Work.ToString();
                }
            }
            if (_p034.Return_To_Duty != null)
            {
                try
                {
                    var stringDate = _p034.Return_To_Duty.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Return_To_Duty_date_string = xx;
                }
                catch
                {
                    var stringDate = _p034.Return_To_Duty.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Return_To_Duty_date_string = xx;
                }
            }
            businessinternational.Is_WorkFlow_delegated = Convert.ToInt32(_p034.IsDelegated);
            businessinternational.Justification_Not_Delegated = _p034.Just_No_Delegated;
            businessinternational.IsPossible_Video_Conference = Convert.ToInt32(_p034.IsVideo_Conference);
            businessinternational.Justification_No_Video_Conference = _p034.Just_No_Video;
            businessinternational.Address_During_Absence = _p034.Address_During_Absence;
            businessinternational.telephone = _p034.Telephone_No;
            businessinternational.Mode_Of_Travel = _p034.Travel_Mode;
            businessinternational.abb_locations = _p034.Location_Id;
            businessinternational.Required_Ext_or_Reentry_Visa = Convert.ToInt32(_p034.Is_Exit_ReEntry_Visa);
            businessinternational.Type_of_Required_Ext_or_Reentry_Visa = _p034.Type_Exit_ReEntry_Visa;
            businessinternational.Visa_Charged_to = _p034.Visa_Charged_to;
            businessinternational.Required_Foreign_Visa = Convert.ToInt32(_p034.Is_Foreign_Visa);
            businessinternational.Foreign_Visa_Countries = _p034.Foreign_Visa_Countries;
            businessinternational.Foreign_Visa_Quantity = _p034.Foreign_Visa_Quantity;
            businessinternational.Requied_Travel_Insurance = Convert.ToInt32(_p034.Is_Travel_Insurance);
            businessinternational.Travel_Insurance_Countries = _p034.Travel_Insurance_Countries;
            businessinternational.Travel_Insurance_Quantity = _p034.Travel_Insurance_Quantity;
            businessinternational.Required_RentCar = Convert.ToInt32(_p034.Is_RentCar);
            businessinternational.RentCar_Charged_to = _p034.RentCar_Charged_to;
            businessinternational.RentCar_ProjectNo = _p034.RentCar_ProjectNo;
            businessinternational.Car_Type = _p034.Car_Type;
            businessinternational.Car_PickUp_at = _p034.Car_PickUp_at;
            if (_p034.Car_PickUp_date != null)
            {
                try
                {
                    var stringDate = _p034.Car_PickUp_date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Car_PickUp_date_date_string = xx;
                }
                catch
                {
                    var stringDate = _p034.Car_PickUp_date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Car_PickUp_date_date_string = xx;
                }
            }
            businessinternational.Car_PickUp_Time = _p034.Car_PickUp_Time;
            businessinternational.Car_Remark = _p034.Car_Remark;
            businessinternational.Required_Hotel_Booking = Convert.ToInt32(_p034.Is_Hotel);
            businessinternational.HotelBooking_Charged_to = _p034.Hotel_Charged_to;
            businessinternational.Hotel_ProjectNo = _p034.Hotel_ProjectNo;
            businessinternational.Hotel_Name = _p034.Hotel_Name;
            businessinternational.hotel_location = _p034.Hotel_Location;
            businessinternational.Room_Preference = _p034.Room_Preference;
            businessinternational.Type_Of_rooms = _p034.Room_Type;
            businessinternational.HotelBooking_Payment_Type = _p034.Hotel_Payment_Type;
            businessinternational.Hote_Checking_Date = _p034.Hote_Check_In_Date ?? CurrentTime;

            if (_p034.Hote_Check_In_Date != null)
            {
                try
                {
                    var stringDate = _p034.Hote_Check_In_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Hote_Checking_Date_date_string = xx;
                }
                catch
                {
                    var stringDate = _p034.Hote_Check_In_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Hote_Checking_Date_date_string = xx;
                }
            }

            businessinternational.Hotel_Check_In_Time = _p034.Hotel_Check_In_Time;
            if (_p034.Hotel_Check_Out_Date != null)
            {
                try
                {
                    var stringDate = _p034.Hotel_Check_Out_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Hotel_Check_Out_Date_date_string = xx;
                }
                catch
                {
                    var stringDate = _p034.Hotel_Check_Out_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Hotel_Check_Out_Date_date_string = xx;
                }
            }
            businessinternational.Hotel_Check_Out_Time = _p034.Hotel_Check_Out_Time;
            businessinternational.Hotel_Remark = _p034.Hotel_Remark;
            if (_p034.Departure_Date != null)
            {
                try
                {
                    var stringDate = _p034.Departure_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Departure_Date_date_string = xx;
                }
                catch
                {
                    var stringDate = _p034.Departure_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.businessinternational.Departure_Date_date_string = xx;
                }
            }
            businessinternational.Departure_Flight_Number = _p034.Departure_Flight_No;
            businessinternational.Return_Date = _p034.Return_Date ?? CurrentTime;
            businessinternational.Return_Flight_Number = _p034.Return_Flight_No;
            businessinternational.Travel_Routing = _p034.Travel_Routing;
            businessinternational.Note = _p034.Note;
            businessinternational.Cash_Advance = Convert.ToInt32(_p034.Cash_Advance);
            businessinternational.Amex_Holder = Convert.ToInt32(_p034.Amex_Holder);
            businessinternational.Salary_Advance = _p034.Salary_Advance;
            businessinternational.Bank_account = _p034.Bank_account;
            businessinternational.Ticket_Cost = _p034.Ticket_Cost;
            businessinternational.IBAN = _p034.IBAN;
            businessinternational.Hotel_Cost = _p034.Hotel_Cost;
            businessinternational.Daily_allowance = _p034.Daily_allowance;
            businessinternational.Other_Expenses = _p034.Other_Expenses;
            businessinternational.Advance_Remark = _p034.Advance_Remark;
            businessinternational.Travel_Advance_Total = _p034.Travel_Advance_Total;
            businessinternational._dependentsInfo = new List<TA_DependentsInfo>();
            var dependentInfo = _entity.tb_TA_DependentsInfo.Where(x => x.TA_Id == _p034.Id && x.IsActive == true).ToList();
            foreach (var item in dependentInfo)
            {
                TA_DependentsInfo one = new TA_DependentsInfo();
                one.name = item.Name;
                one.relation_ship = item.Relationship;
                one.age = item.Age;
                one.visa_type = item.Visa_Type;
                one.ta_type = item.TA_Type;
                one.remark = item.Remark;
                businessinternational._dependentsInfo.Add(one);
            }
            //businessinternational._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
            //var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.TA_Id == _p034.Id && x.IsActive == true).ToList();
            //foreach (var item in travel)
            //{
            //    TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
            //    one.ticket_number = item.Ticket_Number;
            //    one.ticket_price = item.TicketPrice;
            //    one.issue_date = item.IssueDate;
            //    businessinternational._travelAgencyInfo.Add(one);
            //}
            businessinternational.Ticket_Status = _p034.Ticket_Status ?? 0;
            businessinternational.Business_Days = _p034.Business_Days ?? 0;
            businessinternational.Friday = _p034.Friday ?? 0;
            businessinternational.Saturday = _p034.Saturday ?? 0;
            businessinternational.Total = _p034.Total ?? 0;

            model.businessinternational = businessinternational;


            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == id && x.IsActive == true).FirstOrDefault();
            model.mod_requestid = request.Request_ID;
            model.employeeid = request.Employee_ID;
            model.WF_ID = request.tb_WFType.WF_ID;
            model.wfcreatetype = 1;
            return PartialView("~/Views/Request/_pv_TA_BusinessInternational_Main.cshtml", model);
        }

        //Basheer on 28-05-2020
        public object Submit_TA_Businessinternational(BusinesInternational model)
        {
            bool status = false;
            string msg = "failed";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_TA_Business_International.Create();
                insert_pp_data.RequestId = Convert.ToInt64(data.Item2);
                insert_pp_data.Place_Visit = model.place_to_visit;
                insert_pp_data.Reasons = model.reason;
                insert_pp_data.Remark = model.remark_one;
                insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(model.is_complaince_approval_required);
                if (model.is_complaince_approval_required == 1)
                {
                    if (model.compliance_approval_date.Year != 0001)
                        insert_pp_data.Compliance_Approval_Date = model.compliance_approval_date;
                }
                insert_pp_data.Last_Day_Of_Work = model.last_day_of_work;
                insert_pp_data.Return_To_Duty = model.return_to_duty;
                insert_pp_data.IsDelegated = Convert.ToBoolean(model.workflow_delegated);
                insert_pp_data.Just_No_Delegated = model.justification_no_delegation;
                insert_pp_data.IsVideo_Conference = Convert.ToBoolean(model.possible_video_conference);
                insert_pp_data.Just_No_Video = model.justification_for_no_video_conference;
                insert_pp_data.Address_During_Absence = model.address_during_absence;
                insert_pp_data.Telephone_No = model.telephone;
                insert_pp_data.Travel_Mode = model.mode_of_travel;
                insert_pp_data.Location_Id = model.location_id;
                insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(model.required_exit_visa);
                insert_pp_data.Visa_Charged_to = model.travel_visa_charged_to;
                insert_pp_data.Type_Exit_ReEntry_Visa = model.type_of_exit_visa;//Basheer on 26-06-2020
                insert_pp_data.Visa_duration = model.visa_duration;//Basheer on 26-06-2020
                insert_pp_data.Visa_with = model.visa_with;//Basheer on 26-06-2020
                insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(model.required_foreign_visa);
                insert_pp_data.Foreign_Visa_Countries = model.foreign_visa_countries;
                insert_pp_data.Foreign_Visa_Quantity = model.foreign_visa_quantity;
                insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(model.required_travel_insurance);
                insert_pp_data.Travel_Insurance_Countries = model.travel_insurance_countries;
                insert_pp_data.Travel_Insurance_Quantity = model.travel_insurance_quantity;
                insert_pp_data.Is_RentCar = Convert.ToBoolean(model.required_rent_car);
                insert_pp_data.RentCar_Charged_to = model.rent_car_charged_to;
                insert_pp_data.RentCar_ProjectNo = model.rent_car_project_no;
                insert_pp_data.Car_Type = model.car_type;
                insert_pp_data.Car_PickUp_at = model.rent_car_picked_up_at;
                if (model.rent_car_pick_up_date.Year != 001)
                    insert_pp_data.Car_PickUp_date = model.rent_car_pick_up_date;
                insert_pp_data.Car_PickUp_Time = model.rent_car_pick_up_time;
                insert_pp_data.Car_Payment_Type = model.rent_car_payment_type;
                if (model.rent_car_return_date.Year != 0001)
                    insert_pp_data.Car_Return_date = model.rent_car_return_date;
                insert_pp_data.Car_Return_Time = model.rent_car_return_time;
                insert_pp_data.Car_Remark = model.rent_car_remark;
                insert_pp_data.Is_Hotel = Convert.ToBoolean(model.required_hotel_booking);
                insert_pp_data.Hotel_Charged_to = model.hotel_booking_charged_to;
                insert_pp_data.Hotel_ProjectNo = model.hptel_booking_project_no;
                insert_pp_data.Hotel_Name = model.hotel_name;
                insert_pp_data.Room_Type = model.type_of_room;
                insert_pp_data.Hotel_Location = model.hotel_location;
                insert_pp_data.Room_Preference = model.room_preferences;
                insert_pp_data.Number_Of_Rooms = model.number_of_rooms;
                insert_pp_data.Hotel_Payment_Type = model.hotel_booking_payment_mode;
                insert_pp_data.IBAN = model.iban;
                if (model.hotel_booking_check_in_date.Year != 0001)
                    insert_pp_data.Hote_Check_In_Date = model.hotel_booking_check_in_date;
                insert_pp_data.Hotel_Check_In_Time = model.hotel_check_in_time;
                if (model.hotel_booking_check_out_date.Year != 0001)
                    insert_pp_data.Hotel_Check_Out_Date = model.hotel_booking_check_out_date;
                insert_pp_data.Hotel_Check_Out_Time = model.hotel_check_out_time;
                insert_pp_data.Hotel_Remark = model.hotel_booking_remark;
                if (model.departure_date.Year != 0001)
                    insert_pp_data.Departure_Date = model.departure_date;
                insert_pp_data.Departure_Flight_No = model.departure_flight_number;
                if (model.return_date.Year != 0001)
                    insert_pp_data.Return_Date = model.return_date;
                insert_pp_data.Return_Flight_No = model.return_flight_number;
                insert_pp_data.Travel_Routing = model.travel_routing;
                insert_pp_data.Note = model.note;
                insert_pp_data.Cash_Advance = Convert.ToBoolean(model.cash_advance);
                insert_pp_data.Amex_Holder = Convert.ToBoolean(model.amx_holder);
                insert_pp_data.Salary_Advance = model.salary_advance;
                insert_pp_data.Bank_account = model.bank_account;
                insert_pp_data.Ticket_Cost = model.ticket_cost;
                insert_pp_data.Daily_allowance = model.daily_allowance;
                insert_pp_data.Other_Expenses = model.other_expenses;
                insert_pp_data.Hotel_Cost = model.hotel_cost;
                insert_pp_data.Advance_Remark = model.travel_advance_remark;
                insert_pp_data.Travel_Advance_Total = model.travel_advance_total;
                insert_pp_data.Revalidation_Charge = model.revalidation_charge;
                insert_pp_data.Total_Ticket_Price = model.total_ticket_price;
                insert_pp_data.Ticket_Status = model.over_all_ticket_status;
                insert_pp_data.Business_Days = model.busines_days;
                insert_pp_data.Friday = model.fiday;
                insert_pp_data.Saturday = model.saturday;
                insert_pp_data.Total = model.total_days;
                insert_pp_data.Type_Of_Ticket = model.type_of_ticket; //basheer on 26-06-2020
                insert_pp_data.Type_Of_Ticket = model.type_of_ticket; //basheer on 26-06-2020
                insert_pp_data.Type_Of_Ticket = model.type_of_ticket; //basheer on 26-06-2020
                if (model.required_rent_car == 1)
                {
                    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (model.required_hotel_booking == 1)
                {
                    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (model.mode_of_travel != "Air")
                {
                    insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);//26-06-2020 Basheer
                }
                else
                {
                    insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied); //26-06-2020 Basheer
                }
                if (model.cash_advance == 1)
                {
                    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (model.required_exit_visa == 1)
                {
                    insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (model.required_foreign_visa == 1)
                {
                    insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (model.required_travel_insurance == 1)
                {
                    insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;
                _entity.tb_TA_Business_International.Add(insert_pp_data);
                try
                {
                    status = _entity.SaveChanges() > 0;
                }
                catch (Exception ex)
                {

                }
                #region Keep AuditLog_p034
                if (status)
                {
                    string request_id = insert_pp_data.RequestId.ToString();
                    string record = model.place_to_visit + " || " + model.reason + " || " + model.remark_one + " || " + model.is_complaince_approval_required + " || " + model.compliance_approval_date +
    " || " + model.last_day_of_work + " || " + model.return_to_duty + " || " + model.workflow_delegated + " || " + model.justification_no_delegation +
    " || " + model.possible_video_conference + " || " + model.justification_for_no_video_conference + " || " + model.address_during_absence +
    " || " + model.telephone + " || " + model.mode_of_travel + " || " + model.location_id + " || " + model.required_exit_visa +
    " || " + model.travel_visa_charged_to + " || " + model.required_foreign_visa + " || " + model.foreign_visa_countries +
    " || " + model.foreign_visa_quantity + " || " + model.required_travel_insurance + " || " + model.travel_insurance_countries + " || " + model.travel_insurance_quantity +
    " || " + model.required_rent_car + " || " + model.rent_car_charged_to + " || " + model.rent_car_project_no +
    " || " + model.car_type + " || " + model.rent_car_picked_up_at + " || " + model.rent_car_pick_up_date + " || " + model.rent_car_pick_up_time +
    " || " + model.travel_visa_charged_to + " || " + model.rent_car_return_date + " || " + model.rent_car_return_time +
    " || " + model.rent_car_remark + " || " + model.required_hotel_booking + " || " + model.hotel_booking_charged_to +
    " || " + model.hptel_booking_project_no + " || " + model.hotel_name + " || " + model.type_of_room +
    " || " + model.hotel_location + " || " + model.room_preferences + " || " + model.number_of_rooms +
    " || " + model.hotel_booking_payment_mode + " || " + model.iban + " || " + model.hotel_booking_check_in_date + " || " + model.hotel_check_in_time +
    " || " + model.hotel_booking_check_out_date + " || " + model.hotel_check_out_time + " || " + model.hotel_booking_remark +
    " || " + model.departure_date + " || " + model.departure_flight_number + " || " + model.return_date +
    " || " + model.return_flight_number + " || " + model.travel_routing + " || " + model.note +
    " || " + model.cash_advance + " || " + model.amx_holder + " || " + model.salary_advance +
    " || " + model.bank_account + " || " + model.ticket_cost + " || " + model.daily_allowance +
    " || " + model.other_expenses + " || " + model.travel_advance_remark + " || " + model.travel_advance_total + " || " + model.revalidation_charge +
    " || " + model.total_ticket_price + " || " + model.over_all_ticket_status + " || " + model.busines_days +
    " || " + model.fiday + " || " + model.saturday + " || " + model.total_days + " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
    " || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
    " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_Business_International", request_id, "INITIATOR");
                }
                #endregion Keep AuditLog_p034

                #region old processor saving

                //if (status)
                //{
                //    #region Processers saving
                //    long? locationid = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault().Location_Id;
                //    if (model.required_hotel_booking == 1)
                //    {
                //        string region = _entity.tb_Location.Where(x => x.IsActive && x.Location_Id == locationid).FirstOrDefault().Region;
                //        if (region == "EAST")
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-EAST" && x.Service == "HOTEL").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);
                //            status = _entity.SaveChanges() > 0;
                //        }
                //        else if (region == "WEST")
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-WEST" && x.Service == "HOTEL").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);

                //            status = _entity.SaveChanges() > 0;
                //        }
                //        else
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-CENTRAL" && x.Service == "HOTEL").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);
                //            status = _entity.SaveChanges() > 0;
                //        }


                //    }
                //    if (model.required_rent_car == 1)
                //    {
                //        string region = _entity.tb_Location.Where(x => x.IsActive && x.Location_Id == locationid).FirstOrDefault().Region;
                //        if (region == "EAST")
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-EAST" && x.Service == "RENTCAR").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);
                //            status = _entity.SaveChanges() > 0;
                //        }
                //        else if (region == "WEST")
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-WEST" && x.Service == "RENTCAR").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);
                //            status = _entity.SaveChanges() > 0;
                //        }
                //        else
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-CENTRAL" && x.Service == "RENTCAR").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);
                //            status = _entity.SaveChanges() > 0;
                //        }


                //    }
                //    if (model.cash_advance == 1)
                //    {
                //        var insert_process_data = _entity.tb_ProcessHdr.Create();
                //        var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "SHAREDACCOUNT" && x.Service == "CASHADVANCE").FirstOrDefault();
                //        insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //        insert_process_data.RoleId = info.RoleId;
                //        insert_process_data.Button_List = info.ButtonList;
                //        insert_process_data.IsCompleted = false;
                //        insert_process_data.IsActive = true;
                //        insert_process_data.TimeStamp = CurrentTime;
                //        _entity.tb_ProcessHdr.Add(insert_process_data);
                //        status = _entity.SaveChanges() > 0;
                //    }
                //    if (model.required_travel_insurance == 1)
                //    {
                //        var insert_process_data = _entity.tb_ProcessHdr.Create();
                //        var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "GOVRELOFFS" && x.Service == "TRAVELINSURANCE").FirstOrDefault();
                //        insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //        insert_process_data.RoleId = info.RoleId;
                //        insert_process_data.Button_List = info.ButtonList;
                //        insert_process_data.IsCompleted = false;
                //        insert_process_data.IsActive = true;
                //        insert_process_data.TimeStamp = CurrentTime;
                //        _entity.tb_ProcessHdr.Add(insert_process_data);
                //        status = _entity.SaveChanges() > 0;
                //    }
                //    if (model.required_exit_visa == 1)
                //    {
                //        var insert_process_data = _entity.tb_ProcessHdr.Create();
                //        var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "GOVRELOFFS" && x.Service == "EXITENTRY").FirstOrDefault();
                //        insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //        insert_process_data.RoleId = info.RoleId;
                //        insert_process_data.Button_List = info.ButtonList;
                //        insert_process_data.IsCompleted = false;
                //        insert_process_data.IsActive = true;
                //        insert_process_data.TimeStamp = CurrentTime;
                //        _entity.tb_ProcessHdr.Add(insert_process_data);
                //        status = _entity.SaveChanges() > 0;
                //    }
                //    if (model.required_foreign_visa == 1)
                //    {
                //        var insert_process_data = _entity.tb_ProcessHdr.Create();
                //        var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "GOVRELOFFS" && x.Service == "FOREGIN").FirstOrDefault();
                //        insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //        insert_process_data.RoleId = info.RoleId;
                //        insert_process_data.Button_List = info.ButtonList;
                //        insert_process_data.IsCompleted = false;
                //        insert_process_data.IsActive = true;
                //        insert_process_data.TimeStamp = CurrentTime;
                //        _entity.tb_ProcessHdr.Add(insert_process_data);
                //        status = _entity.SaveChanges() > 0;

                //    }
                //    if (model.mode_of_travel != "Air")
                //    {
                //        string region = _entity.tb_Location.Where(x => x.IsActive && x.Location_Id == locationid).FirstOrDefault().Region;
                //        if (region == "EAST")
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "TRAVEL-EAST" && x.Service == "TICKET").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);
                //            status = _entity.SaveChanges() > 0;
                //        }
                //        else if (region == "WEST")
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "TRAVEL-WEST" && x.Service == "TICKET").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);
                //            status = _entity.SaveChanges() > 0;
                //        }
                //        else
                //        {
                //            var insert_process_data = _entity.tb_ProcessHdr.Create();
                //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "TRAVEL-CENTRAL" && x.Service == "TICKET").FirstOrDefault();
                //            insert_process_data.RequestId = Convert.ToInt32(data.Item2);
                //            insert_process_data.RoleId = info.RoleId;
                //            insert_process_data.Button_List = info.ButtonList;
                //            insert_process_data.IsCompleted = false;
                //            insert_process_data.IsActive = true;
                //            insert_process_data.TimeStamp = CurrentTime;
                //            _entity.tb_ProcessHdr.Add(insert_process_data);
                //            status = _entity.SaveChanges() > 0;
                //        }

                //    }


                //    #endregion Processers saving end
                //}

                #endregion
                #region attachments           

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList();
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                //Basheer code end here
                #endregion 

                if (status)
                {
                    #region  Dependents Information
                    if (model.dependents_name == string.Empty || model.dependents_name == null)
                    {
                    }
                    else
                    {
                        string[] depe_name = model.dependents_name.Split('~');
                        string[] depe_relation = model.dependents_relation.Split('~');
                        string[] depe_age = model.dependents_age.Split('~');
                        string[] depe_visa_type = model.dependents_visa_type.Split('~');
                        string[] depe_ta_type = model.dependents_ta_type.Split('~');
                        string[] depe_remark = { };
                        if (model.dependents_remarks == null)
                        {

                        }
                        else
                        {
                            depe_remark = model.dependents_remarks.Split('~');
                        }
                        for (int i = 0; i < depe_name.Count(); i++)
                        {
                            if (depe_name[i] != "")
                            {
                                var dep = _entity.tb_TA_DependentsInfo.Create();
                                dep.TA_Id = insert_pp_data.Id;
                                dep.Name = depe_name[i];
                                if (depe_relation.Count() < depe_name.Count())
                                {
                                    dep.Relationship = "";
                                }
                                else
                                {
                                    dep.Relationship = depe_relation[i];
                                }
                                if (depe_age.Count() < depe_name.Count())
                                {
                                    dep.Age = "";
                                }
                                else
                                {
                                    dep.Age = depe_age[i];
                                }
                                if (depe_visa_type.Count() < depe_name.Count())
                                {
                                    dep.Visa_Type = "";
                                }
                                else
                                {
                                    dep.Visa_Type = depe_visa_type[i];
                                }
                                if (depe_ta_type.Count() < depe_name.Count())
                                {
                                    dep.TA_Type = "";
                                }
                                else
                                {
                                    dep.TA_Type = depe_ta_type[i];
                                }
                                if (model.dependents_remarks == null)
                                {

                                }
                                else
                                {
                                    if (depe_remark.Count() < depe_name.Count())
                                    {
                                        dep.Remark = "";
                                    }
                                    else
                                    {
                                        dep.Remark = depe_remark[i];
                                    }
                                }
                                dep.IsActive = true;
                                dep.TimeStamp = CurrentTime;
                                _entity.tb_TA_DependentsInfo.Add(dep);
                                status = _entity.SaveChanges() > 0;
                                #region Keep AuditLog_p034
                                if (status)
                                {
                                    if (model.dependents_remarks == null)
                                    {
                                        string request_id = insert_pp_data.RequestId.ToString();
                                        string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_DependentsInfo", request_id, "INITIATOR");
                                    }
                                    else
                                    {
                                        string request_id = insert_pp_data.RequestId.ToString();
                                        string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_DependentsInfo", request_id, "INITIATOR");
                                    }
                                }
                                #endregion Keep AuditLog_p034
                            }
                        }
                    }
                    #endregion
                }
                #endregion
            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_Edit_TA_Businessinternational(BusinesInternational model)
        {
            bool status = false;
            string msg = "failed";
            long req_id = Convert.ToInt64(model.request_id);
            #region Store Request Data
            msg = "Success";
            var insert_pp_data = _entity.tb_TA_Business_International.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            insert_pp_data.Place_Visit = model.place_to_visit;
            insert_pp_data.Reasons = model.reason;
            insert_pp_data.Remark = model.remark_one;

            insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(model.is_complaince_approval_required);
            if (model.is_complaince_approval_required == 1)
            {
                if (model.compliance_approval_date.Year != 0001)
                    insert_pp_data.Compliance_Approval_Date = model.compliance_approval_date;
            }
            insert_pp_data.Last_Day_Of_Work = model.last_day_of_work;
            insert_pp_data.Return_To_Duty = model.return_to_duty;
            insert_pp_data.IsDelegated = Convert.ToBoolean(model.workflow_delegated);
            insert_pp_data.Just_No_Delegated = model.justification_no_delegation;
            insert_pp_data.IsVideo_Conference = Convert.ToBoolean(model.possible_video_conference);
            insert_pp_data.Just_No_Video = model.justification_for_no_video_conference;
            insert_pp_data.Address_During_Absence = model.address_during_absence;
            insert_pp_data.Telephone_No = model.telephone;
            insert_pp_data.Travel_Mode = model.mode_of_travel;
            insert_pp_data.Location_Id = model.location_id;
            insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(model.required_exit_visa);
            insert_pp_data.Visa_Charged_to = model.travel_visa_charged_to;
            insert_pp_data.Type_Exit_ReEntry_Visa = model.type_of_exit_visa;//Basheer on 26-06-2020
            insert_pp_data.Visa_duration = model.visa_duration;//Basheer on 26-06-2020
            insert_pp_data.Visa_with = model.visa_with;//Basheer on 26-06-2020
            insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(model.required_foreign_visa);
            insert_pp_data.Foreign_Visa_Countries = model.foreign_visa_countries;
            insert_pp_data.Foreign_Visa_Quantity = model.foreign_visa_quantity;
            insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(model.required_travel_insurance);
            insert_pp_data.Travel_Insurance_Countries = model.travel_insurance_countries;
            insert_pp_data.Travel_Insurance_Quantity = model.travel_insurance_quantity;
            insert_pp_data.Is_RentCar = Convert.ToBoolean(model.required_rent_car);
            insert_pp_data.RentCar_Charged_to = model.rent_car_charged_to;
            insert_pp_data.RentCar_ProjectNo = model.rent_car_project_no;

            insert_pp_data.Car_Type = model.car_type;
            insert_pp_data.Car_PickUp_at = model.rent_car_picked_up_at;
            if (model.rent_car_pick_up_date.Year != 001)
                insert_pp_data.Car_PickUp_date = model.rent_car_pick_up_date;
            insert_pp_data.Car_PickUp_Time = model.rent_car_pick_up_time;
            insert_pp_data.Car_Payment_Type = model.rent_car_payment_type;
            if (model.rent_car_return_date.Year != 0001)
                insert_pp_data.Car_Return_date = model.rent_car_return_date;
            insert_pp_data.Car_Return_Time = model.rent_car_return_time;
            insert_pp_data.Car_Remark = model.rent_car_remark;
            insert_pp_data.Is_Hotel = Convert.ToBoolean(model.required_hotel_booking);
            insert_pp_data.Hotel_Charged_to = model.hotel_booking_charged_to;
            insert_pp_data.Hotel_ProjectNo = model.hptel_booking_project_no;
            insert_pp_data.Hotel_Name = model.hotel_name;
            insert_pp_data.Room_Type = model.type_of_room;
            insert_pp_data.Hotel_Location = model.hotel_location;
            insert_pp_data.Room_Preference = model.room_preferences;
            insert_pp_data.Number_Of_Rooms = model.number_of_rooms;
            insert_pp_data.Hotel_Payment_Type = model.hotel_booking_payment_mode;
            insert_pp_data.IBAN = model.iban;
            if (model.hotel_booking_check_in_date.Year != 0001)
                insert_pp_data.Hote_Check_In_Date = model.hotel_booking_check_in_date;
            insert_pp_data.Hotel_Check_In_Time = model.hotel_check_in_time;
            if (model.hotel_booking_check_out_date.Year != 0001)
                insert_pp_data.Hotel_Check_Out_Date = model.hotel_booking_check_out_date;
            insert_pp_data.Hotel_Check_Out_Time = model.hotel_check_out_time;
            insert_pp_data.Hotel_Remark = model.hotel_booking_remark;
            if (model.departure_date.Year != 0001)
                insert_pp_data.Departure_Date = model.departure_date;
            insert_pp_data.Departure_Flight_No = model.departure_flight_number;
            if (model.return_date.Year != 0001)
                insert_pp_data.Return_Date = model.return_date;
            insert_pp_data.Return_Flight_No = model.return_flight_number;
            insert_pp_data.Travel_Routing = model.travel_routing;
            insert_pp_data.Note = model.note;
            insert_pp_data.Cash_Advance = Convert.ToBoolean(model.cash_advance);
            insert_pp_data.Amex_Holder = Convert.ToBoolean(model.amx_holder);
            insert_pp_data.Salary_Advance = model.salary_advance;
            insert_pp_data.Bank_account = model.bank_account;
            insert_pp_data.Ticket_Cost = model.ticket_cost;
            insert_pp_data.Daily_allowance = model.daily_allowance;
            insert_pp_data.Other_Expenses = model.other_expenses;
            insert_pp_data.Hotel_Cost = model.hotel_cost;
            insert_pp_data.Advance_Remark = model.travel_advance_remark;
            insert_pp_data.Travel_Advance_Total = model.travel_advance_total;
            insert_pp_data.Revalidation_Charge = model.revalidation_charge;
            insert_pp_data.Total_Ticket_Price = model.total_ticket_price;
            insert_pp_data.Ticket_Status = model.over_all_ticket_status;
            insert_pp_data.Business_Days = model.busines_days;
            insert_pp_data.Friday = model.fiday;
            insert_pp_data.Saturday = model.saturday;
            insert_pp_data.Total = model.total_days;
            insert_pp_data.Type_Of_Ticket = model.type_of_ticket;




            if (model.required_rent_car == 1)
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.required_hotel_booking == 1)
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.mode_of_travel != "Air")
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            else
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            if (model.cash_advance == 1)
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.required_exit_visa == 1)
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.required_foreign_visa == 1)
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.required_travel_insurance == 1)
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            insert_pp_data.IsActive = true;
            insert_pp_data.TimeStamp = CurrentTime;
            status = _entity.SaveChanges() > 0; //26-06-2020 Basheer

            #region Keep AuditLog_p034
            if (status)
            {
                string request_id = insert_pp_data.RequestId.ToString();
                string record = model.place_to_visit + " || " + model.reason + " || " + model.remark_one + " || " + model.is_complaince_approval_required + " || " + model.compliance_approval_date +
" || " + model.last_day_of_work + " || " + model.return_to_duty + " || " + model.workflow_delegated + " || " + model.justification_no_delegation +
" || " + model.possible_video_conference + " || " + model.justification_for_no_video_conference + " || " + model.address_during_absence +
" || " + model.telephone + " || " + model.mode_of_travel + " || " + model.location_id + " || " + model.required_exit_visa +
" || " + model.travel_visa_charged_to + " || " + model.required_foreign_visa + " || " + model.foreign_visa_countries +
" || " + model.foreign_visa_quantity + " || " + model.required_travel_insurance + " || " + model.travel_insurance_countries + " || " + model.travel_insurance_quantity +
" || " + model.required_rent_car + " || " + model.rent_car_charged_to + " || " + model.rent_car_project_no +
" || " + model.car_type + " || " + model.rent_car_picked_up_at + " || " + model.rent_car_pick_up_date + " || " + model.rent_car_pick_up_time +
" || " + model.travel_visa_charged_to + " || " + model.rent_car_return_date + " || " + model.rent_car_return_time +
" || " + model.rent_car_remark + " || " + model.required_hotel_booking + " || " + model.hotel_booking_charged_to +
" || " + model.hptel_booking_project_no + " || " + model.hotel_name + " || " + model.type_of_room +
" || " + model.hotel_location + " || " + model.room_preferences + " || " + model.number_of_rooms +
" || " + model.hotel_booking_payment_mode + " || " + model.iban + " || " + model.hotel_booking_check_in_date + " || " + model.hotel_check_in_time +
" || " + model.hotel_booking_check_out_date + " || " + model.hotel_check_out_time + " || " + model.hotel_booking_remark +
" || " + model.departure_date + " || " + model.departure_flight_number + " || " + model.return_date +
" || " + model.return_flight_number + " || " + model.travel_routing + " || " + model.note +
" || " + model.cash_advance + " || " + model.amx_holder + " || " + model.salary_advance +
" || " + model.bank_account + " || " + model.ticket_cost + " || " + model.daily_allowance +
" || " + model.other_expenses + " || " + model.travel_advance_remark + " || " + model.travel_advance_total + " || " + model.revalidation_charge +
" || " + model.total_ticket_price + " || " + model.over_all_ticket_status + " || " + model.busines_days +
" || " + model.fiday + " || " + model.saturday + " || " + model.total_days + " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
" || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
" || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_Business_International", request_id, "INITIATOR");
            }
            #endregion Keep AuditLog_p055

            #region old processor saving

            //if (status)
            //{
            //    long? locationid = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault().Location_Id;
            //    #region Processers saving

            //    var existingprocess = _entity.tb_ProcessHdr.Where(x => x.RequestId == req_id && x.IsActive == true).ToList();
            //    if (existingprocess != null)
            //    {
            //        foreach (var item in existingprocess)
            //        {
            //            item.IsActive = false;
            //            status = _entity.SaveChanges() > 0;
            //        }
            //    }

            //    if (model.required_hotel_booking == 1)
            //    {

            //        string region = _entity.tb_Location.Where(x => x.IsActive && x.Location_Id == locationid).FirstOrDefault().Region;
            //        if (region == "EAST")
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-EAST" && x.Service == "HOTEL").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }
            //        else if (region == "WEST")
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-WEST" && x.Service == "HOTEL").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }
            //        else
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-CENTRAL" && x.Service == "HOTEL").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }


            //    }
            //    if (model.required_rent_car == 1)
            //    {
            //        string region = _entity.tb_Location.Where(x => x.IsActive && x.Location_Id == locationid).FirstOrDefault().Region;
            //        if (region == "EAST")
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-EAST" && x.Service == "RENTCAR").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }
            //        else if (region == "WEST")
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-WEST" && x.Service == "RENTCAR").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }
            //        else
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "HRADMIN-CENTRAL" && x.Service == "RENTCAR").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }


            //    }
            //    if (model.cash_advance == 1)
            //    {
            //        var insert_process_data = _entity.tb_ProcessHdr.Create();
            //        var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "SHAREDACCOUNT" && x.Service == "CASHADVANCE").FirstOrDefault();
            //        insert_process_data.RequestId = Convert.ToInt32(req_id);
            //        insert_process_data.RoleId = info.RoleId;
            //        insert_process_data.Button_List = info.ButtonList;
            //        insert_process_data.IsCompleted = false;
            //        insert_process_data.IsActive = true;
            //        insert_process_data.TimeStamp = CurrentTime;
            //        _entity.tb_ProcessHdr.Add(insert_process_data);
            //        status = _entity.SaveChanges() > 0;
            //    }
            //    if (model.required_travel_insurance == 1)
            //    {
            //        var insert_process_data = _entity.tb_ProcessHdr.Create();
            //        var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "GOVRELOFFS" && x.Service == "TRAVELINSURANCE").FirstOrDefault();
            //        insert_process_data.RequestId = Convert.ToInt32(req_id);
            //        insert_process_data.RoleId = info.RoleId;
            //        insert_process_data.Button_List = info.ButtonList;
            //        insert_process_data.IsCompleted = false;
            //        insert_process_data.IsActive = true;
            //        insert_process_data.TimeStamp = CurrentTime;
            //        _entity.tb_ProcessHdr.Add(insert_process_data);
            //        status = _entity.SaveChanges() > 0;
            //    }
            //    if (model.required_exit_visa == 1)
            //    {
            //        var insert_process_data = _entity.tb_ProcessHdr.Create();
            //        var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "GOVRELOFFS" && x.Service == "EXITENTRY").FirstOrDefault();
            //        insert_process_data.RequestId = Convert.ToInt32(req_id);
            //        insert_process_data.RoleId = info.RoleId;
            //        insert_process_data.Button_List = info.ButtonList;
            //        insert_process_data.IsCompleted = false;
            //        insert_process_data.IsActive = true;
            //        insert_process_data.TimeStamp = CurrentTime;
            //        _entity.tb_ProcessHdr.Add(insert_process_data);
            //        status = _entity.SaveChanges() > 0;
            //    }
            //    if (model.required_foreign_visa == 1)
            //    {
            //        var insert_process_data = _entity.tb_ProcessHdr.Create();
            //        var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "GOVRELOFFS" && x.Service == "FOREGIN").FirstOrDefault();
            //        insert_process_data.RequestId = Convert.ToInt32(req_id);
            //        insert_process_data.RoleId = info.RoleId;
            //        insert_process_data.Button_List = info.ButtonList;
            //        insert_process_data.IsCompleted = false;
            //        insert_process_data.IsActive = true;
            //        insert_process_data.TimeStamp = CurrentTime;
            //        _entity.tb_ProcessHdr.Add(insert_process_data);
            //        status = _entity.SaveChanges() > 0;
            //    }
            //    if (model.mode_of_travel != "Air")
            //    {
            //        string region = _entity.tb_Location.Where(x => x.IsActive && x.Location_Id == locationid).FirstOrDefault().Region;
            //        if (region == "EAST")
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "TRAVEL-EAST" && x.Service == "TICKET").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }
            //        else if (region == "WEST")
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "TRAVEL-WEST" && x.Service == "TICKET").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }
            //        else
            //        {
            //            var insert_process_data = _entity.tb_ProcessHdr.Create();
            //            var info = _entity.tb_ServiceButtonList.Where(x => x.RoleId == "TRAVEL-CENTRAL" && x.Service == "TICKET").FirstOrDefault();
            //            insert_process_data.RequestId = Convert.ToInt32(req_id);
            //            insert_process_data.RoleId = info.RoleId;
            //            insert_process_data.Button_List = info.ButtonList;
            //            insert_process_data.IsCompleted = false;
            //            insert_process_data.IsActive = true;
            //            insert_process_data.TimeStamp = CurrentTime;
            //            _entity.tb_ProcessHdr.Add(insert_process_data);
            //            status = _entity.SaveChanges() > 0;
            //        }

            //    }


            //    #endregion Processers saving end
            //}

            #endregion

            if (status)
            {
                #region  Dependents Information
                if (model.dependents_name == string.Empty || model.dependents_name == null) //26-06-2020 Basheer
                {
                }
                else
                {
                    var depp = _entity.tb_TA_DependentsInfo.Where(x => x.TA_Id == insert_pp_data.Id).ToList();
                    foreach (var item in depp)
                    {
                        _entity.tb_TA_DependentsInfo.Remove(item);
                        _entity.SaveChanges();
                    }

                    string[] depe_name = model.dependents_name.Split('~');
                    string[] depe_relation = model.dependents_relation.Split('~');
                    string[] depe_age = model.dependents_age.Split('~');
                    string[] depe_visa_type = model.dependents_visa_type.Split('~');
                    string[] depe_ta_type = model.dependents_ta_type.Split('~');
                    string[] depe_remark = null;
                    if (model.dependents_remarks == null)
                    {

                    }
                    else
                    {
                        depe_remark = model.dependents_remarks.Split('~');
                    }
                    for (int i = 0; i < depe_name.Count(); i++)
                    {
                        if (depe_name[i] != "")
                        {
                            var dep = _entity.tb_TA_DependentsInfo.Create();
                            dep.TA_Id = insert_pp_data.Id;
                            dep.Name = depe_name[i];
                            if (depe_relation.Count() < depe_name.Count())
                            {
                                dep.Relationship = "";
                            }
                            else
                            {
                                dep.Relationship = depe_relation[i];
                            }
                            if (depe_age.Count() < depe_name.Count())
                            {
                                dep.Age = "";
                            }
                            else
                            {
                                dep.Age = depe_age[i];
                            }
                            if (depe_visa_type.Count() < depe_name.Count())
                            {
                                dep.Visa_Type = "";
                            }
                            else
                            {
                                dep.Visa_Type = depe_visa_type[i];
                            }
                            if (depe_ta_type.Count() < depe_name.Count())
                            {
                                dep.TA_Type = "";
                            }
                            else
                            {
                                dep.TA_Type = depe_ta_type[i];
                            }
                            if (model.dependents_remarks == null)
                            {

                            }
                            else
                            {
                                if (depe_remark.Count() < depe_name.Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().Count()) //Basheer on 07-07-2020
                                {
                                    dep.Remark = "";
                                }
                                else
                                {
                                    dep.Remark = depe_remark[i];
                                }
                            }
                            dep.IsActive = true;
                            dep.TimeStamp = CurrentTime;
                            _entity.tb_TA_DependentsInfo.Add(dep);
                            status = _entity.SaveChanges() > 0;

                            #region Keep AuditLog_p034
                            if (status)
                            {
                                if (model.dependents_remarks == null)
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_DependentsInfo", request_id, "INITIATOR");
                                }
                                else
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_DependentsInfo", request_id, "INITIATOR");
                                }
                            }
                            #endregion Keep AuditLog_p034
                        }
                    }
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");
                    }
                }
                #endregion
            }

            #region attachment edit

            if (status && model._FileList != null && model._FileList.Count > 0)
            {
                string reqid = req_id.ToString();
                if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == reqid && x.IsActive == true && x.filebatch == 2).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = reqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";

                }
                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == reqid && x.IsActive == true && x.filebatch == 1).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = reqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }
            }
            #endregion attachment edit

            #endregion
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Submit_Edit_TA_Businessinternational_Approver(BusinesInternational model) //26-06-2020
        {
            bool status = false;
            string msg = "failed";
            long req_id = Convert.ToInt64(model.request_id);
            #region Store Request Data
            msg = "Success";
            var insert_pp_data = _entity.tb_TA_Business_International.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            insert_pp_data.Place_Visit = model.place_to_visit;
            insert_pp_data.Reasons = model.reason;
            insert_pp_data.Remark = model.remark_one;
            insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(model.is_complaince_approval_required);
            if (model.is_complaince_approval_required == 1)
            {
                if (model.compliance_approval_date.Year != 0001)
                    insert_pp_data.Compliance_Approval_Date = model.compliance_approval_date;
            }
            insert_pp_data.Last_Day_Of_Work = model.last_day_of_work;
            insert_pp_data.Return_To_Duty = model.return_to_duty;
            insert_pp_data.IsDelegated = Convert.ToBoolean(model.workflow_delegated);
            insert_pp_data.Just_No_Delegated = model.justification_no_delegation;
            insert_pp_data.IsVideo_Conference = Convert.ToBoolean(model.possible_video_conference);
            insert_pp_data.Just_No_Video = model.justification_for_no_video_conference;
            insert_pp_data.Address_During_Absence = model.address_during_absence;
            insert_pp_data.Telephone_No = model.telephone;
            insert_pp_data.Travel_Mode = model.mode_of_travel;
            insert_pp_data.Location_Id = model.location_id;
            insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(model.required_exit_visa);
            insert_pp_data.Visa_Charged_to = model.travel_visa_charged_to;
            insert_pp_data.Type_Exit_ReEntry_Visa = model.type_of_exit_visa;//Basheer on 26-06-2020
            insert_pp_data.Visa_duration = model.visa_duration;//Basheer on 26-06-2020
            insert_pp_data.Visa_with = model.visa_with;//Basheer on 26-06-2020
            insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(model.required_foreign_visa);
            insert_pp_data.Foreign_Visa_Countries = model.foreign_visa_countries;
            insert_pp_data.Foreign_Visa_Quantity = model.foreign_visa_quantity;
            insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(model.required_travel_insurance);
            insert_pp_data.Travel_Insurance_Countries = model.travel_insurance_countries;
            insert_pp_data.Travel_Insurance_Quantity = model.travel_insurance_quantity;
            insert_pp_data.Is_RentCar = Convert.ToBoolean(model.required_rent_car);
            insert_pp_data.RentCar_Charged_to = model.rent_car_charged_to;
            insert_pp_data.RentCar_ProjectNo = model.rent_car_project_no;
            insert_pp_data.Car_Type = model.car_type;
            insert_pp_data.Car_PickUp_at = model.rent_car_picked_up_at;
            if (model.rent_car_pick_up_date.Year != 001)
                insert_pp_data.Car_PickUp_date = model.rent_car_pick_up_date;
            insert_pp_data.Car_PickUp_Time = model.rent_car_pick_up_time;
            insert_pp_data.Car_Payment_Type = model.rent_car_payment_type;
            if (model.rent_car_return_date.Year != 0001)
                insert_pp_data.Car_Return_date = model.rent_car_return_date;
            insert_pp_data.Car_Return_Time = model.rent_car_return_time;
            insert_pp_data.Car_Remark = model.rent_car_remark;
            insert_pp_data.Is_Hotel = Convert.ToBoolean(model.required_hotel_booking);
            insert_pp_data.Hotel_Charged_to = model.hotel_booking_charged_to;
            insert_pp_data.Hotel_ProjectNo = model.hptel_booking_project_no;
            insert_pp_data.Hotel_Name = model.hotel_name;
            insert_pp_data.Room_Type = model.type_of_room;
            insert_pp_data.Hotel_Location = model.hotel_location;
            insert_pp_data.Room_Preference = model.room_preferences;
            insert_pp_data.Number_Of_Rooms = model.number_of_rooms;
            insert_pp_data.Hotel_Payment_Type = model.hotel_booking_payment_mode;
            insert_pp_data.IBAN = model.iban;
            if (model.hotel_booking_check_in_date.Year != 0001)
                insert_pp_data.Hote_Check_In_Date = model.hotel_booking_check_in_date;
            insert_pp_data.Hotel_Check_In_Time = model.hotel_check_in_time;
            if (model.hotel_booking_check_out_date.Year != 0001)
                insert_pp_data.Hotel_Check_Out_Date = model.hotel_booking_check_out_date;
            insert_pp_data.Hotel_Check_Out_Time = model.hotel_check_out_time;
            insert_pp_data.Hotel_Remark = model.hotel_booking_remark;
            if (model.departure_date.Year != 0001)
                insert_pp_data.Departure_Date = model.departure_date;
            insert_pp_data.Departure_Flight_No = model.departure_flight_number;
            if (model.return_date.Year != 0001)
                insert_pp_data.Return_Date = model.return_date;
            insert_pp_data.Return_Flight_No = model.return_flight_number;
            insert_pp_data.Travel_Routing = model.travel_routing;
            insert_pp_data.Note = model.note;
            insert_pp_data.Cash_Advance = Convert.ToBoolean(model.cash_advance);
            insert_pp_data.Amex_Holder = Convert.ToBoolean(model.amx_holder);
            insert_pp_data.Salary_Advance = model.salary_advance;
            insert_pp_data.Bank_account = model.bank_account;
            insert_pp_data.Ticket_Cost = model.ticket_cost;
            insert_pp_data.Daily_allowance = model.daily_allowance;
            insert_pp_data.Other_Expenses = model.other_expenses;
            insert_pp_data.Hotel_Cost = model.hotel_cost;
            insert_pp_data.Advance_Remark = model.travel_advance_remark;
            insert_pp_data.Travel_Advance_Total = model.travel_advance_total;
            insert_pp_data.Revalidation_Charge = model.revalidation_charge;
            insert_pp_data.Total_Ticket_Price = model.total_ticket_price;
            insert_pp_data.Ticket_Status = model.over_all_ticket_status;
            insert_pp_data.Business_Days = model.busines_days;
            insert_pp_data.Friday = model.fiday;
            insert_pp_data.Saturday = model.saturday;
            insert_pp_data.Total = model.total_days;

            if (model.required_rent_car == 1)
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.required_hotel_booking == 1)
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.mode_of_travel != "Air")
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            else
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            if (model.cash_advance == 1)
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.required_exit_visa == 1)
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.required_foreign_visa == 1)
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (model.required_travel_insurance == 1)
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            insert_pp_data.IsActive = true;
            insert_pp_data.TimeStamp = CurrentTime;
            status = _entity.SaveChanges() > 0; //26-06-2020 Basheer


            #region attachment edit

            if (status && model._FileList != null && model._FileList.Count > 0)
            {
                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = req_id.ToString();
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }


            }
            #endregion attachment edit



            if (status)
            {
                #region  Dependents Information
                if (model.dependents_name == "" || model.dependents_name == null || model.dependents_name == string.Empty)
                {


                }
                else
                {
                    var depp = _entity.tb_TA_DependentsInfo.Where(x => x.TA_Id == insert_pp_data.Id).ToList();
                    foreach (var item in depp)
                    {
                        _entity.tb_TA_DependentsInfo.Remove(item);
                        _entity.SaveChanges();
                    }

                    string[] depe_name = model.dependents_name.Split('~');
                    string[] depe_relation = model.dependents_relation.Split('~');
                    string[] depe_age = model.dependents_age.Split('~');
                    string[] depe_visa_type = model.dependents_visa_type.Split('~');
                    string[] depe_ta_type = model.dependents_ta_type.Split('~');
                    string[] depe_remark = null;
                    if (model.dependents_remarks == null)
                    {

                    }
                    else
                    {
                        depe_remark = model.dependents_remarks.Split('~');
                    }
                    for (int i = 0; i < depe_name.Count(); i++)
                    {
                        if (depe_name[i] != "")
                        {
                            var dep = _entity.tb_TA_DependentsInfo.Create();
                            dep.TA_Id = insert_pp_data.Id;
                            dep.Name = depe_name[i];
                            if (depe_relation.Count() < depe_name.Count())
                            {
                                dep.Relationship = "";
                            }
                            else
                            {
                                dep.Relationship = depe_relation[i];
                            }
                            if (depe_age.Count() < depe_name.Count())
                            {
                                dep.Age = "";
                            }
                            else
                            {
                                dep.Age = depe_age[i];
                            }
                            if (depe_visa_type.Count() < depe_name.Count())
                            {
                                dep.Visa_Type = "";
                            }
                            else
                            {
                                dep.Visa_Type = depe_visa_type[i];
                            }
                            if (depe_ta_type.Count() < depe_name.Count())
                            {
                                dep.TA_Type = "";
                            }
                            else
                            {
                                dep.TA_Type = depe_ta_type[i];
                            }
                            if (model.dependents_remarks == null)
                            {

                            }
                            else
                            {
                                if (depe_remark.Count() < depe_name.Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().Count()) //Basheer on 07-07-2020
                                {
                                    dep.Remark = "";
                                }
                                else
                                {
                                    dep.Remark = depe_remark[i];
                                }
                            }
                            dep.IsActive = true;
                            dep.TimeStamp = CurrentTime;
                            _entity.tb_TA_DependentsInfo.Add(dep);
                            status = _entity.SaveChanges() > 0;

                            #region Keep AuditLog_p034
                            if (status)
                            {
                                if (model.dependents_remarks == null)
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_DependentsInfo", request_id, "INITIATOR");
                                }
                                else
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_DependentsInfo", request_id, "INITIATOR");
                                }
                            }
                            #endregion Keep AuditLog_p034
                        }
                    }
                }
                #endregion

                #region  Travel Agency Information
                if (model.depent_ticket_number != null)
                {
                    var travel_agency = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == insert_pp_data.RequestId).ToList();
                    foreach (var item in travel_agency)
                    {
                        _entity.tb_TA_TravelAgencyInfo.Remove(item);
                        _entity.SaveChanges();
                    }

                    string[] depe_ticket_number = model.depent_ticket_number.Split('~');
                    string[] depe_issue_date = model.depent_issue_date.Split('~');
                    string[] depe_ticket_price = model.depent_ticket_price.Split('~');


                    for (int i = 0; i < depe_ticket_number.Count(); i++)
                    {
                        var dep = _entity.tb_TA_TravelAgencyInfo.Create();
                        if (depe_ticket_number[i] != "")
                        {

                            dep.AgencyId = Convert.ToString(insert_pp_data.Id);

                            dep.Ticket_Number = depe_ticket_number[i];
                            if (depe_ticket_number.Count() < depe_ticket_number.Count())
                            {
                                dep.Ticket_Number = "";
                            }
                            else
                            {
                                dep.Ticket_Number = depe_ticket_number[i];
                            }
                            if (depe_issue_date.Count() < depe_issue_date.Count())
                            {
                                dep.IssueDate = Convert.ToDateTime(null);
                            }
                            else
                            {
                                dep.IssueDate = Convert.ToDateTime(depe_issue_date[i]);
                            }
                            if (depe_ticket_price.Count() < depe_ticket_price.Count())
                            {
                                dep.TicketPrice = "";
                            }
                            else
                            {
                                dep.TicketPrice = depe_ticket_price[i];
                            }


                        }
                        dep.IsEmployee = false;
                        dep.RequestId = insert_pp_data.RequestId;
                        dep.IsActive = true;
                        dep.TimeStamp = CurrentTime;
                        _entity.tb_TA_TravelAgencyInfo.Add(dep);
                        status = _entity.SaveChanges() > 0;

                        #region Keep AuditLog
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId.ToString();
                            string record = depe_ticket_number[i] + " || " + depe_issue_date[i] + " || " + depe_ticket_price[i] + " || " + dep.RequestId + " || " + dep.IsEmployee + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_TravelAgencyInfo", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog
                    }
                }

                #endregion
            }
            if (status == true)
            {
                msg = "Request Edit Successfully";
                string reqid = insert_pp_data.RequestId.ToString();
                var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqid && x.IsActive == true).FirstOrDefault();
                var application = req.tb_Application;
                if (req != null)
                {
                    if (req.RoleId != null)
                    {
                        var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                        var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                        var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                        #region Keep AuditLog_p034
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId.ToString();
                            string record = model.place_to_visit + " || " + model.reason + " || " + model.remark_one + " || " + model.is_complaince_approval_required + " || " + model.compliance_approval_date +
            " || " + model.last_day_of_work + " || " + model.return_to_duty + " || " + model.workflow_delegated + " || " + model.justification_no_delegation +
            " || " + model.possible_video_conference + " || " + model.justification_for_no_video_conference + " || " + model.address_during_absence +
            " || " + model.telephone + " || " + model.mode_of_travel + " || " + model.location_id + " || " + model.required_exit_visa +
            " || " + model.travel_visa_charged_to + " || " + model.required_foreign_visa + " || " + model.foreign_visa_countries +
            " || " + model.foreign_visa_quantity + " || " + model.required_travel_insurance + " || " + model.travel_insurance_countries + " || " + model.travel_insurance_quantity +
            " || " + model.required_rent_car + " || " + model.rent_car_charged_to + " || " + model.rent_car_project_no +
            " || " + model.car_type + " || " + model.rent_car_picked_up_at + " || " + model.rent_car_pick_up_date + " || " + model.rent_car_pick_up_time +
            " || " + model.travel_visa_charged_to + " || " + model.rent_car_return_date + " || " + model.rent_car_return_time +
            " || " + model.rent_car_remark + " || " + model.required_hotel_booking + " || " + model.hotel_booking_charged_to +
            " || " + model.hptel_booking_project_no + " || " + model.hotel_name + " || " + model.type_of_room +
            " || " + model.hotel_location + " || " + model.room_preferences + " || " + model.number_of_rooms +
            " || " + model.hotel_booking_payment_mode + " || " + model.iban + " || " + model.hotel_booking_check_in_date + " || " + model.hotel_check_in_time +
            " || " + model.hotel_booking_check_out_date + " || " + model.hotel_check_out_time + " || " + model.hotel_booking_remark +
            " || " + model.departure_date + " || " + model.departure_flight_number + " || " + model.return_date +
            " || " + model.return_flight_number + " || " + model.travel_routing + " || " + model.note +
            " || " + model.cash_advance + " || " + model.amx_holder + " || " + model.salary_advance +
            " || " + model.bank_account + " || " + model.ticket_cost + " || " + model.daily_allowance +
            " || " + model.other_expenses + " || " + model.travel_advance_remark + " || " + model.travel_advance_total + " || " + model.revalidation_charge +
            " || " + model.total_ticket_price + " || " + model.over_all_ticket_status + " || " + model.busines_days +
            " || " + model.fiday + " || " + model.saturday + " || " + model.total_days + " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
            " || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
            " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_Business_International", request_id, role.Role_Desc);
                        }
                        #endregion Keep AuditLog_p034                        

                    }
                    else
                    {
                        #region Log for SaveChanges
                        string remark = "Request was Edited by";
                        string[] split1 = model.request_id.Split('-');
                        string rqid1 = reqid;
                        if (req.Creater_ID == model.emp_local_id)
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        }
                        else
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                        }
                        #endregion

                        #region Keep AuditLog_p034
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId.ToString();
                            string record = model.place_to_visit + " || " + model.reason + " || " + model.remark_one + " || " + model.is_complaince_approval_required + " || " + model.compliance_approval_date +
            " || " + model.last_day_of_work + " || " + model.return_to_duty + " || " + model.workflow_delegated + " || " + model.justification_no_delegation +
            " || " + model.possible_video_conference + " || " + model.justification_for_no_video_conference + " || " + model.address_during_absence +
            " || " + model.telephone + " || " + model.mode_of_travel + " || " + model.location_id + " || " + model.required_exit_visa +
            " || " + model.travel_visa_charged_to + " || " + model.required_foreign_visa + " || " + model.foreign_visa_countries +
            " || " + model.foreign_visa_quantity + " || " + model.required_travel_insurance + " || " + model.travel_insurance_countries + " || " + model.travel_insurance_quantity +
            " || " + model.required_rent_car + " || " + model.rent_car_charged_to + " || " + model.rent_car_project_no +
            " || " + model.car_type + " || " + model.rent_car_picked_up_at + " || " + model.rent_car_pick_up_date + " || " + model.rent_car_pick_up_time +
            " || " + model.travel_visa_charged_to + " || " + model.rent_car_return_date + " || " + model.rent_car_return_time +
            " || " + model.rent_car_remark + " || " + model.required_hotel_booking + " || " + model.hotel_booking_charged_to +
            " || " + model.hptel_booking_project_no + " || " + model.hotel_name + " || " + model.type_of_room +
            " || " + model.hotel_location + " || " + model.room_preferences + " || " + model.number_of_rooms +
            " || " + model.hotel_booking_payment_mode + " || " + model.iban + " || " + model.hotel_booking_check_in_date + " || " + model.hotel_check_in_time +
            " || " + model.hotel_booking_check_out_date + " || " + model.hotel_check_out_time + " || " + model.hotel_booking_remark +
            " || " + model.departure_date + " || " + model.departure_flight_number + " || " + model.return_date +
            " || " + model.return_flight_number + " || " + model.travel_routing + " || " + model.note +
            " || " + model.cash_advance + " || " + model.amx_holder + " || " + model.salary_advance +
            " || " + model.bank_account + " || " + model.ticket_cost + " || " + model.daily_allowance +
            " || " + model.other_expenses + " || " + model.travel_advance_remark + " || " + model.travel_advance_total + " || " + model.revalidation_charge +
            " || " + model.total_ticket_price + " || " + model.over_all_ticket_status + " || " + model.busines_days +
            " || " + model.fiday + " || " + model.saturday + " || " + model.total_days + " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
            " || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
            " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TA_Business_International", request_id, "INITIATOR");
                        }
                        #endregion Keep AuditLog_p055

                    }
                }
            }

            #endregion
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //Basheer on 28-05-2020
        //Basheer on 28-05-2020
        private object Processors(SubmitRequest model)
        {
            string msg = "Failed";
            bool status = false;
            long reqId = Convert.ToInt64(model.request_id);
            var processhdr = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsCompleted == false && x.distribution_flag == false && x.IsActive == true).ToList();
            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id).FirstOrDefault();
            foreach (var item in processhdr)
            {
                string[] split = item.Button_List.Split('~');
                foreach (var buttons in split)
                {
                    if (buttons == model.button_code)
                    {

                        var processor = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                        var role = _entity.tb_Role.Where(x => x.Role_ID == processor.RoleId && x.IsActive == true).FirstOrDefault();
                        model.my_role = role.Role_Desc;


                        if (model.button_code == "PYD")// CASH ADVANCE READY
                        {
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;


                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "PYD", "Request was processed by");


                            msg = "Succesful";

                        }
                        else if (model.button_code == "NTP")// CASH ADVANCE NOT READY
                        {
                            //13-07-2020
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;
                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "NTP", "Request was processed by");


                            msg = "Succesful";
                        }
                        else if (model.button_code == "TRD")// TICKET READY
                        {
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;
                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "TRD", "Request was processed by");


                            msg = "Succesful";
                        }
                        else if (model.button_code == "TNR") // TICKET NOT READY
                        {
                            //13-07-2020
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;
                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "TNR", "Request was processed by");


                            msg = "Succesful";

                        }
                        else if (model.button_code == "CRD") //RENT CAR READY
                        {
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;

                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "CRD", "Request was processed by");


                            msg = "Succesful";


                        }
                        else if (model.button_code == "CNR") // RENT CAR NOT READY 
                        {
                            //13-07-2020
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;
                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "CNR", "Request was processed by");


                            msg = "Succesful";

                        }
                        else if (model.button_code == "HBD") // HOTEL BOOKING READY
                        {
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;

                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "HBD", "Request was processed by");



                            msg = "Succesful";

                        }
                        else if (model.button_code == "HNR") // HOTEL BOOKING NOT READY
                        {
                            //13-07-2020
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;
                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "HNR", "Request was processed by");



                            msg = "Succesful";

                        }
                        else if (model.button_code == "VRD") // EXIT ENTRY VISA READY
                        {
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;

                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "VRD", "Request was processed by");




                            msg = "Succesful";

                        }
                        else if (model.button_code == "VNR") // EXIT ENTRY VISA NOT READY 
                        {

                            //13-07-2020
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;
                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "VNR", "Request was processed by");


                            msg = "Succesful";

                        }
                        else if (model.button_code == "FRD") // FOREIGN VISA READY
                        {
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;

                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "FRD", "Request was processed by");


                            msg = "Succesful";

                        }
                        else if (model.button_code == "FNR") // FOREIGN VISA NOT READY 
                        {
                            //13-07-2020
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;
                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "FNR", "Request was processed by");

                            msg = "Succesful";

                        }
                        else if (model.button_code == "IRD") // TRAVEL INSURANCE READY 
                        {
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;

                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "IRD", "Request was processed by");



                            msg = "Succesful";

                        }
                        else if (model.button_code == "INR") // TRAVEL INSURANCE NOT READY 
                        {
                            //13-07-2020
                            var process = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsActive == true && x.Id == item.Id).FirstOrDefault();
                            process.IsCompleted = true;
                            status = _entity.SaveChanges() > 0;
                            _ApprovalLogRepository.Send_Service_Mail_Login(request, model.my_id, model.my_role, "INR", "Request was processed by");



                            msg = "Succesful";

                        }
                    }
                }
            }
            if (status)
            {
                var count = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqId && x.IsCompleted == false && x.distribution_flag == false && x.IsActive == true).Count();
                if (count == 0)
                {
                    var requests = _entity.tb_Request_Hdr.Where(x => x.Request_ID == reqId.ToString() && x.IsActive == true).FirstOrDefault();
                    requests.Status_ID = "CLS";
                    requests.Process_Complete = 1;
                    _entity.SaveChanges();

                    #region Keep Login
                    var approveLog = _entity.tb_ApprovalLog.Create();
                    approveLog.RequestId = requests.Request_ID;
                    approveLog.Remark = "Request Closed by Service";
                    approveLog.EmployeeId = requests.Employee_ID;
                    approveLog.Actor_Id = model.my_id;
                    approveLog.RoleId = model.my_role;
                    approveLog.TimeStamp = CurrentTime;
                    approveLog.IsActive = true;
                    approveLog.Actor_To = "";
                    approveLog.RoleId_To = "";
                    approveLog.Reason = "All services are completed !";
                    approveLog.Status = "CLS";
                    _entity.tb_ApprovalLog.Add(approveLog);
                    _entity.SaveChanges();
                    #endregion

                    #region Processing mail
                    Thread ProcessorThread = new Thread(() => Processorssend(request, model)); //Basheer on 28-05-2020
                    ProcessorThread.Start();
                    #endregion

                    #region Close mail

                    int counts = 0;
                    while (ProcessorThread.IsAlive == true)
                    {
                        counts = counts + 1;
                    }

                    EmailTemplateDataModel model1 = new EmailTemplateDataModel();
                    model1.process_type = EmailProcessType.Close;
                    model1.wf_id = requests.WF_ID;
                    model1.request_id = requests.Id;
                    model1.who_am_i = model.my_id;
                    model1.ista = true;
                    model1.reason = "";
                    try
                    {
                        Thread email = new Thread(() => Email_Template(model1, requests.tb_WFType));
                        email.Start();
                    }
                    catch
                    {

                    }
                    #endregion
                }
                else
                {
                    Thread ProcessorThread = new Thread(() => Processorssend(request, model)); //Basheer on 28-05-2020
                    ProcessorThread.Start();
                }
            }

            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        private void Processorssend(tb_Request_Hdr request, SubmitRequest data)//Basheer on 28-05-2020
        {
            bool status = false;
            EmailTemplateDataModel model1 = new EmailTemplateDataModel();
            model1.process_type = EmailProcessType.Processor;
            model1.wf_id = request.WF_ID;
            model1.request_id = request.Id;
            model1.who_am_i = data.my_id;
            model1.buttoncode = data.button_code;
            model1.reason = "";

            try
            {
                Email_Template(model1, request.tb_WFType);
                status = true;
            }
            catch (Exception ex)
            {
                status = false;
            }
        }

        //P007-Vacation(Preema)
        public object Submit_TA_Vacation(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var obj_Vacation = model.VacationModel;
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_TA_Vacation.Create();
                insert_pp_data.RequestId = Convert.ToInt64(data.Item2);
                insert_pp_data.Place_Visit = obj_Vacation.place_to_visit;
                insert_pp_data.Reasons = obj_Vacation.reason;
                insert_pp_data.Remark = obj_Vacation.remark_one;
                insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(obj_Vacation.is_complaince_approval_required);
                if (obj_Vacation.is_complaince_approval_required == 1)
                {
                    if (obj_Vacation.compliance_approval_date.Year != 0001)
                        insert_pp_data.Compliance_Approval_Date = obj_Vacation.compliance_approval_date;
                }
                insert_pp_data.Last_Day_Of_Work = obj_Vacation.last_day_of_work;
                insert_pp_data.Return_To_Duty = obj_Vacation.return_to_duty;
                insert_pp_data.IsDelegated = Convert.ToBoolean(obj_Vacation.workflow_delegated);
                insert_pp_data.Just_No_Delegated = obj_Vacation.justification_no_delegation;
                insert_pp_data.Address_During_Absence = obj_Vacation.address_during_absence;
                insert_pp_data.Telephone_No = obj_Vacation.telephone;
                insert_pp_data.Travel_Mode = obj_Vacation.mode_of_travel;
                insert_pp_data.Location_Id = obj_Vacation.location_id;
                insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(obj_Vacation.required_exit_visa);
                insert_pp_data.Type_Exit_ReEntry_Visa = obj_Vacation.type_of_exit_visa;
                insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;
                insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(obj_Vacation.required_foreign_visa);
                insert_pp_data.Foreign_Visa_Countries = obj_Vacation.foreign_visa_countries;
                insert_pp_data.Foreign_Visa_Quantity = obj_Vacation.foreign_visa_quantity;
                insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(obj_Vacation.required_travel_insurance);
                insert_pp_data.Travel_Insurance_Countries = obj_Vacation.travel_insurance_countries;
                insert_pp_data.Travel_Insurance_Quantity = obj_Vacation.travel_insurance_quantity;
                insert_pp_data.Is_RentCar = Convert.ToBoolean(obj_Vacation.required_rent_car);
                insert_pp_data.RentCar_Charged_to = obj_Vacation.rent_car_charged_to;
                insert_pp_data.RentCar_ProjectNo = obj_Vacation.rent_car_project_no;
                insert_pp_data.Car_Type = obj_Vacation.car_type;
                insert_pp_data.Car_PickUp_at = obj_Vacation.rent_car_picked_up_at;
                if (obj_Vacation.rent_car_pick_up_date.Year != 001)
                    insert_pp_data.Car_PickUp_date = obj_Vacation.rent_car_pick_up_date;
                insert_pp_data.Car_PickUp_Time = obj_Vacation.rent_car_pick_up_time;
                insert_pp_data.Car_Payment_Type = obj_Vacation.rent_car_payment_type;
                if (obj_Vacation.rent_car_return_date.Year != 0001)
                    insert_pp_data.Car_Return_date = obj_Vacation.rent_car_return_date;
                insert_pp_data.Car_Return_Time = obj_Vacation.rent_car_return_time;
                insert_pp_data.Car_Remark = obj_Vacation.rent_car_remark;
                insert_pp_data.Is_Hotel = Convert.ToBoolean(obj_Vacation.required_hotel_booking);
                insert_pp_data.Hotel_Charged_to = obj_Vacation.hotel_booking_charged_to;
                insert_pp_data.Hotel_ProjectNo = obj_Vacation.hotel_booking_project_no;
                insert_pp_data.Hotel_Name = obj_Vacation.hotel_name;
                insert_pp_data.Room_Type = obj_Vacation.type_of_room;
                insert_pp_data.Hotel_Location = obj_Vacation.hotel_location;
                insert_pp_data.Room_Preference = obj_Vacation.room_preferences;
                insert_pp_data.Number_Of_Rooms = obj_Vacation.number_of_rooms;
                insert_pp_data.Hotel_Payment_Type = obj_Vacation.hotel_booking_payment_mode;
                insert_pp_data.IBAN = obj_Vacation.iban;
                if (obj_Vacation.hotel_booking_check_in_date.Year != 0001)
                    insert_pp_data.Hote_Check_In_Date = obj_Vacation.hotel_booking_check_in_date;
                insert_pp_data.Hotel_Check_In_Time = obj_Vacation.hotel_check_in_time;
                if (obj_Vacation.hotel_booking_check_out_date.Year != 0001)
                    insert_pp_data.Hotel_Check_Out_Date = obj_Vacation.hotel_booking_check_out_date;
                insert_pp_data.Hotel_Check_Out_Time = obj_Vacation.hotel_check_out_time;
                insert_pp_data.Hotel_Remark = obj_Vacation.hotel_booking_remark;
                if (obj_Vacation.departure_date.Year != 0001)
                    insert_pp_data.Departure_Date = obj_Vacation.departure_date;
                insert_pp_data.Departure_Flight_No = obj_Vacation.departure_flight_number;
                if (obj_Vacation.return_date.Year != 0001)
                    insert_pp_data.Return_Date = obj_Vacation.return_date;
                insert_pp_data.Return_Flight_No = obj_Vacation.return_flight_number;
                insert_pp_data.Travel_Routing = obj_Vacation.travel_routing;
                insert_pp_data.Note = obj_Vacation.note;
                insert_pp_data.Cash_Advance = Convert.ToBoolean(obj_Vacation.cash_advance);
                insert_pp_data.Amex_Holder = Convert.ToBoolean(obj_Vacation.amx_holder);
                insert_pp_data.Salary_Advance = obj_Vacation.salary_advance;
                insert_pp_data.Bank_account = obj_Vacation.bank_account;
                insert_pp_data.Ticket_Cost = obj_Vacation.ticket_cost;
                insert_pp_data.Hotel_Cost = obj_Vacation.hotel_cost;
                insert_pp_data.Daily_allowance = obj_Vacation.daily_allowance;
                insert_pp_data.Other_Expenses = obj_Vacation.other_expenses;
                insert_pp_data.Advance_Remark = obj_Vacation.travel_advance_remark;
                insert_pp_data.Travel_Advance_Total = obj_Vacation.travel_advance_total;

                insert_pp_data.Visa_duration = Convert.ToString(obj_Vacation.Visa_Duration);
                insert_pp_data.Visa_with = Convert.ToString(obj_Vacation.Visa_With);

                if (obj_Vacation.required_rent_car == 1)
                {
                    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_hotel_booking == 1)
                {
                    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.mode_of_travel != "Air")
                {
                    insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                else
                {
                    insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                if (obj_Vacation.cash_advance == 1)
                {
                    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_exit_visa == 1)
                {
                    insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_foreign_visa == 1)
                {
                    insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_travel_insurance == 1)
                {
                    insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }

                insert_pp_data.Ticket_Type = obj_Vacation.type_of_ticket;

                #region Number of Days Information
                insert_pp_data.Ticket_Charged_To = obj_Vacation.ticket_charged_to;
                insert_pp_data.From_Period = Convert.ToDateTime(obj_Vacation.from_period);
                insert_pp_data.To_Period = Convert.ToDateTime(obj_Vacation.to_period);
                insert_pp_data.Vacation = Convert.ToInt32(obj_Vacation.Vacation);
                insert_pp_data.Leave_Pay = Convert.ToInt32(obj_Vacation.Leave_WO_Pay);
                insert_pp_data.Holidays = Convert.ToInt32(obj_Vacation.Holidays);
                insert_pp_data.Friday = Convert.ToInt32(obj_Vacation.Friday);
                insert_pp_data.Saturday = Convert.ToInt32(obj_Vacation.Saturday);
                insert_pp_data.Total_No_of_Days = Convert.ToString(obj_Vacation.Total_No_of_Days);

                #endregion
                #region Travel Agency     

                insert_pp_data.Revalidation_Charge = obj_Vacation.revalidation_charge;
                insert_pp_data.Total_Ticket_Price = obj_Vacation.total_ticket_price;
                insert_pp_data.Ticket_Status = obj_Vacation.over_all_ticket_status;

                insert_pp_data.Ticket_Number_employee = obj_Vacation.employee_ticket_number;
                insert_pp_data.IssueDate_employee = obj_Vacation.employee_date_of_issue;
                insert_pp_data.TicketPrice_employee = obj_Vacation.employee_ticket_price;
                #endregion
                #region Employee Entitlements to be processed by SAS              
                insert_pp_data.Visa_Amount_Claim = Convert.ToBoolean(obj_Vacation.Visa_Amount_Claim);
                insert_pp_data.Taxi_Fare_Claim = Convert.ToBoolean(obj_Vacation.Taxi_Fare_Claim);
                insert_pp_data.Visa_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Visa);
                insert_pp_data.Taxi_Fare_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Taxi);
                #endregion

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;

                _entity.tb_TA_Vacation.Add(insert_pp_data);

                try
                {
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p007
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId.ToString();
                        string record = obj_Vacation.place_to_visit + " || " + obj_Vacation.reason + " || " + obj_Vacation.remark_one + " || " + obj_Vacation.is_complaince_approval_required + " || " + obj_Vacation.compliance_approval_date +
        " || " + obj_Vacation.last_day_of_work + " || " + obj_Vacation.return_to_duty + " || " + obj_Vacation.workflow_delegated + " || " + obj_Vacation.justification_no_delegation +
               " || " + obj_Vacation.address_during_absence + " || " + (obj_Vacation.Visa_Duration) + " || " + (obj_Vacation.Visa_With) +
        " || " + obj_Vacation.telephone + " || " + obj_Vacation.mode_of_travel + " || " + obj_Vacation.location_id + " || " + obj_Vacation.required_exit_visa + " || " + obj_Vacation.type_of_exit_visa +
        " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.required_foreign_visa + " || " + obj_Vacation.foreign_visa_countries +
        " || " + obj_Vacation.foreign_visa_quantity + " || " + obj_Vacation.required_travel_insurance + " || " + obj_Vacation.travel_insurance_countries + " || " + obj_Vacation.travel_insurance_quantity +
        " || " + obj_Vacation.required_rent_car + " || " + obj_Vacation.rent_car_charged_to + " || " + obj_Vacation.rent_car_project_no +
        " || " + obj_Vacation.car_type + " || " + obj_Vacation.rent_car_picked_up_at + " || " + obj_Vacation.rent_car_pick_up_date + " || " + obj_Vacation.rent_car_pick_up_time +
        " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.rent_car_return_date + " || " + obj_Vacation.rent_car_return_time +
        " || " + obj_Vacation.rent_car_remark + " || " + obj_Vacation.required_hotel_booking + " || " + obj_Vacation.hotel_booking_charged_to +
        " || " + obj_Vacation.hotel_booking_project_no + " || " + obj_Vacation.hotel_name + " || " + obj_Vacation.type_of_room +
        " || " + obj_Vacation.hotel_location + " || " + obj_Vacation.room_preferences + " || " + obj_Vacation.number_of_rooms +
        " || " + obj_Vacation.hotel_booking_payment_mode + " || " + obj_Vacation.iban + " || " + obj_Vacation.hotel_booking_check_in_date + " || " + obj_Vacation.hotel_check_in_time +
        " || " + obj_Vacation.hotel_booking_check_out_date + " || " + obj_Vacation.hotel_check_out_time + " || " + obj_Vacation.hotel_booking_remark +
        " || " + obj_Vacation.departure_date + " || " + obj_Vacation.departure_flight_number + " || " + obj_Vacation.return_date +
        " || " + obj_Vacation.return_flight_number + " || " + obj_Vacation.travel_routing + " || " + obj_Vacation.note + " || " + obj_Vacation.type_of_ticket +
        " || " + obj_Vacation.cash_advance + " || " + obj_Vacation.amx_holder + " || " + obj_Vacation.salary_advance +
        " || " + obj_Vacation.bank_account + " || " + obj_Vacation.ticket_cost + " || " + obj_Vacation.daily_allowance + " || " + obj_Vacation.hotel_cost +
        " || " + obj_Vacation.other_expenses + " || " + obj_Vacation.travel_advance_remark + " || " + obj_Vacation.travel_advance_total +
        " || " + obj_Vacation.revalidation_charge + " || " + obj_Vacation.employee_ticket_number + " || " + Convert.ToDateTime(obj_Vacation.employee_date_of_issue) + " || " + obj_Vacation.employee_ticket_price +
        " || " + obj_Vacation.total_ticket_price + " || " + obj_Vacation.over_all_ticket_status + " || " + obj_Vacation.ticket_charged_to +
        " || " + obj_Vacation.from_period + " || " + obj_Vacation.to_period + " || " + obj_Vacation.Vacation +
          " || " + obj_Vacation.Leave_WO_Pay + " || " + obj_Vacation.Holidays + " || " + obj_Vacation.Friday +
             " || " + obj_Vacation.Saturday + " || " + obj_Vacation.Total_No_of_Days + " || " + obj_Vacation.Visa_Amount_Claim +
                   " || " + obj_Vacation.Taxi_Fare_Claim + " || " + obj_Vacation.HR_Remarks_Visa + " || " + obj_Vacation.HR_Remarks_Taxi +
        " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
        " || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
        " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p007
                }

                catch (DbEntityValidationException ex)
                {
                    foreach (var entityValidationErrors in ex.EntityValidationErrors)
                    {
                        foreach (var validationError in entityValidationErrors.ValidationErrors)
                        {
                            Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                        }
                    }
                }

                if (status)
                {
                    #region  Dependents Information
                    if (obj_Vacation.dependents_name != null)
                    {
                        string[] depe_name = obj_Vacation.dependents_name.Split('~');
                        string[] depe_relation = obj_Vacation.dependents_relation.Split('~');
                        string[] depe_age = obj_Vacation.dependents_age.Split('~');
                        string[] depe_visa_type = obj_Vacation.dependents_visa_type.Split('~');
                        string[] depe_ta_type = obj_Vacation.dependents_ta_type.Split('~');
                        string[] depe_remark = { };
                        if (obj_Vacation.dependents_remarks == null)
                        {

                        }
                        else
                        {
                            depe_remark = obj_Vacation.dependents_remarks.Split('~');
                        }
                        for (int i = 0; i < depe_name.Count(); i++)
                        {
                            if (depe_name[i] != "")
                            {
                                var dep = _entity.tb_TA_Vacation_DependentsInfo.Create();
                                dep.TA_Id = insert_pp_data.Id;
                                dep.Name = depe_name[i];
                                if (depe_relation.Count() < depe_name.Count())
                                {
                                    dep.Relationship = "";
                                }
                                else
                                {
                                    dep.Relationship = depe_relation[i];
                                }
                                if (depe_age.Count() < depe_name.Count())
                                {
                                    dep.Age = "";
                                }
                                else
                                {
                                    dep.Age = depe_age[i];
                                }
                                if (depe_visa_type.Count() < depe_name.Count())
                                {
                                    dep.Visa_Type = "";
                                }
                                else
                                {
                                    dep.Visa_Type = depe_visa_type[i];
                                }
                                if (depe_ta_type.Count() < depe_name.Count())
                                {
                                    dep.TA_Type = "";
                                }
                                else
                                {
                                    dep.TA_Type = depe_ta_type[i];
                                }
                                if (obj_Vacation.dependents_remarks == null)
                                {

                                }
                                else
                                {
                                    if (depe_remark.Count() < depe_name.Count())
                                    {
                                        dep.Remark = "";
                                    }
                                    else
                                    {
                                        dep.Remark = depe_remark[i];
                                    }
                                }
                                dep.IsActive = true;
                                dep.TimeStamp = CurrentTime;
                                _entity.tb_TA_Vacation_DependentsInfo.Add(dep);
                                status = _entity.SaveChanges() > 0;
                                #region Keep AuditLog_p007
                                if (status)
                                {
                                    if (obj_Vacation.dependents_remarks == null)
                                    {
                                        string request_id = insert_pp_data.RequestId.ToString();
                                        string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation_DependentsInfo", request_id, "INITIATOR");
                                    }
                                    else
                                    {
                                        string request_id = insert_pp_data.RequestId.ToString();
                                        string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation_DependentsInfo", request_id, "INITIATOR");
                                    }
                                }
                                #endregion Keep AuditLog_p007
                            }
                        }
                    }
                    #endregion
                }
                #endregion

                #region attachments
                //to store attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }
                #endregion

                #region attachments
                // to store attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                #endregion

            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //P007-Vacation(Preema)
        public object Submit_Edit_TA_Vacation(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var obj_Vacation = model.VacationModel;
            long req_id = Convert.ToInt64(model.request_id);
            #region Store Request Data
            msg = "Success";
            var insert_pp_data = _entity.tb_TA_Vacation.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            insert_pp_data.Place_Visit = obj_Vacation.place_to_visit;
            insert_pp_data.Reasons = obj_Vacation.reason;
            insert_pp_data.Remark = obj_Vacation.remark_one;
            insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(obj_Vacation.is_complaince_approval_required);
            if (obj_Vacation.is_complaince_approval_required == 1)
            {
                if (obj_Vacation.compliance_approval_date.Year != 0001)
                    insert_pp_data.Compliance_Approval_Date = obj_Vacation.compliance_approval_date;
            }
            insert_pp_data.Last_Day_Of_Work = obj_Vacation.last_day_of_work;
            insert_pp_data.Return_To_Duty = obj_Vacation.return_to_duty;
            insert_pp_data.IsDelegated = Convert.ToBoolean(obj_Vacation.workflow_delegated);
            insert_pp_data.Just_No_Delegated = obj_Vacation.justification_no_delegation;
            insert_pp_data.Address_During_Absence = obj_Vacation.address_during_absence;
            insert_pp_data.Telephone_No = obj_Vacation.telephone;
            insert_pp_data.Travel_Mode = obj_Vacation.mode_of_travel;
            insert_pp_data.Location_Id = obj_Vacation.location_id;
            insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(obj_Vacation.required_exit_visa);
            insert_pp_data.Type_Exit_ReEntry_Visa = obj_Vacation.type_of_exit_visa;
            insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;
            insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(obj_Vacation.required_foreign_visa);
            insert_pp_data.Foreign_Visa_Countries = obj_Vacation.foreign_visa_countries;
            insert_pp_data.Foreign_Visa_Quantity = obj_Vacation.foreign_visa_quantity;
            insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(obj_Vacation.required_travel_insurance);
            insert_pp_data.Travel_Insurance_Countries = obj_Vacation.travel_insurance_countries;
            insert_pp_data.Travel_Insurance_Quantity = obj_Vacation.travel_insurance_quantity;
            insert_pp_data.Is_RentCar = Convert.ToBoolean(obj_Vacation.required_rent_car);
            insert_pp_data.RentCar_Charged_to = obj_Vacation.rent_car_charged_to;
            insert_pp_data.RentCar_ProjectNo = obj_Vacation.rent_car_project_no;
            insert_pp_data.Car_Type = obj_Vacation.car_type;
            insert_pp_data.Car_PickUp_at = obj_Vacation.rent_car_picked_up_at;
            if (obj_Vacation.rent_car_pick_up_date.Year != 001)
                insert_pp_data.Car_PickUp_date = obj_Vacation.rent_car_pick_up_date;
            insert_pp_data.Car_PickUp_Time = obj_Vacation.rent_car_pick_up_time;
            insert_pp_data.Car_Payment_Type = obj_Vacation.rent_car_payment_type;
            if (obj_Vacation.rent_car_return_date.Year != 0001)
                insert_pp_data.Car_Return_date = obj_Vacation.rent_car_return_date;
            insert_pp_data.Car_Return_Time = obj_Vacation.rent_car_return_time;
            insert_pp_data.Car_Remark = obj_Vacation.rent_car_remark;
            insert_pp_data.Is_Hotel = Convert.ToBoolean(obj_Vacation.required_hotel_booking);
            insert_pp_data.Hotel_Charged_to = obj_Vacation.hotel_booking_charged_to;
            insert_pp_data.Hotel_ProjectNo = obj_Vacation.hotel_booking_project_no;
            insert_pp_data.Hotel_Name = obj_Vacation.hotel_name;
            insert_pp_data.Room_Type = obj_Vacation.type_of_room;
            insert_pp_data.Hotel_Location = obj_Vacation.hotel_location;
            insert_pp_data.Room_Preference = obj_Vacation.room_preferences;
            insert_pp_data.Number_Of_Rooms = obj_Vacation.number_of_rooms;
            insert_pp_data.Hotel_Payment_Type = obj_Vacation.hotel_booking_payment_mode;
            insert_pp_data.IBAN = obj_Vacation.iban;
            if (obj_Vacation.hotel_booking_check_in_date.Year != 0001)
                insert_pp_data.Hote_Check_In_Date = obj_Vacation.hotel_booking_check_in_date;
            insert_pp_data.Hotel_Check_In_Time = obj_Vacation.hotel_check_in_time;
            if (obj_Vacation.hotel_booking_check_out_date.Year != 0001)
                insert_pp_data.Hotel_Check_Out_Date = obj_Vacation.hotel_booking_check_out_date;
            insert_pp_data.Hotel_Check_Out_Time = obj_Vacation.hotel_check_out_time;
            insert_pp_data.Hotel_Remark = obj_Vacation.hotel_booking_remark;
            if (obj_Vacation.departure_date.Year != 0001)
                insert_pp_data.Departure_Date = obj_Vacation.departure_date;
            insert_pp_data.Departure_Flight_No = obj_Vacation.departure_flight_number;
            if (obj_Vacation.return_date.Year != 0001)
                insert_pp_data.Return_Date = obj_Vacation.return_date;
            insert_pp_data.Return_Flight_No = obj_Vacation.return_flight_number;
            insert_pp_data.Travel_Routing = obj_Vacation.travel_routing;
            insert_pp_data.Note = obj_Vacation.note;
            insert_pp_data.Cash_Advance = Convert.ToBoolean(obj_Vacation.cash_advance);
            insert_pp_data.Amex_Holder = Convert.ToBoolean(obj_Vacation.amx_holder);
            insert_pp_data.Salary_Advance = obj_Vacation.salary_advance;
            insert_pp_data.Bank_account = obj_Vacation.bank_account;
            insert_pp_data.Ticket_Cost = obj_Vacation.ticket_cost;
            insert_pp_data.Hotel_Cost = obj_Vacation.hotel_cost;
            insert_pp_data.Daily_allowance = obj_Vacation.daily_allowance;
            insert_pp_data.Other_Expenses = obj_Vacation.other_expenses;
            insert_pp_data.Advance_Remark = obj_Vacation.travel_advance_remark;
            insert_pp_data.Travel_Advance_Total = obj_Vacation.travel_advance_total;
            insert_pp_data.Ticket_Type = obj_Vacation.type_of_ticket;
            insert_pp_data.Visa_duration = Convert.ToString(obj_Vacation.Visa_Duration);
            insert_pp_data.Visa_with = Convert.ToString(obj_Vacation.Visa_With);

            if (obj_Vacation.required_rent_car == 1)
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_hotel_booking == 1)
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.mode_of_travel != "Air")
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            else
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            if (obj_Vacation.cash_advance == 1)
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_exit_visa == 1)
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_foreign_visa == 1)
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_travel_insurance == 1)
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }

            #region Number of Days Information
            insert_pp_data.Ticket_Charged_To = obj_Vacation.ticket_charged_to;
            insert_pp_data.From_Period = Convert.ToDateTime(obj_Vacation.from_period);
            insert_pp_data.To_Period = Convert.ToDateTime(obj_Vacation.to_period);
            insert_pp_data.Vacation = Convert.ToInt32(obj_Vacation.Vacation);
            insert_pp_data.Leave_Pay = Convert.ToInt32(obj_Vacation.Leave_WO_Pay);
            insert_pp_data.Holidays = Convert.ToInt32(obj_Vacation.Holidays);
            insert_pp_data.Friday = Convert.ToInt32(obj_Vacation.Friday);
            insert_pp_data.Saturday = Convert.ToInt32(obj_Vacation.Saturday);
            insert_pp_data.Total_No_of_Days = Convert.ToString(obj_Vacation.Total_No_of_Days);
            #endregion

            #region Travel Agency            
            insert_pp_data.Revalidation_Charge = obj_Vacation.revalidation_charge;
            insert_pp_data.Total_Ticket_Price = obj_Vacation.total_ticket_price;
            insert_pp_data.Ticket_Status = obj_Vacation.over_all_ticket_status;

            insert_pp_data.Ticket_Number_employee = obj_Vacation.employee_ticket_number;
            insert_pp_data.IssueDate_employee = obj_Vacation.employee_date_of_issue;
            insert_pp_data.TicketPrice_employee = obj_Vacation.employee_ticket_price;
            #endregion

            #region Employee Entitlements to be processed by SAS   

            insert_pp_data.Visa_Amount_Claim = Convert.ToBoolean(obj_Vacation.Visa_Amount_Claim);
            insert_pp_data.Taxi_Fare_Claim = Convert.ToBoolean(obj_Vacation.Taxi_Fare_Claim);
            insert_pp_data.Visa_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Visa);
            insert_pp_data.Taxi_Fare_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Taxi);
            #endregion

            insert_pp_data.IsActive = true;
            insert_pp_data.TimeStamp = CurrentTime;

            status = _entity.SaveChanges() > 0;
            #region Keep AuditLog_p007
            if (status)
            {
                string request_id = insert_pp_data.RequestId.ToString();
                string record = obj_Vacation.place_to_visit + " || " + obj_Vacation.reason + " || " + obj_Vacation.remark_one + " || " + obj_Vacation.is_complaince_approval_required + " || " + obj_Vacation.compliance_approval_date +
       " || " + obj_Vacation.last_day_of_work + " || " + obj_Vacation.return_to_duty + " || " + obj_Vacation.workflow_delegated + " || " + obj_Vacation.justification_no_delegation +
       " || " + obj_Vacation.address_during_absence + " || " + (obj_Vacation.Visa_Duration) + " || " + (obj_Vacation.Visa_With) +
       " || " + obj_Vacation.telephone + " || " + obj_Vacation.mode_of_travel + " || " + obj_Vacation.location_id + " || " + obj_Vacation.required_exit_visa + " || " + obj_Vacation.type_of_exit_visa +
       " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.required_foreign_visa + " || " + obj_Vacation.foreign_visa_countries +
       " || " + obj_Vacation.foreign_visa_quantity + " || " + obj_Vacation.required_travel_insurance + " || " + obj_Vacation.travel_insurance_countries + " || " + obj_Vacation.travel_insurance_quantity +
       " || " + obj_Vacation.required_rent_car + " || " + obj_Vacation.rent_car_charged_to + " || " + obj_Vacation.rent_car_project_no +
       " || " + obj_Vacation.car_type + " || " + obj_Vacation.rent_car_picked_up_at + " || " + obj_Vacation.rent_car_pick_up_date + " || " + obj_Vacation.rent_car_pick_up_time +
       " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.rent_car_return_date + " || " + obj_Vacation.rent_car_return_time +
       " || " + obj_Vacation.rent_car_remark + " || " + obj_Vacation.required_hotel_booking + " || " + obj_Vacation.hotel_booking_charged_to +
       " || " + obj_Vacation.hotel_booking_project_no + " || " + obj_Vacation.hotel_name + " || " + obj_Vacation.type_of_room +
       " || " + obj_Vacation.hotel_location + " || " + obj_Vacation.room_preferences + " || " + obj_Vacation.number_of_rooms +
       " || " + obj_Vacation.hotel_booking_payment_mode + " || " + obj_Vacation.iban + " || " + obj_Vacation.hotel_booking_check_in_date + " || " + obj_Vacation.hotel_check_in_time +
       " || " + obj_Vacation.hotel_booking_check_out_date + " || " + obj_Vacation.hotel_check_out_time + " || " + obj_Vacation.hotel_booking_remark +
       " || " + obj_Vacation.departure_date + " || " + obj_Vacation.departure_flight_number + " || " + obj_Vacation.return_date +
       " || " + obj_Vacation.return_flight_number + " || " + obj_Vacation.travel_routing + " || " + obj_Vacation.note + " || " + obj_Vacation.type_of_ticket +
      " || " + obj_Vacation.cash_advance + " || " + obj_Vacation.amx_holder + " || " + obj_Vacation.salary_advance +
       " || " + obj_Vacation.bank_account + " || " + obj_Vacation.ticket_cost + " || " + obj_Vacation.daily_allowance + " || " + obj_Vacation.hotel_cost +
       " || " + obj_Vacation.other_expenses + " || " + obj_Vacation.travel_advance_remark + " || " + obj_Vacation.travel_advance_total +
     " || " + obj_Vacation.revalidation_charge + " || " + obj_Vacation.employee_ticket_number + " || " + Convert.ToDateTime(obj_Vacation.employee_date_of_issue) + " || " + obj_Vacation.employee_ticket_price +
       " || " + obj_Vacation.total_ticket_price + " || " + obj_Vacation.over_all_ticket_status + " || " + obj_Vacation.ticket_charged_to +
       " || " + obj_Vacation.from_period + " || " + obj_Vacation.to_period + " || " + obj_Vacation.Vacation +
         " || " + obj_Vacation.Leave_WO_Pay + " || " + obj_Vacation.Holidays + " || " + obj_Vacation.Friday +
            " || " + obj_Vacation.Saturday + " || " + obj_Vacation.Total_No_of_Days + " || " + obj_Vacation.Visa_Amount_Claim +
                  " || " + obj_Vacation.Taxi_Fare_Claim + " || " + obj_Vacation.HR_Remarks_Visa + " || " + obj_Vacation.HR_Remarks_Taxi +
       " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
       " || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
       " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation", request_id, "INITIATOR");
            }
            #endregion Keep AuditLog_p007          

            if (status)
            {
                #region  Dependents Information              
                var depp = _entity.tb_TA_Vacation_DependentsInfo.Where(x => x.TA_Id == insert_pp_data.Id).ToList();
                if (depp != null)
                {
                    foreach (var item in depp)
                    {
                        _entity.tb_TA_Vacation_DependentsInfo.Remove(item);
                        _entity.SaveChanges();
                    }
                }
                if (obj_Vacation.dependents_name != null)
                {
                    string[] depe_name = obj_Vacation.dependents_name.Split('~');
                    string[] depe_relation = obj_Vacation.dependents_relation.Split('~');
                    string[] depe_age = obj_Vacation.dependents_age.Split('~');
                    string[] depe_visa_type = obj_Vacation.dependents_visa_type.Split('~');
                    string[] depe_ta_type = obj_Vacation.dependents_ta_type.Split('~');
                    string[] depe_remark = { };
                    if (obj_Vacation.dependents_remarks == null)
                    {

                    }
                    else
                    {
                        depe_remark = obj_Vacation.dependents_remarks.Split('~');
                    }
                    for (int i = 0; i < depe_name.Count(); i++)
                    {
                        if (depe_name[i] != "")
                        {
                            var dep = _entity.tb_TA_Vacation_DependentsInfo.Create();
                            dep.TA_Id = insert_pp_data.Id;
                            dep.Name = depe_name[i];
                            if (depe_relation.Count() < depe_name.Count())
                            {
                                dep.Relationship = "";
                            }
                            else
                            {
                                dep.Relationship = depe_relation[i];
                            }
                            if (depe_age.Count() < depe_name.Count())
                            {
                                dep.Age = "";
                            }
                            else
                            {
                                dep.Age = depe_age[i];
                            }
                            if (depe_visa_type.Count() < depe_name.Count())
                            {
                                dep.Visa_Type = "";
                            }
                            else
                            {
                                dep.Visa_Type = depe_visa_type[i];
                            }
                            if (depe_ta_type.Count() < depe_name.Count())
                            {
                                dep.TA_Type = "";
                            }
                            else
                            {
                                dep.TA_Type = depe_ta_type[i];
                            }
                            if (obj_Vacation.dependents_remarks == null)
                            {

                            }
                            else
                            {
                                if (depe_remark.Count() < depe_name.Count())
                                {
                                    dep.Remark = "";
                                }
                                else
                                {
                                    dep.Remark = depe_remark[i];
                                }
                            }
                            dep.IsActive = true;
                            dep.TimeStamp = CurrentTime;
                            _entity.tb_TA_Vacation_DependentsInfo.Add(dep);
                            status = _entity.SaveChanges() > 0;

                            #region Keep AuditLog_p007
                            if (status)
                            {
                                if (obj_Vacation.dependents_remarks == null)
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation_DependentsInfo", request_id, "INITIATOR");
                                }
                                else
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation_DependentsInfo", request_id, "INITIATOR");
                                }
                            }
                            #endregion Keep AuditLog_p007
                        }
                    }
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", obj_Vacation.request_id, remark, obj_Vacation.emp_local_id, obj_Vacation.creator_id, "", "", "", "", "");
                    }
                }
                #endregion
            }

            #region attachment edit

            if (status && model._FileList != null && model._FileList.Count > 0)
            {
                string reqid = req_id.ToString();
                if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == reqid && x.IsActive == true && x.filebatch == 2).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = reqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";

                }
                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == reqid && x.IsActive == true && x.filebatch == 1).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = reqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }
            }
            #endregion attachment edit

            #endregion
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //P007-Vacation(Preema)
        public object Edit_TA_Vacation(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var obj_Vacation = model.VacationModel;

            #region Store Request Data
            msg = "Success";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            long req_id = Convert.ToInt64(rqid);
            var insert_pp_data = _entity.tb_TA_Vacation.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            insert_pp_data.Place_Visit = obj_Vacation.place_to_visit;
            insert_pp_data.Reasons = obj_Vacation.reason;
            insert_pp_data.Remark = obj_Vacation.remark_one;
            insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(obj_Vacation.is_complaince_approval_required);
            if (obj_Vacation.is_complaince_approval_required == 1)
            {
                if (obj_Vacation.compliance_approval_date.Year != 0001)
                    insert_pp_data.Compliance_Approval_Date = obj_Vacation.compliance_approval_date;
            }
            insert_pp_data.Last_Day_Of_Work = obj_Vacation.last_day_of_work;
            insert_pp_data.Return_To_Duty = obj_Vacation.return_to_duty;
            insert_pp_data.IsDelegated = Convert.ToBoolean(obj_Vacation.workflow_delegated);
            insert_pp_data.Just_No_Delegated = obj_Vacation.justification_no_delegation;
            insert_pp_data.Address_During_Absence = obj_Vacation.address_during_absence;
            insert_pp_data.Telephone_No = obj_Vacation.telephone;
            insert_pp_data.Travel_Mode = obj_Vacation.mode_of_travel;
            insert_pp_data.Location_Id = obj_Vacation.location_id;
            insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(obj_Vacation.required_exit_visa);
            insert_pp_data.Type_Exit_ReEntry_Visa = obj_Vacation.type_of_exit_visa;
            insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;
            insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(obj_Vacation.required_foreign_visa);
            insert_pp_data.Foreign_Visa_Countries = obj_Vacation.foreign_visa_countries;
            insert_pp_data.Foreign_Visa_Quantity = obj_Vacation.foreign_visa_quantity;
            insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(obj_Vacation.required_travel_insurance);
            insert_pp_data.Travel_Insurance_Countries = obj_Vacation.travel_insurance_countries;
            insert_pp_data.Travel_Insurance_Quantity = obj_Vacation.travel_insurance_quantity;
            insert_pp_data.Is_RentCar = Convert.ToBoolean(obj_Vacation.required_rent_car);
            insert_pp_data.RentCar_Charged_to = obj_Vacation.rent_car_charged_to;
            insert_pp_data.RentCar_ProjectNo = obj_Vacation.rent_car_project_no;
            insert_pp_data.Car_Type = obj_Vacation.car_type;
            insert_pp_data.Car_PickUp_at = obj_Vacation.rent_car_picked_up_at;
            if (obj_Vacation.rent_car_pick_up_date.Year != 001)
                insert_pp_data.Car_PickUp_date = obj_Vacation.rent_car_pick_up_date;
            insert_pp_data.Car_PickUp_Time = obj_Vacation.rent_car_pick_up_time;
            insert_pp_data.Car_Payment_Type = obj_Vacation.rent_car_payment_type;
            if (obj_Vacation.rent_car_return_date.Year != 0001)
                insert_pp_data.Car_Return_date = obj_Vacation.rent_car_return_date;
            insert_pp_data.Car_Return_Time = obj_Vacation.rent_car_return_time;
            insert_pp_data.Car_Remark = obj_Vacation.rent_car_remark;
            insert_pp_data.Is_Hotel = Convert.ToBoolean(obj_Vacation.required_hotel_booking);
            insert_pp_data.Hotel_Charged_to = obj_Vacation.hotel_booking_charged_to;
            insert_pp_data.Hotel_ProjectNo = obj_Vacation.hotel_booking_project_no;
            insert_pp_data.Hotel_Name = obj_Vacation.hotel_name;
            insert_pp_data.Room_Type = obj_Vacation.type_of_room;
            insert_pp_data.Hotel_Location = obj_Vacation.hotel_location;
            insert_pp_data.Room_Preference = obj_Vacation.room_preferences;
            insert_pp_data.Number_Of_Rooms = obj_Vacation.number_of_rooms;
            insert_pp_data.Hotel_Payment_Type = obj_Vacation.hotel_booking_payment_mode;
            insert_pp_data.IBAN = obj_Vacation.iban;
            if (obj_Vacation.hotel_booking_check_in_date.Year != 0001)
                insert_pp_data.Hote_Check_In_Date = obj_Vacation.hotel_booking_check_in_date;
            insert_pp_data.Hotel_Check_In_Time = obj_Vacation.hotel_check_in_time;
            if (obj_Vacation.hotel_booking_check_out_date.Year != 0001)
                insert_pp_data.Hotel_Check_Out_Date = obj_Vacation.hotel_booking_check_out_date;
            insert_pp_data.Hotel_Check_Out_Time = obj_Vacation.hotel_check_out_time;
            insert_pp_data.Hotel_Remark = obj_Vacation.hotel_booking_remark;
            if (obj_Vacation.departure_date.Year != 0001)
                insert_pp_data.Departure_Date = obj_Vacation.departure_date;
            insert_pp_data.Departure_Flight_No = obj_Vacation.departure_flight_number;
            if (obj_Vacation.return_date.Year != 0001)
                insert_pp_data.Return_Date = obj_Vacation.return_date;
            insert_pp_data.Return_Flight_No = obj_Vacation.return_flight_number;
            insert_pp_data.Travel_Routing = obj_Vacation.travel_routing;
            insert_pp_data.Note = obj_Vacation.note;
            insert_pp_data.Cash_Advance = Convert.ToBoolean(obj_Vacation.cash_advance);
            insert_pp_data.Amex_Holder = Convert.ToBoolean(obj_Vacation.amx_holder);
            insert_pp_data.Salary_Advance = obj_Vacation.salary_advance;
            insert_pp_data.Bank_account = obj_Vacation.bank_account;
            insert_pp_data.Ticket_Cost = obj_Vacation.ticket_cost;
            insert_pp_data.Hotel_Cost = obj_Vacation.hotel_cost;
            insert_pp_data.Daily_allowance = obj_Vacation.daily_allowance;
            insert_pp_data.Other_Expenses = obj_Vacation.other_expenses;
            insert_pp_data.Advance_Remark = obj_Vacation.travel_advance_remark;
            insert_pp_data.Travel_Advance_Total = obj_Vacation.travel_advance_total;
            insert_pp_data.Ticket_Type = obj_Vacation.type_of_ticket;
            insert_pp_data.Visa_duration = Convert.ToString(obj_Vacation.Visa_Duration);
            insert_pp_data.Visa_with = Convert.ToString(obj_Vacation.Visa_With);

            if (obj_Vacation.required_rent_car == 1)
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_hotel_booking == 1)
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.mode_of_travel != "Air")
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            else
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            if (obj_Vacation.cash_advance == 1)
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_exit_visa == 1)
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_foreign_visa == 1)
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_travel_insurance == 1)
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }

            #region Number of Days Information
            insert_pp_data.Ticket_Charged_To = obj_Vacation.ticket_charged_to;
            insert_pp_data.From_Period = Convert.ToDateTime(obj_Vacation.from_period);
            insert_pp_data.To_Period = Convert.ToDateTime(obj_Vacation.to_period);
            insert_pp_data.Vacation = Convert.ToInt32(obj_Vacation.Vacation);
            insert_pp_data.Leave_Pay = Convert.ToInt32(obj_Vacation.Leave_WO_Pay);
            insert_pp_data.Holidays = Convert.ToInt32(obj_Vacation.Holidays);
            insert_pp_data.Friday = Convert.ToInt32(obj_Vacation.Friday);
            insert_pp_data.Saturday = Convert.ToInt32(obj_Vacation.Saturday);
            insert_pp_data.Total_No_of_Days = Convert.ToString(obj_Vacation.Total_No_of_Days);
            #endregion

            #region Travel Agency    
            if (obj_Vacation.employee_ticket_number != null && obj_Vacation.employee_date_of_issue!= null && obj_Vacation.employee_ticket_price!= null)
            {
                insert_pp_data.Revalidation_Charge = obj_Vacation.revalidation_charge;
                insert_pp_data.Total_Ticket_Price = obj_Vacation.total_ticket_price;
                insert_pp_data.Ticket_Status = obj_Vacation.over_all_ticket_status;

                insert_pp_data.Ticket_Number_employee = obj_Vacation.employee_ticket_number;
                insert_pp_data.IssueDate_employee = obj_Vacation.employee_date_of_issue;
                insert_pp_data.TicketPrice_employee = obj_Vacation.employee_ticket_price;
            }
            #endregion

            #region Employee Entitlements to be processed by SAS   

            insert_pp_data.Visa_Amount_Claim = Convert.ToBoolean(obj_Vacation.Visa_Amount_Claim);
            insert_pp_data.Taxi_Fare_Claim = Convert.ToBoolean(obj_Vacation.Taxi_Fare_Claim);
            insert_pp_data.Visa_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Visa);
            insert_pp_data.Taxi_Fare_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Taxi);
            #endregion

            insert_pp_data.IsActive = true;
            insert_pp_data.TimeStamp = CurrentTime;

            status = _entity.SaveChanges() > 0;
            #region Keep AuditLog_p007
            if (status)
            {
                string request_id = insert_pp_data.RequestId.ToString();
                string record = obj_Vacation.place_to_visit + " || " + obj_Vacation.reason + " || " + obj_Vacation.remark_one + " || " + obj_Vacation.is_complaince_approval_required + " || " + obj_Vacation.compliance_approval_date +
       " || " + obj_Vacation.last_day_of_work + " || " + obj_Vacation.return_to_duty + " || " + obj_Vacation.workflow_delegated + " || " + obj_Vacation.justification_no_delegation +
       " || " + obj_Vacation.address_during_absence + " || " + (obj_Vacation.Visa_Duration) + " || " + (obj_Vacation.Visa_With) +
       " || " + obj_Vacation.telephone + " || " + obj_Vacation.mode_of_travel + " || " + obj_Vacation.location_id + " || " + obj_Vacation.required_exit_visa + " || " + obj_Vacation.type_of_exit_visa +
       " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.required_foreign_visa + " || " + obj_Vacation.foreign_visa_countries +
       " || " + obj_Vacation.foreign_visa_quantity + " || " + obj_Vacation.required_travel_insurance + " || " + obj_Vacation.travel_insurance_countries + " || " + obj_Vacation.travel_insurance_quantity +
       " || " + obj_Vacation.required_rent_car + " || " + obj_Vacation.rent_car_charged_to + " || " + obj_Vacation.rent_car_project_no +
       " || " + obj_Vacation.car_type + " || " + obj_Vacation.rent_car_picked_up_at + " || " + obj_Vacation.rent_car_pick_up_date + " || " + obj_Vacation.rent_car_pick_up_time +
       " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.rent_car_return_date + " || " + obj_Vacation.rent_car_return_time +
       " || " + obj_Vacation.rent_car_remark + " || " + obj_Vacation.required_hotel_booking + " || " + obj_Vacation.hotel_booking_charged_to +
       " || " + obj_Vacation.hotel_booking_project_no + " || " + obj_Vacation.hotel_name + " || " + obj_Vacation.type_of_room +
       " || " + obj_Vacation.hotel_location + " || " + obj_Vacation.room_preferences + " || " + obj_Vacation.number_of_rooms +
       " || " + obj_Vacation.hotel_booking_payment_mode + " || " + obj_Vacation.iban + " || " + obj_Vacation.hotel_booking_check_in_date + " || " + obj_Vacation.hotel_check_in_time +
       " || " + obj_Vacation.hotel_booking_check_out_date + " || " + obj_Vacation.hotel_check_out_time + " || " + obj_Vacation.hotel_booking_remark +
       " || " + obj_Vacation.departure_date + " || " + obj_Vacation.departure_flight_number + " || " + obj_Vacation.return_date +
       " || " + obj_Vacation.return_flight_number + " || " + obj_Vacation.travel_routing + " || " + obj_Vacation.note + " || " + obj_Vacation.type_of_ticket +
      " || " + obj_Vacation.cash_advance + " || " + obj_Vacation.amx_holder + " || " + obj_Vacation.salary_advance +
       " || " + obj_Vacation.bank_account + " || " + obj_Vacation.ticket_cost + " || " + obj_Vacation.daily_allowance + " || " + obj_Vacation.hotel_cost +
       " || " + obj_Vacation.other_expenses + " || " + obj_Vacation.travel_advance_remark + " || " + obj_Vacation.travel_advance_total +
     " || " + insert_pp_data.Revalidation_Charge + " || " + insert_pp_data.Ticket_Number_employee + " || " + Convert.ToDateTime(insert_pp_data.IssueDate_employee) + " || " + insert_pp_data.TicketPrice_employee +
       " || " + insert_pp_data.TicketPrice_employee + " || " + insert_pp_data.Ticket_Status + " || " + obj_Vacation.ticket_charged_to +
       " || " + obj_Vacation.from_period + " || " + obj_Vacation.to_period + " || " + obj_Vacation.Vacation +
         " || " + obj_Vacation.Leave_WO_Pay + " || " + obj_Vacation.Holidays + " || " + obj_Vacation.Friday +
            " || " + obj_Vacation.Saturday + " || " + obj_Vacation.Total_No_of_Days + " || " + obj_Vacation.Visa_Amount_Claim +
                  " || " + obj_Vacation.Taxi_Fare_Claim + " || " + obj_Vacation.HR_Remarks_Visa + " || " + obj_Vacation.HR_Remarks_Taxi +
       " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
       " || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
       " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                try
                {
                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation", request_id, "INITIATOR");
                }
                catch (DbEntityValidationException e)
                {
                    foreach (var eve in e.EntityValidationErrors)
                    {
                        Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                            eve.Entry.Entity.GetType().Name, eve.Entry.State);
                        foreach (var ve in eve.ValidationErrors)
                        {
                            Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                                ve.PropertyName, ve.ErrorMessage);
                        }
                    }
                    throw;
                }
            }
            #endregion Keep AuditLog_p007

            if (status)
            {
                #region  Dependents Information              
                var depp = _entity.tb_TA_Vacation_DependentsInfo.Where(x => x.TA_Id == insert_pp_data.Id).ToList();
                if (depp != null)
                {
                    foreach (var item in depp)
                    {
                        _entity.tb_TA_Vacation_DependentsInfo.Remove(item);
                        _entity.SaveChanges();
                    }
                }
                if (obj_Vacation.dependents_name != null)
                {
                    string[] depe_name = obj_Vacation.dependents_name.Split('~');
                    string[] depe_relation = obj_Vacation.dependents_relation.Split('~');
                    string[] depe_age = obj_Vacation.dependents_age.Split('~');
                    string[] depe_visa_type = obj_Vacation.dependents_visa_type.Split('~');
                    string[] depe_ta_type = obj_Vacation.dependents_ta_type.Split('~');
                    string[] depe_remark = { };
                    if (obj_Vacation.dependents_remarks == null)
                    {

                    }
                    else
                    {
                        depe_remark = obj_Vacation.dependents_remarks.Split('~');
                    }
                    for (int i = 0; i < depe_name.Count(); i++)
                    {
                        if (depe_name[i] != "")
                        {
                            var dep = _entity.tb_TA_Vacation_DependentsInfo.Create();
                            dep.TA_Id = insert_pp_data.Id;
                            dep.Name = depe_name[i];
                            if (depe_relation.Count() < depe_name.Count())
                            {
                                dep.Relationship = "";
                            }
                            else
                            {
                                dep.Relationship = depe_relation[i];
                            }
                            if (depe_age.Count() < depe_name.Count())
                            {
                                dep.Age = "";
                            }
                            else
                            {
                                dep.Age = depe_age[i];
                            }
                            if (depe_visa_type.Count() < depe_name.Count())
                            {
                                dep.Visa_Type = "";
                            }
                            else
                            {
                                dep.Visa_Type = depe_visa_type[i];
                            }
                            if (depe_ta_type.Count() < depe_name.Count())
                            {
                                dep.TA_Type = "";
                            }
                            else
                            {
                                dep.TA_Type = depe_ta_type[i];
                            }
                            if (obj_Vacation.dependents_remarks == null)
                            {

                            }
                            else
                            {
                                if (depe_remark.Count() < depe_name.Count())
                                {
                                    dep.Remark = "";
                                }
                                else
                                {
                                    dep.Remark = depe_remark[i];
                                }
                            }
                            dep.IsActive = true;
                            dep.TimeStamp = CurrentTime;
                            _entity.tb_TA_Vacation_DependentsInfo.Add(dep);
                            status = _entity.SaveChanges() > 0;

                            #region Keep AuditLog_p007
                            if (status)
                            {
                                if (obj_Vacation.dependents_remarks == null)
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation_DependentsInfo", request_id, "INITIATOR");
                                }
                                else
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_Vacation_DependentsInfo", request_id, "INITIATOR");
                                }
                            }
                            #endregion Keep AuditLog_p007
                        }
                    }
                    //if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    //{
                    //    string remark = "Request was Edited by";
                    //    _rpp.InsertApproveLog("EDIT", obj_Vacation.request_id, remark, obj_Vacation.emp_local_id, obj_Vacation.creator_id, "", "", "", "", "");
                    //}
                }
                #endregion

                #region  Travel Agency Information
                if (obj_Vacation.depent_ticket_number != null)
                {
                    var travel_agency = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == insert_pp_data.RequestId).ToList();
                    foreach (var item in travel_agency)
                    {
                        _entity.tb_TA_TravelAgencyInfo.Remove(item);
                        _entity.SaveChanges();
                    }

                    string[] depe_ticket_number = obj_Vacation.depent_ticket_number.Split('~');
                    string[] depe_issue_date = obj_Vacation.depent_issue_date.Split('~');
                    string[] depe_ticket_price = obj_Vacation.depent_ticket_price.Split('~');


                    for (int i = 0; i < depe_ticket_number.Count(); i++)
                    {
                        var dep = _entity.tb_TA_TravelAgencyInfo.Create();
                        if (depe_ticket_number[i] != "")
                        {
                            dep.AgencyId = Convert.ToString(insert_pp_data.Id);

                            dep.Ticket_Number = depe_ticket_number[i];
                            if (depe_ticket_number.Count() < depe_ticket_number.Count())
                            {
                                dep.Ticket_Number = "";
                            }
                            else
                            {
                                dep.Ticket_Number = depe_ticket_number[i];
                            }
                            if (depe_issue_date.Count() < depe_issue_date.Count())
                            {
                                dep.IssueDate = Convert.ToDateTime(null);
                            }
                            else
                            {
                                dep.IssueDate = Convert.ToDateTime(depe_issue_date[i]);
                            }
                            if (depe_ticket_price.Count() < depe_ticket_price.Count())
                            {
                                dep.TicketPrice = "";
                            }
                            else
                            {
                                dep.TicketPrice = depe_ticket_price[i];
                            }
                            dep.IsEmployee = false;
                            dep.RequestId = insert_pp_data.RequestId;
                            dep.IsActive = true;
                            dep.TimeStamp = CurrentTime;
                            _entity.tb_TA_TravelAgencyInfo.Add(dep);
                            status = _entity.SaveChanges() > 0;
                        }                   

                        #region Keep AuditLog_p007
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId.ToString();
                            string record = depe_ticket_number[i] + " || " + depe_issue_date[i] + " || " + depe_ticket_price[i] + " || " + dep.RequestId + " || " + dep.IsEmployee + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_TravelAgencyInfo", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p007
                    }
                }

                //if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                //{
                //string remark = "Request was Edited by";
                //_rpp.InsertApproveLog("EDIT", obj_Vacation.request_id, remark, obj_Vacation.emp_local_id, obj_Vacation.creator_id, "", "", "", "", "");

                msg = "Request Edit Successfully";
                var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.IsActive == true).FirstOrDefault();
                var application = req.tb_Application;
                if (req != null)
                {
                    if (req.RoleId != null) //to avoid backtoinitator edit loging
                    {
                        var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                        var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                        var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                    }
                    else
                    {

                        #region Log for SaveChanges

                        //to save log for savechanges                               

                        string remark = "Request was Edited by";
                        string[] split1 = model.request_id.Split('-');
                        string rqid1 = split[1];
                        if (req.Creater_ID == model.emp_local_id)
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        }
                        else
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                        }
                        #endregion

                        // }
                    }
                }
            }

            #endregion


            #region attachment edit

            if (status && model._FileList != null && model._FileList.Count > 0)
            {
                if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = rqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";

                }
                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = rqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }


            }
            #endregion attachment edit

            #endregion
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //P037-Dependents Only(Preema)
        public object Submit_TA_DependentsOnly(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var obj_Vacation = model.VacationModel;
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_TA_DependentsOnly.Create();
                insert_pp_data.RequestId = Convert.ToInt64(data.Item2);
                //insert_pp_data.Place_Visit = obj_Vacation.place_to_visit;
                //insert_pp_data.Reasons = obj_Vacation.reason;
                //insert_pp_data.Remark = obj_Vacation.remark_one;
                insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(obj_Vacation.is_complaince_approval_required);
                if (obj_Vacation.is_complaince_approval_required == 1)
                {
                    if (obj_Vacation.compliance_approval_date.Year != 0001)
                        insert_pp_data.Compliance_Approval_Date = obj_Vacation.compliance_approval_date;
                }
                //insert_pp_data.Last_Day_Of_Work = obj_Vacation.last_day_of_work;
                //insert_pp_data.Return_To_Duty = obj_Vacation.return_to_duty;
                insert_pp_data.IsDelegated = Convert.ToBoolean(obj_Vacation.workflow_delegated);
                insert_pp_data.Just_No_Delegated = obj_Vacation.justification_no_delegation;
                //insert_pp_data.Address_During_Absence = obj_Vacation.address_during_absence;
                //insert_pp_data.Telephone_No = obj_Vacation.telephone;
                insert_pp_data.Travel_Mode = obj_Vacation.mode_of_travel;
                insert_pp_data.Location_Id = obj_Vacation.location_id;
                insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(obj_Vacation.required_exit_visa);
                insert_pp_data.Type_Exit_ReEntry_Visa = obj_Vacation.type_of_exit_visa;
                insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;
                insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(obj_Vacation.required_foreign_visa);
                insert_pp_data.Foreign_Visa_Countries = obj_Vacation.foreign_visa_countries;
                insert_pp_data.Foreign_Visa_Quantity = obj_Vacation.foreign_visa_quantity;
                insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(obj_Vacation.required_travel_insurance);
                insert_pp_data.Travel_Insurance_Countries = obj_Vacation.travel_insurance_countries;
                insert_pp_data.Travel_Insurance_Quantity = obj_Vacation.travel_insurance_quantity;
                //insert_pp_data.Is_RentCar = Convert.ToBoolean(obj_Vacation.required_rent_car);
                //insert_pp_data.RentCar_Charged_to = obj_Vacation.rent_car_charged_to;
                //insert_pp_data.RentCar_ProjectNo = obj_Vacation.rent_car_project_no;
                //insert_pp_data.Car_Type = obj_Vacation.car_type;
                //insert_pp_data.Car_PickUp_at = obj_Vacation.rent_car_picked_up_at;
                //if (obj_Vacation.rent_car_pick_up_date.Year != 001)
                //    insert_pp_data.Car_PickUp_date = obj_Vacation.rent_car_pick_up_date;
                //insert_pp_data.Car_PickUp_Time = obj_Vacation.rent_car_pick_up_time;
                //insert_pp_data.Car_Payment_Type = obj_Vacation.rent_car_payment_type;
                //if (obj_Vacation.rent_car_return_date.Year != 0001)
                //    insert_pp_data.Car_Return_date = obj_Vacation.rent_car_return_date;
                //insert_pp_data.Car_Return_Time = obj_Vacation.rent_car_return_time;
                //insert_pp_data.Car_Remark = obj_Vacation.rent_car_remark;
                //insert_pp_data.Is_Hotel = Convert.ToBoolean(obj_Vacation.required_hotel_booking);
                //insert_pp_data.Hotel_Charged_to = obj_Vacation.hotel_booking_charged_to;
                //insert_pp_data.Hotel_ProjectNo = obj_Vacation.hotel_booking_project_no;
                //insert_pp_data.Hotel_Name = obj_Vacation.hotel_name;
                //insert_pp_data.Room_Type = obj_Vacation.type_of_room;
                //insert_pp_data.Hotel_Location = obj_Vacation.hotel_location;
                //insert_pp_data.Room_Preference = obj_Vacation.room_preferences;
                //insert_pp_data.Number_Of_Rooms = obj_Vacation.number_of_rooms;
                //insert_pp_data.Hotel_Payment_Type = obj_Vacation.hotel_booking_payment_mode;
                //insert_pp_data.IBAN = obj_Vacation.iban;
                //if (obj_Vacation.hotel_booking_check_in_date.Year != 0001)
                //    insert_pp_data.Hote_Check_In_Date = obj_Vacation.hotel_booking_check_in_date;
                //insert_pp_data.Hotel_Check_In_Time = obj_Vacation.hotel_check_in_time;
                //if (obj_Vacation.hotel_booking_check_out_date.Year != 0001)
                //    insert_pp_data.Hotel_Check_Out_Date = obj_Vacation.hotel_booking_check_out_date;
                //insert_pp_data.Hotel_Check_Out_Time = obj_Vacation.hotel_check_out_time;
                //insert_pp_data.Hotel_Remark = obj_Vacation.hotel_booking_remark;
                if (obj_Vacation.departure_date.Year != 0001)
                    insert_pp_data.Departure_Date = obj_Vacation.departure_date;
                insert_pp_data.Departure_Flight_No = obj_Vacation.departure_flight_number;
                if (obj_Vacation.return_date.Year != 0001)
                    insert_pp_data.Return_Date = obj_Vacation.return_date;
                insert_pp_data.Return_Flight_No = obj_Vacation.return_flight_number;
                insert_pp_data.Travel_Routing = obj_Vacation.travel_routing;
                insert_pp_data.Note = obj_Vacation.note;
                //insert_pp_data.Cash_Advance = Convert.ToBoolean(obj_Vacation.cash_advance);
                //insert_pp_data.Amex_Holder = Convert.ToBoolean(obj_Vacation.amx_holder);
                //insert_pp_data.Salary_Advance = obj_Vacation.salary_advance;
                //insert_pp_data.Bank_account = obj_Vacation.bank_account;
                //insert_pp_data.Ticket_Cost = obj_Vacation.ticket_cost;
                //insert_pp_data.Hotel_Cost = obj_Vacation.hotel_cost;
                //insert_pp_data.Daily_allowance = obj_Vacation.daily_allowance;
                //insert_pp_data.Other_Expenses = obj_Vacation.other_expenses;
                //insert_pp_data.Advance_Remark = obj_Vacation.travel_advance_remark;
                //insert_pp_data.Travel_Advance_Total = obj_Vacation.travel_advance_total;

                insert_pp_data.Visa_duration = Convert.ToString(obj_Vacation.Visa_Duration);
                insert_pp_data.Visa_with = Convert.ToString(obj_Vacation.Visa_With);

                //if (obj_Vacation.required_rent_car == 1)
                //{
                //    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
                //}
                //else
                //{
                //    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                //}
                //if (obj_Vacation.required_hotel_booking == 1)
                //{
                //    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
                //}
                //else
                //{
                //    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                //}
                if (obj_Vacation.mode_of_travel != "Air")
                {
                    insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                else
                {
                    insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                //if (obj_Vacation.cash_advance == 1)
                //{
                //    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
                //}
                //else
                //{
                //    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                //}
                if (obj_Vacation.required_exit_visa == 1)
                {
                    insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_foreign_visa == 1)
                {
                    insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_travel_insurance == 1)
                {
                    insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }

                insert_pp_data.Ticket_Type = obj_Vacation.type_of_ticket;

                //#region Number of Days Information
                //insert_pp_data.Ticket_Charged_To = obj_Vacation.ticket_charged_to;
                //insert_pp_data.From_Period = Convert.ToDateTime(obj_Vacation.from_period);
                //insert_pp_data.To_Period = Convert.ToDateTime(obj_Vacation.to_period);
                //insert_pp_data.Vacation = Convert.ToInt32(obj_Vacation.Vacation);
                //insert_pp_data.Leave_Pay = Convert.ToInt32(obj_Vacation.Leave_WO_Pay);
                //insert_pp_data.Holidays = Convert.ToInt32(obj_Vacation.Holidays);
                //insert_pp_data.Friday = Convert.ToInt32(obj_Vacation.Friday);
                //insert_pp_data.Saturday = Convert.ToInt32(obj_Vacation.Saturday);
                //insert_pp_data.Total_No_of_Days = Convert.ToString(obj_Vacation.Total_No_of_Days);

                //#endregion
                #region Travel Agency     

                insert_pp_data.Revalidation_Charge = obj_Vacation.revalidation_charge;
                insert_pp_data.Total_Ticket_Price = obj_Vacation.total_ticket_price;
                insert_pp_data.Ticket_Status = obj_Vacation.over_all_ticket_status;

                insert_pp_data.Ticket_Number_employee = obj_Vacation.employee_ticket_number;
                insert_pp_data.IssueDate_employee = obj_Vacation.employee_date_of_issue;
                insert_pp_data.TicketPrice_employee = obj_Vacation.employee_ticket_price;
                #endregion
                #region Employee Entitlements to be processed by SAS              
                insert_pp_data.Visa_Amount_Claim = Convert.ToBoolean(obj_Vacation.Visa_Amount_Claim);
                insert_pp_data.Taxi_Fare_Claim = Convert.ToBoolean(obj_Vacation.Taxi_Fare_Claim);
                insert_pp_data.Visa_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Visa);
                insert_pp_data.Taxi_Fare_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Taxi);
                #endregion

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;

                _entity.tb_TA_DependentsOnly.Add(insert_pp_data);

                try
                {
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p037
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId.ToString();
                        string record = obj_Vacation.is_complaince_approval_required + " || " + obj_Vacation.compliance_approval_date +
              " || " + obj_Vacation.workflow_delegated + " || " + obj_Vacation.justification_no_delegation + " || " + (obj_Vacation.Visa_Duration) + " || " + (obj_Vacation.Visa_With) +
         " || " + obj_Vacation.mode_of_travel + " || " + obj_Vacation.location_id + " || " + obj_Vacation.required_exit_visa + " || " + obj_Vacation.type_of_exit_visa +
               " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.required_foreign_visa + " || " + obj_Vacation.foreign_visa_countries +
               " || " + obj_Vacation.foreign_visa_quantity + " || " + obj_Vacation.required_travel_insurance + " || " + obj_Vacation.travel_insurance_countries + " || " + obj_Vacation.travel_insurance_quantity +
               " || " + obj_Vacation.departure_date + " || " + obj_Vacation.departure_flight_number + " || " + obj_Vacation.return_date +
               " || " + obj_Vacation.return_flight_number + " || " + obj_Vacation.travel_routing + " || " + obj_Vacation.note + " || " + obj_Vacation.type_of_ticket +
             " || " + obj_Vacation.revalidation_charge + " || " + obj_Vacation.employee_ticket_number + " || " + Convert.ToDateTime(obj_Vacation.employee_date_of_issue) + " || " + obj_Vacation.employee_ticket_price +
               " || " + obj_Vacation.total_ticket_price + " || " + obj_Vacation.over_all_ticket_status + " || " + obj_Vacation.ticket_charged_to + " || " + obj_Vacation.Visa_Amount_Claim +
                          " || " + obj_Vacation.Taxi_Fare_Claim + " || " + obj_Vacation.HR_Remarks_Visa + " || " + obj_Vacation.HR_Remarks_Taxi + " || " + insert_pp_data.Air_Ticket_Status +
               " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status + " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p037
                }

                catch (DbEntityValidationException ex)
                {
                    foreach (var entityValidationErrors in ex.EntityValidationErrors)
                    {
                        foreach (var validationError in entityValidationErrors.ValidationErrors)
                        {
                            Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                        }
                    }
                }

                if (status)
                {
                    #region  Dependents Information
                    if (obj_Vacation.dependents_name != null)
                    {
                        string[] depe_name = obj_Vacation.dependents_name.Split('~');
                        string[] depe_relation = obj_Vacation.dependents_relation.Split('~');
                        string[] depe_age = obj_Vacation.dependents_age.Split('~');
                        string[] depe_visa_type = obj_Vacation.dependents_visa_type.Split('~');
                        string[] depe_ta_type = obj_Vacation.dependents_ta_type.Split('~');
                        string[] depe_remark= { };
                        if (obj_Vacation.dependents_remarks == null)
                        {

                        }
                        else
                        {
                            depe_remark = obj_Vacation.dependents_remarks.Split('~');
                        }
                        for (int i = 0; i < depe_name.Count(); i++)
                        {
                            if (depe_name[i] != "")
                            {
                                var dep = _entity.tb_TA_DependentsOnly_DependentsInfo.Create();
                                dep.TA_Id = insert_pp_data.Id;
                                dep.Name = depe_name[i];
                                if (depe_relation.Count() < depe_name.Count())
                                {
                                    dep.Relationship = "";
                                }
                                else
                                {
                                    dep.Relationship = depe_relation[i];
                                }
                                if (depe_age.Count() < depe_name.Count())
                                {
                                    dep.Age = "";
                                }
                                else
                                {
                                    dep.Age = depe_age[i];
                                }
                                if (depe_visa_type.Count() < depe_name.Count())
                                {
                                    dep.Visa_Type = "";
                                }
                                else
                                {
                                    dep.Visa_Type = depe_visa_type[i];
                                }
                                if (depe_ta_type.Count() < depe_name.Count())
                                {
                                    dep.TA_Type = "";
                                }
                                else
                                {
                                    dep.TA_Type = depe_ta_type[i];
                                }
                                if (obj_Vacation.dependents_remarks == null)
                                {

                                }
                                else
                                {
                                    if (depe_remark.Count() < depe_name.Count())
                                    {
                                        dep.Remark = "";
                                    }
                                    else
                                    {
                                        dep.Remark = depe_remark[i];
                                    }
                                }
                                dep.IsActive = true;
                                dep.TimeStamp = CurrentTime;
                                _entity.tb_TA_DependentsOnly_DependentsInfo.Add(dep);
                                status = _entity.SaveChanges() > 0;
                                #region Keep AuditLog_p037
                                if (status)
                                {
                                    if (obj_Vacation.dependents_remarks == null)
                                    {
                                        string request_id = insert_pp_data.RequestId.ToString();
                                        string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly_DependentsInfo", request_id, "INITIATOR");
                                    }
                                    else
                                    {
                                        string request_id = insert_pp_data.RequestId.ToString();
                                        string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                        bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly_DependentsInfo", request_id, "INITIATOR");
                                    }
                                }
                                #endregion Keep AuditLog_p037
                            }
                        }
                    }
                    #endregion
                }
                #endregion

                #region attachments
                //to store attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }
                #endregion

                #region attachments
                // to store attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                #endregion

            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);
        }

        //P037-Dependents Only(Preema)
        public object Submit_Edit_TA_DependentsOnly(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var obj_Vacation = model.VacationModel;
            long req_id = Convert.ToInt64(model.request_id);
            #region Store Request Data
            msg = "Success";
            var insert_pp_data = _entity.tb_TA_DependentsOnly.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            //insert_pp_data.Place_Visit = obj_Vacation.place_to_visit;
            //insert_pp_data.Reasons = obj_Vacation.reason;
            //insert_pp_data.Remark = obj_Vacation.remark_one;
            insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(obj_Vacation.is_complaince_approval_required);
            if (obj_Vacation.is_complaince_approval_required == 1)
            {
                if (obj_Vacation.compliance_approval_date.Year != 0001)
                    insert_pp_data.Compliance_Approval_Date = obj_Vacation.compliance_approval_date;
            }
            //insert_pp_data.Last_Day_Of_Work = obj_Vacation.last_day_of_work;
            //insert_pp_data.Return_To_Duty = obj_Vacation.return_to_duty;
            insert_pp_data.IsDelegated = Convert.ToBoolean(obj_Vacation.workflow_delegated);
            insert_pp_data.Just_No_Delegated = obj_Vacation.justification_no_delegation;
            //insert_pp_data.Address_During_Absence = obj_Vacation.address_during_absence;
            //insert_pp_data.Telephone_No = obj_Vacation.telephone;
            insert_pp_data.Travel_Mode = obj_Vacation.mode_of_travel;
            insert_pp_data.Location_Id = obj_Vacation.location_id;
            insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(obj_Vacation.required_exit_visa);
            insert_pp_data.Type_Exit_ReEntry_Visa = obj_Vacation.type_of_exit_visa;
            insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;
            insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(obj_Vacation.required_foreign_visa);
            insert_pp_data.Foreign_Visa_Countries = obj_Vacation.foreign_visa_countries;
            insert_pp_data.Foreign_Visa_Quantity = obj_Vacation.foreign_visa_quantity;
            insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(obj_Vacation.required_travel_insurance);
            insert_pp_data.Travel_Insurance_Countries = obj_Vacation.travel_insurance_countries;
            insert_pp_data.Travel_Insurance_Quantity = obj_Vacation.travel_insurance_quantity;
            //insert_pp_data.Is_RentCar = Convert.ToBoolean(obj_Vacation.required_rent_car);
            //insert_pp_data.RentCar_Charged_to = obj_Vacation.rent_car_charged_to;
            //insert_pp_data.RentCar_ProjectNo = obj_Vacation.rent_car_project_no;
            //insert_pp_data.Car_Type = obj_Vacation.car_type;
            //insert_pp_data.Car_PickUp_at = obj_Vacation.rent_car_picked_up_at;
            //if (obj_Vacation.rent_car_pick_up_date.Year != 001)
            //    insert_pp_data.Car_PickUp_date = obj_Vacation.rent_car_pick_up_date;
            //insert_pp_data.Car_PickUp_Time = obj_Vacation.rent_car_pick_up_time;
            //insert_pp_data.Car_Payment_Type = obj_Vacation.rent_car_payment_type;
            //if (obj_Vacation.rent_car_return_date.Year != 0001)
            //    insert_pp_data.Car_Return_date = obj_Vacation.rent_car_return_date;
            //insert_pp_data.Car_Return_Time = obj_Vacation.rent_car_return_time;
            //insert_pp_data.Car_Remark = obj_Vacation.rent_car_remark;
            //insert_pp_data.Is_Hotel = Convert.ToBoolean(obj_Vacation.required_hotel_booking);
            //insert_pp_data.Hotel_Charged_to = obj_Vacation.hotel_booking_charged_to;
            //insert_pp_data.Hotel_ProjectNo = obj_Vacation.hotel_booking_project_no;
            //insert_pp_data.Hotel_Name = obj_Vacation.hotel_name;
            //insert_pp_data.Room_Type = obj_Vacation.type_of_room;
            //insert_pp_data.Hotel_Location = obj_Vacation.hotel_location;
            //insert_pp_data.Room_Preference = obj_Vacation.room_preferences;
            //insert_pp_data.Number_Of_Rooms = obj_Vacation.number_of_rooms;
            //insert_pp_data.Hotel_Payment_Type = obj_Vacation.hotel_booking_payment_mode;
            //insert_pp_data.IBAN = obj_Vacation.iban;
            //if (obj_Vacation.hotel_booking_check_in_date.Year != 0001)
            //    insert_pp_data.Hote_Check_In_Date = obj_Vacation.hotel_booking_check_in_date;
            //insert_pp_data.Hotel_Check_In_Time = obj_Vacation.hotel_check_in_time;
            //if (obj_Vacation.hotel_booking_check_out_date.Year != 0001)
            //    insert_pp_data.Hotel_Check_Out_Date = obj_Vacation.hotel_booking_check_out_date;
            //insert_pp_data.Hotel_Check_Out_Time = obj_Vacation.hotel_check_out_time;
            //insert_pp_data.Hotel_Remark = obj_Vacation.hotel_booking_remark;
            if (obj_Vacation.departure_date.Year != 0001)
                insert_pp_data.Departure_Date = obj_Vacation.departure_date;
            insert_pp_data.Departure_Flight_No = obj_Vacation.departure_flight_number;
            if (obj_Vacation.return_date.Year != 0001)
                insert_pp_data.Return_Date = obj_Vacation.return_date;
            insert_pp_data.Return_Flight_No = obj_Vacation.return_flight_number;
            insert_pp_data.Travel_Routing = obj_Vacation.travel_routing;
            insert_pp_data.Note = obj_Vacation.note;
            //insert_pp_data.Cash_Advance = Convert.ToBoolean(obj_Vacation.cash_advance);
            //insert_pp_data.Amex_Holder = Convert.ToBoolean(obj_Vacation.amx_holder);
            //insert_pp_data.Salary_Advance = obj_Vacation.salary_advance;
            //insert_pp_data.Bank_account = obj_Vacation.bank_account;
            //insert_pp_data.Ticket_Cost = obj_Vacation.ticket_cost;
            //insert_pp_data.Hotel_Cost = obj_Vacation.hotel_cost;
            //insert_pp_data.Daily_allowance = obj_Vacation.daily_allowance;
            //insert_pp_data.Other_Expenses = obj_Vacation.other_expenses;
            //insert_pp_data.Advance_Remark = obj_Vacation.travel_advance_remark;
            //insert_pp_data.Travel_Advance_Total = obj_Vacation.travel_advance_total;
            insert_pp_data.Ticket_Type = obj_Vacation.type_of_ticket;
            insert_pp_data.Visa_duration = Convert.ToString(obj_Vacation.Visa_Duration);
            insert_pp_data.Visa_with = Convert.ToString(obj_Vacation.Visa_With);

            //if (obj_Vacation.required_rent_car == 1)
            //{
            //    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
            //}
            //else
            //{
            //    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            //}
            //if (obj_Vacation.required_hotel_booking == 1)
            //{
            //    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
            //}
            //else
            //{
            //    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            //}
            if (obj_Vacation.mode_of_travel != "Air")
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            else
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            //if (obj_Vacation.cash_advance == 1)
            //{
            //    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
            //}
            //else
            //{
            //    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            //}
            if (obj_Vacation.required_exit_visa == 1)
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_foreign_visa == 1)
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_travel_insurance == 1)
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }

            //#region Number of Days Information
            //insert_pp_data.Ticket_Charged_To = obj_Vacation.ticket_charged_to;
            //insert_pp_data.From_Period = Convert.ToDateTime(obj_Vacation.from_period);
            //insert_pp_data.To_Period = Convert.ToDateTime(obj_Vacation.to_period);
            //insert_pp_data.Vacation = Convert.ToInt32(obj_Vacation.Vacation);
            //insert_pp_data.Leave_Pay = Convert.ToInt32(obj_Vacation.Leave_WO_Pay);
            //insert_pp_data.Holidays = Convert.ToInt32(obj_Vacation.Holidays);
            //insert_pp_data.Friday = Convert.ToInt32(obj_Vacation.Friday);
            //insert_pp_data.Saturday = Convert.ToInt32(obj_Vacation.Saturday);
            //insert_pp_data.Total_No_of_Days = Convert.ToString(obj_Vacation.Total_No_of_Days);
            //#endregion

            #region Travel Agency            
            insert_pp_data.Revalidation_Charge = obj_Vacation.revalidation_charge;
            insert_pp_data.Total_Ticket_Price = obj_Vacation.total_ticket_price;
            insert_pp_data.Ticket_Status = obj_Vacation.over_all_ticket_status;

            insert_pp_data.Ticket_Number_employee = obj_Vacation.employee_ticket_number;
            insert_pp_data.IssueDate_employee = obj_Vacation.employee_date_of_issue;
            insert_pp_data.TicketPrice_employee = obj_Vacation.employee_ticket_price;
            #endregion

            #region Employee Entitlements to be processed by SAS   

            insert_pp_data.Visa_Amount_Claim = Convert.ToBoolean(obj_Vacation.Visa_Amount_Claim);
            insert_pp_data.Taxi_Fare_Claim = Convert.ToBoolean(obj_Vacation.Taxi_Fare_Claim);
            insert_pp_data.Visa_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Visa);
            insert_pp_data.Taxi_Fare_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Taxi);
            #endregion

            insert_pp_data.IsActive = true;
            insert_pp_data.TimeStamp = CurrentTime;

            status = _entity.SaveChanges() > 0;
            #region Keep AuditLog_p037
            if (status)
            {
                string request_id = insert_pp_data.RequestId.ToString();
                string record = obj_Vacation.is_complaince_approval_required + " || " + obj_Vacation.compliance_approval_date +
      " || " + obj_Vacation.workflow_delegated + " || " + obj_Vacation.justification_no_delegation + " || " + (obj_Vacation.Visa_Duration) + " || " + (obj_Vacation.Visa_With) +
 " || " + obj_Vacation.mode_of_travel + " || " + obj_Vacation.location_id + " || " + obj_Vacation.required_exit_visa + " || " + obj_Vacation.type_of_exit_visa +
       " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.required_foreign_visa + " || " + obj_Vacation.foreign_visa_countries +
       " || " + obj_Vacation.foreign_visa_quantity + " || " + obj_Vacation.required_travel_insurance + " || " + obj_Vacation.travel_insurance_countries + " || " + obj_Vacation.travel_insurance_quantity +
       " || " + obj_Vacation.departure_date + " || " + obj_Vacation.departure_flight_number + " || " + obj_Vacation.return_date +
       " || " + obj_Vacation.return_flight_number + " || " + obj_Vacation.travel_routing + " || " + obj_Vacation.note + " || " + obj_Vacation.type_of_ticket +
     " || " + obj_Vacation.revalidation_charge + " || " + obj_Vacation.employee_ticket_number + " || " + Convert.ToDateTime(obj_Vacation.employee_date_of_issue) + " || " + obj_Vacation.employee_ticket_price +
       " || " + obj_Vacation.total_ticket_price + " || " + obj_Vacation.over_all_ticket_status + " || " + obj_Vacation.ticket_charged_to + " || " + obj_Vacation.Visa_Amount_Claim +
                  " || " + obj_Vacation.Taxi_Fare_Claim + " || " + obj_Vacation.HR_Remarks_Visa + " || " + obj_Vacation.HR_Remarks_Taxi + " || " + insert_pp_data.Air_Ticket_Status +
       " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status + " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly", request_id, "INITIATOR");
            }
            #endregion Keep AuditLog_p037           

            if (status)
            {
                #region  Dependents Information
              
                var depp = _entity.tb_TA_DependentsOnly_DependentsInfo.Where(x => x.TA_Id == insert_pp_data.Id).ToList();
                if (depp != null)
                {
                    foreach (var item in depp)
                    {
                        _entity.tb_TA_DependentsOnly_DependentsInfo.Remove(item);
                        _entity.SaveChanges();
                    }
                }
                if (obj_Vacation.dependents_name != null)
                {
                    string[] depe_name = obj_Vacation.dependents_name.Split('~');
                    string[] depe_relation = obj_Vacation.dependents_relation.Split('~');
                    string[] depe_age = obj_Vacation.dependents_age.Split('~');
                    string[] depe_visa_type = obj_Vacation.dependents_visa_type.Split('~');
                    string[] depe_ta_type = obj_Vacation.dependents_ta_type.Split('~');
                    string[] depe_remark = { };
                    if (obj_Vacation.dependents_remarks == null)
                    {

                    }
                    else
                    {
                        depe_remark = obj_Vacation.dependents_remarks.Split('~');
                    }
                    for (int i = 0; i < depe_name.Count(); i++)
                    {
                        if (depe_name[i] != "")
                        {
                            var dep = _entity.tb_TA_DependentsOnly_DependentsInfo.Create();
                            dep.TA_Id = insert_pp_data.Id;
                            dep.Name = depe_name[i];
                            if (depe_relation.Count() < depe_name.Count())
                            {
                                dep.Relationship = "";
                            }
                            else
                            {
                                dep.Relationship = depe_relation[i];
                            }
                            if (depe_age.Count() < depe_name.Count())
                            {
                                dep.Age = "";
                            }
                            else
                            {
                                dep.Age = depe_age[i];
                            }
                            if (depe_visa_type.Count() < depe_name.Count())
                            {
                                dep.Visa_Type = "";
                            }
                            else
                            {
                                dep.Visa_Type = depe_visa_type[i];
                            }
                            if (depe_ta_type.Count() < depe_name.Count())
                            {
                                dep.TA_Type = "";
                            }
                            else
                            {
                                dep.TA_Type = depe_ta_type[i];
                            }
                            if (obj_Vacation.dependents_remarks == null)
                            {

                            }
                            else
                            {
                                if (depe_remark.Count() < depe_name.Count())
                                {
                                    dep.Remark = "";
                                }
                                else
                                {
                                    dep.Remark = depe_remark[i];
                                }
                            }
                            dep.IsActive = true;
                            dep.TimeStamp = CurrentTime;
                            _entity.tb_TA_DependentsOnly_DependentsInfo.Add(dep);
                            status = _entity.SaveChanges() > 0;

                            #region Keep AuditLog_p037
                            if (status)
                            {
                                if (obj_Vacation.dependents_remarks == null)
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly_DependentsInfo", request_id, "INITIATOR");
                                }
                                else
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly_DependentsInfo", request_id, "INITIATOR");
                                }
                            }
                            #endregion Keep AuditLog_p007
                        }
                    }
                    if (status == true) //Basheer on 06-02-2020 to save log for savechanges
                    {
                        string remark = "Request was Edited by";
                        _rpp.InsertApproveLog("EDIT", obj_Vacation.request_id, remark, obj_Vacation.emp_local_id, obj_Vacation.creator_id, "", "", "", "", "");
                    }
                }
                #endregion
            }

            #region attachment edit

            if (status && model._FileList != null && model._FileList.Count > 0)
            {
                string reqid = req_id.ToString();
                if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == reqid && x.IsActive == true && x.filebatch == 2).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = reqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";

                }
                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == reqid && x.IsActive == true && x.filebatch == 1).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = reqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }
            }
            #endregion attachment edit

            #endregion
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //P037-Dependents Only(Preema)
        public object Edit_TA_DependentsOnly(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var obj_Vacation = model.VacationModel;

            #region Store Request Data
            msg = "Success";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            long req_id = Convert.ToInt64(rqid);
            var insert_pp_data = _entity.tb_TA_DependentsOnly.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            //insert_pp_data.Place_Visit = obj_Vacation.place_to_visit;
            //insert_pp_data.Reasons = obj_Vacation.reason;
            //insert_pp_data.Remark = obj_Vacation.remark_one;
            insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(obj_Vacation.is_complaince_approval_required);
            if (obj_Vacation.is_complaince_approval_required == 1)
            {
                if (obj_Vacation.compliance_approval_date.Year != 0001)
                    insert_pp_data.Compliance_Approval_Date = obj_Vacation.compliance_approval_date;
            }
            //insert_pp_data.Last_Day_Of_Work = obj_Vacation.last_day_of_work;
            //insert_pp_data.Return_To_Duty = obj_Vacation.return_to_duty;
            insert_pp_data.IsDelegated = Convert.ToBoolean(obj_Vacation.workflow_delegated);
            insert_pp_data.Just_No_Delegated = obj_Vacation.justification_no_delegation;
            //insert_pp_data.Address_During_Absence = obj_Vacation.address_during_absence;
            //insert_pp_data.Telephone_No = obj_Vacation.telephone;
            insert_pp_data.Travel_Mode = obj_Vacation.mode_of_travel;
            insert_pp_data.Location_Id = obj_Vacation.location_id;
            insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(obj_Vacation.required_exit_visa);
            insert_pp_data.Type_Exit_ReEntry_Visa = obj_Vacation.type_of_exit_visa;
            insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;
            insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(obj_Vacation.required_foreign_visa);
            insert_pp_data.Foreign_Visa_Countries = obj_Vacation.foreign_visa_countries;
            insert_pp_data.Foreign_Visa_Quantity = obj_Vacation.foreign_visa_quantity;
            insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(obj_Vacation.required_travel_insurance);
            insert_pp_data.Travel_Insurance_Countries = obj_Vacation.travel_insurance_countries;
            insert_pp_data.Travel_Insurance_Quantity = obj_Vacation.travel_insurance_quantity;
            //insert_pp_data.Is_RentCar = Convert.ToBoolean(obj_Vacation.required_rent_car);
            //insert_pp_data.RentCar_Charged_to = obj_Vacation.rent_car_charged_to;
            //insert_pp_data.RentCar_ProjectNo = obj_Vacation.rent_car_project_no;
            //insert_pp_data.Car_Type = obj_Vacation.car_type;
            //insert_pp_data.Car_PickUp_at = obj_Vacation.rent_car_picked_up_at;
            //if (obj_Vacation.rent_car_pick_up_date.Year != 001)
            //    insert_pp_data.Car_PickUp_date = obj_Vacation.rent_car_pick_up_date;
            //insert_pp_data.Car_PickUp_Time = obj_Vacation.rent_car_pick_up_time;
            //insert_pp_data.Car_Payment_Type = obj_Vacation.rent_car_payment_type;
            //if (obj_Vacation.rent_car_return_date.Year != 0001)
            //    insert_pp_data.Car_Return_date = obj_Vacation.rent_car_return_date;
            //insert_pp_data.Car_Return_Time = obj_Vacation.rent_car_return_time;
            //insert_pp_data.Car_Remark = obj_Vacation.rent_car_remark;
            //insert_pp_data.Is_Hotel = Convert.ToBoolean(obj_Vacation.required_hotel_booking);
            //insert_pp_data.Hotel_Charged_to = obj_Vacation.hotel_booking_charged_to;
            //insert_pp_data.Hotel_ProjectNo = obj_Vacation.hotel_booking_project_no;
            //insert_pp_data.Hotel_Name = obj_Vacation.hotel_name;
            //insert_pp_data.Room_Type = obj_Vacation.type_of_room;
            //insert_pp_data.Hotel_Location = obj_Vacation.hotel_location;
            //insert_pp_data.Room_Preference = obj_Vacation.room_preferences;
            //insert_pp_data.Number_Of_Rooms = obj_Vacation.number_of_rooms;
            //insert_pp_data.Hotel_Payment_Type = obj_Vacation.hotel_booking_payment_mode;
            //insert_pp_data.IBAN = obj_Vacation.iban;
            //if (obj_Vacation.hotel_booking_check_in_date.Year != 0001)
            //    insert_pp_data.Hote_Check_In_Date = obj_Vacation.hotel_booking_check_in_date;
            //insert_pp_data.Hotel_Check_In_Time = obj_Vacation.hotel_check_in_time;
            //if (obj_Vacation.hotel_booking_check_out_date.Year != 0001)
            //    insert_pp_data.Hotel_Check_Out_Date = obj_Vacation.hotel_booking_check_out_date;
            //insert_pp_data.Hotel_Check_Out_Time = obj_Vacation.hotel_check_out_time;
            //insert_pp_data.Hotel_Remark = obj_Vacation.hotel_booking_remark;
            if (obj_Vacation.departure_date.Year != 0001)
                insert_pp_data.Departure_Date = obj_Vacation.departure_date;
            insert_pp_data.Departure_Flight_No = obj_Vacation.departure_flight_number;
            if (obj_Vacation.return_date.Year != 0001)
                insert_pp_data.Return_Date = obj_Vacation.return_date;
            insert_pp_data.Return_Flight_No = obj_Vacation.return_flight_number;
            insert_pp_data.Travel_Routing = obj_Vacation.travel_routing;
            insert_pp_data.Note = obj_Vacation.note;
            //insert_pp_data.Cash_Advance = Convert.ToBoolean(obj_Vacation.cash_advance);
            //insert_pp_data.Amex_Holder = Convert.ToBoolean(obj_Vacation.amx_holder);
            //insert_pp_data.Salary_Advance = obj_Vacation.salary_advance;
            //insert_pp_data.Bank_account = obj_Vacation.bank_account;
            //insert_pp_data.Ticket_Cost = obj_Vacation.ticket_cost;
            //insert_pp_data.Hotel_Cost = obj_Vacation.hotel_cost;
            //insert_pp_data.Daily_allowance = obj_Vacation.daily_allowance;
            //insert_pp_data.Other_Expenses = obj_Vacation.other_expenses;
            //insert_pp_data.Advance_Remark = obj_Vacation.travel_advance_remark;
            //insert_pp_data.Travel_Advance_Total = obj_Vacation.travel_advance_total;
            insert_pp_data.Ticket_Type = obj_Vacation.type_of_ticket;
            insert_pp_data.Visa_duration = Convert.ToString(obj_Vacation.Visa_Duration);
            insert_pp_data.Visa_with = Convert.ToString(obj_Vacation.Visa_With);

            //if (obj_Vacation.required_rent_car == 1)
            //{
            //    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
            //}
            //else
            //{
            //    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            //}
            //if (obj_Vacation.required_hotel_booking == 1)
            //{
            //    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
            //}
            //else
            //{
            //    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            //}
            if (obj_Vacation.mode_of_travel != "Air")
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            else
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            //if (obj_Vacation.cash_advance == 1)
            //{
            //    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
            //}
            //else
            //{
            //    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            //}
            if (obj_Vacation.required_exit_visa == 1)
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_foreign_visa == 1)
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_travel_insurance == 1)
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }

            //#region Number of Days Information
            //insert_pp_data.Ticket_Charged_To = obj_Vacation.ticket_charged_to;
            //insert_pp_data.From_Period = Convert.ToDateTime(obj_Vacation.from_period);
            //insert_pp_data.To_Period = Convert.ToDateTime(obj_Vacation.to_period);
            //insert_pp_data.Vacation = Convert.ToInt32(obj_Vacation.Vacation);
            //insert_pp_data.Leave_Pay = Convert.ToInt32(obj_Vacation.Leave_WO_Pay);
            //insert_pp_data.Holidays = Convert.ToInt32(obj_Vacation.Holidays);
            //insert_pp_data.Friday = Convert.ToInt32(obj_Vacation.Friday);
            //insert_pp_data.Saturday = Convert.ToInt32(obj_Vacation.Saturday);
            //insert_pp_data.Total_No_of_Days = Convert.ToString(obj_Vacation.Total_No_of_Days);
            //#endregion

            #region Travel Agency   
            if (obj_Vacation.employee_ticket_number != null && obj_Vacation.employee_date_of_issue != null && obj_Vacation.employee_ticket_price != null)
            {
                insert_pp_data.Revalidation_Charge = obj_Vacation.revalidation_charge;
                insert_pp_data.Total_Ticket_Price = obj_Vacation.total_ticket_price;
                insert_pp_data.Ticket_Status = obj_Vacation.over_all_ticket_status;

                insert_pp_data.Ticket_Number_employee = obj_Vacation.employee_ticket_number;
                insert_pp_data.IssueDate_employee = obj_Vacation.employee_date_of_issue;
                insert_pp_data.TicketPrice_employee = obj_Vacation.employee_ticket_price;
            }
            #endregion

            #region Employee Entitlements to be processed by SAS   

            insert_pp_data.Visa_Amount_Claim = Convert.ToBoolean(obj_Vacation.Visa_Amount_Claim);
            insert_pp_data.Taxi_Fare_Claim = Convert.ToBoolean(obj_Vacation.Taxi_Fare_Claim);
            insert_pp_data.Visa_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Visa);
            insert_pp_data.Taxi_Fare_Remarks = Convert.ToString(obj_Vacation.HR_Remarks_Taxi);
            #endregion

            insert_pp_data.IsActive = true;
            insert_pp_data.TimeStamp = CurrentTime;

            status = _entity.SaveChanges() > 0;
            #region Keep AuditLog_p037
            if (status)
            {
                string request_id = insert_pp_data.RequestId.ToString();
                string record = obj_Vacation.is_complaince_approval_required + " || " + obj_Vacation.compliance_approval_date +
      " || " + obj_Vacation.workflow_delegated + " || " + obj_Vacation.justification_no_delegation + " || " + (obj_Vacation.Visa_Duration) + " || " + (obj_Vacation.Visa_With) +
 " || " + obj_Vacation.mode_of_travel + " || " + obj_Vacation.location_id + " || " + obj_Vacation.required_exit_visa + " || " + obj_Vacation.type_of_exit_visa +
       " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.required_foreign_visa + " || " + obj_Vacation.foreign_visa_countries +
       " || " + obj_Vacation.foreign_visa_quantity + " || " + obj_Vacation.required_travel_insurance + " || " + obj_Vacation.travel_insurance_countries + " || " + obj_Vacation.travel_insurance_quantity +
       " || " + obj_Vacation.departure_date + " || " + obj_Vacation.departure_flight_number + " || " + obj_Vacation.return_date +
       " || " + obj_Vacation.return_flight_number + " || " + obj_Vacation.travel_routing + " || " + obj_Vacation.note + " || " + obj_Vacation.type_of_ticket +
     " || " + insert_pp_data.Revalidation_Charge + " || " + insert_pp_data.Ticket_Number_employee + " || " + Convert.ToDateTime(insert_pp_data.IssueDate_employee) + " || " + insert_pp_data.TicketPrice_employee +
       " || " + insert_pp_data.Total_Ticket_Price + " || " + obj_Vacation.over_all_ticket_status + " || " + obj_Vacation.ticket_charged_to + " || " + obj_Vacation.Visa_Amount_Claim +
                  " || " + obj_Vacation.Taxi_Fare_Claim + " || " + obj_Vacation.HR_Remarks_Visa + " || " + obj_Vacation.HR_Remarks_Taxi + " || " + insert_pp_data.Air_Ticket_Status +
       " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status + " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                try
                {
                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly", request_id, "INITIATOR");
                }
                catch (DbEntityValidationException e)
                {
                    foreach (var eve in e.EntityValidationErrors)
                    {
                        Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                            eve.Entry.Entity.GetType().Name, eve.Entry.State);
                        foreach (var ve in eve.ValidationErrors)
                        {
                            Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                                ve.PropertyName, ve.ErrorMessage);
                        }
                    }
                    throw;
                }
            }
            #endregion Keep AuditLog_p037

            if (status)
            {
                #region  Dependents Information

                var depp = _entity.tb_TA_DependentsOnly_DependentsInfo.Where(x => x.TA_Id == insert_pp_data.Id).ToList();
                if (depp != null)
                {
                    foreach (var item in depp)
                    {
                        _entity.tb_TA_DependentsOnly_DependentsInfo.Remove(item);
                        _entity.SaveChanges();
                    }
                }
                if (obj_Vacation.dependents_name != null)
                {
                    string[] depe_name = obj_Vacation.dependents_name.Split('~');
                    string[] depe_relation = obj_Vacation.dependents_relation.Split('~');
                    string[] depe_age = obj_Vacation.dependents_age.Split('~');
                    string[] depe_visa_type = obj_Vacation.dependents_visa_type.Split('~');
                    string[] depe_ta_type = obj_Vacation.dependents_ta_type.Split('~');
                    string[] depe_remark = { };
                    if (obj_Vacation.dependents_remarks == null)
                    {

                    }
                    else
                    {
                        depe_remark = obj_Vacation.dependents_remarks.Split('~');
                    }
                    for (int i = 0; i < depe_name.Count(); i++)
                    {
                        if (depe_name[i] != "")
                        {
                            var dep = _entity.tb_TA_DependentsOnly_DependentsInfo.Create();
                            dep.TA_Id = insert_pp_data.Id;
                            dep.Name = depe_name[i];
                            if (depe_relation.Count() < depe_name.Count())
                            {
                                dep.Relationship = "";
                            }
                            else
                            {
                                dep.Relationship = depe_relation[i];
                            }
                            if (depe_age.Count() < depe_name.Count())
                            {
                                dep.Age = "";
                            }
                            else
                            {
                                dep.Age = depe_age[i];
                            }
                            if (depe_visa_type.Count() < depe_name.Count())
                            {
                                dep.Visa_Type = "";
                            }
                            else
                            {
                                dep.Visa_Type = depe_visa_type[i];
                            }
                            if (depe_ta_type.Count() < depe_name.Count())
                            {
                                dep.TA_Type = "";
                            }
                            else
                            {
                                dep.TA_Type = depe_ta_type[i];
                            }
                            if (obj_Vacation.dependents_remarks == null)
                            {

                            }
                            else
                            {
                                if (depe_remark.Count() < depe_name.Count())
                                {
                                    dep.Remark = "";
                                }
                                else
                                {
                                    dep.Remark = depe_remark[i];
                                }
                            }
                            dep.IsActive = true;
                            dep.TimeStamp = CurrentTime;
                            _entity.tb_TA_DependentsOnly_DependentsInfo.Add(dep);
                            status = _entity.SaveChanges() > 0;

                            #region Keep AuditLog_p037
                            if (status)
                            {
                                if (obj_Vacation.dependents_remarks == null)
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly_DependentsInfo", request_id, "INITIATOR");
                                }
                                else
                                {
                                    string request_id = insert_pp_data.RequestId.ToString();
                                    string record = depe_relation[i] + " || " + depe_age[i] + " || " + depe_visa_type[i] + " || " + depe_ta_type[i] + " || " + depe_remark[i] + " || " + CurrentTime;
                                    bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_DependentsOnly_DependentsInfo", request_id, "INITIATOR");
                                }
                            }
                            #endregion Keep AuditLog_p037
                        }
                    }

                }
                #endregion

                #region  Travel Agency Information
                if (obj_Vacation.depent_ticket_number != null)
                {
                    var travel_agency = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == insert_pp_data.RequestId).ToList();
                    foreach (var item in travel_agency)
                    {
                        _entity.tb_TA_TravelAgencyInfo.Remove(item);
                        _entity.SaveChanges();
                    }

                    string[] depe_ticket_number = obj_Vacation.depent_ticket_number.Split('~');
                    string[] depe_issue_date = obj_Vacation.depent_issue_date.Split('~');
                    string[] depe_ticket_price = obj_Vacation.depent_ticket_price.Split('~');


                    for (int i = 0; i < depe_ticket_number.Count(); i++)
                    {
                        var dep = _entity.tb_TA_TravelAgencyInfo.Create();
                        if (depe_ticket_number[i] != "")
                        {

                            dep.AgencyId = Convert.ToString(insert_pp_data.Id);

                            dep.Ticket_Number = depe_ticket_number[i];
                            if (depe_ticket_number.Count() < depe_ticket_number.Count())
                            {
                                dep.Ticket_Number = "";
                            }
                            else
                            {
                                dep.Ticket_Number = depe_ticket_number[i];
                            }
                            if (depe_issue_date.Count() < depe_issue_date.Count())
                            {
                                dep.IssueDate = Convert.ToDateTime(null);
                            }
                            else
                            {
                                dep.IssueDate = Convert.ToDateTime(depe_issue_date[i]);
                            }
                            if (depe_ticket_price.Count() < depe_ticket_price.Count())
                            {
                                dep.TicketPrice = "";
                            }
                            else
                            {
                                dep.TicketPrice = depe_ticket_price[i];
                            }
                            dep.IsEmployee = false;
                            dep.RequestId = insert_pp_data.RequestId;
                            dep.IsActive = true;
                            dep.TimeStamp = CurrentTime;
                            _entity.tb_TA_TravelAgencyInfo.Add(dep);
                            status = _entity.SaveChanges() > 0;
                        }
                      

                        #region Keep AuditLog_p037
                        if (status)
                        {
                            string request_id = insert_pp_data.RequestId.ToString();
                            string record = depe_ticket_number[i] + " || " + depe_issue_date[i] + " || " + depe_ticket_price[i] + " || " + dep.RequestId + " || " + dep.IsEmployee + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_TravelAgencyInfo", request_id, "INITIATOR");

                        }
                        #endregion Keep AuditLog_p037
                    }
                }

                msg = "Request Edit Successfully";
                var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == rqid && x.IsActive == true).FirstOrDefault();
                var application = req.tb_Application;
                if (req != null)
                {
                    if (req.RoleId != null) //to avoid backtoinitator edit loging
                    {
                        var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();
                        var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();
                        var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);
                    }
                    else
                    {
                        #region Log for SaveChanges
                        //to save log for savechanges   
                        string remark = "Request was Edited by";
                        string[] split1 = model.request_id.Split('-');
                        string rqid1 = split[1];
                        if (req.Creater_ID == model.emp_local_id)
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                        }
                        else
                        {
                            _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                        }
                        #endregion

                    }
                }
            }
            #endregion

            #region attachment edit

            if (status && model._FileList != null && model._FileList.Count > 0)
            {
                if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = rqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";

                }
                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = rqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }


            }
            #endregion attachment edit

            #endregion
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        //To get request details.. P007-Vacation(Preema)
        public object GetRequest_Details_Vacation(string request_id)
        {
            string formatted_date = "";
            long req_id = Convert.ToInt64(request_id);
            VacationModel vacation = new VacationModel();
            var _p007 = _entity.tb_TA_Vacation.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            if (_p007 != null)
            {
                vacation.place_to_visit = _p007.Place_Visit;
                vacation.reason = _p007.Reasons;
                vacation.remark_one = _p007.Remark;
                vacation.is_complaince_approval_required = Convert.ToInt32(_p007.Is_Compliance_Approval);
                if (vacation.is_complaince_approval_required == 1)
                {
                    vacation.str_complaince_approval_required = "Yes";
                }
                else
                {
                    vacation.str_complaince_approval_required = "No";
                }

                vacation.compliance_approval_date = _p007.Compliance_Approval_Date ?? CurrentTime;
                formatted_date = vacation.compliance_approval_date.ToString("yyyy-MM-dd");
                vacation.str_compliance_approval_date = formatted_date;

                vacation.last_day_of_work = _p007.Last_Day_Of_Work ?? CurrentTime;
                formatted_date = vacation.last_day_of_work.ToString("yyyy-MM-dd");
                vacation.str_last_day_of_work = formatted_date;

                vacation.return_to_duty = _p007.Return_To_Duty ?? CurrentTime;
                formatted_date = vacation.return_to_duty.ToString("yyyy-MM-dd");
                vacation.str_return_to_duty = formatted_date;

                vacation.workflow_delegated = Convert.ToInt32(_p007.IsDelegated);
                if (vacation.workflow_delegated == 1)
                {
                    vacation.str_workflow_delegated = "Yes";
                }
                else
                {
                    vacation.str_workflow_delegated = "No";
                }
                vacation.justification_no_delegation = _p007.Just_No_Delegated;
                vacation.address_during_absence = _p007.Address_During_Absence;
                vacation.telephone = _p007.Telephone_No;
                vacation.mode_of_travel = _p007.Travel_Mode;
                vacation.abb_locations = (Location)_p007.Location_Id;
                var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p007.Location_Id).FirstOrDefault();
                if (location_name != null)
                {
                    vacation.location_name = location_name.Location;
                }
                vacation.required_exit_visa = Convert.ToInt32(_p007.Is_Exit_ReEntry_Visa);
                vacation.type_of_exit_visa = _p007.Type_Exit_ReEntry_Visa;

                vacation.Visa_Duration = _p007.Visa_duration;
                vacation.Visa_With = _p007.Visa_with;

                vacation.travel_visa_charged_to = _p007.Visa_Charged_to;
                vacation.required_foreign_visa = Convert.ToInt32(_p007.Is_Foreign_Visa);
                if (vacation.required_foreign_visa == 1)
                {
                    vacation.str_required_foreign_visa = "Yes";
                }
                else
                {
                    vacation.str_required_foreign_visa = "No";
                }

                vacation.foreign_visa_countries = _p007.Foreign_Visa_Countries;
                vacation.foreign_visa_quantity = _p007.Foreign_Visa_Quantity;
                vacation.required_travel_insurance = Convert.ToInt32(_p007.Is_Travel_Insurance);
                if (vacation.required_travel_insurance == 1)
                {
                    vacation.str_required_travel_insurance = "Yes";
                }
                else
                {
                    vacation.str_required_travel_insurance = "No";
                }
                vacation.travel_insurance_countries = _p007.Travel_Insurance_Countries;
                vacation.travel_insurance_quantity = _p007.Travel_Insurance_Quantity;
                vacation.required_rent_car = Convert.ToInt32(_p007.Is_RentCar);
                if (vacation.required_rent_car == 1)
                {
                    vacation.str_required_rent_car = "Yes";
                }
                else
                {
                    vacation.str_required_rent_car = "No";
                }
                vacation.rent_car_charged_to = _p007.RentCar_Charged_to;
                vacation.rent_car_project_no = _p007.RentCar_ProjectNo;
                vacation.car_type = _p007.Car_Type;
                vacation.rent_car_picked_up_at = _p007.Car_PickUp_at;
                vacation.rent_car_pick_up_date = _p007.Car_PickUp_date ?? CurrentTime;
                formatted_date = vacation.rent_car_pick_up_date.ToString("yyyy-MM-dd");
                vacation.str_rent_car_pick_up_date = formatted_date;

                vacation.rent_car_pick_up_time = _p007.Car_PickUp_Time;
                vacation.rent_car_return_date = _p007.Car_Return_date ?? CurrentTime;
                formatted_date = vacation.rent_car_return_date.ToString("yyyy-MM-dd");
                vacation.str_rent_car_return_date = formatted_date;

                vacation.rent_car_return_time = _p007.Car_Return_Time;
                vacation.rent_car_payment_type = _p007.Car_Payment_Type;
                vacation.rent_car_remark = _p007.Car_Remark;

                vacation.required_hotel_booking = Convert.ToInt32(_p007.Is_Hotel);
                if (vacation.required_hotel_booking == 1)
                {
                    vacation.str_required_hotel_booking = "Yes";
                }
                else
                {
                    vacation.str_required_hotel_booking = "No";
                }
                vacation.hotel_booking_charged_to = _p007.Hotel_Charged_to;
                vacation.hotel_booking_project_no = _p007.Hotel_ProjectNo;
                vacation.hotel_name = _p007.Hotel_Name;
                vacation.hotel_location = _p007.Hotel_Location;
                vacation.room_preferences = _p007.Room_Preference;
                vacation.type_of_room = _p007.Room_Type;
                vacation.number_of_rooms = Convert.ToInt32(_p007.Number_Of_Rooms);
                vacation.hotel_booking_payment_mode = _p007.Hotel_Payment_Type;
                vacation.hotel_booking_check_in_date = _p007.Hote_Check_In_Date ?? CurrentTime;
                formatted_date = vacation.hotel_booking_check_in_date.ToString("yyyy-MM-dd");
                vacation.str_hotel_booking_check_in_date = formatted_date;


                vacation.hotel_check_in_time = _p007.Hotel_Check_In_Time;
                vacation.hotel_booking_check_out_date = _p007.Hotel_Check_Out_Date ?? CurrentTime;
                formatted_date = vacation.hotel_booking_check_out_date.ToString("yyyy-MM-dd");
                vacation.str_hotel_booking_check_out_date = formatted_date;

                vacation.hotel_check_out_time = _p007.Hotel_Check_Out_Time;
                vacation.hotel_booking_remark = _p007.Hotel_Remark;

                vacation.departure_date = _p007.Departure_Date ?? CurrentTime;
                formatted_date = vacation.departure_date.ToString("yyyy-MM-dd");
                vacation.str_departure_date = formatted_date;

                vacation.departure_flight_number = _p007.Departure_Flight_No;
                vacation.return_date = _p007.Return_Date ?? CurrentTime;
                formatted_date = vacation.return_date.ToString("yyyy-MM-dd");
                vacation.str_return_date = formatted_date;

                vacation.return_flight_number = _p007.Return_Flight_No;
                vacation.travel_routing = _p007.Travel_Routing;
                vacation.type_of_ticket = Convert.ToString(_p007.Ticket_Type);
                vacation.note = _p007.Note;

                vacation.cash_advance = Convert.ToInt32(_p007.Cash_Advance);
                vacation.amx_holder = Convert.ToInt32(_p007.Amex_Holder);
                if (vacation.amx_holder == 1)
                {
                    vacation.str_amx_holder = "Yes";
                }
                else
                {
                    vacation.str_amx_holder = "No";
                }
                if (vacation.cash_advance == 1)
                {
                    vacation.str_cash_advance = "Yes";
                }
                else
                {
                    vacation.str_cash_advance = "No";
                }
                vacation.salary_advance = _p007.Salary_Advance;
                vacation.bank_account = _p007.Bank_account;
                vacation.ticket_cost = _p007.Ticket_Cost;
                vacation.iban = _p007.IBAN;
                vacation.hotel_cost = _p007.Hotel_Cost;
                vacation.daily_allowance = _p007.Daily_allowance;
                vacation.other_expenses = _p007.Other_Expenses;
                vacation.travel_advance_remark = _p007.Advance_Remark;
                vacation.travel_advance_total = _p007.Travel_Advance_Total;

                vacation._dependentsInfo = new List<TA_DependentsInfo>();
                var dependentInfo = _entity.tb_TA_Vacation_DependentsInfo.Where(x => x.TA_Id == _p007.Id && x.IsActive == true).ToList();
                foreach (var item in dependentInfo)
                {
                    TA_DependentsInfo one = new TA_DependentsInfo();
                    one.name = item.Name;
                    one.relation_ship = item.Relationship;
                    one.age = item.Age;
                    one.visa_type = item.Visa_Type;
                    one.ta_type = item.TA_Type;
                    one.remark = item.Remark;
                    vacation._dependentsInfo.Add(one);
                }

                //vacation._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                //long requestid = Convert.ToInt32(request_id);
                //var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                //foreach (var item in travel)
                //{
                //    TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                //    one.ticket_number = item.Ticket_Number;
                //    one.ticket_price = item.TicketPrice;
                //    one.issue_date = item.IssueDate;
                //    vacation._travelAgencyInfo.Add(one);
                //}

                //vacation.revalidation_charge = _p007.Revalidation_Charge;
                //vacation.over_all_ticket_status = _p007.Ticket_Status ?? 0;
                //vacation.total_ticket_price = _p007.Total_Ticket_Price;
                //if (vacation.over_all_ticket_status == 1)
                //{
                //    vacation.str_over_all_ticket_status = "All Ticket Issued";
                //}
                //else
                //{
                //    vacation.str_over_all_ticket_status = "With Pending Tickets";
                //}

                //vacation.employee_ticket_number = _p007.Ticket_Number_employee;
                //vacation.employee_date_of_issue = _p007.IssueDate_employee;
                //vacation.employee_ticket_price = _p007.TicketPrice_employee;


                #region Number of Days Information                    
                vacation.ticket_charged_to = _p007.Ticket_Charged_To;
                //if (_p007.Ticket_Charged_To == "1")
                //{
                //    vacation.ticket_charged_to = "Company";
                //}
                //else
                //{
                //    vacation.ticket_charged_to = "Personal";
                //}
                vacation.from_period = Convert.ToString(_p007.From_Period);
                vacation.to_period = Convert.ToString(_p007.To_Period);
                vacation.from_period_date = Convert.ToDateTime(_p007.From_Period);
                vacation.to_period_date = Convert.ToDateTime(_p007.To_Period);

                formatted_date = vacation.from_period_date.ToString("yyyy-MM-dd");
                vacation.str_from_period_date = formatted_date;

                formatted_date = vacation.to_period_date.ToString("yyyy-MM-dd");
                vacation.str_to_period_date = formatted_date;


                vacation.Vacation = Convert.ToInt32(_p007.Vacation);
                vacation.Leave_WO_Pay = Convert.ToInt32(_p007.Leave_Pay);
                vacation.Holidays = Convert.ToInt32(_p007.Holidays);
                vacation.Friday = Convert.ToInt32(_p007.Friday);
                vacation.Saturday = Convert.ToInt32(_p007.Saturday);
                vacation.Total_No_of_Days = Convert.ToString(_p007.Total_No_of_Days);
                #endregion

                #region Employee Entitlements to be processed by SAS              
                vacation.Visa_Amount_Claim = Convert.ToString(_p007.Visa_Amount_Claim);
                vacation.Taxi_Fare_Claim = Convert.ToString(_p007.Taxi_Fare_Claim);
                if (_p007.Visa_Amount_Claim == true)
                {
                    vacation.Visa_Amount_Claim = "Yes";
                }
                else
                {
                    vacation.Visa_Amount_Claim = "No";
                }
                if (_p007.Taxi_Fare_Claim == true)
                {
                    vacation.Taxi_Fare_Claim = "Yes";
                }
                else
                {
                    vacation.Taxi_Fare_Claim = "No";
                }

                vacation.HR_Remarks_Visa = Convert.ToString(_p007.Visa_Remarks);
                vacation.HR_Remarks_Taxi = Convert.ToString(_p007.Taxi_Fare_Remarks);
            }
            #endregion     
            return Json(new { list = vacation }, JsonRequestBehavior.AllowGet);
        }
        //P037-Dependents Only(Preema)
        public object GetRequest_Details_DependentsOnly(string request_id)
        {
            string formatted_date = "";
            long req_id = Convert.ToInt64(request_id);
            VacationModel vacation = new VacationModel();
            var _p037 = _entity.tb_TA_DependentsOnly.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            if (_p037 != null)
            {
                //vacation.place_to_visit = _p037.Place_Visit;
                //vacation.reason = _p037.Reasons;
                //vacation.remark_one = _p037.Remark;
                vacation.is_complaince_approval_required = Convert.ToInt32(_p037.Is_Compliance_Approval);
                if (vacation.is_complaince_approval_required == 1)
                {
                    vacation.str_complaince_approval_required = "Yes";
                }
                else
                {
                    vacation.str_complaince_approval_required = "No";
                }

                vacation.compliance_approval_date = _p037.Compliance_Approval_Date ?? CurrentTime;
                formatted_date = vacation.compliance_approval_date.ToString("yyyy-MM-dd");
                vacation.str_compliance_approval_date = formatted_date;

                //vacation.last_day_of_work = _p037.Last_Day_Of_Work ?? CurrentTime;
                //formatted_date = vacation.last_day_of_work.ToString("yyyy-MM-dd");
                //vacation.str_last_day_of_work = formatted_date;

                //vacation.return_to_duty = _p037.Return_To_Duty ?? CurrentTime;
                //formatted_date = vacation.return_to_duty.ToString("yyyy-MM-dd");
                //vacation.str_return_to_duty = formatted_date;

                vacation.workflow_delegated = Convert.ToInt32(_p037.IsDelegated);
                if (vacation.workflow_delegated == 1)
                {
                    vacation.str_workflow_delegated = "Yes";
                }
                else
                {
                    vacation.str_workflow_delegated = "No";
                }
                vacation.justification_no_delegation = _p037.Just_No_Delegated;
                //vacation.address_during_absence = _p037.Address_During_Absence;
                //vacation.telephone = _p037.Telephone_No;
                vacation.mode_of_travel = _p037.Travel_Mode;
                vacation.abb_locations = (Location)_p037.Location_Id;
                var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p037.Location_Id).FirstOrDefault();
                if (location_name != null)
                {
                    vacation.location_name = location_name.Location;
                }
                vacation.required_exit_visa = Convert.ToInt32(_p037.Is_Exit_ReEntry_Visa);
                vacation.type_of_exit_visa = _p037.Type_Exit_ReEntry_Visa;

                vacation.Visa_Duration = _p037.Visa_duration;
                vacation.Visa_With = _p037.Visa_with;

                vacation.travel_visa_charged_to = _p037.Visa_Charged_to;
                vacation.required_foreign_visa = Convert.ToInt32(_p037.Is_Foreign_Visa);
                if (vacation.required_foreign_visa == 1)
                {
                    vacation.str_required_foreign_visa = "Yes";
                }
                else
                {
                    vacation.str_required_foreign_visa = "No";
                }

                vacation.foreign_visa_countries = _p037.Foreign_Visa_Countries;
                vacation.foreign_visa_quantity = _p037.Foreign_Visa_Quantity;
                vacation.required_travel_insurance = Convert.ToInt32(_p037.Is_Travel_Insurance);
                if (vacation.required_travel_insurance == 1)
                {
                    vacation.str_required_travel_insurance = "Yes";
                }
                else
                {
                    vacation.str_required_travel_insurance = "No";
                }
                vacation.travel_insurance_countries = _p037.Travel_Insurance_Countries;
                vacation.travel_insurance_quantity = _p037.Travel_Insurance_Quantity;
                //vacation.required_rent_car = Convert.ToInt32(_p037.Is_RentCar);
                //if (vacation.required_rent_car == 1)
                //{
                //    vacation.str_required_rent_car = "Yes";
                //}
                //else
                //{
                //    vacation.str_required_rent_car = "No";
                //}
                //vacation.rent_car_charged_to = _p037.RentCar_Charged_to;
                //vacation.rent_car_project_no = _p037.RentCar_ProjectNo;
                //vacation.car_type = _p037.Car_Type;
                //vacation.rent_car_picked_up_at = _p037.Car_PickUp_at;
                //vacation.rent_car_pick_up_date = _p037.Car_PickUp_date ?? CurrentTime;
                //formatted_date = vacation.rent_car_pick_up_date.ToString("yyyy-MM-dd");
                //vacation.str_rent_car_pick_up_date = formatted_date;

                //vacation.rent_car_pick_up_time = _p037.Car_PickUp_Time;
                //vacation.rent_car_return_date = _p037.Car_Return_date ?? CurrentTime;
                //formatted_date = vacation.rent_car_return_date.ToString("yyyy-MM-dd");
                //vacation.str_rent_car_return_date = formatted_date;

                //vacation.rent_car_return_time = _p037.Car_Return_Time;
                //vacation.rent_car_payment_type = _p037.Car_Payment_Type;
                //vacation.rent_car_remark = _p037.Car_Remark;

                //vacation.required_hotel_booking = Convert.ToInt32(_p037.Is_Hotel);
                //if (vacation.required_hotel_booking == 1)
                //{
                //    vacation.str_required_hotel_booking = "Yes";
                //}
                //else
                //{
                //    vacation.str_required_hotel_booking = "No";
                //}
                //vacation.hotel_booking_charged_to = _p037.Hotel_Charged_to;
                //vacation.hotel_booking_project_no = _p037.Hotel_ProjectNo;
                //vacation.hotel_name = _p037.Hotel_Name;
                //vacation.hotel_location = _p037.Hotel_Location;
                //vacation.room_preferences = _p037.Room_Preference;
                //vacation.type_of_room = _p037.Room_Type;
                //vacation.number_of_rooms = Convert.ToInt32(_p037.Number_Of_Rooms);
                //vacation.hotel_booking_payment_mode = _p037.Hotel_Payment_Type;
                //vacation.hotel_booking_check_in_date = _p037.Hote_Check_In_Date ?? CurrentTime;
                //formatted_date = vacation.hotel_booking_check_in_date.ToString("yyyy-MM-dd");
                //vacation.str_hotel_booking_check_in_date = formatted_date;


                //vacation.hotel_check_in_time = _p037.Hotel_Check_In_Time;
                //vacation.hotel_booking_check_out_date = _p037.Hotel_Check_Out_Date ?? CurrentTime;
                //formatted_date = vacation.hotel_booking_check_out_date.ToString("yyyy-MM-dd");
                //vacation.str_hotel_booking_check_out_date = formatted_date;

                //vacation.hotel_check_out_time = _p037.Hotel_Check_Out_Time;
                //vacation.hotel_booking_remark = _p037.Hotel_Remark;

                vacation.departure_date = _p037.Departure_Date ?? CurrentTime;
                formatted_date = vacation.departure_date.ToString("yyyy-MM-dd");
                vacation.str_departure_date = formatted_date;

                vacation.departure_flight_number = _p037.Departure_Flight_No;
                vacation.return_date = _p037.Return_Date ?? CurrentTime;
                formatted_date = vacation.return_date.ToString("yyyy-MM-dd");
                vacation.str_return_date = formatted_date;

                vacation.return_flight_number = _p037.Return_Flight_No;
                vacation.travel_routing = _p037.Travel_Routing;
                vacation.type_of_ticket = Convert.ToString(_p037.Ticket_Type);
                vacation.note = _p037.Note;

                //vacation.cash_advance = Convert.ToInt32(_p037.Cash_Advance);
                //vacation.amx_holder = Convert.ToInt32(_p037.Amex_Holder);
                //if (vacation.amx_holder == 1)
                //{
                //    vacation.str_amx_holder = "Yes";
                //}
                //else
                //{
                //    vacation.str_amx_holder = "No";
                //}
                //if (vacation.cash_advance == 1)
                //{
                //    vacation.str_cash_advance = "Yes";
                //}
                //else
                //{
                //    vacation.str_cash_advance = "No";
                //}
                //vacation.salary_advance = _p037.Salary_Advance;
                //vacation.bank_account = _p037.Bank_account;
                //vacation.ticket_cost = _p037.Ticket_Cost;
                //vacation.iban = _p037.IBAN;
                //vacation.hotel_cost = _p037.Hotel_Cost;
                //vacation.daily_allowance = _p037.Daily_allowance;
                //vacation.other_expenses = _p037.Other_Expenses;
                //vacation.travel_advance_remark = _p037.Advance_Remark;
                //vacation.travel_advance_total = _p037.Travel_Advance_Total;

                vacation._dependentsInfo = new List<TA_DependentsInfo>();
                var dependentInfo = _entity.tb_TA_DependentsOnly_DependentsInfo.Where(x => x.TA_Id == _p037.Id && x.IsActive == true).ToList();
                foreach (var item in dependentInfo)
                {
                    TA_DependentsInfo one = new TA_DependentsInfo();
                    one.name = item.Name;
                    one.relation_ship = item.Relationship;
                    one.age = item.Age;
                    one.visa_type = item.Visa_Type;
                    one.ta_type = item.TA_Type;
                    one.remark = item.Remark;
                    vacation._dependentsInfo.Add(one);
                }

                //vacation._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
                //long requestid = Convert.ToInt32(request_id);
                //var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.RequestId == requestid && x.IsActive == true && x.IsEmployee == false).ToList();
                //foreach (var item in travel)
                //{
                //    TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
                //    one.ticket_number = item.Ticket_Number;
                //    one.ticket_price = item.TicketPrice;
                //    one.issue_date = item.IssueDate;
                //    vacation._travelAgencyInfo.Add(one);
                //}

                //vacation.revalidation_charge = _p037.Revalidation_Charge;
                //vacation.over_all_ticket_status = _p037.Ticket_Status ?? 0;
                //vacation.total_ticket_price = _p037.Total_Ticket_Price;
                //if (vacation.over_all_ticket_status == 1)
                //{
                //    vacation.str_over_all_ticket_status = "All Ticket Issued";
                //}
                //else
                //{
                //    vacation.str_over_all_ticket_status = "With Pending Tickets";
                //}

                //vacation.employee_ticket_number = _p037.Ticket_Number_employee;
                //vacation.employee_date_of_issue = _p037.IssueDate_employee;
                //vacation.employee_ticket_price = _p037.TicketPrice_employee;


                //#region Number of Days Information                    
                // vacation.ticket_charged_to = _p037.Ticket_Charged_To;
                //if (_p037.Ticket_Charged_To == "1")
                //{
                //    vacation.ticket_charged_to = "Company";
                //}
                //else
                //{
                //    vacation.ticket_charged_to = "Personal";
                //}

                //vacation.from_period = Convert.ToString(_p037.From_Period);
                //vacation.to_period = Convert.ToString(_p037.To_Period);
                //vacation.from_period_date = Convert.ToDateTime(_p037.From_Period);
                //vacation.to_period_date = Convert.ToDateTime(_p037.To_Period);

                //formatted_date = vacation.from_period_date.ToString("yyyy-MM-dd");
                //vacation.str_from_period_date = formatted_date;

                //formatted_date = vacation.to_period_date.ToString("yyyy-MM-dd");
                //vacation.str_to_period_date = formatted_date;


                //vacation.Vacation = Convert.ToInt32(_p037.Vacation);
                //vacation.Leave_WO_Pay = Convert.ToInt32(_p037.Leave_Pay);
                //vacation.Holidays = Convert.ToInt32(_p037.Holidays);
                //vacation.Friday = Convert.ToInt32(_p037.Friday);
                //vacation.Saturday = Convert.ToInt32(_p037.Saturday);
                //vacation.Total_No_of_Days = Convert.ToString(_p037.Total_No_of_Days);
                // #endregion

                #region Employee Entitlements to be processed by SAS              
                vacation.Visa_Amount_Claim = Convert.ToString(_p037.Visa_Amount_Claim);
                vacation.Taxi_Fare_Claim = Convert.ToString(_p037.Taxi_Fare_Claim);
                if (_p037.Visa_Amount_Claim == true)
                {
                    vacation.Visa_Amount_Claim = "Yes";
                }
                else
                {
                    vacation.Visa_Amount_Claim = "No";
                }
                if (_p037.Taxi_Fare_Claim == true)
                {
                    vacation.Taxi_Fare_Claim = "Yes";
                }
                else
                {
                    vacation.Taxi_Fare_Claim = "No";
                }

                vacation.HR_Remarks_Visa = Convert.ToString(_p037.Visa_Remarks);
                vacation.HR_Remarks_Taxi = Convert.ToString(_p037.Taxi_Fare_Remarks);
            }
            #endregion     
            return Json(new { list = vacation }, JsonRequestBehavior.AllowGet);
        }
        //P067-Site Visit International(Preema)
        public object GetRequest_Details_SiteVisit(string request_id)
        {
            string formatted_date = "";
            long req_id = Convert.ToInt64(request_id);
            SitevisitInternational sitevisit = new SitevisitInternational();
            var _p067 = _entity.tb_TA_SiteVisit_International.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            if (_p067 != null)
            {
                sitevisit.place_to_visit = _p067.Place_Visit;
                sitevisit.customer_problem = _p067.Customer_Problem;
                sitevisit.remark_one = _p067.Remark;
                sitevisit.is_complaince_approval_required = Convert.ToInt32(_p067.Is_Compliance_Approval);
                if (sitevisit.is_complaince_approval_required == 1)
                {
                    sitevisit.str_complaince_approval_required = "Yes";
                }
                else
                {
                    sitevisit.str_complaince_approval_required = "No";
                }

                sitevisit.compliance_approval_date = _p067.Compliance_Approval_Date ?? CurrentTime;
                formatted_date = sitevisit.compliance_approval_date.ToString("yyyy-MM-dd");
                sitevisit.str_compliance_approval_date = formatted_date;

                sitevisit.last_day_of_work = _p067.Last_Day_Of_Work ?? CurrentTime;
                formatted_date = sitevisit.last_day_of_work.ToString("yyyy-MM-dd");
                sitevisit.str_last_day_of_work = formatted_date;

                sitevisit.return_to_duty = _p067.Return_To_Duty ?? CurrentTime;
                formatted_date = sitevisit.return_to_duty.ToString("yyyy-MM-dd");
                sitevisit.str_return_to_duty = formatted_date;

                sitevisit.workflow_delegated = Convert.ToInt32(_p067.IsDelegated);
                if (sitevisit.workflow_delegated == 1)
                {
                    sitevisit.str_workflow_delegated = "Yes";
                }
                else
                {
                    sitevisit.str_workflow_delegated = "No";
                }
                sitevisit.justification_no_delegation = _p067.Just_No_Delegated;
                sitevisit.address_during_absence = _p067.Address_During_Absence;
                sitevisit.telephone = _p067.Telephone_No;
                sitevisit.mode_of_travel = _p067.Travel_Mode;
                sitevisit.abb_locations = (Location)_p067.Location_Id;
                var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p067.Location_Id).FirstOrDefault();
             
                if (location_name != null)
                {
                    sitevisit.location_name = location_name.Location;
                }
                sitevisit.required_exit_visa = Convert.ToInt32(_p067.Is_Exit_ReEntry_Visa);
                sitevisit.type_of_exit_visa = _p067.Type_Exit_ReEntry_Visa;

                sitevisit.visa_duration = _p067.Exit_ReEntry_Visa_Duration;
                sitevisit.passport = _p067.Passport;

                sitevisit.travel_visa_charged_to = _p067.Visa_Charged_to;
                sitevisit.required_foreign_visa = Convert.ToInt32(_p067.Is_Foreign_Visa);
                if (sitevisit.required_foreign_visa == 1)
                {
                    sitevisit.str_required_foreign_visa = "Yes";
                }
                else
                {
                    sitevisit.str_required_foreign_visa = "No";
                }

                sitevisit.foreign_visa_countries = _p067.Foreign_Visa_Countries;
                sitevisit.foreign_visa_quantity = _p067.Foreign_Visa_Quantity;
                sitevisit.required_travel_insurance = Convert.ToInt32(_p067.Is_Travel_Insurance);
                if (sitevisit.required_travel_insurance == 1)
                {
                    sitevisit.str_required_travel_insurance = "Yes";
                }
                else
                {
                    sitevisit.str_required_travel_insurance = "No";
                }
                sitevisit.travel_insurance_countries = _p067.Travel_Insurance_Countries;
                sitevisit.travel_insurance_quantity = _p067.Travel_Insurance_Quantity;
                sitevisit.required_rent_car = Convert.ToInt32(_p067.Is_RentCar);
                if (sitevisit.required_rent_car == 1)
                {
                    sitevisit.str_required_rent_car = "Yes";
                }
                else
                {
                    sitevisit.str_required_rent_car = "No";
                }
                sitevisit.rent_car_charged_to = _p067.RentCar_Charged_to;
                sitevisit.rent_car_project_no = _p067.RentCar_ProjectNo;
                sitevisit.car_type = _p067.Car_Type;
                sitevisit.rent_car_picked_up_at = _p067.Car_PickUp_at;
                sitevisit.rent_car_pick_up_date = _p067.Car_PickUp_date ?? CurrentTime;
                formatted_date = sitevisit.rent_car_pick_up_date.ToString("yyyy-MM-dd");
                sitevisit.str_rent_car_pick_up_date = formatted_date;

                sitevisit.rent_car_pick_up_time = _p067.Car_PickUp_Time;
                sitevisit.rent_car_return_date = _p067.Car_Return_date ?? CurrentTime;
                formatted_date = sitevisit.rent_car_return_date.ToString("yyyy-MM-dd");
                sitevisit.str_rent_car_return_date = formatted_date;

                sitevisit.rent_car_return_time = _p067.Car_Return_Time;
                sitevisit.rent_car_payment_type = _p067.Car_Payment_Type;
                sitevisit.rent_car_remark = _p067.Car_Remark;

                sitevisit.required_hotel_booking = Convert.ToInt32(_p067.Is_Hotel);
                if (sitevisit.required_hotel_booking == 1)
                {
                    sitevisit.str_required_hotel_booking = "Yes";
                }
                else
                {
                    sitevisit.str_required_hotel_booking = "No";
                }
                sitevisit.hotel_booking_charged_to = _p067.Hotel_Charged_to;
                sitevisit.hotel_booking_project_no = _p067.Hotel_ProjectNo;
                sitevisit.hotel_name = _p067.Hotel_Name;
                sitevisit.hotel_location = _p067.Hotel_Location;
                sitevisit.room_preferences = _p067.Room_Preference;
                sitevisit.type_of_room = _p067.Room_Type;
                sitevisit.number_of_rooms = Convert.ToInt32(_p067.Number_Of_Rooms);
                sitevisit.hotel_booking_payment_mode = _p067.Hotel_Payment_Type;
                sitevisit.hotel_booking_check_in_date = _p067.Hotel_Check_In_Date ?? CurrentTime;
                formatted_date = sitevisit.hotel_booking_check_in_date.ToString("yyyy-MM-dd");
                sitevisit.str_hotel_booking_check_in_date = formatted_date;


                sitevisit.hotel_check_in_time = _p067.Hotel_Check_In_Time;
                sitevisit.hotel_booking_check_out_date = _p067.Hotel_Check_Out_Date ?? CurrentTime;
                formatted_date = sitevisit.hotel_booking_check_out_date.ToString("yyyy-MM-dd");
                sitevisit.str_hotel_booking_check_out_date = formatted_date;

                sitevisit.hotel_check_out_time = _p067.Hotel_Check_Out_Time;
                sitevisit.hotel_booking_remark = _p067.Hotel_Remark;

                sitevisit.departure_date = _p067.Departure_Date ?? CurrentTime;
                formatted_date = sitevisit.departure_date.ToString("yyyy-MM-dd");
                sitevisit.str_departure_date = formatted_date;

                sitevisit.departure_flight_number = _p067.Departure_Flight_No;
                sitevisit.return_date = _p067.Return_Date ?? CurrentTime;
                formatted_date = sitevisit.return_date.ToString("yyyy-MM-dd");
                sitevisit.str_return_date = formatted_date;

                sitevisit.return_flight_number = _p067.Return_Flight_No;
                sitevisit.travel_routing = _p067.Travel_Routing;
                sitevisit.type_of_ticket = Convert.ToString(_p067.Ticket_Type);
                sitevisit.note = _p067.Note;

                sitevisit.cash_advance = Convert.ToInt32(_p067.Cash_Advance);
                sitevisit.amx_holder = Convert.ToInt32(_p067.Amex_Holder);
                if (sitevisit.amx_holder == 1)
                {
                    sitevisit.str_amx_holder = "Yes";
                }
                else
                {
                    sitevisit.str_amx_holder = "No";
                }
                if (sitevisit.cash_advance == 1)
                {
                    sitevisit.str_cash_advance = "Yes";
                }
                else
                {
                    sitevisit.str_cash_advance = "No";
                }
                sitevisit.salary_advance = _p067.Salary_Advance;
                sitevisit.bank_account = _p067.Bank_account;
                sitevisit.ticket_cost = _p067.Ticket_Cost;
                sitevisit.iban = _p067.IBAN;
                sitevisit.hotel_cost = _p067.Hotel_Cost;
                sitevisit.daily_allowance = _p067.Daily_allowance;
                sitevisit.other_expenses = _p067.Other_Expenses;
                sitevisit.travel_advance_remark = _p067.Advance_Remark;
                sitevisit.travel_advance_total = _p067.Travel_Advance_Total;

                #region Number of Days Information
                sitevisit.busines_days = Convert.ToInt32(_p067.Business_Days);
                sitevisit.friday = Convert.ToInt32(_p067.Friday);
                sitevisit.saturday = Convert.ToInt32(_p067.Saturday);
                sitevisit.total_days = Convert.ToInt32(_p067.Total);
                #endregion

                //Site Scope
                #region Site Scope
                sitevisit.Customer_Name= _p067.Customer_Name;
                sitevisit.CCRP_No= _p067.CCRP_No;
                sitevisit.WBS= _p067.WBS;
                sitevisit.IsWarranty= Convert.ToBoolean(_p067.IsWarranty);
                if (sitevisit.IsWarranty == Convert.ToBoolean(0))
                {
                    sitevisit.strWarranty = "No";
                        }
                else if (sitevisit.IsWarranty == Convert.ToBoolean(1))
                {
                    sitevisit.strWarranty = "Yes";
                }
                sitevisit.previsit_checklist= Convert.ToBoolean(_p067.Is_Previsit_CheckList);
                sitevisit.business= Convert.ToInt32(_p067.BusinessId);
                sitevisit.businessline= Convert.ToInt32(_p067.BusinessLineId);
                sitevisit.productgroup= Convert.ToInt32(_p067.ProductGroupId);

                //sitevisit.most_problem_unit= _p067.No_Of_Problematic_Units;
                //sitevisit.problems= _p067.Problems;
                //sitevisit.site_report= Convert.ToBoolean(_p067.Is_SiteReport_Accepted);
                //sitevisit.additional_expense= _p067.Additional_Expense;
                //sitevisit.checklist= Convert.ToBoolean(_p067.Is_Site_CheckList);
                #endregion
            }

            return Json(new { list = sitevisit }, JsonRequestBehavior.AllowGet);
        }
        //Anzeem on 09-06-2020
        public object Save_TA_SiteVisitInternational(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var obj_Vacation = model.sitevisitinternational;
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);
            if (data.Item1 == true)
            {
                #region Store Request Data
                msg = "Success";
                var insert_pp_data = _entity.tb_TA_SiteVisit_International.Create();
                insert_pp_data.RequestId = Convert.ToInt64(data.Item2);
                insert_pp_data.Place_Visit = obj_Vacation.place_to_visit;
                insert_pp_data.Customer_Problem = obj_Vacation.customer_problem;
                insert_pp_data.Remark = obj_Vacation.remark_one;
                insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(obj_Vacation.is_complaince_approval_required);
                if (obj_Vacation.is_complaince_approval_required == 1)
                {
                    if (obj_Vacation.compliance_approval_date.Year != 0001)
                        insert_pp_data.Compliance_Approval_Date = obj_Vacation.compliance_approval_date;
                }
                insert_pp_data.Last_Day_Of_Work = obj_Vacation.last_day_of_work;
                insert_pp_data.Return_To_Duty = obj_Vacation.return_to_duty;
                insert_pp_data.IsDelegated = Convert.ToBoolean(obj_Vacation.workflow_delegated);
                insert_pp_data.Just_No_Delegated = obj_Vacation.justification_no_delegation;              

                insert_pp_data.Address_During_Absence = obj_Vacation.address_during_absence;
                insert_pp_data.Telephone_No = obj_Vacation.telephone;
                insert_pp_data.Travel_Mode = obj_Vacation.mode_of_travel;
                insert_pp_data.Location_Id = obj_Vacation.location_id;

                insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;               
                insert_pp_data.Exit_ReEntry_Visa_Duration = Convert.ToString(obj_Vacation.visa_duration);
                insert_pp_data.Passport = Convert.ToString(obj_Vacation.passport);

                insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(obj_Vacation.required_exit_visa);
                insert_pp_data.Type_Exit_ReEntry_Visa = obj_Vacation.type_of_exit_visa;
                insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;
                insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(obj_Vacation.required_foreign_visa);
                insert_pp_data.Foreign_Visa_Countries = obj_Vacation.foreign_visa_countries;
                insert_pp_data.Foreign_Visa_Quantity = obj_Vacation.foreign_visa_quantity;
                insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(obj_Vacation.required_travel_insurance);
                insert_pp_data.Travel_Insurance_Countries = obj_Vacation.travel_insurance_countries;
                insert_pp_data.Travel_Insurance_Quantity = obj_Vacation.travel_insurance_quantity;
                insert_pp_data.Is_RentCar = Convert.ToBoolean(obj_Vacation.required_rent_car);
                insert_pp_data.RentCar_Charged_to = obj_Vacation.rent_car_charged_to;
                insert_pp_data.RentCar_ProjectNo = obj_Vacation.rent_car_project_no;
                insert_pp_data.Car_Type = obj_Vacation.car_type;
                insert_pp_data.Car_PickUp_at = obj_Vacation.rent_car_picked_up_at;
                if (obj_Vacation.rent_car_pick_up_date.Year != 001)
                    insert_pp_data.Car_PickUp_date = obj_Vacation.rent_car_pick_up_date;
                insert_pp_data.Car_PickUp_Time = obj_Vacation.rent_car_pick_up_time;
                insert_pp_data.Car_Payment_Type = obj_Vacation.rent_car_payment_type;
                if (obj_Vacation.rent_car_return_date.Year != 0001)
                    insert_pp_data.Car_Return_date = obj_Vacation.rent_car_return_date;
                insert_pp_data.Car_Return_Time = obj_Vacation.rent_car_return_time;
                insert_pp_data.Car_Remark = obj_Vacation.rent_car_remark;
                insert_pp_data.Is_Hotel = Convert.ToBoolean(obj_Vacation.required_hotel_booking);
                insert_pp_data.Hotel_Charged_to = obj_Vacation.hotel_booking_charged_to;
                insert_pp_data.Hotel_ProjectNo = obj_Vacation.hotel_booking_project_no;
                insert_pp_data.Hotel_Name = obj_Vacation.hotel_name;
                insert_pp_data.Room_Type = obj_Vacation.type_of_room;
                insert_pp_data.Hotel_Location = obj_Vacation.hotel_location;
                insert_pp_data.Room_Preference = obj_Vacation.room_preferences;
                insert_pp_data.Number_Of_Rooms = obj_Vacation.number_of_rooms;
                insert_pp_data.Hotel_Payment_Type = obj_Vacation.hotel_booking_payment_mode;
                insert_pp_data.IBAN = obj_Vacation.iban;
                if (obj_Vacation.hotel_booking_check_in_date.Year != 0001)
                    insert_pp_data.Hotel_Check_In_Date = obj_Vacation.hotel_booking_check_in_date;
                insert_pp_data.Hotel_Check_In_Time = obj_Vacation.hotel_check_in_time;
                if (obj_Vacation.hotel_booking_check_out_date.Year != 0001)
                    insert_pp_data.Hotel_Check_Out_Date = obj_Vacation.hotel_booking_check_out_date;
                insert_pp_data.Hotel_Check_Out_Time = obj_Vacation.hotel_check_out_time;
                insert_pp_data.Hotel_Remark = obj_Vacation.hotel_booking_remark;
                if (obj_Vacation.departure_date.Year != 0001)
                    insert_pp_data.Departure_Date = obj_Vacation.departure_date;
                insert_pp_data.Departure_Flight_No = obj_Vacation.departure_flight_number;
                if (obj_Vacation.return_date.Year != 0001)
                    insert_pp_data.Return_Date = obj_Vacation.return_date;
                insert_pp_data.Return_Flight_No = obj_Vacation.return_flight_number;
                insert_pp_data.Travel_Routing = obj_Vacation.travel_routing;
                insert_pp_data.Note = obj_Vacation.note;
                insert_pp_data.Cash_Advance = Convert.ToBoolean(obj_Vacation.cash_advance);
                insert_pp_data.Amex_Holder = Convert.ToBoolean(obj_Vacation.amx_holder);
                insert_pp_data.Salary_Advance = obj_Vacation.salary_advance;
                insert_pp_data.Bank_account = obj_Vacation.bank_account;
                insert_pp_data.Ticket_Cost = obj_Vacation.ticket_cost;
                insert_pp_data.Hotel_Cost = obj_Vacation.hotel_cost;
                insert_pp_data.Daily_allowance = obj_Vacation.daily_allowance;
                insert_pp_data.Other_Expenses = obj_Vacation.other_expenses;
                insert_pp_data.Advance_Remark = obj_Vacation.travel_advance_remark;
                insert_pp_data.Travel_Advance_Total = obj_Vacation.travel_advance_total;

                insert_pp_data.Exit_ReEntry_Visa_Duration = Convert.ToString(obj_Vacation.visa_duration);
                insert_pp_data.Passport = Convert.ToString(obj_Vacation.passport);

                if (obj_Vacation.required_rent_car == 1)
                {
                    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_hotel_booking == 1)
                {
                    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.mode_of_travel != "Air")
                {
                    insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                else
                {
                    insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                if (obj_Vacation.cash_advance == 1)
                {
                    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_exit_visa == 1)
                {
                    insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_foreign_visa == 1)
                {
                    insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }
                if (obj_Vacation.required_travel_insurance == 1)
                {
                    insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
                }
                else
                {
                    insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
                }

                insert_pp_data.Ticket_Type = obj_Vacation.type_of_ticket;

                #region Number of Days Information
                insert_pp_data.Business_Days = obj_Vacation.busines_days;
                insert_pp_data.Friday = obj_Vacation.friday;
                insert_pp_data.Saturday = obj_Vacation.saturday;
                insert_pp_data.Total = obj_Vacation.total_days;

                #endregion
                #region Travel Agency     

                insert_pp_data.Revalidation_Charge = obj_Vacation.revalidation_charge;
                insert_pp_data.Total_Ticket_Price = obj_Vacation.total_ticket_price;
                insert_pp_data.Ticket_Status = obj_Vacation.over_all_ticket_status;

                insert_pp_data.Ticket_Number_employee = obj_Vacation.employee_ticket_number;
                insert_pp_data.IssueDate_employee = obj_Vacation.employee_date_of_issue;
                insert_pp_data.TicketPrice_employee = obj_Vacation.employee_ticket_price;

                #endregion

                //Site Scope
                #region Site Scope
                insert_pp_data.Customer_Name = obj_Vacation.Customer_Name;
                insert_pp_data.CCRP_No = obj_Vacation.CCRP_No;
                insert_pp_data.WBS = obj_Vacation.WBS;
                insert_pp_data.IsWarranty = obj_Vacation.IsWarranty;
                insert_pp_data.Is_Previsit_CheckList = obj_Vacation.previsit_checklist;
                insert_pp_data.BusinessId = obj_Vacation.business;
                insert_pp_data.BusinessLineId = obj_Vacation.businessline;
                insert_pp_data.ProductGroupId = obj_Vacation.productgroup;

                insert_pp_data.No_Of_Problematic_Units = obj_Vacation.most_problem_unit;
                insert_pp_data.Problems = obj_Vacation.problems;
                insert_pp_data.Is_SiteReport_Accepted = obj_Vacation.site_report;
                insert_pp_data.Additional_Expense = obj_Vacation.additional_expense;
                insert_pp_data.Is_Site_CheckList = obj_Vacation.checklist;
                #endregion

                insert_pp_data.IsActive = true;
                insert_pp_data.TimeStamp = CurrentTime;

                _entity.tb_TA_SiteVisit_International.Add(insert_pp_data);

                try
                {
                    status = _entity.SaveChanges() > 0;
                    #region Keep AuditLog_p067
                    if (status)
                    {
                        string request_id = insert_pp_data.RequestId.ToString();
                        string record = obj_Vacation.place_to_visit + " || " + obj_Vacation.customer_problem + " || " + obj_Vacation.remark_one + " || " + obj_Vacation.is_complaince_approval_required + " || " + obj_Vacation.compliance_approval_date +
        " || " + obj_Vacation.last_day_of_work + " || " + obj_Vacation.return_to_duty + " || " + obj_Vacation.workflow_delegated + " || " + obj_Vacation.justification_no_delegation +
               " || " + obj_Vacation.address_during_absence + " || " + (obj_Vacation.visa_duration) + " || " + (obj_Vacation.passport) +
        " || " + obj_Vacation.telephone + " || " + obj_Vacation.mode_of_travel + " || " + obj_Vacation.location_id + " || " + obj_Vacation.required_exit_visa + " || " + obj_Vacation.type_of_exit_visa +
        " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.required_foreign_visa + " || " + obj_Vacation.foreign_visa_countries +
        " || " + obj_Vacation.foreign_visa_quantity + " || " + obj_Vacation.required_travel_insurance + " || " + obj_Vacation.travel_insurance_countries + " || " + obj_Vacation.travel_insurance_quantity +
        " || " + obj_Vacation.required_rent_car + " || " + obj_Vacation.rent_car_charged_to + " || " + obj_Vacation.rent_car_project_no +
        " || " + obj_Vacation.car_type + " || " + obj_Vacation.rent_car_picked_up_at + " || " + obj_Vacation.rent_car_pick_up_date + " || " + obj_Vacation.rent_car_pick_up_time +
        " || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.rent_car_return_date + " || " + obj_Vacation.rent_car_return_time +
        " || " + obj_Vacation.rent_car_remark + " || " + obj_Vacation.required_hotel_booking + " || " + obj_Vacation.hotel_booking_charged_to +
        " || " + obj_Vacation.hotel_booking_project_no + " || " + obj_Vacation.hotel_name + " || " + obj_Vacation.type_of_room +
        " || " + obj_Vacation.hotel_location + " || " + obj_Vacation.room_preferences + " || " + obj_Vacation.number_of_rooms +
        " || " + obj_Vacation.hotel_booking_payment_mode + " || " + obj_Vacation.iban + " || " + obj_Vacation.hotel_booking_check_in_date + " || " + obj_Vacation.hotel_check_in_time +
        " || " + obj_Vacation.hotel_booking_check_out_date + " || " + obj_Vacation.hotel_check_out_time + " || " + obj_Vacation.hotel_booking_remark +
        " || " + obj_Vacation.departure_date + " || " + obj_Vacation.departure_flight_number + " || " + obj_Vacation.return_date +
        " || " + obj_Vacation.return_flight_number + " || " + obj_Vacation.travel_routing + " || " + obj_Vacation.note + " || " + obj_Vacation.type_of_ticket +
        " || " + obj_Vacation.cash_advance + " || " + obj_Vacation.amx_holder + " || " + obj_Vacation.salary_advance +
        " || " + obj_Vacation.bank_account + " || " + obj_Vacation.ticket_cost + " || " + obj_Vacation.daily_allowance + " || " + obj_Vacation.hotel_cost +
        " || " + obj_Vacation.other_expenses + " || " + obj_Vacation.travel_advance_remark + " || " + obj_Vacation.travel_advance_total +
        " || " + obj_Vacation.revalidation_charge + " || " + obj_Vacation.employee_ticket_number + " || " + Convert.ToDateTime(obj_Vacation.employee_date_of_issue) + " || " + obj_Vacation.employee_ticket_price +
        " || " + obj_Vacation.total_ticket_price + " || " + obj_Vacation.over_all_ticket_status +
      " || " + obj_Vacation.busines_days + " || " + obj_Vacation.friday + " || " + obj_Vacation.saturday + " || " + obj_Vacation.total_days +
       " || " + obj_Vacation.Customer_Name + " || " + obj_Vacation.WBS + " || " + obj_Vacation.CCRP_No + " || " + obj_Vacation.IsWarranty +
                    " || " + obj_Vacation.previsit_checklist + " || " + obj_Vacation.business + " || " + obj_Vacation.businessline + " || " + obj_Vacation.productgroup +
                    " || " + obj_Vacation.most_problem_unit + " || " + obj_Vacation.problems + " || " + obj_Vacation.site_report + " || " + obj_Vacation.additional_expense + " || " + obj_Vacation.checklist + 
                        " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
        " || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
        " || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                        bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_SiteVisit_International", request_id, "INITIATOR");
                    }
                    #endregion Keep AuditLog_p067
                }

                catch (DbEntityValidationException ex)
                {
                    foreach (var entityValidationErrors in ex.EntityValidationErrors)
                    {
                        foreach (var validationError in entityValidationErrors.ValidationErrors)
                        {
                            Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                        }
                    }
                }
                
               
                #endregion

                #region attachments
                //to store attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }
                #endregion

                #region attachments
                // to store attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }

                #endregion

            }
            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }
        public PartialViewResult Edit_TA_SiteVisitInternational(string id)
        {
            RequestModel model = new RequestModel();
            long reqid = Convert.ToInt32(id);
            var _p067 = _entity.tb_TA_SiteVisit_International.Where(x => x.RequestId == reqid && x.IsActive == true).FirstOrDefault();
            SitevisitInternational sitevisitinternational = new SitevisitInternational();
            sitevisitinternational.place_to_visit = _p067.Place_Visit;
            sitevisitinternational.customer_problem = _p067.Customer_Problem;
            sitevisitinternational.remark_one = _p067.Remark;
            sitevisitinternational.is_complaince_approval_required = Convert.ToInt32(_p067.Is_Compliance_Approval);
            if (_p067.Compliance_Approval_Date != null)
            {
                try
                {
                    var stringDate = _p067.Compliance_Approval_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.compliance_approval_date_string = xx;
                }
                catch
                {
                    var stringDate = _p067.Compliance_Approval_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.compliance_approval_date_string = xx;
                }
            }
            if (_p067.Last_Day_Of_Work != null)
            {
                try
                {
                    var stringDate = _p067.Last_Day_Of_Work.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Last_Day_Of_Work_date_string = _p067.Last_Day_Of_Work.ToString();
                }
                catch
                {
                    var stringDate = _p067.Last_Day_Of_Work.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Last_Day_Of_Work_date_string = _p067.Last_Day_Of_Work.ToString();
                }
            }
            if (_p067.Return_To_Duty != null)
            {
                try
                {
                    var stringDate = _p067.Return_To_Duty.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Return_To_Duty_date_string = xx;
                }
                catch
                {
                    var stringDate = _p067.Return_To_Duty.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Return_To_Duty_date_string = xx;
                }
            }
            sitevisitinternational.workflow_delegated = Convert.ToInt32(_p067.IsDelegated);
            sitevisitinternational.justification_no_delegation = _p067.Just_No_Delegated;
            sitevisitinternational.address_during_absence = _p067.Address_During_Absence;
            sitevisitinternational.telephone = _p067.Telephone_No;
            sitevisitinternational.mode_of_travel = _p067.Travel_Mode;
            sitevisitinternational.abb_locations = (Location)_p067.Location_Id;
            sitevisitinternational.required_exit_visa = Convert.ToInt32(_p067.Is_Exit_ReEntry_Visa);
            sitevisitinternational.type_of_exit_visa = _p067.Type_Exit_ReEntry_Visa;
            sitevisitinternational.travel_visa_charged_to = _p067.Visa_Charged_to;
            sitevisitinternational.visa_duration = _p067.Exit_ReEntry_Visa_Duration;
            sitevisitinternational.passport = _p067.Passport;
            sitevisitinternational.required_foreign_visa = Convert.ToInt32(_p067.Is_Foreign_Visa);
            sitevisitinternational.foreign_visa_countries = _p067.Foreign_Visa_Countries;
            sitevisitinternational.foreign_visa_quantity = _p067.Foreign_Visa_Quantity;
            sitevisitinternational.required_travel_insurance = Convert.ToInt32(_p067.Is_Travel_Insurance);
            sitevisitinternational.travel_insurance_countries = _p067.Travel_Insurance_Countries;
            sitevisitinternational.travel_insurance_quantity = _p067.Travel_Insurance_Quantity;
            sitevisitinternational.required_rent_car = Convert.ToInt32(_p067.Is_RentCar);
            sitevisitinternational.rent_car_charged_to = _p067.RentCar_Charged_to;
            sitevisitinternational.rent_car_project_no = _p067.RentCar_ProjectNo;
            sitevisitinternational.car_type = _p067.Car_Type;
            sitevisitinternational.rent_car_picked_up_at = _p067.Car_PickUp_at;
            if (_p067.Car_PickUp_date != null)
            {
                try
                {
                    var stringDate = _p067.Car_PickUp_date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Car_PickUp_date_date_string = xx;
                }
                catch
                {
                    var stringDate = _p067.Car_PickUp_date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Car_PickUp_date_date_string = xx;
                }
            }
            sitevisitinternational.rent_car_pick_up_time = _p067.Car_PickUp_Time;
            sitevisitinternational.rent_car_remark = _p067.Car_Remark;
            sitevisitinternational.required_hotel_booking = Convert.ToInt32(_p067.Is_Hotel);
            sitevisitinternational.number_of_rooms = (int)_p067.Number_Of_Rooms;
            sitevisitinternational.hotel_booking_charged_to = _p067.Hotel_Charged_to;
            sitevisitinternational.hotel_booking_project_no = _p067.Hotel_ProjectNo;
            sitevisitinternational.hotel_name = _p067.Hotel_Name;
            sitevisitinternational.hotel_location = _p067.Hotel_Location;
            sitevisitinternational.room_preferences = _p067.Room_Preference;
            sitevisitinternational.type_of_room = _p067.Room_Type;
            sitevisitinternational.hotel_booking_payment_mode = _p067.Hotel_Payment_Type;
            sitevisitinternational.hotel_booking_check_in_date = _p067.Hotel_Check_In_Date ?? CurrentTime;

            if (_p067.Hotel_Check_In_Date != null)
            {
                try
                {
                    var stringDate = _p067.Hotel_Check_In_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Hote_Checking_Date_date_string = xx;
                }
                catch
                {
                    var stringDate = _p067.Hotel_Check_In_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Hote_Checking_Date_date_string = xx;
                }
            }

            sitevisitinternational.hotel_check_in_time = _p067.Hotel_Check_In_Time;
            if (_p067.Hotel_Check_Out_Date != null)
            {
                try
                {
                    var stringDate = _p067.Hotel_Check_Out_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Hotel_Check_Out_Date_date_string = xx;
                }
                catch
                {
                    var stringDate = _p067.Hotel_Check_Out_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Hotel_Check_Out_Date_date_string = xx;
                }
            }
            sitevisitinternational.hotel_check_out_time = _p067.Hotel_Check_Out_Time;
            sitevisitinternational.hotel_booking_remark = _p067.Hotel_Remark;
            if (_p067.Departure_Date != null)
            {
                try
                {
                    var stringDate = _p067.Departure_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Departure_Date_date_string = xx;
                }
                catch
                {
                    var stringDate = _p067.Departure_Date.ToString();
                    var xx = Convert.ToDateTime(stringDate).ToString("yyyy-MM-dd");
                    model.sitevisitinternational.Departure_Date_date_string = xx;
                }
            }
            sitevisitinternational.departure_flight_number = _p067.Departure_Flight_No;
            sitevisitinternational.return_date = _p067.Return_Date ?? CurrentTime;
            sitevisitinternational.return_flight_number = _p067.Return_Flight_No;
            sitevisitinternational.travel_routing = _p067.Travel_Routing;
            sitevisitinternational.note = _p067.Note;
            sitevisitinternational.cash_advance = Convert.ToInt32(_p067.Cash_Advance);
            sitevisitinternational.amx_holder = Convert.ToInt32(_p067.Amex_Holder);
            sitevisitinternational.salary_advance = _p067.Salary_Advance;
            sitevisitinternational.bank_account = _p067.Bank_account;
            sitevisitinternational.ticket_cost = _p067.Ticket_Cost;
            sitevisitinternational.iban = _p067.IBAN;
            sitevisitinternational.hotel_cost = _p067.Hotel_Cost;
            sitevisitinternational.daily_allowance = _p067.Daily_allowance;
            sitevisitinternational.other_expenses = _p067.Other_Expenses;
            sitevisitinternational.travel_advance_remark = _p067.Advance_Remark;
            sitevisitinternational.travel_advance_total = _p067.Travel_Advance_Total;

            //sitevisitinternational._travelAgencyInfo = new List<TA_TravelAgencyInfo>();
            //var travel = _entity.tb_TA_TravelAgencyInfo.Where(x => x.TA_Id == _p067.Id && x.IsActive == true).ToList();
            //foreach (var item in travel)
            //{
            //    TA_TravelAgencyInfo one = new TA_TravelAgencyInfo();
            //    one.ticket_number = item.Ticket_Number;
            //    one.ticket_price = item.TicketPrice;
            //    one.issue_date = item.IssueDate;
            //    sitevisitinternational._travelAgencyInfo.Add(one);
            //}
            sitevisitinternational.over_all_ticket_status = _p067.Ticket_Status ?? 0;
            sitevisitinternational.busines_days = _p067.Business_Days ?? 0;
            sitevisitinternational.friday = _p067.Friday ?? 0;
            sitevisitinternational.saturday = _p067.Saturday ?? 0;
            sitevisitinternational.total_days = _p067.Total ?? 0;

            sitevisitinternational.Customer_Name = _p067.Customer_Name;
            sitevisitinternational.CCRP_No = _p067.CCRP_No;
            sitevisitinternational.WBS = _p067.WBS;
            sitevisitinternational.IsWarranty = (bool)_p067.IsWarranty;
            sitevisitinternational.previsit_checklist = (bool)_p067.Is_Previsit_CheckList;
            sitevisitinternational.business = (long)_p067.BusinessId;
            sitevisitinternational.businessline = (long)_p067.BusinessLineId;
            sitevisitinternational.productgroup = (long)_p067.ProductGroupId;

            sitevisitinternational.most_problem_unit = _p067.No_Of_Problematic_Units;
            sitevisitinternational.problems = _p067.Problems;
            sitevisitinternational.site_report = (bool)_p067.Is_SiteReport_Accepted;
            sitevisitinternational.additional_expense = _p067.Additional_Expense;
            sitevisitinternational.checklist = (bool)_p067.Is_Site_CheckList;

            string[] problemList = _p067.Problems.Split(',');

            List<SiteFindingsList> _list = new List<SiteFindingsList>();
            var listData = _entity.tb_UniversalLookupTable.Where(x => x.Table_Name == "SITEFINDINGS" && x.IsActive == true).ToList();

            foreach (var item in listData)
            {
                SiteFindingsList site = new SiteFindingsList();
                site.id = item.Id;
                site.problem_type = item.Code_Detail;
                site.problem_detail = item.Description;
                if (Array.Exists(problemList, e => e == item.Id.ToString()))
                {
                    site.IsChecked = true;
                }
                _list.Add(site);
            }

            List<ProblemTypeList> _problemList = new List<ProblemTypeList>();
            //grouping a list based on problem type
            var SiteFindingListData = listData.GroupBy(u => u.Code_Detail).Select(grp => grp.FirstOrDefault()).ToList();
            foreach (var item in SiteFindingListData)
            {
                ProblemTypeList site = new ProblemTypeList();
                site.problem_type = item.Code_Detail;
                _problemList.Add(site);
            }
            model.problemTypeList = _problemList;
            model.siteFindingList = _list;


            model.sitevisitinternational = sitevisitinternational;


            var request = _entity.tb_Request_Hdr.Where(x => x.Request_ID == id && x.IsActive == true).FirstOrDefault();
            model.mod_requestid = request.Request_ID;
            model.employeeid = request.Employee_ID;
            model.WF_ID = request.tb_WFType.WF_ID;
            model.wfcreatetype = 1;
            return PartialView("~/Views/Request/_pv_TA_sitevisitinternational_Append.cshtml", model);
        }
        public object Update_TA_SiteVisitInternational(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "failed";
            var obj_Vacation = model.sitevisitinternational;
            long req_id = Convert.ToInt64(model.request_id);
            #region Store Request Data
            msg = "Success";
            var insert_pp_data = _entity.tb_TA_SiteVisit_International.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            insert_pp_data.Place_Visit = obj_Vacation.place_to_visit;
            insert_pp_data.Customer_Problem = obj_Vacation.customer_problem;
            insert_pp_data.Remark = obj_Vacation.remark_one;
            insert_pp_data.Is_Compliance_Approval = Convert.ToBoolean(obj_Vacation.is_complaince_approval_required);
            if (obj_Vacation.is_complaince_approval_required == 1)
            {
                if (obj_Vacation.compliance_approval_date.Year != 0001)
                    insert_pp_data.Compliance_Approval_Date = obj_Vacation.compliance_approval_date;
            }
            insert_pp_data.Last_Day_Of_Work = obj_Vacation.last_day_of_work;
            insert_pp_data.Return_To_Duty = obj_Vacation.return_to_duty;
            insert_pp_data.IsDelegated = Convert.ToBoolean(obj_Vacation.workflow_delegated);
            insert_pp_data.Just_No_Delegated = obj_Vacation.justification_no_delegation;
            insert_pp_data.Address_During_Absence = obj_Vacation.address_during_absence;
            insert_pp_data.Telephone_No = obj_Vacation.telephone;
            insert_pp_data.Travel_Mode = obj_Vacation.mode_of_travel;
            insert_pp_data.Location_Id = obj_Vacation.location_id;
            insert_pp_data.Is_Exit_ReEntry_Visa = Convert.ToBoolean(obj_Vacation.required_exit_visa);
            insert_pp_data.Type_Exit_ReEntry_Visa = obj_Vacation.type_of_exit_visa;
            insert_pp_data.Visa_Charged_to = obj_Vacation.travel_visa_charged_to;
            insert_pp_data.Is_Foreign_Visa = Convert.ToBoolean(obj_Vacation.required_foreign_visa);
            insert_pp_data.Foreign_Visa_Countries = obj_Vacation.foreign_visa_countries;
            insert_pp_data.Foreign_Visa_Quantity = obj_Vacation.foreign_visa_quantity;
            insert_pp_data.Is_Travel_Insurance = Convert.ToBoolean(obj_Vacation.required_travel_insurance);
            insert_pp_data.Travel_Insurance_Countries = obj_Vacation.travel_insurance_countries;
            insert_pp_data.Travel_Insurance_Quantity = obj_Vacation.travel_insurance_quantity;
            insert_pp_data.Is_RentCar = Convert.ToBoolean(obj_Vacation.required_rent_car);
            insert_pp_data.RentCar_Charged_to = obj_Vacation.rent_car_charged_to;
            insert_pp_data.RentCar_ProjectNo = obj_Vacation.rent_car_project_no;
            insert_pp_data.Car_Type = obj_Vacation.car_type;
            insert_pp_data.Car_PickUp_at = obj_Vacation.rent_car_picked_up_at;
            if (obj_Vacation.rent_car_pick_up_date.Year != 001)
                insert_pp_data.Car_PickUp_date = obj_Vacation.rent_car_pick_up_date;
            insert_pp_data.Car_PickUp_Time = obj_Vacation.rent_car_pick_up_time;
            insert_pp_data.Car_Payment_Type = obj_Vacation.rent_car_payment_type;
            if (obj_Vacation.rent_car_return_date.Year != 0001)
                insert_pp_data.Car_Return_date = obj_Vacation.rent_car_return_date;
            insert_pp_data.Car_Return_Time = obj_Vacation.rent_car_return_time;
            insert_pp_data.Car_Remark = obj_Vacation.rent_car_remark;
            insert_pp_data.Is_Hotel = Convert.ToBoolean(obj_Vacation.required_hotel_booking);
            insert_pp_data.Hotel_Charged_to = obj_Vacation.hotel_booking_charged_to;
            insert_pp_data.Hotel_ProjectNo = obj_Vacation.hotel_booking_project_no;
            insert_pp_data.Hotel_Name = obj_Vacation.hotel_name;
            insert_pp_data.Room_Type = obj_Vacation.type_of_room;
            insert_pp_data.Hotel_Location = obj_Vacation.hotel_location;
            insert_pp_data.Room_Preference = obj_Vacation.room_preferences;
            insert_pp_data.Number_Of_Rooms = obj_Vacation.number_of_rooms;
            insert_pp_data.Hotel_Payment_Type = obj_Vacation.hotel_booking_payment_mode;
            insert_pp_data.IBAN = obj_Vacation.iban;
            if (obj_Vacation.hotel_booking_check_in_date.Year != 0001)
                insert_pp_data.Hotel_Check_In_Date = obj_Vacation.hotel_booking_check_in_date;
            insert_pp_data.Hotel_Check_In_Time = obj_Vacation.hotel_check_in_time;
            if (obj_Vacation.hotel_booking_check_out_date.Year != 0001)
                insert_pp_data.Hotel_Check_Out_Date = obj_Vacation.hotel_booking_check_out_date;
            insert_pp_data.Hotel_Check_Out_Time = obj_Vacation.hotel_check_out_time;
            insert_pp_data.Hotel_Remark = obj_Vacation.hotel_booking_remark;
            if (obj_Vacation.departure_date.Year != 0001)
                insert_pp_data.Departure_Date = obj_Vacation.departure_date;
            insert_pp_data.Departure_Flight_No = obj_Vacation.departure_flight_number;
            if (obj_Vacation.return_date.Year != 0001)
                insert_pp_data.Return_Date = obj_Vacation.return_date;
            insert_pp_data.Return_Flight_No = obj_Vacation.return_flight_number;
            insert_pp_data.Travel_Routing = obj_Vacation.travel_routing;
            insert_pp_data.Note = obj_Vacation.note;
            insert_pp_data.Cash_Advance = Convert.ToBoolean(obj_Vacation.cash_advance);
            insert_pp_data.Amex_Holder = Convert.ToBoolean(obj_Vacation.amx_holder);
            insert_pp_data.Salary_Advance = obj_Vacation.salary_advance;
            insert_pp_data.Bank_account = obj_Vacation.bank_account;
            insert_pp_data.Ticket_Cost = obj_Vacation.ticket_cost;
            insert_pp_data.Hotel_Cost = obj_Vacation.hotel_cost;
            insert_pp_data.Daily_allowance = obj_Vacation.daily_allowance;
            insert_pp_data.Other_Expenses = obj_Vacation.other_expenses;
            insert_pp_data.Advance_Remark = obj_Vacation.travel_advance_remark;
            insert_pp_data.Travel_Advance_Total = obj_Vacation.travel_advance_total;

          

            if (obj_Vacation.required_rent_car == 1)
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.RentCar_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_hotel_booking == 1)
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Hotel_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.mode_of_travel != "Air")
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            else
            {
                insert_pp_data.Air_Ticket_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            if (obj_Vacation.cash_advance == 1)
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Cash_Advance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_exit_visa == 1)
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Exit_Entry_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_foreign_visa == 1)
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Foreign_Visa_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }
            if (obj_Vacation.required_travel_insurance == 1)
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.Applied);
            }
            else
            {
                insert_pp_data.Travel_Insurance_Status = Convert.ToInt32(ServiceStatus.NotApplicable);
            }

            insert_pp_data.Ticket_Type = obj_Vacation.type_of_ticket;

            #region Number of Days Information
            insert_pp_data.Business_Days = obj_Vacation.busines_days;
            insert_pp_data.Friday = obj_Vacation.friday;
            insert_pp_data.Saturday = obj_Vacation.saturday;
            insert_pp_data.Total = obj_Vacation.total_days;

            #endregion
            #region Travel Agency     
            if (obj_Vacation.employee_ticket_number != null && obj_Vacation.employee_date_of_issue != null && obj_Vacation.employee_ticket_price != null)
            {
                insert_pp_data.Revalidation_Charge = obj_Vacation.revalidation_charge;
                insert_pp_data.Total_Ticket_Price = obj_Vacation.total_ticket_price;
                insert_pp_data.Ticket_Status = obj_Vacation.over_all_ticket_status;

                insert_pp_data.Ticket_Number_employee = obj_Vacation.employee_ticket_number;
                insert_pp_data.IssueDate_employee = obj_Vacation.employee_date_of_issue;
                insert_pp_data.TicketPrice_employee = obj_Vacation.employee_ticket_price;
            }
            #endregion

            //Site Scope
            #region Site Scope
            insert_pp_data.Customer_Name = obj_Vacation.Customer_Name;
            insert_pp_data.CCRP_No = obj_Vacation.CCRP_No;
            insert_pp_data.WBS = obj_Vacation.WBS;
            insert_pp_data.IsWarranty = obj_Vacation.IsWarranty;
            insert_pp_data.Is_Previsit_CheckList = obj_Vacation.previsit_checklist;
            insert_pp_data.BusinessId = obj_Vacation.business;
            insert_pp_data.BusinessLineId = obj_Vacation.businessline;
            insert_pp_data.ProductGroupId = obj_Vacation.productgroup;

            insert_pp_data.No_Of_Problematic_Units = obj_Vacation.most_problem_unit;
            insert_pp_data.Problems = obj_Vacation.problems;
            insert_pp_data.Is_SiteReport_Accepted = obj_Vacation.site_report;
            insert_pp_data.Additional_Expense = obj_Vacation.additional_expense;
            insert_pp_data.Is_Site_CheckList = obj_Vacation.checklist;
            #endregion
            insert_pp_data.IsActive = true;
            insert_pp_data.TimeStamp = CurrentTime;

            _entity.Entry(insert_pp_data).State = System.Data.Entity.EntityState.Modified;
            status = _entity.SaveChanges() > 0;        

            #region Keep AuditLog_p067
            if (status)
            {
                string request_id = insert_pp_data.RequestId.ToString();          
                string record = obj_Vacation.place_to_visit + " || " + obj_Vacation.customer_problem + " || " + obj_Vacation.remark_one + " || " + obj_Vacation.is_complaince_approval_required + " || " + obj_Vacation.compliance_approval_date +
" || " + obj_Vacation.last_day_of_work + " || " + obj_Vacation.return_to_duty + " || " + obj_Vacation.workflow_delegated + " || " + obj_Vacation.justification_no_delegation +
       " || " + obj_Vacation.address_during_absence + " || " + (obj_Vacation.visa_duration) + " || " + (obj_Vacation.passport) +
" || " + obj_Vacation.telephone + " || " + obj_Vacation.mode_of_travel + " || " + obj_Vacation.location_id + " || " + obj_Vacation.required_exit_visa + " || " + obj_Vacation.type_of_exit_visa +
" || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.required_foreign_visa + " || " + obj_Vacation.foreign_visa_countries +
" || " + obj_Vacation.foreign_visa_quantity + " || " + obj_Vacation.required_travel_insurance + " || " + obj_Vacation.travel_insurance_countries + " || " + obj_Vacation.travel_insurance_quantity +
" || " + obj_Vacation.required_rent_car + " || " + obj_Vacation.rent_car_charged_to + " || " + obj_Vacation.rent_car_project_no +
" || " + obj_Vacation.car_type + " || " + obj_Vacation.rent_car_picked_up_at + " || " + obj_Vacation.rent_car_pick_up_date + " || " + obj_Vacation.rent_car_pick_up_time +
" || " + obj_Vacation.travel_visa_charged_to + " || " + obj_Vacation.rent_car_return_date + " || " + obj_Vacation.rent_car_return_time +
" || " + obj_Vacation.rent_car_remark + " || " + obj_Vacation.required_hotel_booking + " || " + obj_Vacation.hotel_booking_charged_to +
" || " + obj_Vacation.hotel_booking_project_no + " || " + obj_Vacation.hotel_name + " || " + obj_Vacation.type_of_room +
" || " + obj_Vacation.hotel_location + " || " + obj_Vacation.room_preferences + " || " + obj_Vacation.number_of_rooms +
" || " + obj_Vacation.hotel_booking_payment_mode + " || " + obj_Vacation.iban + " || " + obj_Vacation.hotel_booking_check_in_date + " || " + obj_Vacation.hotel_check_in_time +
" || " + obj_Vacation.hotel_booking_check_out_date + " || " + obj_Vacation.hotel_check_out_time + " || " + obj_Vacation.hotel_booking_remark +
" || " + obj_Vacation.departure_date + " || " + obj_Vacation.departure_flight_number + " || " + obj_Vacation.return_date +
" || " + obj_Vacation.return_flight_number + " || " + obj_Vacation.travel_routing + " || " + obj_Vacation.note + " || " + obj_Vacation.type_of_ticket +
" || " + obj_Vacation.cash_advance + " || " + obj_Vacation.amx_holder + " || " + obj_Vacation.salary_advance +
" || " + obj_Vacation.bank_account + " || " + obj_Vacation.ticket_cost + " || " + obj_Vacation.daily_allowance + " || " + obj_Vacation.hotel_cost +
" || " + obj_Vacation.other_expenses + " || " + obj_Vacation.travel_advance_remark + " || " + obj_Vacation.travel_advance_total +
" || " + insert_pp_data.Revalidation_Charge + " || " + insert_pp_data.Ticket_Number_employee + " || " + Convert.ToDateTime(insert_pp_data.IssueDate_employee) + " || " + obj_Vacation.employee_ticket_price +
" || " + obj_Vacation.total_ticket_price + " || " + obj_Vacation.over_all_ticket_status +
" || " + obj_Vacation.busines_days + " || " + obj_Vacation.friday + " || " + obj_Vacation.saturday + " || " + obj_Vacation.total_days +
" || " + obj_Vacation.Customer_Name + " || " + obj_Vacation.WBS + " || " + obj_Vacation.CCRP_No + " || " + obj_Vacation.IsWarranty +
            " || " + obj_Vacation.previsit_checklist + " || " + obj_Vacation.business + " || " + obj_Vacation.businessline + " || " + obj_Vacation.productgroup +
            " || " + obj_Vacation.most_problem_unit + " || " + obj_Vacation.problems + " || " + obj_Vacation.site_report + " || " + obj_Vacation.additional_expense + " || " + obj_Vacation.checklist +
                " || " + insert_pp_data.RentCar_Status + " || " + insert_pp_data.Hotel_Status + " || " + insert_pp_data.Air_Ticket_Status +
" || " + insert_pp_data.Cash_Advance_Status + " || " + insert_pp_data.Exit_Entry_Visa_Status + " || " + insert_pp_data.Foreign_Visa_Status +
" || " + insert_pp_data.Travel_Insurance_Status + " || " + CurrentTime;
                bool KeepAuditLog = _alr.Add_AuditLog(record, obj_Vacation.emp_local_id, "tb_TA_SiteVisit_International", request_id, "INITIATOR");
            }
            #endregion Keep AuditLog_p067          


            #region attachment edit

            if (status && model._FileList != null && model._FileList.Count > 0)
            {
                string reqid = req_id.ToString();
                if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == reqid && x.IsActive == true && x.filebatch == 2).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = reqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";

                }
                if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                {
                    var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == reqid && x.IsActive == true && x.filebatch == 1).ToList();
                    if (editattachment != null)
                    {
                        foreach (var item in editattachment)
                        {
                            item.IsActive = false;
                            status = _entity.SaveChanges() > 0;
                        }
                    }
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    foreach (var item in fillist)
                    {
                        var datas = _entity.tb_ReqestAttachments.Create();
                        datas.Request_id = reqid;
                        datas.fil_path = item.filepath;
                        datas.fil_name = item.filename;
                        datas.filebatch = item.filebatch;
                        datas.IsActive = true;
                        datas.TimeStamp = CurrentTime;
                        _entity.tb_ReqestAttachments.Add(datas);
                        _entity.SaveChanges();
                    }
                    msg = status ? " Success!" : "Failed!";
                }
            }
            #endregion attachment edit


            #endregion
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }

        #region In-House Training Code By George Shristi 06-07-2020
        [HttpPost]
        public JsonResult GetCourses(string CourseId)
        {
            if (CourseId != null)
            {
                string[] Status;
                long cid = long.Parse(CourseId);
                var CourseData = _entity.tb_TR_InHouse_Course.Where(x => x.Id == cid && x.IsActive == true).FirstOrDefault();
                if (CourseData != null)
                {

                    if (CourseData.Available_Seats > 0)
                    {
                        Status = new string[6];
                        Status[0] = "success";
                        Status[1] = CourseData.Code;
                        Status[2] = CourseData.Course_Name;
                        Status[3] = CourseData.Type;
                        Status[4] = CourseData.From_Date.Value.ToString("yyyy-MM-dd");
                        Status[5] = CourseData.To_Date.Value.ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        Status = new string[2];
                        Status[0] = "fail";
                        Status[1] = "NO Available Seats for the Training - " + CourseData.Course_Name + " Choose Another";
                    }
                }
                else
                {
                    Status = new string[2];
                    Status[0] = "fail";
                    Status[1] = "Course NOT FOUND";
                }
                return Json(Status);
            }
            else
            {
                List<SelectListItem> CourseData = new List<SelectListItem>();

                CourseData = WF_Tool.DataLibrary.Data.DropdownData.GetAllCourseDetails();

                return Json(CourseData);
            }

        }
        public object Submit_TR_InHouseTraining(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    if (model.InHouseTrainingModel != null)
                    {
                        #region Save to base table
                        var Traindata = model.InHouseTrainingModel;
                        var insert_Traindata = _entity.tb_TR_InHouseTraining.Create();
                        insert_Traindata.RequestId = data.Item2;
                        insert_Traindata.Remarks = Traindata.Remarks;
                        insert_Traindata.IsActive = true;
                        insert_Traindata.TimeStamp = CurrentTime;
                        _entity.tb_TR_InHouseTraining.Add(insert_Traindata);
                        status = _entity.SaveChanges() > 0;
                        #endregion

                        #region Save to Details table of training
                        if (model._CourseInformation != null && model._CourseInformation.Count > 0)
                        {
                            var insert_Traindata_Details = _entity.tb_TR_InHouse_Training_Details.Create();

                            foreach (var item in model._CourseInformation)
                            {

                                insert_Traindata_Details.RequestId = data.Item2;
                                insert_Traindata_Details.TrainingId = insert_Traindata.Id;
                                insert_Traindata_Details.Code = item.Code;
                                insert_Traindata_Details.Course_Name = item.Course_Name;
                                insert_Traindata_Details.Type = item.Type;
                                insert_Traindata_Details.From_Date = item.From_Date;
                                insert_Traindata_Details.To_Date = item.To_Date;
                                insert_Traindata_Details.IsActive = true;
                                insert_Traindata_Details.TimeStamp = CurrentTime;
                                _entity.tb_TR_InHouse_Training_Details.Add(insert_Traindata_Details);
                                status = _entity.SaveChanges() > 0;




                                string request_id = insert_Traindata_Details.RequestId;
                                string record = insert_Traindata_Details.RequestId + "||" + insert_Traindata_Details.Id + "||" + insert_Traindata_Details.TrainingId + "||" + insert_Traindata_Details.Code + "||" + insert_Traindata_Details.Course_Name + "||" + insert_Traindata_Details.Type + "||" + Convert.ToDateTime(insert_Traindata_Details.From_Date) + "||" + Convert.ToDateTime(insert_Traindata_Details.To_Date);
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_InHouse_Training_Details", request_id, "INITIATOR");
                            }

                            msg = status ? "Success!" : "Sorry!!Please Enter Full Details!!";

                        }

                        #endregion

                        #region Keep AuditLog_T004
                        if (status)
                        {
                            string request_id = insert_Traindata.RequestId;
                            string record = request_id + " || " + Traindata.Remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_InHouseTraining", request_id, "INITIATOR");

                        }
                        #endregion 
                    }
                }
                #region file attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }
                #endregion
            }
            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }
        public object Submit_TR_InHouseTraining_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            //  bool status1 = false;
            string msg = "";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();

            try
            {
                if (data != null)
                {
                    var edit_tr_data = _entity.tb_TR_InHouseTraining.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    string request_id = edit_tr_data.RequestId;
                    if (edit_tr_data != null)
                    {
                        #region Save Edited Data in Base table
                        var editTrain = model.InHouseTrainingModel;
                        edit_tr_data.RequestId = request_id;
                        edit_tr_data.Remarks = editTrain.Remarks;
                        edit_tr_data.IsActive = true;
                        edit_tr_data.TimeStamp = CurrentTime;
                        #endregion


                        if (model._CourseInformation != null && model._CourseInformation.Count > 0)
                        {
                            _entity.tb_TR_InHouse_Training_Details.RemoveRange(_entity.tb_TR_InHouse_Training_Details.Where(x => x.RequestId == request_id));

                            #region Save New Info in Details table
                            var edit_Traindata_Details = _entity.tb_TR_InHouse_Training_Details.Create();
                            foreach (var item in model._CourseInformation)
                            {

                                edit_Traindata_Details.RequestId = request_id;
                                edit_Traindata_Details.TrainingId = edit_tr_data.Id;
                                edit_Traindata_Details.Code = item.Code;
                                edit_Traindata_Details.Course_Name = item.Course_Name;
                                edit_Traindata_Details.Type = item.Type;
                                edit_Traindata_Details.From_Date = item.From_Date;
                                edit_Traindata_Details.To_Date = item.To_Date;
                                edit_Traindata_Details.IsActive = true;
                                edit_Traindata_Details.TimeStamp = CurrentTime;
                                _entity.tb_TR_InHouse_Training_Details.Add(edit_Traindata_Details);
                                status = _entity.SaveChanges() > 0;

                                string rqid = edit_Traindata_Details.RequestId;
                                string record = rqid + "||" + edit_Traindata_Details.Id + "||" + edit_Traindata_Details.TrainingId + "||" + edit_Traindata_Details.Code + "||" + edit_Traindata_Details.Course_Name + "||" + edit_Traindata_Details.Type + "||" + Convert.ToDateTime(edit_Traindata_Details.From_Date) + "||" + Convert.ToDateTime(edit_Traindata_Details.To_Date);
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_InHouse_Training_Details", rqid, "INITIATOR");
                            }
                            #endregion
                        }

                        status = _entity.SaveChanges() > 0;
                        status = true;
                        msg = status ? " Success!" : "Failed";

                        #region File attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }


                        }

                        #endregion

                        #region  Keep AuditLog_T004
                        if (status == true)
                        {
                            request_id = edit_tr_data.RequestId;
                            string record = request_id + " || " + editTrain.Remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_InHouseTraining", request_id, "INITIATOR");

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");

                        }
                        #endregion

                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public object Edit_TR_InHouse_Training(EmployeeRequestModel model)
        {
            bool status = false;

            string msg = "";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_tr_data = _entity.tb_TR_InHouseTraining.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            if (edit_tr_data != null)
            {
                #region Save Edited Data in Base table

                var editTrain = model.InHouseTrainingModel;
                edit_tr_data.RequestId = rqid;
                edit_tr_data.Remarks = editTrain.Remarks;
                edit_tr_data.IsActive = true;
                edit_tr_data.TimeStamp = CurrentTime;

                #endregion

                if (model._CourseInformation != null && model._CourseInformation.Count > 0)
                {
                    _entity.tb_TR_InHouse_Training_Details.RemoveRange(_entity.tb_TR_InHouse_Training_Details.Where(x => x.RequestId == rqid));

                    #region Save New Info in Details table
                    var edit_Traindata_Details = _entity.tb_TR_InHouse_Training_Details.Create();
                    foreach (var item in model._CourseInformation)
                    {

                        edit_Traindata_Details.RequestId = rqid;
                        edit_Traindata_Details.TrainingId = edit_tr_data.Id;
                        edit_Traindata_Details.Code = item.Code;
                        edit_Traindata_Details.Course_Name = item.Course_Name;
                        edit_Traindata_Details.Type = item.Type;
                        edit_Traindata_Details.From_Date = item.From_Date;
                        edit_Traindata_Details.To_Date = item.To_Date;
                        edit_Traindata_Details.IsActive = true;
                        edit_Traindata_Details.TimeStamp = CurrentTime;
                        _entity.tb_TR_InHouse_Training_Details.Add(edit_Traindata_Details);
                        status = _entity.SaveChanges() > 0;

                        string rqid1 = edit_Traindata_Details.RequestId;
                        string record = rqid1 + "||" + edit_Traindata_Details.Id + "||" + edit_Traindata_Details.TrainingId + "||" + edit_Traindata_Details.Code + "||" + edit_Traindata_Details.Course_Name + "||" + edit_Traindata_Details.Type + "||" + Convert.ToDateTime(edit_Traindata_Details.From_Date) + "||" + Convert.ToDateTime(edit_Traindata_Details.To_Date);
                        bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_InHouse_Training_Details", rqid1, "INITIATOR");
                    }
                    #endregion
                }
                status = _entity.SaveChanges() > 0;
                status = true;
                msg = status ? " Success!" : "Failed";


                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_tr_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();

                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();

                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                            #region Keep AuditLog_T004
                            string request_id = edit_tr_data.RequestId;
                            string record = request_id + " || " + editTrain.Remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_InHouseTraining", request_id, role.Role_Desc);

                            #endregion Keep AuditLog_T004
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            // _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");

                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }


                            #endregion

                            #region Keep AuditLog_T004 for initiator after backtoinitiator

                            string request_id = edit_tr_data.RequestId;
                            string record = request_id + " || " + editTrain.Remarks + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_InHouseTraining", request_id, "INITIATOR");


                            #endregion

                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }
        public void UpdateAvailableSeatsForCourses(string RequestId, string status)
        {
            var type = status != null ? status.Trim().ToUpper() : null;

            var CourseListofRequest = _entity.tb_TR_InHouse_Training_Details.Where(x => x.RequestId == RequestId && x.IsActive == true).Select(x => x.Code).ToList();

            if (CourseListofRequest != null && CourseListofRequest.Count > 0)
            {

                if (type == "INT")
                {
                    foreach (var course in CourseListofRequest)
                    {
                        var TheCoursedata = _entity.tb_TR_InHouse_Course.Where(x => x.Code.Trim().ToUpper() == course.Trim().ToUpper()).FirstOrDefault();

                        if (TheCoursedata != null)
                        {
                            if (TheCoursedata.Available_Seats != null && TheCoursedata.Available_Seats > 0)
                            {
                                TheCoursedata.Available_Seats = TheCoursedata.Available_Seats - 1;
                                _entity.SaveChanges();
                            }
                        }
                    }
                }
                else if (type == "CNL" || type == "REJ" || type == "BKI")
                {
                    foreach (var course in CourseListofRequest)
                    {
                        var TheCoursedata = _entity.tb_TR_InHouse_Course.Where(x => x.Code.Trim().ToUpper() == course.Trim().ToUpper()).FirstOrDefault();

                        if (TheCoursedata != null)
                        {
                            if (TheCoursedata.Available_Seats != null && TheCoursedata.Available_Seats < TheCoursedata.Total_Seats)
                            {
                                TheCoursedata.Available_Seats = TheCoursedata.Available_Seats + 1;
                                _entity.SaveChanges();
                            }
                        }
                    }
                }

            }
        }
        #endregion
        //Basheer on 07-07-2020
        public object GetRequest_Details_BusinessInternational(string request_id)
        {
            string formatted_date = "";
            long req_id = Convert.ToInt64(request_id);
            BusinessInternational vacation = new BusinessInternational();
            var _p007 = _entity.tb_TA_Business_International.Where(x => x.RequestId == req_id && x.IsActive == true).FirstOrDefault();
            if (_p007 != null)
            {
                vacation.Place_Visit = _p007.Place_Visit;
                vacation.Reasons = _p007.Reasons;
                vacation.Remark = _p007.Remark;
                vacation.Is_Compliance_Approval_Required = Convert.ToInt32(_p007.Is_Compliance_Approval);
                if (vacation.Is_Compliance_Approval_Required == 1)
                {
                    vacation.str_complaince_approval_required = "Yes";
                }
                else
                {
                    vacation.str_complaince_approval_required = "No";
                }

                vacation.Compliance_Approval_Date = _p007.Compliance_Approval_Date ?? CurrentTime;
                formatted_date = vacation.Compliance_Approval_Date.ToString("yyyy-MM-dd");
                vacation.compliance_approval_date_string = formatted_date;

                vacation.Last_Day_Of_Work = _p007.Last_Day_Of_Work ?? CurrentTime;
                formatted_date = vacation.Last_Day_Of_Work.ToString("yyyy-MM-dd");
                vacation.Last_Day_Of_Work_date_string = formatted_date;

                vacation.Return_To_Duty = _p007.Return_To_Duty ?? CurrentTime;
                formatted_date = vacation.Return_To_Duty.ToString("yyyy-MM-dd");
                vacation.Return_To_Duty_date_string = formatted_date;

                vacation.Is_WorkFlow_delegated = Convert.ToInt32(_p007.IsDelegated);
                if (vacation.Is_WorkFlow_delegated == 1)
                {
                    vacation.str_workflow_delegated = "Yes";
                }
                else
                {
                    vacation.str_workflow_delegated = "No";
                }
                vacation.Justification_Not_Delegated = _p007.Just_No_Delegated;
                vacation.Address_During_Absence = _p007.Address_During_Absence;
                vacation.telephone = _p007.Telephone_No;
                vacation.Mode_Of_Travel = _p007.Travel_Mode;
                vacation.abb_locations = _p007.Location_Id;
                if (_p007.Location_Id != 0)
                {
                    //var location_name = _entity.tb_Location.Where(x => x.IsActive == true && x.Location_Id == _p007.Location_Id).FirstOrDefault();
                    vacation.location_name = _p007.Location_Id.ToString();
                }

                vacation.Required_Ext_or_Reentry_Visa = Convert.ToInt32(_p007.Is_Exit_ReEntry_Visa);
                vacation.Type_of_Required_Ext_or_Reentry_Visa = _p007.Type_Exit_ReEntry_Visa;

                vacation.Visa_duration = _p007.Visa_duration;
                vacation.Visa_with = _p007.Visa_with;

                vacation.Visa_Charged_to = _p007.Visa_Charged_to;
                vacation.Required_Foreign_Visa = Convert.ToInt32(_p007.Is_Foreign_Visa);
                if (vacation.Required_Foreign_Visa == 1)
                {
                    vacation.str_required_foreign_visa = "Yes";
                }
                else
                {
                    vacation.str_required_foreign_visa = "No";
                }

                vacation.Foreign_Visa_Countries = _p007.Foreign_Visa_Countries;
                vacation.Foreign_Visa_Quantity = _p007.Foreign_Visa_Quantity;
                vacation.Requied_Travel_Insurance = Convert.ToInt32(_p007.Is_Travel_Insurance);
                if (vacation.Requied_Travel_Insurance == 1)
                {
                    vacation.str_required_travel_insurance = "Yes";
                }
                else
                {
                    vacation.str_required_travel_insurance = "No";
                }
                vacation.Travel_Insurance_Countries = _p007.Travel_Insurance_Countries;
                vacation.Travel_Insurance_Quantity = _p007.Travel_Insurance_Quantity;
                vacation.Required_RentCar = Convert.ToInt32(_p007.Is_RentCar);
                if (vacation.Required_RentCar == 1)
                {
                    vacation.str_required_rent_car = "Yes";
                }
                else
                {
                    vacation.str_required_rent_car = "No";
                }
                vacation.RentCar_Charged_to = _p007.RentCar_Charged_to;
                vacation.RentCar_ProjectNo = _p007.RentCar_ProjectNo;
                vacation.Car_Type = _p007.Car_Type;
                vacation.Car_PickUp_at = _p007.Car_PickUp_at;
                vacation.Car_PickUp_date = _p007.Car_PickUp_date ?? CurrentTime;
                formatted_date = vacation.Car_PickUp_date.ToString("yyyy-MM-dd");
                vacation.Car_PickUp_date_date_string = formatted_date;

                vacation.Car_PickUp_Time = _p007.Car_PickUp_Time;
                vacation.Car_Return_date = _p007.Car_Return_date ?? CurrentTime;
                formatted_date = vacation.Car_Return_date.ToString("yyyy-MM-dd");
                vacation.Car_Return_date_date_string = formatted_date;

                vacation.Car_Return_Time = _p007.Car_Return_Time;
                vacation.Car_Payment_Type = _p007.Car_Payment_Type;
                vacation.Car_Remark = _p007.Car_Remark;

                vacation.Required_Hotel_Booking = Convert.ToInt32(_p007.Is_Hotel);
                if (vacation.Required_Hotel_Booking == 1)
                {
                    vacation.str_required_hotel_booking = "Yes";
                }
                else
                {
                    vacation.str_required_hotel_booking = "No";
                }
                vacation.HotelBooking_Charged_to = _p007.Hotel_Charged_to;
                vacation.Hotel_ProjectNo = _p007.Hotel_ProjectNo;
                vacation.Hotel_Name = _p007.Hotel_Name;
                vacation.hotel_location = _p007.Hotel_Location;
                vacation.Room_Preference = _p007.Room_Preference;
                vacation.Type_Of_rooms = _p007.Room_Type;
                vacation.Number_Of_Rooms = _p007.Number_Of_Rooms.ToString();
                vacation.HotelBooking_Payment_Type = _p007.Hotel_Payment_Type;
                vacation.Hote_Checking_Date = _p007.Hote_Check_In_Date ?? CurrentTime;
                formatted_date = vacation.Hote_Checking_Date.ToString("yyyy-MM-dd");
                vacation.Hote_Checking_Date_date_string = formatted_date;


                vacation.Hotel_Check_In_Time = _p007.Hotel_Check_In_Time;
                vacation.Hotel_Check_Out_Date = _p007.Hotel_Check_Out_Date ?? CurrentTime;
                formatted_date = vacation.Hotel_Check_Out_Date.ToString("yyyy-MM-dd");
                vacation.Hote_Checking_Date_date_string = formatted_date;

                vacation.Hotel_Check_Out_Time = _p007.Hotel_Check_Out_Time;
                vacation.Hotel_Remark = _p007.Hotel_Remark;

                vacation.Departure_Date = _p007.Departure_Date ?? CurrentTime;
                formatted_date = vacation.Departure_Date.ToString("yyyy-MM-dd");
                vacation.Departure_Date_date_string = formatted_date;

                vacation.Departure_Flight_Number = _p007.Departure_Flight_No;
                vacation.Return_Date = _p007.Return_Date ?? CurrentTime;
                formatted_date = vacation.Return_Date.ToString("yyyy-MM-dd");
                vacation.Return_Date_date_string = formatted_date;

                vacation.Return_Flight_Number = _p007.Return_Flight_No;
                vacation.Travel_Routing = _p007.Travel_Routing;
                vacation.type_of_ticket = _p007.Type_Of_Ticket;
                vacation.Note = _p007.Note;

                vacation.Cash_Advance = Convert.ToInt32(_p007.Cash_Advance);
                vacation.Amex_Holder = Convert.ToInt32(_p007.Amex_Holder);
                if (vacation.Amex_Holder == 1)
                {
                    vacation.str_amx_holder = "Yes";
                }
                else
                {
                    vacation.str_amx_holder = "No";
                }
                if (vacation.Cash_Advance == 1)
                {
                    vacation.str_cash_advance = "Yes";
                }
                else
                {
                    vacation.str_cash_advance = "No";
                }
                vacation.Salary_Advance = _p007.Salary_Advance;
                vacation.Bank_account = _p007.Bank_account;
                vacation.Ticket_Cost = _p007.Ticket_Cost;
                vacation.IBAN = _p007.IBAN;
                vacation.Hotel_Cost = _p007.Hotel_Cost;
                vacation.Daily_allowance = _p007.Daily_allowance;
                vacation.Other_Expenses = _p007.Other_Expenses;
                vacation.Advance_Remark = _p007.Advance_Remark;
                vacation.Travel_Advance_Total = _p007.Travel_Advance_Total;

                vacation._dependentsInfo = new List<TA_DependentsInfo>();
                var dependentInfo = _entity.tb_TA_Vacation_DependentsInfo.Where(x => x.TA_Id == _p007.Id && x.IsActive == true).ToList();
                foreach (var item in dependentInfo)
                {
                    TA_DependentsInfo one = new TA_DependentsInfo();
                    one.name = item.Name;
                    one.relation_ship = item.Relationship;
                    one.age = item.Age;
                    one.visa_type = item.Visa_Type;
                    one.ta_type = item.TA_Type;
                    one.remark = item.Remark;
                    vacation._dependentsInfo.Add(one);
                }




                #region Number of Days Information                    


                vacation.Business_Days = Convert.ToInt32(_p007.Business_Days);
                vacation.Friday = Convert.ToInt32(_p007.Friday);
                vacation.Saturday = Convert.ToInt32(_p007.Saturday);
                vacation.Total = Convert.ToInt32(_p007.Total);
                #endregion



            }
            return Json(new { list = vacation }, JsonRequestBehavior.AllowGet);
        }

        #region T001-External Training By George Srishti 13-07-2020

        public JsonResult GetTrainingOrientation(long CourseId)
        {
            ExternalCourseDataModel CourseData = new ExternalCourseDataModel();
            if (CourseId != 0)
            {
                var data = _entity.tb_TR_External_Courses.Where(x => x.Id == CourseId && x.IsActive == true).FirstOrDefault();
                if (data != null)
                {
                    //  ViewBag.coursedetails = model;
                    CourseData.Id = data.Id;
                    CourseData.Course_Name = data.Course_Name ?? "";
                    CourseData.From_Date_string_date = data.Date_From.Value.ToString("yyyy-MM-dd");
                    CourseData.To_Date_string_date = data.Date_To.Value.ToString("yyyy-MM-dd");
                    CourseData.TrainingType = data.Training_Type ?? "";
                    CourseData.Location = data.Location ?? "";
                    CourseData.Cost = data.Cost;
                }
                return Json(CourseData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                List<SelectListItem> CourseList = new List<SelectListItem>();

                CourseList = WF_Tool.DataLibrary.Data.DropdownData.GetExternalCourseDetails();

                return Json(CourseList);

            }

        }

        public object Submit_TR_ExternalTraining(EmployeeRequestModel model)
        {
            bool status = false;
            string msg = "";
            Tuple<bool, string> data = _rpp.InsertRequest(model.wf_id, model.application_id, model.emp_local_id, model.wf_template_id, model.creator_id);

            try
            {
                if (data.Item1 == true)
                {
                    if (model.ExternalTrainingModel != null)
                    {
                        #region Save to base table
                        var Traindata = model.ExternalTrainingModel;
                        var insert_Traindata = _entity.tb_TR_External_Training.Create();
                        insert_Traindata.RequestId = data.Item2;
                        insert_Traindata.Justification = Traindata.Justification;
                        insert_Traindata.Years = Traindata.Years;
                        insert_Traindata.GrandTotal = Traindata.GrandTotal;
                        insert_Traindata.IsActive = true;
                        insert_Traindata.TimeStamp = CurrentTime;
                        _entity.tb_TR_External_Training.Add(insert_Traindata);
                        status = _entity.SaveChanges() > 0;
                        #endregion

                        #region Save to Details table of training
                        if (model._TrainingDetails != null && model._TrainingDetails.Count > 0)
                        {
                            var insert_Traindata_Details = _entity.tb_TR_External_Training_Detail.Create();

                            foreach (var item in model._TrainingDetails)
                            {

                                insert_Traindata_Details.RequestId = data.Item2;
                                insert_Traindata_Details.ExternTrainingId = insert_Traindata.Id;
                                insert_Traindata_Details.Course_Name = item.Course_Name;
                                insert_Traindata_Details.From_Date = item.From_Date;
                                insert_Traindata_Details.To_Date = item.To_Date;
                                insert_Traindata_Details.Training_Type = item.Training_Type;
                                insert_Traindata_Details.Location = item.Location;
                                insert_Traindata_Details.Cost = item.Cost;
                                insert_Traindata_Details.NoofDays = item.NoofDays;

                                insert_Traindata_Details.IsActive = true;
                                insert_Traindata_Details.TimepStamp = CurrentTime;

                                _entity.tb_TR_External_Training_Detail.Add(insert_Traindata_Details);
                                status = _entity.SaveChanges() > 0;


                                string request_id = insert_Traindata_Details.RequestId;
                                string record = insert_Traindata_Details.RequestId + "||" + insert_Traindata_Details.Id + "||" + insert_Traindata_Details.Course_Name + "||" + Convert.ToDateTime(insert_Traindata_Details.From_Date) + "||" + Convert.ToDateTime(insert_Traindata_Details.To_Date) + "||" + insert_Traindata_Details.Training_Type + "||" + insert_Traindata_Details.Location + "||" + insert_Traindata_Details.Cost + "||" + insert_Traindata_Details.NoofDays;
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_External_Training_Detail", request_id, "INITIATOR");
                            }

                            msg = status ? "Success!" : "Sorry!!Please Enter Full Details!!";

                        }

                        #endregion

                        #region Keep AuditLog_T001
                        if (status)
                        {
                            string request_id = insert_Traindata.RequestId;
                            string record = request_id + " || " + Traindata.Justification + " || " + Traindata.Years + " || " + Traindata.GrandTotal + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_External_Training", request_id, "INITIATOR");

                        }
                        #endregion 
                    }
                }

                #region file attachments
                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    var result = model._FileList.Where(x => x.filebatch == 1).ToList();
                    var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                    if (fillist.Count > 0)
                    {
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = data.Item2;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                    }
                    msg = status ? " Success!" : "Failed!";
                }
                #endregion
            }
            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }

            return Json(new { Status = status, Message = msg, Request_Id = data.Item2 }, JsonRequestBehavior.AllowGet);

        }


        public object Submit_TR_ExternalTraining_Edit_After_Save(EmployeeRequestModel model)
        {
            bool status = false;
            //  bool status1 = false;
            string msg = "";
            var data = _entity.tb_Request_Hdr.Where(x => x.Request_ID == model.request_id && x.IsActive == true).FirstOrDefault();

            try
            {
                if (data != null)
                {
                    var edit_tr_data = _entity.tb_TR_External_Training.Where(x => x.RequestId == data.Request_ID && x.IsActive == true).FirstOrDefault();
                    string request_id = edit_tr_data.RequestId;
                    if (edit_tr_data != null)
                    {
                        #region Save Edited Data in Base table
                        var editTrain = model.ExternalTrainingModel;
                        edit_tr_data.RequestId = request_id;
                        edit_tr_data.Justification = editTrain.Justification;
                        edit_tr_data.Years = editTrain.Years;
                        edit_tr_data.GrandTotal = editTrain.GrandTotal;
                        edit_tr_data.IsActive = true;
                        edit_tr_data.TimeStamp = CurrentTime;
                        #endregion


                        if (model._TrainingDetails != null && model._TrainingDetails.Count > 0)
                        {
                            _entity.tb_TR_External_Training_Detail.RemoveRange(_entity.tb_TR_External_Training_Detail.Where(x => x.RequestId == request_id));

                            #region Save New Info in Details table
                            var edit_Traindata_Details = _entity.tb_TR_External_Training_Detail.Create();
                            foreach (var item in model._TrainingDetails)
                            {

                                edit_Traindata_Details.RequestId = request_id;
                                edit_Traindata_Details.ExternTrainingId = edit_tr_data.Id;
                                edit_Traindata_Details.Course_Name = item.Course_Name;
                                edit_Traindata_Details.From_Date = item.From_Date;
                                edit_Traindata_Details.To_Date = item.To_Date;
                                edit_Traindata_Details.Training_Type = item.Training_Type;
                                edit_Traindata_Details.Location = item.Location;
                                edit_Traindata_Details.Cost = item.Cost;
                                edit_Traindata_Details.NoofDays = item.NoofDays;

                                edit_Traindata_Details.IsActive = true;
                                edit_Traindata_Details.TimepStamp = CurrentTime;

                                _entity.tb_TR_External_Training_Detail.Add(edit_Traindata_Details);
                                status = _entity.SaveChanges() > 0;

                                string rqid = edit_Traindata_Details.RequestId;
                                string record = edit_Traindata_Details.RequestId + "||" + edit_Traindata_Details.Id + "||" + edit_Traindata_Details.Course_Name + "||" + Convert.ToDateTime(edit_Traindata_Details.From_Date) + "||" + Convert.ToDateTime(edit_Traindata_Details.To_Date) + "||" + edit_Traindata_Details.Training_Type + "||" + edit_Traindata_Details.Location + "||" + edit_Traindata_Details.Cost + "||" + edit_Traindata_Details.NoofDays;
                                bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_External_Training_Detail", rqid, "INITIATOR");
                            }
                            #endregion
                        }

                        status = _entity.SaveChanges() > 0;
                        status = true;
                        msg = status ? " Success!" : "Failed";

                        #region File attachment edit

                        if (status && model._FileList != null && model._FileList.Count > 0)
                        {
                            if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 2).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";

                            }
                            if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                            {
                                var editattachment = _entity.tb_ReqestAttachments.Where(x => x.Request_id == data.Request_ID && x.IsActive == true && x.filebatch == 1).ToList();
                                if (editattachment != null)
                                {
                                    foreach (var item in editattachment)
                                    {
                                        item.IsActive = false;
                                        status = _entity.SaveChanges() > 0;
                                    }
                                }
                                var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                                var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                                foreach (var item in fillist)
                                {
                                    var datas = _entity.tb_ReqestAttachments.Create();
                                    datas.Request_id = data.Request_ID;
                                    datas.fil_path = item.filepath;
                                    datas.fil_name = item.filename;
                                    datas.filebatch = item.filebatch;
                                    datas.IsActive = true;
                                    datas.TimeStamp = CurrentTime;
                                    _entity.tb_ReqestAttachments.Add(datas);
                                    _entity.SaveChanges();
                                }
                                msg = status ? " Success!" : "Failed!";
                            }


                        }

                        #endregion

                        #region  Keep AuditLog_T001
                        if (status == true)
                        {
                            request_id = edit_tr_data.RequestId;
                            string record = request_id + " || " + editTrain.Justification + " || " + editTrain.Years + " || " + editTrain.GrandTotal + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_External_Training", request_id, "INITIATOR");

                            string remark = "Request was Edited by";
                            _rpp.InsertApproveLog("EDIT", model.request_id, remark, model.emp_local_id, model.creator_id, "", "", "", "", "");

                        }
                        #endregion

                    }
                }
            }
            catch (DbEntityValidationException ex)
            {
                foreach (var entityValidationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in entityValidationErrors.ValidationErrors)
                    {
                        Response.Write("Property: " + validationError.PropertyName + " Error: " + validationError.ErrorMessage);
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }


        public object Edit_TR_ExternalTraining(EmployeeRequestModel model)
        {
            bool status = false;

            string msg = "";
            string[] split = model.request_id.Split('-');
            string rqid = split[1];
            var edit_tr_data = _entity.tb_TR_External_Training.Where(x => x.RequestId == rqid && x.IsActive == true).FirstOrDefault();
            var editTrain = model.ExternalTrainingModel;
            if (edit_tr_data != null)
            {
                if (model.ExternalTrainingModel.Status != "NEW")
                {
                    #region Save Edited Data From Approvers in Base table

                    edit_tr_data.RequestId = rqid;
                    edit_tr_data.Justification = editTrain.Justification;
                    edit_tr_data.Years = editTrain.Years;
                    edit_tr_data.GrandTotal = editTrain.GrandTotal;

                    edit_tr_data.IsActive = true;
                    edit_tr_data.TimeStamp = CurrentTime;

                    #endregion
                }
                else
                {
                    #region Save Edited Data in Base table

                    editTrain = model.ExternalTrainingModel;
                    edit_tr_data.RequestId = rqid;
                    edit_tr_data.Justification = editTrain.Justification;
                    edit_tr_data.Years = editTrain.Years;
                    edit_tr_data.GrandTotal = editTrain.GrandTotal;

                    edit_tr_data.IsActive = true;
                    edit_tr_data.TimeStamp = CurrentTime;

                    #endregion

                    if (model._TrainingDetails != null && model._TrainingDetails.Count > 0)
                    {
                        _entity.tb_TR_External_Training_Detail.RemoveRange(_entity.tb_TR_External_Training_Detail.Where(x => x.RequestId == rqid));

                        #region Save New Info in Details table
                        var edit_Traindata_Details = _entity.tb_TR_External_Training_Detail.Create();
                        foreach (var item in model._TrainingDetails)
                        {

                            edit_Traindata_Details.RequestId = rqid;
                            edit_Traindata_Details.ExternTrainingId = edit_tr_data.Id;
                            edit_Traindata_Details.Course_Name = item.Course_Name;
                            edit_Traindata_Details.From_Date = item.From_Date;
                            edit_Traindata_Details.To_Date = item.To_Date;
                            edit_Traindata_Details.Training_Type = item.Training_Type;
                            edit_Traindata_Details.Location = item.Location;
                            edit_Traindata_Details.Cost = item.Cost;
                            edit_Traindata_Details.NoofDays = item.NoofDays;

                            edit_Traindata_Details.IsActive = true;
                            edit_Traindata_Details.TimepStamp = CurrentTime;

                            _entity.tb_TR_External_Training_Detail.Add(edit_Traindata_Details);
                            status = _entity.SaveChanges() > 0;

                            string rqid1 = edit_Traindata_Details.RequestId;
                            string record = rqid1 + "||" + edit_Traindata_Details.Id + "||" + edit_Traindata_Details.Course_Name + "||" + Convert.ToDateTime(edit_Traindata_Details.From_Date) + "||" + Convert.ToDateTime(edit_Traindata_Details.To_Date) + "||" + edit_Traindata_Details.Training_Type + "||" + edit_Traindata_Details.Location + "||" + edit_Traindata_Details.Cost + "||" + edit_Traindata_Details.NoofDays;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_External_Training_Detail", rqid1, "INITIATOR");
                        }
                        #endregion
                    }
                }


                status = _entity.SaveChanges() > 0;
                status = true;
                msg = status ? " Success!" : "Failed";


                #region attachment edit

                if (status && model._FileList != null && model._FileList.Count > 0)
                {
                    if (model._FileList.Where(x => x.filebatch == 2).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 2).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";

                    }
                    if (model._FileList.Where(x => x.filebatch == 1).ToList().Count > 0)
                    {
                        var result = model._FileList.Where(x => x.filebatch == 1).ToList();  //28-02-2020
                        var fillist = result.GroupBy(test => test.filename).Select(grp => grp.First()).ToList(); //Basheer on 25-05-2020 mul
                        foreach (var item in fillist)
                        {
                            var datas = _entity.tb_ReqestAttachments.Create();
                            datas.Request_id = rqid;
                            datas.fil_path = item.filepath;
                            datas.fil_name = item.filename;
                            datas.filebatch = item.filebatch;
                            datas.IsActive = true;
                            datas.TimeStamp = CurrentTime;
                            _entity.tb_ReqestAttachments.Add(datas);
                            _entity.SaveChanges();
                        }
                        msg = status ? " Success!" : "Failed!";
                    }


                }
                #endregion attachment edit

                if (status == true)
                {
                    msg = "Request Edit Successfully";
                    var req = _entity.tb_Request_Hdr.Where(x => x.Request_ID == edit_tr_data.RequestId && x.IsActive == true).FirstOrDefault();
                    var application = req.tb_Application;
                    if (req != null)
                    {
                        if (req.RoleId != null) //to avoid backtoinitator edit loging
                        {
                            var role = _entity.tb_Role.Where(x => x.Id == req.RoleId && x.IsActive == true).FirstOrDefault();

                            var mydata = _entity.tb_WF_Employee.Where(x => x.LocalEmplyee_ID == model.emp_local_id && x.IsActive == true).FirstOrDefault();

                            var sendEdit = _ApprovalLogRepository.Send_Request_Edit(req.Request_ID, role.Role_Desc, role.Role_Desc, req.Employee_ID, mydata.LocalEmplyee_ID);

                            #region Keep AuditLog_T001
                            string request_id = edit_tr_data.RequestId;
                            string record = request_id + " || " + editTrain.Justification + " || " + editTrain.Years + " || " + editTrain.GrandTotal + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_External_Training", request_id, role.Role_Desc);

                            #endregion 
                        }
                        else
                        {

                            #region Log for SaveChanges
                            //to save log for savechanges
                            string remark = "Request was Edited by";
                            string[] split1 = model.request_id.Split('-');
                            string rqid1 = split[1];
                            // _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");

                            if (req.Creater_ID == model.emp_local_id)
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, req.Creater_ID, "", "", "", "", "");
                            }
                            else
                            {
                                _rpp.InsertApproveLog("EDIT", rqid1, remark, model.emp_local_id, model.emp_local_id, "", "", "", "", "");
                            }


                            #endregion

                            #region Keep AuditLog_T001 for initiator after backtoinitiator

                            string request_id = edit_tr_data.RequestId;
                            string record = request_id + " || " + editTrain.Justification + " || " + editTrain.Years + " || " + editTrain.GrandTotal + " || " + CurrentTime;
                            bool KeepAuditLog = _alr.Add_AuditLog(record, model.emp_local_id, "tb_TR_External_Training", request_id, "INITIATOR");


                            #endregion

                        }
                    }
                }
            }
            return Json(new { Status = status, Message = msg }, JsonRequestBehavior.AllowGet);
        }


        #endregion
        public int ProcessButtonCount(long reqid, string roleid, string wfType)
        {
            int button_count = 0;           
            var wf = _entity.tb_WFType.Where(x => x.WF_ID == wfType && x.IsActive == true).FirstOrDefault();
            var data = _entity.tb_ProcessHdr.Where(x => x.RequestId == reqid && x.IsActive == true && x.IsCompleted == false && x.RoleId == roleid && x.WF_id == wf.Id).ToList();
            button_count = data.Count();
            return button_count;
        }
    }
}